"""
Django settings for cnex project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import platform
server_type = "AWS"#"LOCAL"

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

current_os = platform.system()

if current_os == "Linux" and server_type == "AWS":
    dotenv_path = os.path.join(os.path.dirname(__file__), '.env') #server env
else:
    dotenv_path = os.path.join(os.path.dirname(__file__), 'env_local') #this is local env
load_dotenv(dotenv_path)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ALLOWED_HOSTS = [host for host in os.getenv('ALLOWED_HOSTS').split(',') if host != '']

# Application definition
# settings.py

# settings.py

FILE_UPLOAD_MAX_MEMORY_SIZE = 850 * 1024 * 1024  # 850 MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 850 * 1024 * 1024  # 850 MB



INSTALLED_APPS = [
    # 'daphne',
    # 'admin_interface',
    'colorfield',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'corsheaders',
    'drf_yasg',
    'rest_framework',
    'rest_framework_simplejwt',
    'django_filters',
    'accounts',
    'accountsmanagement',
    'setupemail',
    'gallery',
    'event',
    'district',
    'collegetype',
    'informationmanagement',
    'level',
    'affiliation',
    'faculty',
    'certification',
    'socialmedia',
    'coursemanagement',
    # 'drfapigenerator',
    'collegemanagement',
    'facilities',
    'discipline',
    'coursesandfees',
    'duration',
    'formprogress',
    'inquiry',
    'superadmindetails',
    'advertisement',
    'contact',
    'requestsubmission',
    'notify',
    'setting',
    'customgallery',
    # 'notifications',  # Django Notifications HQ
    # 'channels',  # Required for real-time updates (Django Channels)
]

AUTH_USER_MODEL = 'accounts.CustomUser'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ORIGIN_WHITELIST = [white for white in os.getenv('CORS_ORIGIN_WHITELIST').split(',') if white != '']
# CSRF_TRUSTED_ORIGINS = [trusted for trusted in os.getenv('CSRF_TRUSTED_ORIGINS').split(',') if trusted != '']

CORS_ALLOW_CREDENTIALS = True
CSRF_TRUSTED_ORIGINS = ['https://base.collegeinfonepal.com']

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware', 
    
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',  # static file serving.
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'notify.middleware.CaptureUserMiddleware',
]

ROOT_URLCONF = 'mainproj.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mainproj.wsgi.application'

# Database
#https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('DATABASE_ENGINE'),
        'NAME': os.getenv('DATABASES_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',
    # 'accounts.backend.EmailserBackend',
]
# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kathmandu'

USE_I18N = True

USE_TZ = True


import os
from pathlib import Path

# Build paths inside the project
BASE_DIR = Path(__file__).resolve().parent.parent

# Cloudflare R2 Configuration
USE_R2 = True  # Set to True to use Cloudflare R2

if USE_R2:
    AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
    AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
    AWS_S3_REGION_NAME = os.getenv("AWS_S3_REGION_NAME", "auto")  # Default to "auto"
    AWS_S3_ENDPOINT_URL = os.getenv("AWS_S3_ENDPOINT_URL")  # Cloudflare R2 Endpoint
    AWS_S3_CUSTOM_DOMAIN = os.getenv("AWS_S3_CUSTOM_DOMAIN")
    
    AWS_DEFAULT_ACL = None  # R2 does not support ACLs

    AWS_S3_OBJECT_PARAMETERS = {'CacheControl': 'max-age=86400'}
    AWS_QUERYSTRING_AUTH = False  # Disable signed URLs for public access
    AWS_S3_FILE_OVERWRITE = False

    # Static and Media Settings for R2
    STATICFILES_LOCATION = 'static'
    MEDIAFILES_LOCATION = 'media'

    # Storage Settings
    STORAGES = {
        'default': {
            'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage'
        },
        'staticfiles': {
            'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage',
            'OPTIONS': {'location': STATICFILES_LOCATION}
        },
        'media': {
            'BACKEND': 'storages.backends.s3boto3.S3Boto3Storage',
            'OPTIONS': {'location': MEDIAFILES_LOCATION}
        }
    }

    # URLs
    STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
    MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'

else:
    # Local Storage Settings
    STATIC_URL = '/static/'
    MEDIA_URL = '/media/'

# Common Static/Media Settings
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')  # Ensure this directory exists
]



STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'



from datetime import timedelta

# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
#     "ROTATE_REFRESH_TOKENS": False,
#     "BLACKLIST_AFTER_ROTATION": False,
#     "UPDATE_LAST_LOGIN": False,

#     "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
# }
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.BasicAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_FILTER_BACKENDS": ("django_filters.rest_framework.DjangoFilterBackend",),
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    # "MAX_PAGE_SIZE": 1
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=30),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=50),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "UPDATE_LAST_LOGIN": False,
    "AUTH_HEADER_TYPES": ("Bearer", "JWT"),
    # "USER_ID_FIELD": "id",
    # "USER_ID_CLAIM": "user_id",
    "USER_AUTHENTICATION_RULE": "rest_framework_simplejwt.authentication.default_user_authentication_rule",
}

# EMAIL_USE_TLS = True
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_HOST_USER = 'manojdas.py@gmail.com'
# EMAIL_HOST_PASSWORD = 'qizi zhwj urhp vmvv'

EMAIL_BACKEND = 'setupemail.utilities.custom_email_setup_backend.CustomEmailBackend'

INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    # ...
]

SMS_KEY_PASSWORD = ''

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer",  # Use Redis in production
    },
}


# daphne -b 0.0.0.0 -p 8001 mainproj.asgi:application  # For WebSockets
# settings.py

# NOTIFICATION_MODELS = {
#     "collegemanagement.College": ["created", "updated", "deleted"],  
#     "informationmanagement.Information": ["created", "updated"], 
#     "affilliationmanagement.Affilliation": ["created", "updated", "deleted"], 
#     "event.Event": ["created", "updated", "deleted"], 
#     "coursemanagement.Course": ["created", "updated", "deleted"], 
#     "requestsubmission.RequestSubmission": ["created", "updated", "deleted"], 
#     "contact.Contact": ["created", "updated", "deleted"], 
#     "coursesandfees.CoursesAndFees": ["created", "updated", "deleted"], 
#     "inquiry.Inquiry": ["created", "updated", "deleted"],
    
#     # ðŸ”¹ Add this missing model:
#     "collegemanagement.CollegeGallery": ["created", "updated", "deleted"],  # âœ… New addition
# }
NOTIFICATION_MODELS = {
    "collegemanagement.college": ["created", "updated", "deleted"],  
    "informationmanagement.information": ["created", "updated"], 
    "affilliationmanagement.affilliation": ["created", "updated", "deleted"], 
    "event.event": ["created", "updated", "deleted"], 
    "coursemanagement.course": ["created", "updated", "deleted"], 
    "requestsubmission.requestsubmission": ["created", "updated", "deleted"], 
    "contact.contact": ["created", "updated", "deleted"], 
    "coursesandfees.coursesandfees": ["created", "updated", "deleted"], 
    "inquiry.inquiry": ["created", "updated", "deleted"], 
    "collegemanagement.collegegallery": ["created", "updated", "deleted"],  
}

PUBLIC_NOTIFICATION_MODELS = [
    "contact.contact",
    "inquiry.inquiry",
]

# DEFAULT_SUPERADMIN_EMAILS = ["admin@example.com"]

# USE_NOTIFICATION_PERMISSIONS = True

# ENABLE_DEBUG_LOGS = True


EMAIL_HOST_USER = 'vritprashant@gmail.com'
SITE_URL = os.getenv('SITE_URL')

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
USE_X_FORWARDED_HOST = True
SECURE_SSL_REDIRECT = True