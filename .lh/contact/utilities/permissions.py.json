{
    "sourceFile": "contact/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1739257554966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739257563025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,57 +1,51 @@\n-#------permission are classified into three types------->\n-#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n-#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n-#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n+from rest_framework.permissions import BasePermission\n \n-#model ObjectB->user field\n-#model ObjectC->objectB field(objectB id)\n+CONTACT_PERMISSIONS = {\n+    \"add\": \"add_contact\",\n+    \"change\": \"change_contact\",\n+    \"delete\": \"delete_contact\",\n+    \"view\": \"view_contact\",\n+    \"manage\": \"manage_contact\",\n+}\n \n+def HasPermission(request, codename):\n+    \"\"\"Check if the user has a specific Django permission\"\"\"\n+    return request.user.has_perm(f\"app_name.{codename}\")\n \n-#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n+def CanManage(request):\n+    \"\"\"Check if the user has full manage access\"\"\"\n+    return HasPermission(request, CONTACT_PERMISSIONS[\"manage\"])\n \n-from rest_framework.permissions import BasePermission\n-\n-SUPER_ADMIN = 1\n-ADMIN = 2\n-\n-\n-def IsAuthenticated(request):\n+s Co/*************  ✨ Codeium Command ⭐  *************/\n+    \"\"\"\n+    Check if the user in the request is authenticated.\n     \n-    return bool(request.user and request.user.is_authenticated)\n+    :param request: The request being made.\n+    :type request: django.http.HttpRequest\n+    :return: True if the user is authenticated, False otherwise.\n+    :rtype: bool\n+/******  607cbeca-bbe9-4114-a393-7d6787784cc4  *******/ntactPermission(BasePermission):\n+    \"\"\"\n+    Permission class for managing contacts based strictly on Django permissions.\n+    \"\"\"\n \n-def SuperAdminLevel(request):\n-    return bool(IsAuthenticated(request) and request.user.is_superuser)\n+    def has_permission(self, request, view):\n+        if CanManage(request):  # If user has manage permission, grant full access\n+            return True\n \n-def AdminLevel(request):\n-    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n+        if view.action in [\"list\"]:\n+            return HasPermission(request, CONTACT_PERMISSIONS[\"view\"])\n \n-def isOwner(request):\n-    if str(request.user.id) == str(request.data.get('user')):\n-        return True\n-    \n-    elif len(request.data)==0 and len(request.POST)==0:\n-        return True\n+        elif view.action in [\"retrieve\"]:\n+            return HasPermission(request, CONTACT_PERMISSIONS[\"view\"])\n \n-    return False\n+        elif view.action in [\"create\"]:\n+            return HasPermission(request, CONTACT_PERMISSIONS[\"add\"])\n \n+        elif view.action in [\"update\", \"partial_update\"]:\n+            return HasPermission(request, CONTACT_PERMISSIONS[\"change\"])\n \n-# def ObjectBOwner(request):\n-#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n-#     if company.exists():\n-#         return True\n-#     return False\n+        elif view.action == \"destroy\":\n+            return HasPermission(request, CONTACT_PERMISSIONS[\"delete\"])\n \n-class contactPermission(BasePermission):\n-    def has_permission(self, request, view):\n-        if view.action in [\"list\"]:\n-            return True\n-        elif view.action in ['retrieve']:\n-            return isOwner(request)\n-        elif view.action in ['create','update']:\n-            return isOwner(request) #second level\n-            return ObjectBOwner(request) #third level\n-        elif view.action == \"partial_update\":\n-            return view.get_object().user_id == request.user.id\n-        elif view.action == 'destroy':\n-            return isOwner(request)\n-\n+        return False  # Default deny access\n"
                },
                {
                    "date": 1739263891470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,27 +15,19 @@\n def CanManage(request):\n     \"\"\"Check if the user has full manage access\"\"\"\n     return HasPermission(request, CONTACT_PERMISSIONS[\"manage\"])\n \n-s Co/*************  ✨ Codeium Command ⭐  *************/\n+class ContactPermission(BasePermission):\n     \"\"\"\n-    Check if the user in the request is authenticated.\n-    \n-    :param request: The request being made.\n-    :type request: django.http.HttpRequest\n-    :return: True if the user is authenticated, False otherwise.\n-    :rtype: bool\n-/******  607cbeca-bbe9-4114-a393-7d6787784cc4  *******/ntactPermission(BasePermission):\n-    \"\"\"\n     Permission class for managing contacts based strictly on Django permissions.\n     \"\"\"\n \n     def has_permission(self, request, view):\n         if CanManage(request):  # If user has manage permission, grant full access\n             return True\n \n         if view.action in [\"list\"]:\n-            return HasPermission(request, CONTACT_PERMISSIONS[\"view\"])\n+            return True\n \n         elif view.action in [\"retrieve\"]:\n             return HasPermission(request, CONTACT_PERMISSIONS[\"view\"])\n \n"
                },
                {
                    "date": 1739264376528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n def CanManage(request):\n     \"\"\"Check if the user has full manage access\"\"\"\n     return HasPermission(request, CONTACT_PERMISSIONS[\"manage\"])\n \n-class ContactPermission(BasePermission):\n+class contactPermission(BasePermission):\n     \"\"\"\n     Permission class for managing contacts based strictly on Django permissions.\n     \"\"\"\n \n@@ -28,9 +28,9 @@\n         if view.action in [\"list\"]:\n             return True\n \n         elif view.action in [\"retrieve\"]:\n-            return HasPermission(request, CONTACT_PERMISSIONS[\"view\"])\n+            return True\n \n         elif view.action in [\"create\"]:\n             return HasPermission(request, CONTACT_PERMISSIONS[\"add\"])\n \n"
                }
            ],
            "date": 1739257554966,
            "name": "Commit-0",
            "content": "#------permission are classified into three types------->\n#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n\n#model ObjectB->user field\n#model ObjectC->objectB field(objectB id)\n\n\n#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n\nfrom rest_framework.permissions import BasePermission\n\nSUPER_ADMIN = 1\nADMIN = 2\n\n\ndef IsAuthenticated(request):\n    \n    return bool(request.user and request.user.is_authenticated)\n\ndef SuperAdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.is_superuser)\n\ndef AdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n\ndef isOwner(request):\n    if str(request.user.id) == str(request.data.get('user')):\n        return True\n    \n    elif len(request.data)==0 and len(request.POST)==0:\n        return True\n\n    return False\n\n\n# def ObjectBOwner(request):\n#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n#     if company.exists():\n#         return True\n#     return False\n\nclass contactPermission(BasePermission):\n    def has_permission(self, request, view):\n        if view.action in [\"list\"]:\n            return True\n        elif view.action in ['retrieve']:\n            return isOwner(request)\n        elif view.action in ['create','update']:\n            return isOwner(request) #second level\n            return ObjectBOwner(request) #third level\n        elif view.action == \"partial_update\":\n            return view.get_object().user_id == request.user.id\n        elif view.action == 'destroy':\n            return isOwner(request)\n\n"
        }
    ]
}