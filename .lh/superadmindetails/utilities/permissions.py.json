{
    "sourceFile": "superadmindetails/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 16,
            "patches": [
                {
                    "date": 1739258699658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739264124163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         if CanManage(request):  # If user has manage permission, grant full access\n             return True\n \n         if view.action in [\"list\"]:\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"view\"])\n+            return True\n \n         elif view.action in [\"retrieve\"]:\n             return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"view\"])\n \n"
                },
                {
                    "date": 1739264994293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,43 @@\n+from rest_framework.permissions import BasePermission\n+\n+SUPER_ADMIN_DETAILS_PERMISSIONS = {\n+    \"add\": \"add_superadmindetails\",\n+    \"change\": \"change_superadmindetails\",\n+    \"delete\": \"delete_superadmindetails\",\n+    \"view\": \"view_superadmindetails\",\n+    \"manage\": \"manage_super_admin_details\",\n+}\n+\n+def HasPermission(request, codename):\n+    \"\"\"Check if the user has a specific Django permission\"\"\"\n+    return request.user.has_perm(f\"app_name.{codename}\")\n+\n+def CanManage(request):\n+    \"\"\"Check if the user has full manage access\"\"\"\n+    return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"manage\"])\n+\n+class superAdminDetailsPermission(BasePermission):\n+    \"\"\"\n+    Permission class for managing super admin details based strictly on Django permissions.\n+    \"\"\"\n+\n+    def has_permission(self, request, view):\n+        if CanManage(request):  # If user has manage permission, grant full access\n+            return True\n+\n+        if view.action in [\"list\"]:\n+            return True\n+\n+        elif view.action in [\"retrieve\"]:\n+            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"view\"])\n+\n+        elif view.action in [\"create\"]:\n+            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"add\"])\n+\n+        elif view.action in [\"update\", \"partial_update\"]:\n+            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"change\"])\n+\n+        elif view.action == \"destroy\":\n+            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"delete\"])\n+\n+        return False  # Default deny access\n"
                },
                {
                    "date": 1739265000860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n def CanManage(request):\n     \"\"\"Check if the user has full manage access\"\"\"\n     return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"manage\"])\n \n-class superAdminDetailsPermission(BasePermission):\n+class superadmindetailsPermission(BasePermission):\n     \"\"\"\n     Permission class for managing super admin details based strictly on Django permissions.\n     \"\"\"\n \n@@ -40,47 +40,4 @@\n         elif view.action == \"destroy\":\n             return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"delete\"])\n \n         return False  # Default deny access\n-from rest_framework.permissions import BasePermission\n-\n-SUPER_ADMIN_DETAILS_PERMISSIONS = {\n-    \"add\": \"add_superadmindetails\",\n-    \"change\": \"change_superadmindetails\",\n-    \"delete\": \"delete_superadmindetails\",\n-    \"view\": \"view_superadmindetails\",\n-    \"manage\": \"manage_super_admin_details\",\n-}\n-\n-def HasPermission(request, codename):\n-    \"\"\"Check if the user has a specific Django permission\"\"\"\n-    return request.user.has_perm(f\"app_name.{codename}\")\n-\n-def CanManage(request):\n-    \"\"\"Check if the user has full manage access\"\"\"\n-    return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"manage\"])\n-\n-class SuperAdminDetailsPermission(BasePermission):\n-    \"\"\"\n-    Permission class for managing super admin details based strictly on Django permissions.\n-    \"\"\"\n-\n-    def has_permission(self, request, view):\n-        if CanManage(request):  # If user has manage permission, grant full access\n-            return True\n-\n-        if view.action in [\"list\"]:\n-            return True\n-\n-        elif view.action in [\"retrieve\"]:\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"view\"])\n-\n-        elif view.action in [\"create\"]:\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"add\"])\n-\n-        elif view.action in [\"update\", \"partial_update\"]:\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"change\"])\n-\n-        elif view.action == \"destroy\":\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"delete\"])\n-\n-        return False  # Default deny access\n"
                },
                {
                    "date": 1743654560216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         if view.action in [\"list\"]:\n             return True\n \n         elif view.action in [\"retrieve\"]:\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"view\"])\n+            return True\n \n         elif view.action in [\"create\"]:\n             return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"add\"])\n \n"
                },
                {
                    "date": 1743654622879,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,56 @@\n+#------permission are classified into three types------->\n+#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n+#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n+#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n+\n+#model ObjectB->user field\n+#model ObjectC->objectB field(objectB id)\n+\n+\n+#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n+\n from rest_framework.permissions import BasePermission\n \n-SUPER_ADMIN_DETAILS_PERMISSIONS = {\n-    \"add\": \"add_superadmindetails\",\n-    \"change\": \"change_superadmindetails\",\n-    \"delete\": \"delete_superadmindetails\",\n-    \"view\": \"view_superadmindetails\",\n-    \"manage\": \"manage_super_admin_details\",\n-}\n+SUPER_ADMIN = 1\n+ADMIN = 2\n \n-def HasPermission(request, codename):\n-    \"\"\"Check if the user has a specific Django permission\"\"\"\n-    return request.user.has_perm(f\"app_name.{codename}\")\n \n-def CanManage(request):\n-    \"\"\"Check if the user has full manage access\"\"\"\n-    return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"manage\"])\n+def IsAuthenticated(request):\n+    return bool(request.user and request.user.is_authenticated)\n \n-class superadmindetailsPermission(BasePermission):\n-    \"\"\"\n-    Permission class for managing super admin details based strictly on Django permissions.\n-    \"\"\"\n+def SuperAdminLevel(request):\n+    return bool(IsAuthenticated(request) and request.user.is_superuser)\n \n-    def has_permission(self, request, view):\n-        if CanManage(request):  # If user has manage permission, grant full access\n-            return True\n+def AdminLevel(request):\n+    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n \n-        if view.action in [\"list\"]:\n-            return True\n+def isOwner(request):\n+    if str(request.user.id) == str(request.data.get('user')):\n+        return True\n+    \n+    elif len(request.data)==0 and len(request.POST)==0:\n+        return True\n \n-        elif view.action in [\"retrieve\"]:\n-            return True\n+    return False\n \n-        elif view.action in [\"create\"]:\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"add\"])\n \n-        elif view.action in [\"update\", \"partial_update\"]:\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"change\"])\n+# def ObjectBOwner(request):\n+#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n+#     if company.exists():\n+#         return True\n+#     return False\n \n-        elif view.action == \"destroy\":\n-            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"delete\"])\n+class collegeleveltypePermission(BasePermission):\n+    def has_permission(self, request, view):\n+        if view.action in [\"list\"]:\n+            return True\n+        elif view.action in ['retrieve']:\n+            return isOwner(request)\n+        elif view.action in ['create','update']:\n+            return isOwner(request) #second level\n+            return ObjectBOwner(request) #third level\n+        elif view.action == \"partial_update\":\n+            return view.get_object().user_id == request.user.id\n+        elif view.action == 'destroy':\n+            return isOwner(request)\n \n-        return False  # Default deny access\n"
                },
                {
                    "date": 1743654658016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n     def has_permission(self, request, view):\n         if view.action in [\"list\"]:\n             return True\n         elif view.action in ['retrieve']:\n-            return isOwner(request)\n+            return True\n         elif view.action in ['create','update']:\n             return isOwner(request) #second level\n             return ObjectBOwner(request) #third level\n         elif view.action == \"partial_update\":\n"
                },
                {
                    "date": 1743654670777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n             return True\n         elif view.action in ['retrieve']:\n             return True\n         elif view.action in ['create','update']:\n-            return isOwner(request) #second level\n+            return isAd(request) #second level\n             return ObjectBOwner(request) #third level\n         elif view.action == \"partial_update\":\n             return view.get_object().user_id == request.user.id\n         elif view.action == 'destroy':\n"
                },
                {
                    "date": 1743654678364,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n             return True\n         elif view.action in ['retrieve']:\n             return True\n         elif view.action in ['create','update']:\n-            return isAd(request) #second level\n+            return AdminLevel(request) #second level\n             return ObjectBOwner(request) #third level\n         elif view.action == \"partial_update\":\n             return view.get_object().user_id == request.user.id\n         elif view.action == 'destroy':\n"
                },
                {
                    "date": 1743654701769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,8 +49,8 @@\n         elif view.action in ['create','update']:\n             return AdminLevel(request) #second level\n             return ObjectBOwner(request) #third level\n         elif view.action == \"partial_update\":\n-            return view.get_object().user_id == request.user.id\n+            return AdminLevel(request)\n         elif view.action == 'destroy':\n             return isOwner(request)\n \n"
                },
                {
                    "date": 1743654713093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n #     if company.exists():\n #         return True\n #     return False\n \n-class collegeleveltypePermission(BasePermission):\n+class superPermission(BasePermission):\n     def has_permission(self, request, view):\n         if view.action in [\"list\"]:\n             return True\n         elif view.action in ['retrieve']:\n@@ -51,6 +51,6 @@\n             return ObjectBOwner(request) #third level\n         elif view.action == \"partial_update\":\n             return AdminLevel(request)\n         elif view.action == 'destroy':\n-            return isOwner(request)\n+            return AdminLevel(request)\n \n"
                },
                {
                    "date": 1743654728629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+#------permission are classified into three types------->\n+#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n+#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n+#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n+\n+#model ObjectB->user field\n+#model ObjectC->objectB field(objectB id)\n+\n+\n+#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n+\n+from rest_framework.permissions import BasePermission\n+\n+SUPER_ADMIN = 1\n+ADMIN = 2\n+\n+\n+def IsAuthenticated(request):\n+    return bool(request.user and request.user.is_authenticated)\n+\n+def SuperAdminLevel(request):\n+    return bool(IsAuthenticated(request) and request.user.is_superuser)\n+\n+def AdminLevel(request):\n+    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n+\n+def isOwner(request):\n+    if str(request.user.id) == str(request.data.get('user')):\n+        return True\n+    \n+    elif len(request.data)==0 and len(request.POST)==0:\n+        return True\n+\n+    return False\n+\n+\n+# def ObjectBOwner(request):\n+#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n+#     if company.exists():\n+#         return True\n+#     return False\n+\n+class superadmindetailsPermission(BasePermission):\n+    def has_permission(self, request, view):\n+        if view.action in [\"list\"]:\n+            return True\n+        elif view.action in ['retrieve']:\n+            return True\n+        elif view.action in ['create','update']:\n+            return AdminLevel(request) #second level\n+            return ObjectBOwner(request) #third level\n+        elif view.action == \"partial_update\":\n+            return AdminLevel(request)\n+        elif view.action == 'destroy':\n+            return AdminLevel(request)\n+\n"
                },
                {
                    "date": 1743654733888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,60 +53,4 @@\n             return AdminLevel(request)\n         elif view.action == 'destroy':\n             return AdminLevel(request)\n \n-#------permission are classified into three types------->\n-#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n-#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n-#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n-\n-#model ObjectB->user field\n-#model ObjectC->objectB field(objectB id)\n-\n-\n-#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n-\n-from rest_framework.permissions import BasePermission\n-\n-SUPER_ADMIN = 1\n-ADMIN = 2\n-\n-\n-def IsAuthenticated(request):\n-    return bool(request.user and request.user.is_authenticated)\n-\n-def SuperAdminLevel(request):\n-    return bool(IsAuthenticated(request) and request.user.is_superuser)\n-\n-def AdminLevel(request):\n-    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n-\n-def isOwner(request):\n-    if str(request.user.id) == str(request.data.get('user')):\n-        return True\n-    \n-    elif len(request.data)==0 and len(request.POST)==0:\n-        return True\n-\n-    return False\n-\n-\n-# def ObjectBOwner(request):\n-#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n-#     if company.exists():\n-#         return True\n-#     return False\n-\n-class superPermission(BasePermission):\n-    def has_permission(self, request, view):\n-        if view.action in [\"list\"]:\n-            return True\n-        elif view.action in ['retrieve']:\n-            return True\n-        elif view.action in ['create','update']:\n-            return AdminLevel(request) #second level\n-            return ObjectBOwner(request) #third level\n-        elif view.action == \"partial_update\":\n-            return AdminLevel(request)\n-        elif view.action == 'destroy':\n-            return AdminLevel(request)\n-\n"
                },
                {
                    "date": 1743674477184,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,18 +39,19 @@\n #     if company.exists():\n #         return True\n #     return False\n \n-class superadmindetailsPermission(BasePermission):\n+class SuperAdminDetailsPermission(BasePermission):\n     def has_permission(self, request, view):\n-        if view.action in [\"list\"]:\n+        # Public permissions: list and retrieve are open to all users\n+        if view.action in [\"list\", \"retrieve\"]:\n             return True\n-        elif view.action in ['retrieve']:\n-            return True\n-        elif view.action in ['create','update']:\n-            return AdminLevel(request) #second level\n-            return ObjectBOwner(request) #third level\n-        elif view.action == \"partial_update\":\n-            return AdminLevel(request)\n-        elif view.action == 'destroy':\n-            return AdminLevel(request)\n+        \n+        # Admin-level permissions: Only superusers can create, update, partial_update, or destroy\n+        elif view.action in ['create', 'update', 'partial_update', 'destroy']:\n+            return self.is_superuser(request)\n \n+        return False\n+\n+    def is_superuser(self, request):\n+        # Logic to check if the user is a superuser\n+        return request.user.is_superuser\n"
                },
                {
                    "date": 1743675140984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,7 +51,8 @@\n             return self.is_superuser(request)\n \n         return False\n \n+\n     def is_superuser(self, request):\n         # Logic to check if the user is a superuser\n         return request.user.is_superuser\n"
                },
                {
                    "date": 1743689644534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n class SuperAdminDetailsPermission(BasePermission):\n     def has_permission(self, request, view):\n         # Public permissions: list and retrieve are open to all users\n-        if view.action in [\"list\", \"retrieve\"]:\n+        if view.action in [\"list\", \"retrieve\",\"manage-\"]:\n             return True\n         \n         # Admin-level permissions: Only superusers can create, update, partial_update, or destroy\n         elif view.action in ['create', 'update', 'partial_update', 'destroy']:\n"
                },
                {
                    "date": 1743689676936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n class SuperAdminDetailsPermission(BasePermission):\n     def has_permission(self, request, view):\n         # Public permissions: list and retrieve are open to all users\n-        if view.action in [\"list\", \"retrieve\",\"manage-\"]:\n+        if view.action in [\"list\", \"retrieve\",\"manage-super-admin-details\"]:\n             return True\n         \n         # Admin-level permissions: Only superusers can create, update, partial_update, or destroy\n         elif view.action in ['create', 'update', 'partial_update', 'destroy']:\n"
                }
            ],
            "date": 1739258699658,
            "name": "Commit-0",
            "content": "from rest_framework.permissions import BasePermission\n\nSUPER_ADMIN_DETAILS_PERMISSIONS = {\n    \"add\": \"add_superadmindetails\",\n    \"change\": \"change_superadmindetails\",\n    \"delete\": \"delete_superadmindetails\",\n    \"view\": \"view_superadmindetails\",\n    \"manage\": \"manage_super_admin_details\",\n}\n\ndef HasPermission(request, codename):\n    \"\"\"Check if the user has a specific Django permission\"\"\"\n    return request.user.has_perm(f\"app_name.{codename}\")\n\ndef CanManage(request):\n    \"\"\"Check if the user has full manage access\"\"\"\n    return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"manage\"])\n\nclass SuperAdminDetailsPermission(BasePermission):\n    \"\"\"\n    Permission class for managing super admin details based strictly on Django permissions.\n    \"\"\"\n\n    def has_permission(self, request, view):\n        if CanManage(request):  # If user has manage permission, grant full access\n            return True\n\n        if view.action in [\"list\"]:\n            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"view\"])\n\n        elif view.action in [\"retrieve\"]:\n            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"view\"])\n\n        elif view.action in [\"create\"]:\n            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"add\"])\n\n        elif view.action in [\"update\", \"partial_update\"]:\n            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"change\"])\n\n        elif view.action == \"destroy\":\n            return HasPermission(request, SUPER_ADMIN_DETAILS_PERMISSIONS[\"delete\"])\n\n        return False  # Default deny access\n"
        }
    ]
}