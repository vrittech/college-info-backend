{
    "sourceFile": "notification/signals.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 8,
            "patches": [
                {
                    "date": 1739685589715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739685597309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from notifications.signals import notify\n from django.apps import apps\n-from django.contrib.auth.models import User\n+from accounts.models import CustomUser as User\n \n # ðŸ“Œ Generic function to send notifications\n def send_notification(instance, action, recipient=None, additional_info=None):\n     \"\"\" Sends notifications for all CRUD actions \"\"\"\n"
                },
                {
                    "date": 1739685644955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,27 @@\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from notifications.signals import notify\n from django.apps import apps\n-from accounts.models import CustomUser as User\n+from django.contrib.auth.models import User\n \n # ðŸ“Œ Generic function to send notifications\n def send_notification(instance, action, recipient=None, additional_info=None):\n-    \"\"\" Sends notifications for all CRUD actions \"\"\"\n-    actor = instance.user if hasattr(instance, 'user') else None  # The actor (could be the creator or user)\n+    \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n+    # For example, assume that each model has a `user` field indicating the owner or relevant user\n+    if hasattr(instance, 'user'):  # Check if the model has a `user` field (modify this as needed)\n+        recipient = instance.user  # The user associated with this instance (model)\n     \n+    # If there's no `user` attribute, you can customize how you determine the recipient\n+    else:\n+        # Example: if there's a creator or owner field, you can notify that user instead\n+        # recipient = instance.creator or instance.owner (based on your model design)\n+        pass\n+    \n     if not recipient:\n-        recipient = User.objects.all()  # You can customize this to target specific users\n-    \n-    # Message template based on action\n+        return  # If there's no recipient defined, don't send any notifications\n+\n+    # Construct the message based on the action\n     if action == 'created':\n         verb = \"created\"\n         description = f\"A new {instance.__class__.__name__} was created.\"\n     elif action == 'updated':\n@@ -26,11 +34,11 @@\n     # Add additional info to description if available\n     if additional_info:\n         description += f\" Additional Info: {additional_info}\"\n \n-    # Send notification\n+    # Send notification to the recipient (only to the related user)\n     notify.send(\n-        actor,  # The user who triggered the action (optional)\n+        instance.user,  # Actor (the user who triggered the action)\n         recipient=recipient,\n         verb=verb,\n         description=description\n     )\n"
                },
                {
                    "date": 1739685652594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from notifications.signals import notify\n from django.apps import apps\n-from django.contrib.auth.models import User\n+from \n \n # ðŸ“Œ Generic function to send notifications\n def send_notification(instance, action, recipient=None, additional_info=None):\n     \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n"
                },
                {
                    "date": 1739685658740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from notifications.signals import notify\n from django.apps import apps\n-from \n+from accounts.models import CustomUser as User\n \n # ðŸ“Œ Generic function to send notifications\n def send_notification(instance, action, recipient=None, additional_info=None):\n     \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n"
                },
                {
                    "date": 1739685735807,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from django.db.models.signals import post_save, post_delete\n from django.dispatch import receiver\n from notifications.signals import notify\n+from django.contrib.auth.models import User\n from django.apps import apps\n-from accounts.models import CustomUser as User\n \n # ðŸ“Œ Generic function to send notifications\n def send_notification(instance, action, recipient=None, additional_info=None):\n     \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n@@ -13,14 +13,13 @@\n     \n     # If there's no `user` attribute, you can customize how you determine the recipient\n     else:\n         # Example: if there's a creator or owner field, you can notify that user instead\n-        # recipient = instance.creator or instance.owner (based on your model design)\n         pass\n     \n     if not recipient:\n         return  # If there's no recipient defined, don't send any notifications\n-\n+    \n     # Construct the message based on the action\n     if action == 'created':\n         verb = \"created\"\n         description = f\"A new {instance.__class__.__name__} was created.\"\n@@ -34,15 +33,27 @@\n     # Add additional info to description if available\n     if additional_info:\n         description += f\" Additional Info: {additional_info}\"\n \n-    # Send notification to the recipient (only to the related user)\n-    notify.send(\n-        instance.user,  # Actor (the user who triggered the action)\n-        recipient=recipient,\n-        verb=verb,\n-        description=description\n-    )\n+    # Check if the actor (user) is a superadmin\n+    if instance.user and instance.user.is_superuser:\n+        # If the actor is a superadmin, send notifications to all users\n+        all_users = User.objects.all()\n+        for user in all_users:\n+            notify.send(\n+                instance.user,  # Actor (superadmin who triggered the action)\n+                recipient=user,  # All users will be notified\n+                verb=verb,\n+                description=description\n+            )\n+    else:\n+        # Send notification to the specific recipient\n+        notify.send(\n+            instance.user,  # Actor (the user who triggered the action)\n+            recipient=recipient,\n+            verb=verb,\n+            description=description\n+        )\n \n # ðŸ“Œ Dynamically connect signals for all models\n def connect_signals():\n     for model in apps.get_models():  # Get all models in the project\n"
                },
                {
                    "date": 1739685871079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+from django.db.models.signals import post_save, post_delete\n+from django.dispatch import receiver\n+from notifications.signals import notify\n+from django.contrib.auth.models import User\n+from django.apps import apps\n+\n+# ðŸ“Œ Generic function to send notifications\n+def send_notification(instance, action, recipient=None, additional_info=None):\n+    \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n+    # For example, assume that each model has a `user` field indicating the owner or relevant user\n+    if hasattr(instance, 'user'):  # Check if the model has a `user` field (modify this as needed)\n+        recipient = instance.user  # The user associated with this instance (model)\n+    \n+    # If there's no `user` attribute, you can customize how you determine the recipient\n+    else:\n+        # Example: if there's a creator or owner field, you can notify that user instead\n+        pass\n+    \n+    if not recipient:\n+        return  # If there's no recipient defined, don't send any notifications\n+    \n+    # Construct the message based on the action\n+    if action == 'created':\n+        verb = \"created\"\n+        description = f\"A new {instance.__class__.__name__} was created.\"\n+    elif action == 'updated':\n+        verb = \"updated\"\n+        description = f\"The {instance.__class__.__name__} was updated.\"\n+    elif action == 'deleted':\n+        verb = \"deleted\"\n+        description = f\"The {instance.__class__.__name__} was deleted.\"\n+\n+    # Add additional info to description if available\n+    if additional_info:\n+        description += f\" Additional Info: {additional_info}\"\n+\n+    # Check if the actor (user) is a superadmin\n+    if instance.user and instance.user.is_superuser:\n+        # If the actor is a superadmin, send notifications to all users\n+        all_users = User.objects.all()\n+        for user in all_users:\n+            notify.send(\n+                instance.user,  # Actor (superadmin who triggered the action)\n+                recipient=user,  # All users will be notified\n+                verb=verb,\n+                description=description\n+            )\n+    else:\n+        # Send notification to the specific recipient\n+        notify.send(\n+            instance.user,  # Actor (the user who triggered the action)\n+            recipient=recipient,\n+            verb=verb,\n+            description=description\n+        )\n+\n+# ðŸ“Œ Dynamically connect signals for all models\n+def connect_signals():\n+    for model in apps.get_models():  # Get all models in the project\n+        if hasattr(model, 'user'):  # Filter models with 'user' field (you can modify this)\n+            # Handle post_save (creation and updates)\n+            post_save.connect(handle_save, sender=model)\n+\n+            # Handle post_delete (deletion)\n+            post_delete.connect(handle_delete, sender=model)\n+\n+# ðŸ“Œ Handle post_save signals (for creation or updates)\n+@receiver(post_save)\n+def handle_save(sender, instance, created, **kwargs):\n+    action = 'created' if created else 'updated'\n+    send_notification(instance, action, recipient=None)\n+\n+# ðŸ“Œ Handle post_delete signals (for deletions)\n+@receiver(post_delete)\n+def handle_delete(sender, instance, **kwargs):\n+    send_notification(instance, action='deleted', recipient=None)\n+\n+# ðŸ“Œ Automatically call connect_signals function to register signals when Django starts\n+connect_signals()\n"
                },
                {
                    "date": 1739685877525,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,79 @@\n+from django.db.models.signals import post_save, post_delete\n+from django.dispatch import receiver\n+from notifications.signals import notify\n+from django.contrib.auth.models import User\n+from django.apps import apps\n+\n+# ðŸ“Œ Generic function to send notifications\n+def send_notification(instance, action, recipient=None, additional_info=None):\n+    \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n+    # For example, assume that each model has a `user` field indicating the owner or relevant user\n+    if hasattr(instance, 'user'):  # Check if the model has a `user` field (modify this as needed)\n+        recipient = instance.user  # The user associated with this instance (model)\n+    \n+    # If there's no `user` attribute, you can customize how you determine the recipient\n+    else:\n+        # Example: if there's a creator or owner field, you can notify that user instead\n+        pass\n+    \n+    if not recipient:\n+        return  # If there's no recipient defined, don't send any notifications\n+    \n+    # Construct the message based on the action\n+    if action == 'created':\n+        verb = \"created\"\n+        description = f\"A new {instance.__class__.__name__} was created.\"\n+    elif action == 'updated':\n+        verb = \"updated\"\n+        description = f\"The {instance.__class__.__name__} was updated.\"\n+    elif action == 'deleted':\n+        verb = \"deleted\"\n+        description = f\"The {instance.__class__.__name__} was deleted.\"\n+\n+    # Add additional info to description if available\n+    if additional_info:\n+        description += f\" Additional Info: {additional_info}\"\n+\n+    # Check if the actor (user) is a superadmin\n+    if instance.user and instance.user.is_superuser:\n+        # If the actor is a superadmin, send notifications to all users\n+        all_users = User.objects.all()\n+        for user in all_users:\n+            notify.send(\n+                instance.user,  # Actor (superadmin who triggered the action)\n+                recipient=user,  # All users will be notified\n+                verb=verb,\n+                description=description\n+            )\n+    else:\n+        # Send notification to the specific recipient\n+        notify.send(\n+            instance.user,  # Actor (the user who triggered the action)\n+            recipient=recipient,\n+            verb=verb,\n+            description=description\n+        )\n+\n+# ðŸ“Œ Dynamically connect signals for all models\n+def connect_signals():\n+    for model in apps.get_models():  # Get all models in the project\n+        if hasattr(model, 'user'):  # Filter models with 'user' field (you can modify this)\n+            # Handle post_save (creation and updates)\n+            post_save.connect(handle_save, sender=model)\n+\n+            # Handle post_delete (deletion)\n+            post_delete.connect(handle_delete, sender=model)\n+\n+# ðŸ“Œ Handle post_save signals (for creation or updates)\n+@receiver(post_save)\n+def handle_save(sender, instance, created, **kwargs):\n+    action = 'created' if created else 'updated'\n+    send_notification(instance, action, recipient=None)\n+\n+# ðŸ“Œ Handle post_delete signals (for deletions)\n+@receiver(post_delete)\n+def handle_delete(sender, instance, **kwargs):\n+    send_notification(instance, action='deleted', recipient=None)\n+\n+# ðŸ“Œ Automatically call connect_signals function to register signals when Django starts\n+connect_signals()\n"
                },
                {
                    "date": 1739685892323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -76,162 +76,4 @@\n     send_notification(instance, action='deleted', recipient=None)\n \n # ðŸ“Œ Automatically call connect_signals function to register signals when Django starts\n connect_signals()\n-from django.db.models.signals import post_save, post_delete\n-from django.dispatch import receiver\n-from notifications.signals import notify\n-from django.contrib.auth.models import User\n-from django.apps import apps\n-\n-# ðŸ“Œ Generic function to send notifications\n-def send_notification(instance, action, recipient=None, additional_info=None):\n-    \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n-    # For example, assume that each model has a `user` field indicating the owner or relevant user\n-    if hasattr(instance, 'user'):  # Check if the model has a `user` field (modify this as needed)\n-        recipient = instance.user  # The user associated with this instance (model)\n-    \n-    # If there's no `user` attribute, you can customize how you determine the recipient\n-    else:\n-        # Example: if there's a creator or owner field, you can notify that user instead\n-        pass\n-    \n-    if not recipient:\n-        return  # If there's no recipient defined, don't send any notifications\n-    \n-    # Construct the message based on the action\n-    if action == 'created':\n-        verb = \"created\"\n-        description = f\"A new {instance.__class__.__name__} was created.\"\n-    elif action == 'updated':\n-        verb = \"updated\"\n-        description = f\"The {instance.__class__.__name__} was updated.\"\n-    elif action == 'deleted':\n-        verb = \"deleted\"\n-        description = f\"The {instance.__class__.__name__} was deleted.\"\n-\n-    # Add additional info to description if available\n-    if additional_info:\n-        description += f\" Additional Info: {additional_info}\"\n-\n-    # Check if the actor (user) is a superadmin\n-    if instance.user and instance.user.is_superuser:\n-        # If the actor is a superadmin, send notifications to all users\n-        all_users = User.objects.all()\n-        for user in all_users:\n-            notify.send(\n-                instance.user,  # Actor (superadmin who triggered the action)\n-                recipient=user,  # All users will be notified\n-                verb=verb,\n-                description=description\n-            )\n-    else:\n-        # Send notification to the specific recipient\n-        notify.send(\n-            instance.user,  # Actor (the user who triggered the action)\n-            recipient=recipient,\n-            verb=verb,\n-            description=description\n-        )\n-\n-# ðŸ“Œ Dynamically connect signals for all models\n-def connect_signals():\n-    for model in apps.get_models():  # Get all models in the project\n-        if hasattr(model, 'user'):  # Filter models with 'user' field (you can modify this)\n-            # Handle post_save (creation and updates)\n-            post_save.connect(handle_save, sender=model)\n-\n-            # Handle post_delete (deletion)\n-            post_delete.connect(handle_delete, sender=model)\n-\n-# ðŸ“Œ Handle post_save signals (for creation or updates)\n-@receiver(post_save)\n-def handle_save(sender, instance, created, **kwargs):\n-    action = 'created' if created else 'updated'\n-    send_notification(instance, action, recipient=None)\n-\n-# ðŸ“Œ Handle post_delete signals (for deletions)\n-@receiver(post_delete)\n-def handle_delete(sender, instance, **kwargs):\n-    send_notification(instance, action='deleted', recipient=None)\n-\n-# ðŸ“Œ Automatically call connect_signals function to register signals when Django starts\n-connect_signals()\n-from django.db.models.signals import post_save, post_delete\n-from django.dispatch import receiver\n-from notifications.signals import notify\n-from django.contrib.auth.models import User\n-from django.apps import apps\n-\n-# ðŸ“Œ Generic function to send notifications\n-def send_notification(instance, action, recipient=None, additional_info=None):\n-    \"\"\" Sends notifications for all CRUD actions (only to the relevant user) \"\"\"\n-    # For example, assume that each model has a `user` field indicating the owner or relevant user\n-    if hasattr(instance, 'user'):  # Check if the model has a `user` field (modify this as needed)\n-        recipient = instance.user  # The user associated with this instance (model)\n-    \n-    # If there's no `user` attribute, you can customize how you determine the recipient\n-    else:\n-        # Example: if there's a creator or owner field, you can notify that user instead\n-        pass\n-    \n-    if not recipient:\n-        return  # If there's no recipient defined, don't send any notifications\n-    \n-    # Construct the message based on the action\n-    if action == 'created':\n-        verb = \"created\"\n-        description = f\"A new {instance.__class__.__name__} was created.\"\n-    elif action == 'updated':\n-        verb = \"updated\"\n-        description = f\"The {instance.__class__.__name__} was updated.\"\n-    elif action == 'deleted':\n-        verb = \"deleted\"\n-        description = f\"The {instance.__class__.__name__} was deleted.\"\n-\n-    # Add additional info to description if available\n-    if additional_info:\n-        description += f\" Additional Info: {additional_info}\"\n-\n-    # Check if the actor (user) is a superadmin\n-    if instance.user and instance.user.is_superuser:\n-        # If the actor is a superadmin, send notifications to all users\n-        all_users = User.objects.all()\n-        for user in all_users:\n-            notify.send(\n-                instance.user,  # Actor (superadmin who triggered the action)\n-                recipient=user,  # All users will be notified\n-                verb=verb,\n-                description=description\n-            )\n-    else:\n-        # Send notification to the specific recipient\n-        notify.send(\n-            instance.user,  # Actor (the user who triggered the action)\n-            recipient=recipient,\n-            verb=verb,\n-            description=description\n-        )\n-\n-# ðŸ“Œ Dynamically connect signals for all models\n-def connect_signals():\n-    for model in apps.get_models():  # Get all models in the project\n-        if hasattr(model, 'user'):  # Filter models with 'user' field (you can modify this)\n-            # Handle post_save (creation and updates)\n-            post_save.connect(handle_save, sender=model)\n-\n-            # Handle post_delete (deletion)\n-            post_delete.connect(handle_delete, sender=model)\n-\n-# ðŸ“Œ Handle post_save signals (for creation or updates)\n-@receiver(post_save)\n-def handle_save(sender, instance, created, **kwargs):\n-    action = 'created' if created else 'updated'\n-    send_notification(instance, action, recipient=None)\n-\n-# ðŸ“Œ Handle post_delete signals (for deletions)\n-@receiver(post_delete)\n-def handle_delete(sender, instance, **kwargs):\n-    send_notification(instance, action='deleted', recipient=None)\n-\n-# ðŸ“Œ Automatically call connect_signals function to register signals when Django starts\n-connect_signals()\n"
                }
            ],
            "date": 1739685589715,
            "name": "Commit-0",
            "content": "from django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom notifications.signals import notify\nfrom django.apps import apps\nfrom django.contrib.auth.models import User\n\n# ðŸ“Œ Generic function to send notifications\ndef send_notification(instance, action, recipient=None, additional_info=None):\n    \"\"\" Sends notifications for all CRUD actions \"\"\"\n    actor = instance.user if hasattr(instance, 'user') else None  # The actor (could be the creator or user)\n    \n    if not recipient:\n        recipient = User.objects.all()  # You can customize this to target specific users\n    \n    # Message template based on action\n    if action == 'created':\n        verb = \"created\"\n        description = f\"A new {instance.__class__.__name__} was created.\"\n    elif action == 'updated':\n        verb = \"updated\"\n        description = f\"The {instance.__class__.__name__} was updated.\"\n    elif action == 'deleted':\n        verb = \"deleted\"\n        description = f\"The {instance.__class__.__name__} was deleted.\"\n\n    # Add additional info to description if available\n    if additional_info:\n        description += f\" Additional Info: {additional_info}\"\n\n    # Send notification\n    notify.send(\n        actor,  # The user who triggered the action (optional)\n        recipient=recipient,\n        verb=verb,\n        description=description\n    )\n\n# ðŸ“Œ Dynamically connect signals for all models\ndef connect_signals():\n    for model in apps.get_models():  # Get all models in the project\n        if hasattr(model, 'user'):  # Filter models with 'user' field (you can modify this)\n            # Handle post_save (creation and updates)\n            post_save.connect(handle_save, sender=model)\n\n            # Handle post_delete (deletion)\n            post_delete.connect(handle_delete, sender=model)\n\n# ðŸ“Œ Handle post_save signals (for creation or updates)\n@receiver(post_save)\ndef handle_save(sender, instance, created, **kwargs):\n    action = 'created' if created else 'updated'\n    send_notification(instance, action, recipient=None)\n\n# ðŸ“Œ Handle post_delete signals (for deletions)\n@receiver(post_delete)\ndef handle_delete(sender, instance, **kwargs):\n    send_notification(instance, action='deleted', recipient=None)\n\n# ðŸ“Œ Automatically call connect_signals function to register signals when Django starts\nconnect_signals()\n"
        }
    ]
}