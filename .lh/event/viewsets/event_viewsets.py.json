{
    "sourceFile": "event/viewsets/event_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 48,
            "patches": [
                {
                    "date": 1733481372824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733481378749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     serializer_class = EventListSerializers\n     # permission_classes = [eventPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = Event.objects.all().order_by\n+    queryset = Event.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return EventWriteSerializers\n"
                },
                {
                    "date": 1733728736108,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,15 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        return queryset\n+        return querysets\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return EventWriteSerializers\n"
                },
                {
                    "date": 1733728790891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,11 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n \n-    filterset_fields = {\n-        'id': ['exact'],\n-    }\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return querysets\n"
                },
                {
                    "date": 1733728800237,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..utilities.importbase import *\n+from ..utilities.importbase import *\n \n class eventViewsets(viewsets.ModelViewSet):\n     serializer_class = EventListSerializers\n     # permission_classes = [eventPermission]\n@@ -14,8 +15,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    filterset_class = EventFilter\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733728808176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..utilities.importbase import *\n-from ..utilities.importbase import *\n+from ..utilities.filter import E\n \n class eventViewsets(viewsets.ModelViewSet):\n     serializer_class = EventListSerializers\n     # permission_classes = [eventPermission]\n"
                },
                {
                    "date": 1733728848799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..utilities.importbase import *\n-from ..utilities.filter import E\n+from ..utilities.filter import EventFilter\n \n class eventViewsets(viewsets.ModelViewSet):\n     serializer_class = EventListSerializers\n     # permission_classes = [eventPermission]\n@@ -13,10 +13,11 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = Event.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n+    search_fields = ['id', 'event_name', 'venue', 'category__name', 'organizer__name']  # Fields to search\n+    ordering_fields = ['id', 'event_name', 'start_date', 'end_date', 'is_featured_event']  # Fields to sort\n+    ordering = ['id']  # Default ordering\n     filterset_class = EventFilter\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1733728859069,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,16 +15,17 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id', 'event_name', 'venue', 'category__name', 'organizer__name']  # Fields to search\n     ordering_fields = ['id', 'event_name', 'start_date', 'end_date', 'is_featured_event']  # Fields to sort\n-    ordering = ['id']  # Default ordering\n+    ordering = ['-id']  # Default ordering\n     filterset_class = EventFilter\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n \n     def get_queryset(self):\n+        \n         queryset = super().get_queryset()\n         return querysets\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1733729804662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,11 +23,10 @@\n     #     'id': ['exact'],\n     # }\n \n     def get_queryset(self):\n-        \n         queryset = super().get_queryset()\n-        return querysets\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return EventWriteSerializers\n"
                },
                {
                    "date": 1733730358350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,40 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Event\n+from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n+from ..utilities.importbase import *\n+from ..utilities.filter import EventFilter\n+\n+class eventViewsets(viewsets.ModelViewSet):\n+    serializer_class = EventListSerializers\n+    # permission_classes = [eventPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    #pagination_class = MyPageNumberPagination\n+    queryset = Event.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id', 'event_name', 'venue', 'category__name', 'organizer__name']  # Fields to search\n+    ordering_fields = ['id', 'event_name', 'start_date', 'end_date', 'is_featured_event']  # Fields to sort\n+    ordering = ['-id']  # Default ordering\n+    filterset_class = EventFilter\n+\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    # }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return EventWriteSerializers\n+        elif self.action == 'retrieve':\n+            return EventRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                },
                {
                    "date": 1733730375335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,44 +37,4 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Event\n-from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n-from ..utilities.importbase import *\n-from ..utilities.filter import EventFilter\n-\n-class eventViewsets(viewsets.ModelViewSet):\n-    serializer_class = EventListSerializers\n-    # permission_classes = [eventPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n-    queryset = Event.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id', 'event_name', 'venue', 'category__name', 'organizer__name']  # Fields to search\n-    ordering_fields = ['id', 'event_name', 'start_date', 'end_date', 'is_featured_event']  # Fields to sort\n-    ordering = ['-id']  # Default ordering\n-    filterset_class = EventFilter\n-\n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return EventWriteSerializers\n-        elif self.action == 'retrieve':\n-            return EventRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n"
                },
                {
                    "date": 1737963508871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class eventViewsets(viewsets.ModelViewSet):\n     serializer_class = EventListSerializers\n     # permission_classes = [eventPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = Event.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id', 'event_name', 'venue', 'category__name', 'organizer__name']  # Fields to search\n"
                },
                {
                    "date": 1738212123429,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     # permission_classes = [eventPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Event.objects.all().order_by('-id')\n+    lookup_field\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id', 'event_name', 'venue', 'category__name', 'organizer__name']  # Fields to search\n     ordering_fields = ['id', 'event_name', 'start_date', 'end_date', 'is_featured_event']  # Fields to sort\n"
                },
                {
                    "date": 1738748491882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,12 +8,12 @@\n \n class eventViewsets(viewsets.ModelViewSet):\n     serializer_class = EventListSerializers\n     # permission_classes = [eventPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Event.objects.all().order_by('-id')\n-    lookup_field\n+    lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id', 'event_name', 'venue', 'category__name', 'organizer__name']  # Fields to search\n     ordering_fields = ['id', 'event_name', 'start_date', 'end_date', 'is_featured_event']  # Fields to sort\n"
                },
                {
                    "date": 1738834294552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,39 @@\n             return EventWriteSerializers\n         elif self.action == 'retrieve':\n             return EventRetrieveSerializers\n         return super().get_serializer_class()\n+    \n+    def create(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n+        # Return the response in the exact format of the payload\n+        response_data = {\n+            \"category\": [cat.id for cat in event_instance.category.all()],\n+            \"organizer\": [org.id for org in event_instance.organizer.all()],\n+            \"event_name\": event_instance.event_name,\n+            \"duration\": event_instance.duration,\n+            \"event_type\": event_instance.event_type,\n+            \"slug\": event_instance.slug,\n+            \"venue\": event_instance.venue,\n+            \"offline_seat_limit\": event_instance.offline_seat_limit,\n+            \"is_registration\": event_instance.is_registration,\n+            \"registration_link\": event_instance.registration_link,\n+            \"registration_type\": event_instance.registration_type,\n+            \"amount\": event_instance.amount,\n+            \"amount_country\": event_instance.amount_country,\n+            \"description\": event_instance.description,\n+            \"start_date\": event_instance.start_date,\n+            \"end_date\": event_instance.end_date,\n+            \"images\": [\n+                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+            ],\n+        }\n+\n+        return Response(response_data, status=status.HTTP_201_CREATED)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738835181520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,9 @@\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n-        # Return the response in the exact format of the payload\n+        # Return response structured exactly like the request payload\n         response_data = {\n             \"category\": [cat.id for cat in event_instance.category.all()],\n             \"organizer\": [org.id for org in event_instance.organizer.all()],\n             \"event_name\": event_instance.event_name,\n"
                },
                {
                    "date": 1738835206449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..utilities.importbase import *\n from ..utilities.filter import EventFilter\n+from rest_framework.response import Response\n+from rest_framework import status\n \n class eventViewsets(viewsets.ModelViewSet):\n     serializer_class = EventListSerializers\n     # permission_classes = [eventPermission]\n"
                },
                {
                    "date": 1738835372024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,38 +36,10 @@\n         elif self.action == 'retrieve':\n             return EventRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    def create(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        event_instance = serializer.save()\n+    \n \n-        # Return response structured exactly like the request payload\n-        response_data = {\n-            \"category\": [cat.id for cat in event_instance.category.all()],\n-            \"organizer\": [org.id for org in event_instance.organizer.all()],\n-            \"event_name\": event_instance.event_name,\n-            \"duration\": event_instance.duration,\n-            \"event_type\": event_instance.event_type,\n-            \"slug\": event_instance.slug,\n-            \"venue\": event_instance.venue,\n-            \"offline_seat_limit\": event_instance.offline_seat_limit,\n-            \"is_registration\": event_instance.is_registration,\n-            \"registration_link\": event_instance.registration_link,\n-            \"registration_type\": event_instance.registration_type,\n-            \"amount\": event_instance.amount,\n-            \"amount_country\": event_instance.amount_country,\n-            \"description\": event_instance.description,\n-            \"start_date\": event_instance.start_date,\n-            \"end_date\": event_instance.end_date,\n-            \"images\": [\n-                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n-            ],\n-        }\n-\n-        return Response(response_data, status=status.HTTP_201_CREATED)\n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738835381107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,38 @@\n         elif self.action == 'retrieve':\n             return EventRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    \n+    def create(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n+        # Return response structured exactly like the request payload but with full objects\n+        response_data = {\n+            \"category\": EventCategorySerializer(event_instance.category.all(), many=True).data,\n+            \"organizer\": EventOrganizerSerializer(event_instance.organizer.all(), many=True).data,\n+            \"event_name\": event_instance.event_name,\n+            \"duration\": event_instance.duration,\n+            \"event_type\": event_instance.event_type,\n+            \"slug\": event_instance.slug,\n+            \"venue\": event_instance.venue,\n+            \"offline_seat_limit\": event_instance.offline_seat_limit,\n+            \"is_registration\": event_instance.is_registration,\n+            \"registration_link\": event_instance.registration_link,\n+            \"registration_type\": event_instance.registration_type,\n+            \"amount\": event_instance.amount,\n+            \"amount_country\": event_instance.amount_country,\n+            \"description\": event_instance.description,\n+            \"start_date\": event_instance.start_date,\n+            \"end_date\": event_instance.end_date,\n+            \"images\": [\n+                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+            ],\n+        }\n+\n+        return Response(response_data, status=status.HTTP_201_CREATED)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738835560671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n+from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..utilities.importbase import *\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n"
                },
                {
                    "date": 1738835567240,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n-from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n+from ..serializers.event import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..utilities.importbase import *\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n"
                },
                {
                    "date": 1738835576774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n-from ..serializers.event import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n-from ..utilities.importbase import *\n+from ..serializers.eventcategory_serializers import Even\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n \n"
                },
                {
                    "date": 1738835587333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n-from ..serializers.eventcategory_serializers import Even\n+from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n \n@@ -43,9 +43,9 @@\n         event_instance = serializer.save()\n \n         # Return response structured exactly like the request payload but with full objects\n         response_data = {\n-            \"category\": EventCategorySerializer(event_instance.category.all(), many=True).data,\n+            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n             \"organizer\": EventOrganizerSerializer(event_instance.organizer.all(), many=True).data,\n             \"event_name\": event_instance.event_name,\n             \"duration\": event_instance.duration,\n             \"event_type\": event_instance.event_type,\n"
                },
                {
                    "date": 1738835594031,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n+from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n \n"
                },
                {
                    "date": 1738835599623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n-from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n+from ..serializers.eventS import EventCategoryRetrieveSerializers\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n \n"
                },
                {
                    "date": 1738835606730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n-from ..serializers.eventS import EventCategoryRetrieveSerializers\n+from ..serializers.eventorganizer_serializers import Eve\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n \n"
                },
                {
                    "date": 1738835620293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Event\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n-from ..serializers.eventorganizer_serializers import Eve\n+from ..serializers.eventorganizer_serializers import EventOrganizerRetrieveSerializers\n from ..utilities.filter import EventFilter\n from rest_framework.response import Response\n from rest_framework import status\n \n@@ -45,9 +45,9 @@\n \n         # Return response structured exactly like the request payload but with full objects\n         response_data = {\n             \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-            \"organizer\": EventOrganizerSerializer(event_instance.organizer.all(), many=True).data,\n+            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n             \"event_name\": event_instance.event_name,\n             \"duration\": event_instance.duration,\n             \"event_type\": event_instance.event_type,\n             \"slug\": event_instance.slug,\n"
                },
                {
                    "date": 1738835630468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n from ..serializers.eventorganizer_serializers import EventOrganizerRetrieveSerializers\n from ..utilities.filter import EventFilter\n+from \n from rest_framework.response import Response\n from rest_framework import status\n \n class eventViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1738835636695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\n from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n from ..serializers.eventorganizer_serializers import EventOrganizerRetrieveSerializers\n from ..utilities.filter import EventFilter\n-from \n+from ..utilities.pagination import MyPageNumberPagination\n from rest_framework.response import Response\n from rest_framework import status\n \n class eventViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1738835641945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..serializers.eventcategory_serializers import EventCategoryRetrieveSerializers\n from ..serializers.eventorganizer_serializers import EventOrganizerRetrieveSerializers\n from ..utilities.filter import EventFilter\n from ..utilities.pagination import MyPageNumberPagination\n+from rest_framework_simplejwt.authentication import JWTAuthentication\n from rest_framework.response import Response\n from rest_framework import status\n \n class eventViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1738835962903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,29 @@\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n-        # Return response structured exactly like the request payload but with full objects\n+        return self.get_formatted_response(event_instance)\n+\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles PUT (full update) and PATCH (partial update).\n+        Ensures that new images and Many-to-Many relationships are updated correctly.\n+        \"\"\"\n+        partial = kwargs.pop('partial', False)\n+        instance = self.get_object()\n+\n+        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n+\n+        return self.get_formatted_response(event_instance)\n+\n+    def get_formatted_response(self, event_instance):\n+        \"\"\"Formats the response to match the expected structure.\"\"\"\n         response_data = {\n-            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n+            \"category\": EventCategorySerializer(event_instance.category.all(), many=True).data,\n+            \"organizer\": EventOrganizerSerializer(event_instance.organizer.all(), many=True).data,\n             \"event_name\": event_instance.event_name,\n             \"duration\": event_instance.duration,\n             \"event_type\": event_instance.event_type,\n             \"slug\": event_instance.slug,\n@@ -67,10 +84,11 @@\n                 {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n             ],\n         }\n \n-        return Response(response_data, status=status.HTTP_201_CREATED)\n+        return Response(response_data, status=status.HTTP_200_OK)\n \n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738835972637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     def get_formatted_response(self, event_instance):\n         \"\"\"Formats the response to match the expected structure.\"\"\"\n         response_data = {\n-            \"category\": EventCategorySerializer(event_instance.category.all(), many=True).data,\n+            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n             \"organizer\": EventOrganizerSerializer(event_instance.organizer.all(), many=True).data,\n             \"event_name\": event_instance.event_name,\n             \"duration\": event_instance.duration,\n             \"event_type\": event_instance.event_type,\n"
                },
                {
                    "date": 1739086715831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,11 @@\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n-        return self.get_formatted_response(event_instance)\n+            return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n \n+\n     def update(self, request, *args, **kwargs):\n         \"\"\"\n         Handles PUT (full update) and PATCH (partial update).\n         Ensures that new images and Many-to-Many relationships are updated correctly.\n@@ -64,9 +65,9 @@\n     def get_formatted_response(self, event_instance):\n         \"\"\"Formats the response to match the expected structure.\"\"\"\n         response_data = {\n             \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-            \"organizer\": EventOrganizerSerializer(event_instance.organizer.all(), many=True).data,\n+            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n             \"event_name\": event_instance.event_name,\n             \"duration\": event_instance.duration,\n             \"event_type\": event_instance.event_type,\n             \"slug\": event_instance.slug,\n"
                },
                {
                    "date": 1739086863790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,9 @@\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n             return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n+)\n \n \n     def update(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1739086961705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,69 +28,75 @@\n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return EventWriteSerializers\n-        elif self.action == 'retrieve':\n-            return EventRetrieveSerializers\n-        return super().get_serializer_class()\n-    \n     def create(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        event_instance = serializer.save()\n+    serializer = self.get_serializer(data=request.data)\n+    serializer.is_valid(raise_exception=True)\n+    event_instance = serializer.save()\n \n-            return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n-)\n+    # Return 201 Created for POST request\n+    return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n \n+def update(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles PUT (full update) and PATCH (partial update).\n+    Ensures that new images and Many-to-Many relationships are updated correctly.\n+    \"\"\"\n+    partial = kwargs.pop('partial', False)\n+    instance = self.get_object()\n \n-    def update(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles PUT (full update) and PATCH (partial update).\n-        Ensures that new images and Many-to-Many relationships are updated correctly.\n-        \"\"\"\n-        partial = kwargs.pop('partial', False)\n-        instance = self.get_object()\n+    serializer = self.get_serializer(instance, data=request.data, partial=partial)\n+    serializer.is_valid(raise_exception=True)\n+    event_instance = serializer.save()\n \n-        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n-        serializer.is_valid(raise_exception=True)\n-        event_instance = serializer.save()\n+    # Return 200 OK for PUT/PATCH request\n+    return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n \n-        return self.get_formatted_response(event_instance)\n+def get(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles GET requests, returns 200 OK for GET method.\n+    \"\"\"\n+    instance = self.get_object()\n+    return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n \n-    def get_formatted_response(self, event_instance):\n-        \"\"\"Formats the response to match the expected structure.\"\"\"\n-        response_data = {\n-            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n-            \"event_name\": event_instance.event_name,\n-            \"duration\": event_instance.duration,\n-            \"event_type\": event_instance.event_type,\n-            \"slug\": event_instance.slug,\n-            \"venue\": event_instance.venue,\n-            \"offline_seat_limit\": event_instance.offline_seat_limit,\n-            \"is_registration\": event_instance.is_registration,\n-            \"registration_link\": event_instance.registration_link,\n-            \"registration_type\": event_instance.registration_type,\n-            \"amount\": event_instance.amount,\n-            \"amount_country\": event_instance.amount_country,\n-            \"description\": event_instance.description,\n-            \"start_date\": event_instance.start_date,\n-            \"end_date\": event_instance.end_date,\n-            \"images\": [\n-                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n-            ],\n-        }\n+def destroy(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles DELETE requests, returns 204 No Content for deletion.\n+    \"\"\"\n+    instance = self.get_object()\n+    instance.delete()\n \n-        return Response(response_data, status=status.HTTP_200_OK)\n+    # Return 204 No Content for DELETE request\n+    return Response(status=status.HTTP_204_NO_CONTENT)\n \n+def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n+    \"\"\"Formats the response to match the expected structure.\"\"\"\n+    response_data = {\n+        \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n+        \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n+        \"event_name\": event_instance.event_name,\n+        \"duration\": event_instance.duration,\n+        \"event_type\": event_instance.event_type,\n+        \"slug\": event_instance.slug,\n+        \"venue\": event_instance.venue,\n+        \"offline_seat_limit\": event_instance.offline_seat_limit,\n+        \"is_registration\": event_instance.is_registration,\n+        \"registration_link\": event_instance.registration_link,\n+        \"registration_type\": event_instance.registration_type,\n+        \"amount\": event_instance.amount,\n+        \"amount_country\": event_instance.amount_country,\n+        \"description\": event_instance.description,\n+        \"start_date\": event_instance.start_date,\n+        \"end_date\": event_instance.end_date,\n+        \"images\": [\n+            {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+        ],\n+    }\n \n+    # Return the response with the specified status\n+    return Response(response_data, status=status)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1739086969426,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,73 +29,73 @@\n     #     'id': ['exact'],\n     # }\n \n     def create(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)\n-    serializer.is_valid(raise_exception=True)\n-    event_instance = serializer.save()\n+    ` serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n-    # Return 201 Created for POST request\n-    return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n+        # Return 201 Created for POST request\n+        return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n \n-def update(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles PUT (full update) and PATCH (partial update).\n-    Ensures that new images and Many-to-Many relationships are updated correctly.\n-    \"\"\"\n-    partial = kwargs.pop('partial', False)\n-    instance = self.get_object()\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles PUT (full update) and PATCH (partial update).\n+        Ensures that new images and Many-to-Many relationships are updated correctly.\n+        \"\"\"\n+        partial = kwargs.pop('partial', False)\n+        instance = self.get_object()\n \n-    serializer = self.get_serializer(instance, data=request.data, partial=partial)\n-    serializer.is_valid(raise_exception=True)\n-    event_instance = serializer.save()\n+        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n-    # Return 200 OK for PUT/PATCH request\n-    return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n+        # Return 200 OK for PUT/PATCH request\n+        return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n \n-def get(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles GET requests, returns 200 OK for GET method.\n-    \"\"\"\n-    instance = self.get_object()\n-    return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n+    def get(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles GET requests, returns 200 OK for GET method.\n+        \"\"\"\n+        instance = self.get_object()\n+        return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n \n-def destroy(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles DELETE requests, returns 204 No Content for deletion.\n-    \"\"\"\n-    instance = self.get_object()\n-    instance.delete()\n+    def destroy(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles DELETE requests, returns 204 No Content for deletion.\n+        \"\"\"\n+        instance = self.get_object()\n+        instance.delete()\n \n-    # Return 204 No Content for DELETE request\n-    return Response(status=status.HTTP_204_NO_CONTENT)\n+        # Return 204 No Content for DELETE request\n+        return Response(status=status.HTTP_204_NO_CONTENT)\n \n-def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n-    \"\"\"Formats the response to match the expected structure.\"\"\"\n-    response_data = {\n-        \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-        \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n-        \"event_name\": event_instance.event_name,\n-        \"duration\": event_instance.duration,\n-        \"event_type\": event_instance.event_type,\n-        \"slug\": event_instance.slug,\n-        \"venue\": event_instance.venue,\n-        \"offline_seat_limit\": event_instance.offline_seat_limit,\n-        \"is_registration\": event_instance.is_registration,\n-        \"registration_link\": event_instance.registration_link,\n-        \"registration_type\": event_instance.registration_type,\n-        \"amount\": event_instance.amount,\n-        \"amount_country\": event_instance.amount_country,\n-        \"description\": event_instance.description,\n-        \"start_date\": event_instance.start_date,\n-        \"end_date\": event_instance.end_date,\n-        \"images\": [\n-            {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n-        ],\n-    }\n+    def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n+        \"\"\"Formats the response to match the expected structure.\"\"\"\n+        response_data = {\n+            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n+            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n+            \"event_name\": event_instance.event_name,\n+            \"duration\": event_instance.duration,\n+            \"event_type\": event_instance.event_type,\n+            \"slug\": event_instance.slug,\n+            \"venue\": event_instance.venue,\n+            \"offline_seat_limit\": event_instance.offline_seat_limit,\n+            \"is_registration\": event_instance.is_registration,\n+            \"registration_link\": event_instance.registration_link,\n+            \"registration_type\": event_instance.registration_type,\n+            \"amount\": event_instance.amount,\n+            \"amount_country\": event_instance.amount_country,\n+            \"description\": event_instance.description,\n+            \"start_date\": event_instance.start_date,\n+            \"end_date\": event_instance.end_date,\n+            \"images\": [\n+                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+            ],\n+        }\n \n-    # Return the response with the specified status\n-    return Response(response_data, status=status)\n+        # Return the response with the specified status\n+        return Response(response_data, status=status)`\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1739086986097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     #     'id': ['exact'],\n     # }\n \n     def create(self, request, *args, **kwargs):\n-    ` serializer = self.get_serializer(data=request.data)\n+    serializer = self.get_serializer(data=request.data))\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n         # Return 201 Created for POST request\n"
                },
                {
                    "date": 1739086993784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     #     'id': ['exact'],\n     # }\n \n     def create(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data))\n+        serializer = self.get_serializer(data=request.data))\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n         # Return 201 Created for POST request\n@@ -93,9 +93,9 @@\n             ],\n         }\n \n         # Return the response with the specified status\n-        return Response(response_data, status=status)`\n+        return Response(response_data, status=status)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1739087008404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,73 +29,73 @@\n     #     'id': ['exact'],\n     # }\n \n     def create(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data))\n-        serializer.is_valid(raise_exception=True)\n-        event_instance = serializer.save()\n+    serializer = self.get_serializer(data=request.data)\n+    serializer.is_valid(raise_exception=True)\n+    event_instance = serializer.save()\n \n-        # Return 201 Created for POST request\n-        return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n+    # Return 201 Created for POST request\n+    return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n \n-    def update(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles PUT (full update) and PATCH (partial update).\n-        Ensures that new images and Many-to-Many relationships are updated correctly.\n-        \"\"\"\n-        partial = kwargs.pop('partial', False)\n-        instance = self.get_object()\n+def update(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles PUT (full update) and PATCH (partial update).\n+    Ensures that new images and Many-to-Many relationships are updated correctly.\n+    \"\"\"\n+    partial = kwargs.pop('partial', False)\n+    instance = self.get_object()\n \n-        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n-        serializer.is_valid(raise_exception=True)\n-        event_instance = serializer.save()\n+    serializer = self.get_serializer(instance, data=request.data, partial=partial)\n+    serializer.is_valid(raise_exception=True)\n+    event_instance = serializer.save()\n \n-        # Return 200 OK for PUT/PATCH request\n-        return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n+    # Return 200 OK for PUT/PATCH request\n+    return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n \n-    def get(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles GET requests, returns 200 OK for GET method.\n-        \"\"\"\n-        instance = self.get_object()\n-        return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n+def get(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles GET requests, returns 200 OK for GET method.\n+    \"\"\"\n+    instance = self.get_object()\n+    return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n \n-    def destroy(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles DELETE requests, returns 204 No Content for deletion.\n-        \"\"\"\n-        instance = self.get_object()\n-        instance.delete()\n+def destroy(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles DELETE requests, returns 204 No Content for deletion.\n+    \"\"\"\n+    instance = self.get_object()\n+    instance.delete()\n \n-        # Return 204 No Content for DELETE request\n-        return Response(status=status.HTTP_204_NO_CONTENT)\n+    # Return 204 No Content for DELETE request\n+    return Response(status=status.HTTP_204_NO_CONTENT)\n \n-    def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n-        \"\"\"Formats the response to match the expected structure.\"\"\"\n-        response_data = {\n-            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n-            \"event_name\": event_instance.event_name,\n-            \"duration\": event_instance.duration,\n-            \"event_type\": event_instance.event_type,\n-            \"slug\": event_instance.slug,\n-            \"venue\": event_instance.venue,\n-            \"offline_seat_limit\": event_instance.offline_seat_limit,\n-            \"is_registration\": event_instance.is_registration,\n-            \"registration_link\": event_instance.registration_link,\n-            \"registration_type\": event_instance.registration_type,\n-            \"amount\": event_instance.amount,\n-            \"amount_country\": event_instance.amount_country,\n-            \"description\": event_instance.description,\n-            \"start_date\": event_instance.start_date,\n-            \"end_date\": event_instance.end_date,\n-            \"images\": [\n-                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n-            ],\n-        }\n+def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n+    \"\"\"Formats the response to match the expected structure.\"\"\"\n+    response_data = {\n+        \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n+        \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n+        \"event_name\": event_instance.event_name,\n+        \"duration\": event_instance.duration,\n+        \"event_type\": event_instance.event_type,\n+        \"slug\": event_instance.slug,\n+        \"venue\": event_instance.venue,\n+        \"offline_seat_limit\": event_instance.offline_seat_limit,\n+        \"is_registration\": event_instance.is_registration,\n+        \"registration_link\": event_instance.registration_link,\n+        \"registration_type\": event_instance.registration_type,\n+        \"amount\": event_instance.amount,\n+        \"amount_country\": event_instance.amount_country,\n+        \"description\": event_instance.description,\n+        \"start_date\": event_instance.start_date,\n+        \"end_date\": event_instance.end_date,\n+        \"images\": [\n+            {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+        ],\n+    }\n \n-        # Return the response with the specified status\n-        return Response(response_data, status=status)\n+    # Return the response with the specified status\n+    return Response(response_data, status=status)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1739087015597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,73 +29,73 @@\n     #     'id': ['exact'],\n     # }\n \n     def create(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)\n-    serializer.is_valid(raise_exception=True)\n-    event_instance = serializer.save()\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n-    # Return 201 Created for POST request\n-    return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n+        # Return 201 Created for POST request\n+        return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n \n-def update(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles PUT (full update) and PATCH (partial update).\n-    Ensures that new images and Many-to-Many relationships are updated correctly.\n-    \"\"\"\n-    partial = kwargs.pop('partial', False)\n-    instance = self.get_object()\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles PUT (full update) and PATCH (partial update).\n+        Ensures that new images and Many-to-Many relationships are updated correctly.\n+        \"\"\"\n+        partial = kwargs.pop('partial', False)\n+        instance = self.get_object()\n \n-    serializer = self.get_serializer(instance, data=request.data, partial=partial)\n-    serializer.is_valid(raise_exception=True)\n-    event_instance = serializer.save()\n+        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n-    # Return 200 OK for PUT/PATCH request\n-    return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n+        # Return 200 OK for PUT/PATCH request\n+        return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n \n-def get(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles GET requests, returns 200 OK for GET method.\n-    \"\"\"\n-    instance = self.get_object()\n-    return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n+    def get(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles GET requests, returns 200 OK for GET method.\n+        \"\"\"\n+        instance = self.get_object()\n+        return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n \n-def destroy(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles DELETE requests, returns 204 No Content for deletion.\n-    \"\"\"\n-    instance = self.get_object()\n-    instance.delete()\n+    def destroy(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles DELETE requests, returns 204 No Content for deletion.\n+        \"\"\"\n+        instance = self.get_object()\n+        instance.delete()\n \n-    # Return 204 No Content for DELETE request\n-    return Response(status=status.HTTP_204_NO_CONTENT)\n+        # Return 204 No Content for DELETE request\n+        return Response(status=status.HTTP_204_NO_CONTENT)\n \n-def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n-    \"\"\"Formats the response to match the expected structure.\"\"\"\n-    response_data = {\n-        \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-        \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n-        \"event_name\": event_instance.event_name,\n-        \"duration\": event_instance.duration,\n-        \"event_type\": event_instance.event_type,\n-        \"slug\": event_instance.slug,\n-        \"venue\": event_instance.venue,\n-        \"offline_seat_limit\": event_instance.offline_seat_limit,\n-        \"is_registration\": event_instance.is_registration,\n-        \"registration_link\": event_instance.registration_link,\n-        \"registration_type\": event_instance.registration_type,\n-        \"amount\": event_instance.amount,\n-        \"amount_country\": event_instance.amount_country,\n-        \"description\": event_instance.description,\n-        \"start_date\": event_instance.start_date,\n-        \"end_date\": event_instance.end_date,\n-        \"images\": [\n-            {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n-        ],\n-    }\n+    def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n+        \"\"\"Formats the response to match the expected structure.\"\"\"\n+        response_data = {\n+            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n+            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n+            \"event_name\": event_instance.event_name,\n+            \"duration\": event_instance.duration,\n+            \"event_type\": event_instance.event_type,\n+            \"slug\": event_instance.slug,\n+            \"venue\": event_instance.venue,\n+            \"offline_seat_limit\": event_instance.offline_seat_limit,\n+            \"is_registration\": event_instance.is_registration,\n+            \"registration_link\": event_instance.registration_link,\n+            \"registration_type\": event_instance.registration_type,\n+            \"amount\": event_instance.amount,\n+            \"amount_country\": event_instance.amount_country,\n+            \"description\": event_instance.description,\n+            \"start_date\": event_instance.start_date,\n+            \"end_date\": event_instance.end_date,\n+            \"images\": [\n+                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+            ],\n+        }\n \n-    # Return the response with the specified status\n-    return Response(response_data, status=status)\n+        # Return the response with the specified status\n+        return Response(response_data, status=status)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1739087406097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,73 +29,73 @@\n     #     'id': ['exact'],\n     # }\n \n     def create(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        event_instance = serializer.save()\n+    serializer = self.get_serializer(data=request.data)\n+    serializer.is_valid(raise_exception=True)\n+    event_instance = serializer.save()\n \n-        # Return 201 Created for POST request\n-        return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n+    # Return 201 Created for POST request\n+    return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n \n-    def update(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles PUT (full update) and PATCH (partial update).\n-        Ensures that new images and Many-to-Many relationships are updated correctly.\n-        \"\"\"\n-        partial = kwargs.pop('partial', False)\n-        instance = self.get_object()\n+def update(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles PUT (full update) and PATCH (partial update).\n+    Ensures that new images and Many-to-Many relationships are updated correctly.\n+    \"\"\"\n+    partial = kwargs.pop('partial', False)\n+    instance = self.get_object()\n \n-        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n-        serializer.is_valid(raise_exception=True)\n-        event_instance = serializer.save()\n+    serializer = self.get_serializer(instance, data=request.data, partial=partial)\n+    serializer.is_valid(raise_exception=True)\n+    event_instance = serializer.save()\n \n-        # Return 200 OK for PUT/PATCH request\n-        return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n+    # Return 200 OK for PUT/PATCH request\n+    return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n \n-    def get(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles GET requests, returns 200 OK for GET method.\n-        \"\"\"\n-        instance = self.get_object()\n-        return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n+def get(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles GET requests, returns 200 OK for GET method.\n+    \"\"\"\n+    instance = self.get_object()\n+    return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n \n-    def destroy(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles DELETE requests, returns 204 No Content for deletion.\n-        \"\"\"\n-        instance = self.get_object()\n-        instance.delete()\n+def destroy(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles DELETE requests, returns 204 No Content for deletion.\n+    \"\"\"\n+    instance = self.get_object()\n+    instance.delete()\n \n-        # Return 204 No Content for DELETE request\n-        return Response(status=status.HTTP_204_NO_CONTENT)\n+    # Return 204 No Content for DELETE request\n+    return Response(status=status.HTTP_204_NO_CONTENT)\n \n-    def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n-        \"\"\"Formats the response to match the expected structure.\"\"\"\n-        response_data = {\n-            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n-            \"event_name\": event_instance.event_name,\n-            \"duration\": event_instance.duration,\n-            \"event_type\": event_instance.event_type,\n-            \"slug\": event_instance.slug,\n-            \"venue\": event_instance.venue,\n-            \"offline_seat_limit\": event_instance.offline_seat_limit,\n-            \"is_registration\": event_instance.is_registration,\n-            \"registration_link\": event_instance.registration_link,\n-            \"registration_type\": event_instance.registration_type,\n-            \"amount\": event_instance.amount,\n-            \"amount_country\": event_instance.amount_country,\n-            \"description\": event_instance.description,\n-            \"start_date\": event_instance.start_date,\n-            \"end_date\": event_instance.end_date,\n-            \"images\": [\n-                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n-            ],\n-        }\n+def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n+    \"\"\"Formats the response to match the expected structure.\"\"\"\n+    response_data = {\n+        \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n+        \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n+        \"event_name\": event_instance.event_name,\n+        \"duration\": event_instance.duration,\n+        \"event_type\": event_instance.event_type,\n+        \"slug\": event_instance.slug,\n+        \"venue\": event_instance.venue,\n+        \"offline_seat_limit\": event_instance.offline_seat_limit,\n+        \"is_registration\": event_instance.is_registration,\n+        \"registration_link\": event_instance.registration_link,\n+        \"registration_type\": event_instance.registration_type,\n+        \"amount\": event_instance.amount,\n+        \"amount_country\": event_instance.amount_country,\n+        \"description\": event_instance.description,\n+        \"start_date\": event_instance.start_date,\n+        \"end_date\": event_instance.end_date,\n+        \"images\": [\n+            {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+        ],\n+    }\n \n-        # Return the response with the specified status\n-        return Response(response_data, status=status)\n+    # Return the response with the specified status\n+    return Response(response_data, status=status)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1739087413104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     #     'id': ['exact'],\n     # }\n \n     def create(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)\n+   ` serializer = self.get_serializer(data=request.data)\n     serializer.is_valid(raise_exception=True)\n     event_instance = serializer.save()\n \n     # Return 201 Created for POST request\n@@ -93,9 +93,9 @@\n         ],\n     }\n \n     # Return the response with the specified status\n-    return Response(response_data, status=status)\n+    return Response(response_data, status=status)`\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1739087429043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,75 +28,67 @@\n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n \n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return EventWriteSerializers\n+        elif self.action == 'retrieve':\n+            return EventRetrieveSerializers\n+        return super().get_serializer_class()\n+    \n     def create(self, request, *args, **kwargs):\n-   ` serializer = self.get_serializer(data=request.data)\n-    serializer.is_valid(raise_exception=True)\n-    event_instance = serializer.save()\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n-    # Return 201 Created for POST request\n-    return self.get_formatted_response(event_instance, status=status.HTTP_201_CREATED)\n+        return self.get_formatted_response(event_instance)\n \n-def update(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles PUT (full update) and PATCH (partial update).\n-    Ensures that new images and Many-to-Many relationships are updated correctly.\n-    \"\"\"\n-    partial = kwargs.pop('partial', False)\n-    instance = self.get_object()\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles PUT (full update) and PATCH (partial update).\n+        Ensures that new images and Many-to-Many relationships are updated correctly.\n+        \"\"\"\n+        partial = kwargs.pop('partial', False)\n+        instance = self.get_object()\n \n-    serializer = self.get_serializer(instance, data=request.data, partial=partial)\n-    serializer.is_valid(raise_exception=True)\n-    event_instance = serializer.save()\n+        serializer = self.get_serializer(instance, data=request.data, partial=partial)\n+        serializer.is_valid(raise_exception=True)\n+        event_instance = serializer.save()\n \n-    # Return 200 OK for PUT/PATCH request\n-    return self.get_formatted_response(event_instance, status=status.HTTP_200_OK)\n+        return self.get_formatted_response(event_instance)\n \n-def get(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles GET requests, returns 200 OK for GET method.\n-    \"\"\"\n-    instance = self.get_object()\n-    return self.get_formatted_response(instance, status=status.HTTP_200_OK)\n+    def get_formatted_response(self, event_instance):\n+        \"\"\"Formats the response to match the expected structure.\"\"\"\n+        response_data = {\n+            \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n+            \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n+            \"event_name\": event_instance.event_name,\n+            \"duration\": event_instance.duration,\n+            \"event_type\": event_instance.event_type,\n+            \"slug\": event_instance.slug,\n+            \"venue\": event_instance.venue,\n+            \"offline_seat_limit\": event_instance.offline_seat_limit,\n+            \"is_registration\": event_instance.is_registration,\n+            \"registration_link\": event_instance.registration_link,\n+            \"registration_type\": event_instance.registration_type,\n+            \"amount\": event_instance.amount,\n+            \"amount_country\": event_instance.amount_country,\n+            \"description\": event_instance.description,\n+            \"start_date\": event_instance.start_date,\n+            \"end_date\": event_instance.end_date,\n+            \"images\": [\n+                {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n+            ],\n+        }\n \n-def destroy(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles DELETE requests, returns 204 No Content for deletion.\n-    \"\"\"\n-    instance = self.get_object()\n-    instance.delete()\n+        return Response(response_data, status=status.HTTP_200_OK)\n \n-    # Return 204 No Content for DELETE request\n-    return Response(status=status.HTTP_204_NO_CONTENT)\n \n-def get_formatted_response(self, event_instance, status=status.HTTP_200_OK):\n-    \"\"\"Formats the response to match the expected structure.\"\"\"\n-    response_data = {\n-        \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n-        \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n-        \"event_name\": event_instance.event_name,\n-        \"duration\": event_instance.duration,\n-        \"event_type\": event_instance.event_type,\n-        \"slug\": event_instance.slug,\n-        \"venue\": event_instance.venue,\n-        \"offline_seat_limit\": event_instance.offline_seat_limit,\n-        \"is_registration\": event_instance.is_registration,\n-        \"registration_link\": event_instance.registration_link,\n-        \"registration_type\": event_instance.registration_type,\n-        \"amount\": event_instance.amount,\n-        \"amount_country\": event_instance.amount_country,\n-        \"description\": event_instance.description,\n-        \"start_date\": event_instance.start_date,\n-        \"end_date\": event_instance.end_date,\n-        \"images\": [\n-            {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n-        ],\n-    }\n-\n-    # Return the response with the specified status\n-    return Response(response_data, status=status)`\n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1739087445015,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n-        return self.get_formatted_response(event_instance)\n+        return self.get_formatted_response(event_instance,status.HTTP_200_OK)\n \n     def update(self, request, *args, **kwargs):\n         \"\"\"\n         Handles PUT (full update) and PATCH (partial update).\n"
                },
                {
                    "date": 1739087451553,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         serializer = self.get_serializer(instance, data=request.data, partial=partial)\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n-        return self.get_formatted_response(event_instance)\n+        return self.get_formatted_response(event_instance,status.HTTP_200_OK)\n \n     def get_formatted_response(self, event_instance):\n         \"\"\"Formats the response to match the expected structure.\"\"\"\n         response_data = {\n"
                },
                {
                    "date": 1739090906387,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n-        return self.get_formatted_response(event_instance,status.HTTP_200_OK)\n+        return self.get_formatted_response(event_instance,status.HTTP_201_OK)\n \n     def update(self, request, *args, **kwargs):\n         \"\"\"\n         Handles PUT (full update) and PATCH (partial update).\n@@ -84,9 +84,9 @@\n                 {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n             ],\n         }\n \n-        return Response(response_data, status=status.HTTP_200_OK)\n+        return Response(response_data, status=status)\n \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1739090939930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n                 {\"id\": img.id, \"image_url\": img.image.url} for img in event_instance.image.all()\n             ],\n         }\n \n-        return Response(response_data, status=status)\n+        return Response(response_data, status= status)\n \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1739090952261,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n         event_instance = serializer.save()\n \n         return self.get_formatted_response(event_instance,status.HTTP_200_OK)\n \n-    def get_formatted_response(self, event_instance):\n+    def get_formatted_response(self, event_instance, sta):\n         \"\"\"Formats the response to match the expected structure.\"\"\"\n         response_data = {\n             \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n             \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n"
                },
                {
                    "date": 1739094082930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n         event_instance = serializer.save()\n \n-        return self.get_formatted_response(event_instance,status.HTTP_201_OK)\n+        return self.get_formatted_response(event_instance,status.HTTP_201_CREATED)\n \n     def update(self, request, *args, **kwargs):\n         \"\"\"\n         Handles PUT (full update) and PATCH (partial update).\n@@ -60,9 +60,9 @@\n         event_instance = serializer.save()\n \n         return self.get_formatted_response(event_instance,status.HTTP_200_OK)\n \n-    def get_formatted_response(self, event_instance, sta):\n+    def get_formatted_response(self, event_instance, status):\n         \"\"\"Formats the response to match the expected structure.\"\"\"\n         response_data = {\n             \"category\": EventCategoryRetrieveSerializers(event_instance.category.all(), many=True).data,\n             \"organizer\": EventOrganizerRetrieveSerializers(event_instance.organizer.all(), many=True).data,\n"
                }
            ],
            "date": 1733481372824,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Event\nfrom ..serializers.event_serializers import EventListSerializers, EventRetrieveSerializers, EventWriteSerializers\nfrom ..utilities.importbase import *\n\nclass eventViewsets(viewsets.ModelViewSet):\n    serializer_class = EventListSerializers\n    # permission_classes = [eventPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = Event.objects.all().order_by\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return EventWriteSerializers\n        elif self.action == 'retrieve':\n            return EventRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}