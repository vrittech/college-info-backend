{
    "sourceFile": "event/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1739258046053,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739258055116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,23 @@\n ADMIN = 2\n \n \n def IsAuthenticated(request):\n-    \n+/*************  ✨ Codeium Command ⭐  *************/\n+    \"\"\"\n+    Check if the user in the request is authenticated.\n+\n+    Parameters\n+    ----------\n+    request : HttpRequest\n+        The request object.\n+\n+    Returns\n+    -------\n+    bool\n+        True if the user in the request is authenticated, False otherwise.\n+\n+/******  47f512a3-a100-4879-ba47-592a235c03ca  *******/\n     return bool(request.user and request.user.is_authenticated)\n \n def SuperAdminLevel(request):\n     return bool(IsAuthenticated(request) and request.user.is_superuser)\n"
                },
                {
                    "date": 1739258079603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,43 @@\n-#------permission are classified into three types------->\n-#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n-#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n-#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n+from rest_framework.permissions import BasePermission\n \n-#model ObjectB->user field\n-#model ObjectC->objectB field(objectB id)\n+DURATION_PERMISSIONS = {\n+    \"add\": \"add_duration\",\n+    \"change\": \"change_duration\",\n+    \"delete\": \"delete_duration\",\n+    \"view\": \"view_duration\",\n+    \"manage\": \"manage_duration\",\n+}\n \n+def HasPermission(request, codename):\n+    \"\"\"Check if the user has a specific Django permission\"\"\"\n+    return request.user.has_perm(f\"app_name.{codename}\")\n \n-#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n+def CanManage(request):\n+    \"\"\"Check if the user has full manage access\"\"\"\n+    return HasPermission(request, DURATION_PERMISSIONS[\"manage\"])\n \n-from rest_framework.permissions import BasePermission\n-\n-SUPER_ADMIN = 1\n-ADMIN = 2\n-\n-\n-def IsAuthenticated(request):\n-/*************  ✨ Codeium Command ⭐  *************/\n+class DurationPermission(BasePermission):\n     \"\"\"\n-    Check if the user in the request is authenticated.\n+    Permission class for managing durations based strictly on Django permissions.\n+    \"\"\"\n \n-    Parameters\n-    ----------\n-    request : HttpRequest\n-        The request object.\n+    def has_permission(self, request, view):\n+        if CanManage(request):  # If user has manage permission, grant full access\n+            return True\n \n-    Returns\n-    -------\n-    bool\n-        True if the user in the request is authenticated, False otherwise.\n+        if view.action in [\"list\"]:\n+            return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n \n-/******  47f512a3-a100-4879-ba47-592a235c03ca  *******/\n-    return bool(request.user and request.user.is_authenticated)\n+        elif view.action in [\"retrieve\"]:\n+            return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n \n-def SuperAdminLevel(request):\n-    return bool(IsAuthenticated(request) and request.user.is_superuser)\n+        elif view.action in [\"create\"]:\n+            return HasPermission(request, DURATION_PERMISSIONS[\"add\"])\n \n-def AdminLevel(request):\n-    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n+        elif view.action in [\"update\", \"partial_update\"]:\n+            return HasPermission(request, DURATION_PERMISSIONS[\"change\"])\n \n-def isOwner(request):\n-    if str(request.user.id) == str(request.data.get('user')):\n-        return True\n-    \n-    elif len(request.data)==0 and len(request.POST)==0:\n-        return True\n+        elif view.action == \"destroy\":\n+            return HasPermission(request, DURATION_PERMISSIONS[\"delete\"])\n \n-    return False\n-\n-\n-# def ObjectBOwner(request):\n-#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n-#     if company.exists():\n-#         return True\n-#     return False\n-\n-class eventPermission(BasePermission):\n-    def has_permission(self, request, view):\n-        if view.action in [\"list\"]:\n-            return True\n-        elif view.action in ['retrieve']:\n-            return isOwner(request)\n-        elif view.action in ['create','update']:\n-            return isOwner(request) #second level\n-            return ObjectBOwner(request) #third level\n-        elif view.action == \"partial_update\":\n-            return view.get_object().user_id == request.user.id\n-        elif view.action == 'destroy':\n-            return isOwner(request)\n-\n+        return False  # Default deny access\n"
                },
                {
                    "date": 1739258097927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,43 @@\n from rest_framework.permissions import BasePermission\n \n-DURATION_PERMISSIONS = {\n-    \"add\": \"add_duration\",\n-    \"change\": \"change_duration\",\n-    \"delete\": \"delete_duration\",\n-    \"view\": \"view_duration\",\n-    \"manage\": \"manage_duration\",\n+EVENT_PERMISSIONS = {\n+    \"add\": \"add_event\",\n+    \"change\": \"change_event\",\n+    \"delete\": \"delete_event\",\n+    \"view\": \"view_event\",\n+    \"manage\": \"manage_event\",\n }\n \n def HasPermission(request, codename):\n     \"\"\"Check if the user has a specific Django permission\"\"\"\n     return request.user.has_perm(f\"app_name.{codename}\")\n \n def CanManage(request):\n     \"\"\"Check if the user has full manage access\"\"\"\n-    return HasPermission(request, DURATION_PERMISSIONS[\"manage\"])\n+    return HasPermission(request, EVENT_PERMISSIONS[\"manage\"])\n \n-class DurationPermission(BasePermission):\n+class EventPermission(BasePermission):\n     \"\"\"\n-    Permission class for managing durations based strictly on Django permissions.\n+    Permission class for managing events based strictly on Django permissions.\n     \"\"\"\n \n     def has_permission(self, request, view):\n         if CanManage(request):  # If user has manage permission, grant full access\n             return True\n \n         if view.action in [\"list\"]:\n-            return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n+            return HasPermission(request, EVENT_PERMISSIONS[\"view\"])\n \n         elif view.action in [\"retrieve\"]:\n-            return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n+            return HasPermission(request, EVENT_PERMISSIONS[\"view\"])\n \n         elif view.action in [\"create\"]:\n-            return HasPermission(request, DURATION_PERMISSIONS[\"add\"])\n+            return HasPermission(request, EVENT_PERMISSIONS[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return HasPermission(request, DURATION_PERMISSIONS[\"change\"])\n+            return HasPermission(request, EVENT_PERMISSIONS[\"change\"])\n \n         elif view.action == \"destroy\":\n-            return HasPermission(request, DURATION_PERMISSIONS[\"delete\"])\n+            return HasPermission(request, EVENT_PERMISSIONS[\"delete\"])\n \n         return False  # Default deny access\n"
                },
                {
                    "date": 1739263991110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n         if CanManage(request):  # If user has manage permission, grant full access\n             return True\n \n         if view.action in [\"list\"]:\n-            return HasPermission(request, EVENT_PERMISSIONS[\"view\"])\n+            return True\n \n         elif view.action in [\"retrieve\"]:\n             return HasPermission(request, EVENT_PERMISSIONS[\"view\"])\n \n"
                },
                {
                    "date": 1739264522054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n def CanManage(request):\n     \"\"\"Check if the user has full manage access\"\"\"\n     return HasPermission(request, EVENT_PERMISSIONS[\"manage\"])\n \n-class EventPermission(BasePermission):\n+class ventPermission(BasePermission):\n     \"\"\"\n     Permission class for managing events based strictly on Django permissions.\n     \"\"\"\n \n"
                },
                {
                    "date": 1739506654492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n def CanManage(request):\n     \"\"\"Check if the user has full manage access\"\"\"\n     return HasPermission(request, EVENT_PERMISSIONS[\"manage\"])\n \n-class ventPermission(BasePermission):\n+class eventPermission(BasePermission):\n     \"\"\"\n     Permission class for managing events based strictly on Django permissions.\n     \"\"\"\n \n@@ -28,9 +28,9 @@\n         if view.action in [\"list\"]:\n             return True\n \n         elif view.action in [\"retrieve\"]:\n-            return HasPermission(request, EVENT_PERMISSIONS[\"view\"])\n+            return True\n \n         elif view.action in [\"create\"]:\n             return HasPermission(request, EVENT_PERMISSIONS[\"add\"])\n \n"
                }
            ],
            "date": 1739258046053,
            "name": "Commit-0",
            "content": "#------permission are classified into three types------->\n#first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n#second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n#third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n\n#model ObjectB->user field\n#model ObjectC->objectB field(objectB id)\n\n\n#as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n\nfrom rest_framework.permissions import BasePermission\n\nSUPER_ADMIN = 1\nADMIN = 2\n\n\ndef IsAuthenticated(request):\n    \n    return bool(request.user and request.user.is_authenticated)\n\ndef SuperAdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.is_superuser)\n\ndef AdminLevel(request):\n    return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n\ndef isOwner(request):\n    if str(request.user.id) == str(request.data.get('user')):\n        return True\n    \n    elif len(request.data)==0 and len(request.POST)==0:\n        return True\n\n    return False\n\n\n# def ObjectBOwner(request):\n#     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n#     if company.exists():\n#         return True\n#     return False\n\nclass eventPermission(BasePermission):\n    def has_permission(self, request, view):\n        if view.action in [\"list\"]:\n            return True\n        elif view.action in ['retrieve']:\n            return isOwner(request)\n        elif view.action in ['create','update']:\n            return isOwner(request) #second level\n            return ObjectBOwner(request) #third level\n        elif view.action == \"partial_update\":\n            return view.get_object().user_id == request.user.id\n        elif view.action == 'destroy':\n            return isOwner(request)\n\n"
        }
    ]
}