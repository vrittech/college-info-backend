{
    "sourceFile": "event/serializers/event_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1733477390024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733477435882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,55 @@\n from rest_framework import serializers\n from ..models import Event, EventCategory, EventOrganizer, EventGallery\n \n-# Serializer for listing events (basic view)\n-class EventListSerializers(serializers.ModelSerializer):\n-    # Nested fields for related models (just showing names or basic details)\n-    category = serializers.StringRelatedField(many=True)  # Show related categories by name\n-    organizer = serializers.StringRelatedField(many=True)  # Show related organizers by name\n+# Serializer for EventCategory\n+class EventCategorySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = EventCategory\n+        fields = ['id', 'name', 'created_date_time', 'created_date', 'updated_date']\n \n+# Serializer for EventOrganizer\n+class EventOrganizerSerializer(serializers.ModelSerializer):\n     class Meta:\n+        model = EventOrganizer\n+        fields = ['id', 'name', 'image', 'link', 'is_show', 'created_date_time', 'created_date', 'updated_date']\n+\n+# Serializer for EventGallery\n+class EventGallerySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = EventGallery\n+        fields = ['id', 'image', 'is_featured_image', 'created_date_time', 'created_date', 'updated_date']\n+\n+# Serializer for listing event details (basic view)\n+class EventListSerializers(serializers.ModelSerializer):\n+    # Nested fields for related models (full object details)\n+    category = EventCategorySerializer(many=True)  # Full details of categories\n+    organizer = EventOrganizerSerializer(many=True)  # Full details of organizers\n+    gallery = EventGallerySerializer(many=True)  # Full details of gallery images\n+    \n+    class Meta:\n         model = Event\n         fields = '__all__'\n \n \n-# Serializer for retrieving detailed event information\n+# Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n-    # Nested fields for related models (showing detailed info)\n-    category = serializers.StringRelatedField(many=True)\n-    organizer = serializers.StringRelatedField(many=True)\n-    gallery = serializers.StringRelatedField(many=True)  # Optional: For retrieving related images\n+    # Nested fields for related models (full object details)\n+    category = EventCategorySerializer(many=True)\n+    organizer = EventOrganizerSerializer(many=True)\n+    gallery = EventGallerySerializer(many=True)  # Optional: For retrieving related images\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n \n \n-# Serializer for creating or updating events\n+# Serializer for creating/updating event details (with full object serialization for related fields)\n class EventWriteSerializers(serializers.ModelSerializer):\n-    # Nested fields for related models\n-    category = serializers.PrimaryKeyRelatedField(queryset=EventCategory.objects.all(), many=True)\n-    organizer = serializers.PrimaryKeyRelatedField(queryset=EventOrganizer.objects.all(), many=True)\n-    gallery = serializers.PrimaryKeyRelatedField(queryset=EventGallery.objects.all(), many=True)\n+    # Nested serializers for related models (full object representation)\n+    category = EventCategorySerializer(many=True)  # For creating/updating full objects\n+    organizer = EventOrganizerSerializer(many=True)  # For creating/updating full objects\n+    gallery = EventGallerySerializer(many=True)  # For creating/updating full objects\n     \n     class Meta:\n         model = Event\n         fields = [\n@@ -50,12 +69,18 @@\n         # Create the Event instance\n         event = Event.objects.create(**validated_data)\n \n         # Handle many-to-many relationships\n-        event.category.set(category_data)\n-        event.organizer.set(organizer_data)\n-        event.gallery.set(gallery_data)\n+        # Create related EventCategory, EventOrganizer, EventGallery\n+        for category in category_data:\n+            event.category.add(EventCategory.objects.create(**category))\n \n+        for organizer in organizer_data:\n+            event.organizer.add(EventOrganizer.objects.create(**organizer))\n+\n+        for image in gallery_data:\n+            event.gallery.add(EventGallery.objects.create(**image))\n+\n         return event\n \n     def update(self, instance, validated_data):\n         # Handle the updating of related fields (many-to-many relationships)\n@@ -65,16 +90,24 @@\n \n         # Update fields that are present in validated_data\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n-        \n+\n         # Update many-to-many relationships\n         if category_data is not None:\n-            instance.category.set(category_data)\n+            instance.category.clear()  # Clear existing categories\n+            for category in category_data:\n+                instance.category.add(EventCategory.objects.create(**category))\n+\n         if organizer_data is not None:\n-            instance.organizer.set(organizer_data)\n+            instance.organizer.clear()  # Clear existing organizers\n+            for organizer in organizer_data:\n+                instance.organizer.add(EventOrganizer.objects.create(**organizer))\n+\n         if gallery_data is not None:\n-            instance.gallery.set(gallery_data)\n+            instance.gallery.clear()  # Clear existing gallery images\n+            for image in gallery_data:\n+                instance.gallery.add(EventGallery.objects.create(**image))\n \n         # Save the updated instance\n         instance.save()\n \n"
                },
                {
                    "date": 1733477444061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,15 +51,9 @@\n     gallery = EventGallerySerializer(many=True)  # For creating/updating full objects\n     \n     class Meta:\n         model = Event\n-        fields = [\n-            'event_name', 'start_date', 'end_date', 'duration', 'event_type', 'venue', 'online_seat_limit', \n-            'offline_seat_limit', 'is_offline_seat_limit', 'is_online_seat_limit', 'is_registration', \n-            'registration_link', 'registration_type', 'amount', 'amount_type', 'amount_country', \n-            'description', 'is_featured_event', 'category', 'organizer', 'gallery', 'created_date_time', \n-            'created_date', 'updated_date'\n-        ]\n+        fields = '__'\n     \n     def create(self, validated_data):\n         # Handle the creation of related fields (many-to-many relationships)\n         category_data = validated_data.pop('category')\n"
                },
                {
                    "date": 1733477450119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     gallery = EventGallerySerializer(many=True)  # For creating/updating full objects\n     \n     class Meta:\n         model = Event\n-        fields = '__'\n+        fields = '__all__'\n     \n     def create(self, validated_data):\n         # Handle the creation of related fields (many-to-many relationships)\n         category_data = validated_data.pop('category')\n"
                }
            ],
            "date": 1733477390024,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Event, EventCategory, EventOrganizer, EventGallery\n\n# Serializer for listing events (basic view)\nclass EventListSerializers(serializers.ModelSerializer):\n    # Nested fields for related models (just showing names or basic details)\n    category = serializers.StringRelatedField(many=True)  # Show related categories by name\n    organizer = serializers.StringRelatedField(many=True)  # Show related organizers by name\n\n    class Meta:\n        model = Event\n        fields = '__all__'\n\n\n# Serializer for retrieving detailed event information\nclass EventRetrieveSerializers(serializers.ModelSerializer):\n    # Nested fields for related models (showing detailed info)\n    category = serializers.StringRelatedField(many=True)\n    organizer = serializers.StringRelatedField(many=True)\n    gallery = serializers.StringRelatedField(many=True)  # Optional: For retrieving related images\n\n    class Meta:\n        model = Event\n        fields = '__all__'\n\n\n# Serializer for creating or updating events\nclass EventWriteSerializers(serializers.ModelSerializer):\n    # Nested fields for related models\n    category = serializers.PrimaryKeyRelatedField(queryset=EventCategory.objects.all(), many=True)\n    organizer = serializers.PrimaryKeyRelatedField(queryset=EventOrganizer.objects.all(), many=True)\n    gallery = serializers.PrimaryKeyRelatedField(queryset=EventGallery.objects.all(), many=True)\n    \n    class Meta:\n        model = Event\n        fields = [\n            'event_name', 'start_date', 'end_date', 'duration', 'event_type', 'venue', 'online_seat_limit', \n            'offline_seat_limit', 'is_offline_seat_limit', 'is_online_seat_limit', 'is_registration', \n            'registration_link', 'registration_type', 'amount', 'amount_type', 'amount_country', \n            'description', 'is_featured_event', 'category', 'organizer', 'gallery', 'created_date_time', \n            'created_date', 'updated_date'\n        ]\n    \n    def create(self, validated_data):\n        # Handle the creation of related fields (many-to-many relationships)\n        category_data = validated_data.pop('category')\n        organizer_data = validated_data.pop('organizer')\n        gallery_data = validated_data.pop('gallery')\n\n        # Create the Event instance\n        event = Event.objects.create(**validated_data)\n\n        # Handle many-to-many relationships\n        event.category.set(category_data)\n        event.organizer.set(organizer_data)\n        event.gallery.set(gallery_data)\n\n        return event\n\n    def update(self, instance, validated_data):\n        # Handle the updating of related fields (many-to-many relationships)\n        category_data = validated_data.pop('category', None)\n        organizer_data = validated_data.pop('organizer', None)\n        gallery_data = validated_data.pop('gallery', None)\n\n        # Update fields that are present in validated_data\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        \n        # Update many-to-many relationships\n        if category_data is not None:\n            instance.category.set(category_data)\n        if organizer_data is not None:\n            instance.organizer.set(organizer_data)\n        if gallery_data is not None:\n            instance.gallery.set(gallery_data)\n\n        # Save the updated instance\n        instance.save()\n\n        return instance\n"
        }
    ]
}