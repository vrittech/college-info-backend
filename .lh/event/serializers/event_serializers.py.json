{
    "sourceFile": "event/serializers/event_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 107,
            "patches": [
                {
                    "date": 1733477390024,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733477435882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,36 +1,55 @@\n from rest_framework import serializers\n from ..models import Event, EventCategory, EventOrganizer, EventGallery\n \n-# Serializer for listing events (basic view)\n-class EventListSerializers(serializers.ModelSerializer):\n-    # Nested fields for related models (just showing names or basic details)\n-    category = serializers.StringRelatedField(many=True)  # Show related categories by name\n-    organizer = serializers.StringRelatedField(many=True)  # Show related organizers by name\n+# Serializer for EventCategory\n+class EventCategorySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = EventCategory\n+        fields = ['id', 'name', 'created_date_time', 'created_date', 'updated_date']\n \n+# Serializer for EventOrganizer\n+class EventOrganizerSerializer(serializers.ModelSerializer):\n     class Meta:\n+        model = EventOrganizer\n+        fields = ['id', 'name', 'image', 'link', 'is_show', 'created_date_time', 'created_date', 'updated_date']\n+\n+# Serializer for EventGallery\n+class EventGallerySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = EventGallery\n+        fields = ['id', 'image', 'is_featured_image', 'created_date_time', 'created_date', 'updated_date']\n+\n+# Serializer for listing event details (basic view)\n+class EventListSerializers(serializers.ModelSerializer):\n+    # Nested fields for related models (full object details)\n+    category = EventCategorySerializer(many=True)  # Full details of categories\n+    organizer = EventOrganizerSerializer(many=True)  # Full details of organizers\n+    gallery = EventGallerySerializer(many=True)  # Full details of gallery images\n+    \n+    class Meta:\n         model = Event\n         fields = '__all__'\n \n \n-# Serializer for retrieving detailed event information\n+# Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n-    # Nested fields for related models (showing detailed info)\n-    category = serializers.StringRelatedField(many=True)\n-    organizer = serializers.StringRelatedField(many=True)\n-    gallery = serializers.StringRelatedField(many=True)  # Optional: For retrieving related images\n+    # Nested fields for related models (full object details)\n+    category = EventCategorySerializer(many=True)\n+    organizer = EventOrganizerSerializer(many=True)\n+    gallery = EventGallerySerializer(many=True)  # Optional: For retrieving related images\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n \n \n-# Serializer for creating or updating events\n+# Serializer for creating/updating event details (with full object serialization for related fields)\n class EventWriteSerializers(serializers.ModelSerializer):\n-    # Nested fields for related models\n-    category = serializers.PrimaryKeyRelatedField(queryset=EventCategory.objects.all(), many=True)\n-    organizer = serializers.PrimaryKeyRelatedField(queryset=EventOrganizer.objects.all(), many=True)\n-    gallery = serializers.PrimaryKeyRelatedField(queryset=EventGallery.objects.all(), many=True)\n+    # Nested serializers for related models (full object representation)\n+    category = EventCategorySerializer(many=True)  # For creating/updating full objects\n+    organizer = EventOrganizerSerializer(many=True)  # For creating/updating full objects\n+    gallery = EventGallerySerializer(many=True)  # For creating/updating full objects\n     \n     class Meta:\n         model = Event\n         fields = [\n@@ -50,12 +69,18 @@\n         # Create the Event instance\n         event = Event.objects.create(**validated_data)\n \n         # Handle many-to-many relationships\n-        event.category.set(category_data)\n-        event.organizer.set(organizer_data)\n-        event.gallery.set(gallery_data)\n+        # Create related EventCategory, EventOrganizer, EventGallery\n+        for category in category_data:\n+            event.category.add(EventCategory.objects.create(**category))\n \n+        for organizer in organizer_data:\n+            event.organizer.add(EventOrganizer.objects.create(**organizer))\n+\n+        for image in gallery_data:\n+            event.gallery.add(EventGallery.objects.create(**image))\n+\n         return event\n \n     def update(self, instance, validated_data):\n         # Handle the updating of related fields (many-to-many relationships)\n@@ -65,16 +90,24 @@\n \n         # Update fields that are present in validated_data\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n-        \n+\n         # Update many-to-many relationships\n         if category_data is not None:\n-            instance.category.set(category_data)\n+            instance.category.clear()  # Clear existing categories\n+            for category in category_data:\n+                instance.category.add(EventCategory.objects.create(**category))\n+\n         if organizer_data is not None:\n-            instance.organizer.set(organizer_data)\n+            instance.organizer.clear()  # Clear existing organizers\n+            for organizer in organizer_data:\n+                instance.organizer.add(EventOrganizer.objects.create(**organizer))\n+\n         if gallery_data is not None:\n-            instance.gallery.set(gallery_data)\n+            instance.gallery.clear()  # Clear existing gallery images\n+            for image in gallery_data:\n+                instance.gallery.add(EventGallery.objects.create(**image))\n \n         # Save the updated instance\n         instance.save()\n \n"
                },
                {
                    "date": 1733477444061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,15 +51,9 @@\n     gallery = EventGallerySerializer(many=True)  # For creating/updating full objects\n     \n     class Meta:\n         model = Event\n-        fields = [\n-            'event_name', 'start_date', 'end_date', 'duration', 'event_type', 'venue', 'online_seat_limit', \n-            'offline_seat_limit', 'is_offline_seat_limit', 'is_online_seat_limit', 'is_registration', \n-            'registration_link', 'registration_type', 'amount', 'amount_type', 'amount_country', \n-            'description', 'is_featured_event', 'category', 'organizer', 'gallery', 'created_date_time', \n-            'created_date', 'updated_date'\n-        ]\n+        fields = '__'\n     \n     def create(self, validated_data):\n         # Handle the creation of related fields (many-to-many relationships)\n         category_data = validated_data.pop('category')\n"
                },
                {
                    "date": 1733477450119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     gallery = EventGallerySerializer(many=True)  # For creating/updating full objects\n     \n     class Meta:\n         model = Event\n-        fields = '__'\n+        fields = '__all__'\n     \n     def create(self, validated_data):\n         # Handle the creation of related fields (many-to-many relationships)\n         category_data = validated_data.pop('category')\n"
                },
                {
                    "date": 1738231300943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,66 +43,59 @@\n         fields = '__all__'\n \n \n # Serializer for creating/updating event details (with full object serialization for related fields)\n+from rest_framework import serializers\n+from .models import Event, EventCategory, EventOrganizer, EventGallery\n+\n class EventWriteSerializers(serializers.ModelSerializer):\n-    # Nested serializers for related models (full object representation)\n-    category = EventCategorySerializer(many=True)  # For creating/updating full objects\n-    organizer = EventOrganizerSerializer(many=True)  # For creating/updating full objects\n-    gallery = EventGallerySerializer(many=True)  # For creating/updating full objects\n-    \n+    # Accept IDs instead of nested objects for many-to-many relationships\n+    category = serializers.PrimaryKeyRelatedField(\n+        many=True, queryset=EventCategory.objects.all()\n+    )\n+    organizer = serializers.PrimaryKeyRelatedField(\n+        many=True, queryset=EventOrganizer.objects.all()\n+    )\n+    gallery = serializers.PrimaryKeyRelatedField(\n+        many=True, queryset=EventGallery.objects.all()\n+    )\n+\n     class Meta:\n         model = Event\n         fields = '__all__'\n-    \n+\n     def create(self, validated_data):\n-        # Handle the creation of related fields (many-to-many relationships)\n-        category_data = validated_data.pop('category')\n-        organizer_data = validated_data.pop('organizer')\n-        gallery_data = validated_data.pop('gallery')\n+        # Extract related many-to-many field IDs\n+        category_ids = validated_data.pop('category', [])\n+        organizer_ids = validated_data.pop('organizer', [])\n+        gallery_ids = validated_data.pop('gallery', [])\n \n         # Create the Event instance\n         event = Event.objects.create(**validated_data)\n \n-        # Handle many-to-many relationships\n-        # Create related EventCategory, EventOrganizer, EventGallery\n-        for category in category_data:\n-            event.category.add(EventCategory.objects.create(**category))\n+        # Assign existing many-to-many objects using IDs\n+        event.category.set(category_ids)\n+        event.organizer.set(organizer_ids)\n+        event.gallery.set(gallery_ids)\n \n-        for organizer in organizer_data:\n-            event.organizer.add(EventOrganizer.objects.create(**organizer))\n-\n-        for image in gallery_data:\n-            event.gallery.add(EventGallery.objects.create(**image))\n-\n         return event\n \n     def update(self, instance, validated_data):\n-        # Handle the updating of related fields (many-to-many relationships)\n-        category_data = validated_data.pop('category', None)\n-        organizer_data = validated_data.pop('organizer', None)\n-        gallery_data = validated_data.pop('gallery', None)\n+        # Extract related many-to-many field IDs\n+        category_ids = validated_data.pop('category', None)\n+        organizer_ids = validated_data.pop('organizer', None)\n+        gallery_ids = validated_data.pop('gallery', None)\n \n-        # Update fields that are present in validated_data\n+        # Update normal fields\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n \n-        # Update many-to-many relationships\n-        if category_data is not None:\n-            instance.category.clear()  # Clear existing categories\n-            for category in category_data:\n-                instance.category.add(EventCategory.objects.create(**category))\n+        # Update many-to-many relationships only if provided\n+        if category_ids is not None:\n+            instance.category.set(category_ids)\n+        if organizer_ids is not None:\n+            instance.organizer.set(organizer_ids)\n+        if gallery_ids is not None:\n+            instance.gallery.set(gallery_ids)\n \n-        if organizer_data is not None:\n-            instance.organizer.clear()  # Clear existing organizers\n-            for organizer in organizer_data:\n-                instance.organizer.add(EventOrganizer.objects.create(**organizer))\n-\n-        if gallery_data is not None:\n-            instance.gallery.clear()  # Clear existing gallery images\n-            for image in gallery_data:\n-                instance.gallery.add(EventGallery.objects.create(**image))\n-\n-        # Save the updated instance\n         instance.save()\n-\n         return instance\n"
                },
                {
                    "date": 1738231308048,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,12 +42,8 @@\n         model = Event\n         fields = '__all__'\n \n \n-# Serializer for creating/updating event details (with full object serialization for related fields)\n-from rest_framework import serializers\n-from .models import Event, EventCategory, EventOrganizer, EventGallery\n-\n class EventWriteSerializers(serializers.ModelSerializer):\n     # Accept IDs instead of nested objects for many-to-many relationships\n     category = serializers.PrimaryKeyRelatedField(\n         many=True, queryset=EventCategory.objects.all()\n"
                },
                {
                    "date": 1738236663709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,56 +42,76 @@\n         model = Event\n         fields = '__all__'\n \n \n+\n class EventWriteSerializers(serializers.ModelSerializer):\n-    # Accept IDs instead of nested objects for many-to-many relationships\n-    category = serializers.PrimaryKeyRelatedField(\n-        many=True, queryset=EventCategory.objects.all()\n-    )\n-    organizer = serializers.PrimaryKeyRelatedField(\n-        many=True, queryset=EventOrganizer.objects.all()\n-    )\n-    gallery = serializers.PrimaryKeyRelatedField(\n-        many=True, queryset=EventGallery.objects.all()\n-    )\n+    \"\"\"\n+    Serializer for handling event creation and image uploads.\n+    Many-to-Many fields are assigned using IDs, while images are uploaded separately to `EventGallery`.\n+    \"\"\"\n \n+    category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n+    organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n+    gallery_images = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n+\n     class Meta:\n         model = Event\n         fields = '__all__'\n \n+    @transaction.atomic\n     def create(self, validated_data):\n-        # Extract related many-to-many field IDs\n+        \"\"\"\n+        Handles creation of an Event and uploads images to the gallery.\n+        \"\"\"\n+        # Extract Many-to-Many fields\n         category_ids = validated_data.pop('category', [])\n         organizer_ids = validated_data.pop('organizer', [])\n-        gallery_ids = validated_data.pop('gallery', [])\n \n+        # Extract images from request FILES\n+        images_data = []\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accepts multiple images\n+                images_data.append(file)\n+\n         # Create the Event instance\n         event = Event.objects.create(**validated_data)\n \n-        # Assign existing many-to-many objects using IDs\n+        # Assign Many-to-Many relationships\n         event.category.set(category_ids)\n         event.organizer.set(organizer_ids)\n-        event.gallery.set(gallery_ids)\n \n+        # Save images in EventGallery\n+        for image_file in images_data:\n+            EventGallery.objects.create(event=event, image=image_file)\n+\n         return event\n \n+    @transaction.atomic\n     def update(self, instance, validated_data):\n-        # Extract related many-to-many field IDs\n+        \"\"\"\n+        Handles updating of an Event and uploads new images to the gallery.\n+        \"\"\"\n+        # Extract Many-to-Many fields\n         category_ids = validated_data.pop('category', None)\n         organizer_ids = validated_data.pop('organizer', None)\n-        gallery_ids = validated_data.pop('gallery', None)\n \n-        # Update normal fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n+        # Extract images from request FILES\n+        images_data = []\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accepts multiple images\n+                images_data.append(file)\n \n-        # Update many-to-many relationships only if provided\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Update Many-to-Many relationships if provided\n         if category_ids is not None:\n             instance.category.set(category_ids)\n         if organizer_ids is not None:\n             instance.organizer.set(organizer_ids)\n-        if gallery_ids is not None:\n-            instance.gallery.set(gallery_ids)\n \n-        instance.save()\n-        return instance\n+        # Save new images in EventGallery\n+        for image_file in images_data:\n+            EventGallery.objects.create(event=instance, image=image_file)\n+\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738236672809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n from rest_framework import serializers\n from ..models import Event, EventCategory, EventOrganizer, EventGallery\n+from django.db import transaction\n \n+\n # Serializer for EventCategory\n class EventCategorySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventCategory\n"
                },
                {
                    "date": 1738237881446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -75,10 +75,11 @@\n             if key.startswith('images['):  # Accepts multiple images\n                 images_data.append(file)\n \n         # Create the Event instance\n-        event = Event.objects.create(**validated_data)\n+        event = super().create(validated_data)\n \n+\n         # Assign Many-to-Many relationships\n         event.category.set(category_ids)\n         event.organizer.set(organizer_ids)\n \n"
                },
                {
                    "date": 1738237895187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,8 @@\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n-\n         # Assign Many-to-Many relationships\n         event.category.set(category_ids)\n         event.organizer.set(organizer_ids)\n \n"
                },
                {
                    "date": 1738651944769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True)  # Full details of organizers\n-    gallery = EventGallerySerializer(many=True)  # Full details of gallery images\n+    image = EventGallerySerializer(many=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1738651950241,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n class EventRetrieveSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True)\n     organizer = EventOrganizerSerializer(many=True)\n-    gallery = EventGallerySerializer(many=True)  # Optional: For retrieving related images\n+    image = EventGallerySerializer(many=True)  # Optional: For retrieving related images\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1738651955477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n-    gallery_images = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n+    image = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1738651969262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n-    image = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n+    gallery_images = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1738651974446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n-    gallery_images = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n+    image = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1738666501931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n # Serializer for listing event details (basic view)\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n-    category = EventCategorySerializer(many=True)  # Full details of categories\n+    category = EventCategorySerializer(many=True,read)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True)  # Full details of organizers\n     image = EventGallerySerializer(many=True)  # Full details of gallery images\n     \n     class Meta:\n"
                },
                {
                    "date": 1738666507294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n # Serializer for listing event details (basic view)\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n-    category = EventCategorySerializer(many=True,read)  # Full details of categories\n+    category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True)  # Full details of organizers\n     image = EventGallerySerializer(many=True)  # Full details of gallery images\n     \n     class Meta:\n"
                },
                {
                    "date": 1738666513939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n # Serializer for listing event details (basic view)\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n-    organizer = EventOrganizerSerializer(many=True)  # Full details of organizers\n+    organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n     image = EventGallerySerializer(many=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n"
                },
                {
                    "date": 1738666522012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,22 +25,20 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = EventGallerySerializer(many=True)  # Full details of gallery images\n+    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n \n \n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n-    # Nested fields for related models (full object details)\n-    category = EventCategorySerializer(many=True)\n-    organizer = EventOrganizerSerializer(many=True)\n-    image = EventGallerySerializer(many=True)  # Optional: For retrieving related images\n-\n+   category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n+    organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n+    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     class Meta:\n         model = Event\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738666536453,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,9 @@\n \n \n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n-   category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n+    category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n     image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     class Meta:\n         model = Event\n"
                },
                {
                    "date": 1738669570153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n-    image = EventGallerySerializer(many=True, read_only=True, source='eventgallery_set')\n+    image = EventGallerySerializer(many=True, source='eventgallery_set')\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1738669591128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n-    image = EventGallerySerializer(many=True, source='eventgallery_set')\n+    image = EventGallerySerializer(many=True, source='image')\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1738834261567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,34 +45,32 @@\n \n \n class EventWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n-    Serializer for handling event creation and image uploads.\n-    Many-to-Many fields are assigned using IDs, while images are uploaded separately to `EventGallery`.\n+    Serializer for handling event creation with multiple images.\n+    Accepts images using `images[0]`, `images[1]`, ..., not a single `image` key.\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n-    image = EventGallerySerializer(many=True, source='image')\n \n     class Meta:\n         model = Event\n         fields = '__all__'\n \n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n-        Handles creation of an Event and uploads images to the gallery.\n+        Handles event creation and image uploads.\n         \"\"\"\n+        request = self.context.get(\"request\")\n+\n         # Extract Many-to-Many fields\n-        category_ids = validated_data.pop('category', [])\n-        organizer_ids = validated_data.pop('organizer', [])\n+        category_ids = validated_data.pop(\"category\", [])\n+        organizer_ids = validated_data.pop(\"organizer\", [])\n \n-        # Extract images from request FILES\n-        images_data = []\n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accepts multiple images\n-                images_data.append(file)\n+        # Extract multiple images from `images[0]`, `images[1]`, ...\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n@@ -88,21 +86,20 @@\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n-        Handles updating of an Event and uploads new images to the gallery.\n+        Handles event updates and new image uploads.\n         \"\"\"\n+        request = self.context.get(\"request\")\n+\n         # Extract Many-to-Many fields\n-        category_ids = validated_data.pop('category', None)\n-        organizer_ids = validated_data.pop('organizer', None)\n+        category_ids = validated_data.pop(\"category\", None)\n+        organizer_ids = validated_data.pop(\"organizer\", None)\n \n-        # Extract images from request FILES\n-        images_data = []\n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accepts multiple images\n-                images_data.append(file)\n+        # Extract multiple images from `images[0]`, `images[1]`, ...\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n \n-        # Update instance fields\n+        # Update the event instance\n         instance = super().update(instance, validated_data)\n \n         # Update Many-to-Many relationships if provided\n         if category_ids is not None:\n"
                },
                {
                    "date": 1738834475791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n \n class EventWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling event creation with multiple images.\n-    Accepts images using `images[0]`, `images[1]`, ..., not a single `image` key.\n+    Converts `category` and `organizer` from string to list of integers.\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n@@ -56,8 +56,20 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n \n+    def to_internal_value(self, data):\n+        \"\"\"\n+        Converts string-based `category` and `organizer` fields to lists of integers.\n+        \"\"\"\n+        if isinstance(data.get(\"category\"), str):\n+            data[\"category\"] = [int(i.strip()) for i in data[\"category\"].split(\",\")]\n+\n+        if isinstance(data.get(\"organizer\"), str):\n+            data[\"organizer\"] = [int(i.strip()) for i in data[\"organizer\"].split(\",\")]\n+\n+        return super().to_internal_value(data)\n+\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles event creation and image uploads.\n"
                },
                {
                    "date": 1738834647670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,12 +43,34 @@\n         fields = '__all__'\n \n \n \n+def str_to_list(data, value_to_convert):\n+    \"\"\"\n+    Converts a string representation of a list into an actual list if necessary.\n+    \"\"\"\n+    try:\n+        mutable_data = data.dict()  # Convert QueryDict to standard dict if necessary\n+    except Exception:\n+        mutable_data = data\n+\n+    value_to_convert_data = mutable_data.get(value_to_convert)\n+\n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data  # If already a list, return unchanged\n+\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)  # Convert string to list\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+\n+\n class EventWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling event creation with multiple images.\n-    Converts `category` and `organizer` from string to list of integers.\n+    Uses `str_to_list()` to convert `category` and `organizer` from string to list.\n     \"\"\"\n \n     category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n     organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n@@ -58,15 +80,15 @@\n         fields = '__all__'\n \n     def to_internal_value(self, data):\n         \"\"\"\n-        Converts string-based `category` and `organizer` fields to lists of integers.\n+        Converts `category` and `organizer` from string to list using `str_to_list()`.\n         \"\"\"\n-        if isinstance(data.get(\"category\"), str):\n-            data[\"category\"] = [int(i.strip()) for i in data[\"category\"].split(\",\")]\n+        if data.get(\"category\"):\n+            data = str_to_list(data, \"category\")\n \n-        if isinstance(data.get(\"organizer\"), str):\n-            data[\"organizer\"] = [int(i.strip()) for i in data[\"organizer\"].split(\",\")]\n+        if data.get(\"organizer\"):\n+            data = str_to_list(data, \"organizer\")\n \n         return super().to_internal_value(data)\n \n     @transaction.atomic\n"
                },
                {
                    "date": 1738834658084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n from rest_framework import serializers\n from ..models import Event, EventCategory, EventOrganizer, EventGallery\n from django.db import transaction\n+import ast\n \n \n # Serializer for EventCategory\n class EventCategorySerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738835359599,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,11 +72,14 @@\n     Serializer for handling event creation with multiple images.\n     Uses `str_to_list()` to convert `category` and `organizer` from string to list.\n     \"\"\"\n \n-    category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n-    organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n+    category = EventCategorySerializer(many=True, read_only=True)\n+    organizer = EventOrganizerSerializer(many=True, read_only=True)\n \n+    category_ids = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all(), write_only=True, source=\"category\")\n+    organizer_ids = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all(), write_only=True, source=\"organizer\")\n+\n     class Meta:\n         model = Event\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738835508634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,86 +44,11 @@\n         fields = '__all__'\n \n \n \n-def str_to_list(data, value_to_convert):\n-    \"\"\"\n-    Converts a string representation of a list into an actual list if necessary.\n-    \"\"\"\n-    try:\n-        mutable_data = data.dict()  # Convert QueryDict to standard dict if necessary\n-    except Exception:\n-        mutable_data = data\n \n-    value_to_convert_data = mutable_data.get(value_to_convert)\n \n-    if isinstance(value_to_convert_data, list):\n-        return mutable_data  # If already a list, return unchanged\n-\n-    try:\n-        variations = ast.literal_eval(value_to_convert_data)  # Convert string to list\n-        mutable_data[value_to_convert] = variations\n-        return mutable_data\n-    except ValueError as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n-\n-\n-class EventWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling event creation with multiple images.\n-    Uses `str_to_list()` to convert `category` and `organizer` from string to list.\n-    \"\"\"\n-\n-    category = EventCategorySerializer(many=True, read_only=True)\n-    organizer = EventOrganizerSerializer(many=True, read_only=True)\n-\n-    category_ids = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all(), write_only=True, source=\"category\")\n-    organizer_ids = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all(), write_only=True, source=\"organizer\")\n-\n-    class Meta:\n-        model = Event\n-        fields = '__all__'\n-\n-    def to_internal_value(self, data):\n-        \"\"\"\n-        Converts `category` and `organizer` from string to list using `str_to_list()`.\n-        \"\"\"\n-        if data.get(\"category\"):\n-            data = str_to_list(data, \"category\")\n-\n-        if data.get(\"organizer\"):\n-            data = str_to_list(data, \"organizer\")\n-\n-        return super().to_internal_value(data)\n-\n     @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles event creation and image uploads.\n-        \"\"\"\n-        request = self.context.get(\"request\")\n-\n-        # Extract Many-to-Many fields\n-        category_ids = validated_data.pop(\"category\", [])\n-        organizer_ids = validated_data.pop(\"organizer\", [])\n-\n-        # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n-\n-        # Create the Event instance\n-        event = super().create(validated_data)\n-\n-        # Assign Many-to-Many relationships\n-        event.category.set(category_ids)\n-        event.organizer.set(organizer_ids)\n-\n-        # Save images in EventGallery\n-        for image_file in images_data:\n-            EventGallery.objects.create(event=event, image=image_file)\n-\n-        return event\n-\n-    @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n         Handles event updates and new image uploads.\n         \"\"\"\n"
                },
                {
                    "date": 1738835905793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,14 +44,87 @@\n         fields = '__all__'\n \n \n \n+def str_to_list(data, value_to_convert):\n+    \"\"\"\n+    Converts a string representation of a list into an actual list if necessary.\n+    \"\"\"\n+    try:\n+        mutable_data = data.dict()  # Convert QueryDict to standard dict if necessary\n+    except Exception:\n+        mutable_data = data\n \n+    value_to_convert_data = mutable_data.get(value_to_convert)\n \n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data  # If already a list, return unchanged\n+\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)  # Convert string to list\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+\n+\n+class EventWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling event creation with multiple images.\n+    Uses `str_to_list()` to convert `category` and `organizer` from string to list.\n+    \"\"\"\n+\n+    category = serializers.PrimaryKeyRelatedField(many=True, queryset=EventCategory.objects.all())\n+    organizer = serializers.PrimaryKeyRelatedField(many=True, queryset=EventOrganizer.objects.all())\n+\n+    class Meta:\n+        model = Event\n+        fields = '__all__'\n+\n+    def to_internal_value(self, data):\n+        \"\"\"\n+        Converts `category` and `organizer` from string to list using `str_to_list()`.\n+        \"\"\"\n+        if data.get(\"category\"):\n+            data = str_to_list(data, \"category\")\n+\n+        if data.get(\"organizer\"):\n+            data = str_to_list(data, \"organizer\")\n+\n+        return super().to_internal_value(data)\n+\n     @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles event creation and image uploads.\n+        \"\"\"\n+        request = self.context.get(\"request\")\n+\n+        # Extract Many-to-Many fields\n+        category_ids = validated_data.pop(\"category\", [])\n+        organizer_ids = validated_data.pop(\"organizer\", [])\n+\n+        # Extract multiple images from `images[0]`, `images[1]`, ...\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+\n+        # Create the Event instance\n+        event = super().create(validated_data)\n+\n+        # Assign Many-to-Many relationships\n+        event.category.set(category_ids)\n+        event.organizer.set(organizer_ids)\n+\n+        # Save images in EventGallery\n+        for image_file in images_data:\n+            EventGallery.objects.create(event=event, image=image_file)\n+\n+        return event\n+\n+     @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n-        Handles event updates and new image uploads.\n+        Handles full (PUT) and partial (PATCH) updates for events.\n+        Supports new image uploads and Many-to-Many relationship updates.\n         \"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract Many-to-Many fields\n"
                },
                {
                    "date": 1738835911238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,32 +119,32 @@\n \n         return event\n \n      @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles full (PUT) and partial (PATCH) updates for events.\n-        Supports new image uploads and Many-to-Many relationship updates.\n-        \"\"\"\n-        request = self.context.get(\"request\")\n+        def update(self, instance, validated_data):\n+            \"\"\"\n+            Handles full (PUT) and partial (PATCH) updates for events.\n+            Supports new image uploads and Many-to-Many relationship updates.\n+            \"\"\"\n+            request = self.context.get(\"request\")\n \n-        # Extract Many-to-Many fields\n-        category_ids = validated_data.pop(\"category\", None)\n-        organizer_ids = validated_data.pop(\"organizer\", None)\n+            # Extract Many-to-Many fields\n+            category_ids = validated_data.pop(\"category\", None)\n+            organizer_ids = validated_data.pop(\"organizer\", None)\n \n-        # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+            # Extract multiple images from `images[0]`, `images[1]`, ...\n+            images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n \n-        # Update the event instance\n-        instance = super().update(instance, validated_data)\n+            # Update the event instance\n\\ No newline at end of file\n+            instance = super().update(instance, validated_data)\n \n-        # Update Many-to-Many relationships if provided\n-        if category_ids is not None:\n-            instance.category.set(category_ids)\n-        if organizer_ids is not None:\n-            instance.organizer.set(organizer_ids)\n+            # Update Many-to-Many relationships if provided\n+            if category_ids is not None:\n+                instance.category.set(category_ids)\n+            if organizer_ids is not None:\n+                instance.organizer.set(organizer_ids)\n \n-        # Save new images in EventGallery\n-        for image_file in images_data:\n-            EventGallery.objects.create(event=instance, image=image_file)\n+            # Save new images in EventGallery\n+            for image_file in images_data:\n+                EventGallery.objects.create(event=instance, image=image_file)\n \n-        return instance\n+            return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739085095131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,9 @@\n \n def str_to_list(data, value_to_convert):\n     \"\"\"\n     Converts a string representation of a list into an actual list if necessary.\n+    Ensures that single values are also wrapped into a list.\n     \"\"\"\n     try:\n         mutable_data = data.dict()  # Convert QueryDict to standard dict if necessary\n     except Exception:\n@@ -58,8 +59,13 @@\n \n     if isinstance(value_to_convert_data, list):\n         return mutable_data  # If already a list, return unchanged\n \n+    # If it's a single item, wrap it in a list\n+    if value_to_convert_data and not isinstance(value_to_convert_data, list):\n+        mutable_data[value_to_convert] = [value_to_convert_data]\n+        return mutable_data\n+\n     try:\n         variations = ast.literal_eval(value_to_convert_data)  # Convert string to list\n         mutable_data[value_to_convert] = variations\n         return mutable_data\n@@ -118,33 +124,33 @@\n             EventGallery.objects.create(event=event, image=image_file)\n \n         return event\n \n-     @transaction.atomic\n-        def update(self, instance, validated_data):\n-            \"\"\"\n-            Handles full (PUT) and partial (PATCH) updates for events.\n-            Supports new image uploads and Many-to-Many relationship updates.\n-            \"\"\"\n-            request = self.context.get(\"request\")\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles full (PUT) and partial (PATCH) updates for events.\n+        Supports new image uploads and Many-to-Many relationship updates.\n+        \"\"\"\n+        request = self.context.get(\"request\")\n \n-            # Extract Many-to-Many fields\n-            category_ids = validated_data.pop(\"category\", None)\n-            organizer_ids = validated_data.pop(\"organizer\", None)\n+        # Extract Many-to-Many fields\n+        category_ids = validated_data.pop(\"category\", None)\n+        organizer_ids = validated_data.pop(\"organizer\", None)\n \n-            # Extract multiple images from `images[0]`, `images[1]`, ...\n-            images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+        # Extract multiple images from `images[0]`, `images[1]`, ...\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n \n-            # Update the event instance\n-            instance = super().update(instance, validated_data)\n\\ No newline at end of file\n+        # Update the event instance\n+        instance = super().update(instance, validated_data)\n \n-            # Update Many-to-Many relationships if provided\n-            if category_ids is not None:\n-                instance.category.set(category_ids)\n-            if organizer_ids is not None:\n-                instance.organizer.set(organizer_ids)\n+        # Update Many-to-Many relationships if provided\n+        if category_ids is not None:\n+            instance.category.set(category_ids)\n+        if organizer_ids is not None:\n+            instance.organizer.set(organizer_ids)\n \n-            # Save new images in EventGallery\n-            for image_file in images_data:\n-                EventGallery.objects.create(event=instance, image=image_file)\n+        # Save new images in EventGallery\n+        for image_file in images_data:\n+            EventGallery.objects.create(event=instance, image=image_file)\n \n-            return instance\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739085439984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,14 @@\n         fields = '__all__'\n \n \n \n+import ast\n+\n def str_to_list(data, value_to_convert):\n     \"\"\"\n     Converts a string representation of a list into an actual list if necessary.\n-    Ensures that single values are also wrapped into a list.\n+    Ensures that single values or comma-separated values are correctly converted into lists of integers.\n     \"\"\"\n     try:\n         mutable_data = data.dict()  # Convert QueryDict to standard dict if necessary\n     except Exception:\n@@ -59,9 +61,19 @@\n \n     if isinstance(value_to_convert_data, list):\n         return mutable_data  # If already a list, return unchanged\n \n-    # If it's a single item, wrap it in a list\n+    # If it's a comma-separated string, convert it to a list of integers\n+    if isinstance(value_to_convert_data, str):\n+        if ',' in value_to_convert_data:\n+            # Split the string by commas, strip spaces, and convert each part to an integer\n+            mutable_data[value_to_convert] = [int(x.strip()) for x in value_to_convert_data.split(',')]\n+        else:\n+            # If it's a single value, convert it to a list of one integer\n+            mutable_data[value_to_convert] = [int(value_to_convert_data.strip())]\n+        return mutable_data\n+\n+    # If it's a single item (not a list or string), wrap it in a list\n     if value_to_convert_data and not isinstance(value_to_convert_data, list):\n         mutable_data[value_to_convert] = [value_to_convert_data]\n         return mutable_data\n \n@@ -72,8 +84,9 @@\n     except ValueError as e:\n         raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n \n \n+\n class EventWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling event creation with multiple images.\n     Uses `str_to_list()` to convert `category` and `organizer` from string to list.\n"
                },
                {
                    "date": 1740389444500,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    images = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1740389450636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n # Serializer for EventOrganizer\n class EventOrganizerSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventOrganizer\n-        fields = ['id', 'name', 'image', 'link', 'is_show', 'created_date_time', 'created_date', 'updated_date']\n+        fields = ['id', 'name', 'images', 'link', 'is_show', 'created_date_time', 'created_date', 'updated_date']\n \n # Serializer for EventGallery\n class EventGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -37,9 +37,9 @@\n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    images = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     class Meta:\n         model = Event\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1740389457193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n # Serializer for EventOrganizer\n class EventOrganizerSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventOrganizer\n-        fields = ['id', 'name', 'images', 'link', 'is_show', 'created_date_time', 'created_date', 'updated_date']\n+        fields = ['id', 'name', 'image', 'link', 'is_show', 'created_date_time', 'created_date', 'updated_date']\n \n # Serializer for EventGallery\n class EventGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1740389464825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n # Serializer for EventGallery\n class EventGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventGallery\n-        fields = ['id', 'image', 'is_featured_image', 'created_date_time', 'created_date', 'updated_date']\n+        fields = ['id', 'images', 'is_featured_image', 'created_date_time', 'created_date', 'updated_date']\n \n # Serializer for listing event details (basic view)\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n"
                },
                {
                    "date": 1740390127444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n         event.organizer.set(organizer_ids)\n \n         # Save images in EventGallery\n         for image_file in images_data:\n-            EventGallery.objects.create(event=event, image=image_file)\n+            EventGallery.objects.create(event=event, images=image_file)\n \n         return event\n \n     @transaction.atomic\n"
                },
                {
                    "date": 1740390137835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,7 +163,7 @@\n             instance.organizer.set(organizer_ids)\n \n         # Save new images in EventGallery\n         for image_file in images_data:\n-            EventGallery.objects.create(event=instance, image=image_file)\n+            EventGallery.objects.create(event=instance, s=image_file)\n \n         return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740396631381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n # Serializer for EventOrganizer\n class EventOrganizerSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventOrganizer\n-        fields = ['id', 'name', 'image', 'link', 'is_show', 'created_date_time', 'created_date', 'updated_date']\n+        fields = __\n \n # Serializer for EventGallery\n class EventGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -163,7 +163,7 @@\n             instance.organizer.set(organizer_ids)\n \n         # Save new images in EventGallery\n         for image_file in images_data:\n-            EventGallery.objects.create(event=instance, s=image_file)\n+            EventGallery.objects.create(event=instance, images=image_file)\n \n         return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740396640355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,15 @@\n # Serializer for EventOrganizer\n class EventOrganizerSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventOrganizer\n-        fields = __\n+        fields = '__all__'\n \n # Serializer for EventGallery\n class EventGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventGallery\n-        fields = ['id', 'images', 'is_featured_image', 'created_date_time', 'created_date', 'updated_date']\n+        fields = \n \n # Serializer for listing event details (basic view)\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n"
                },
                {
                    "date": 1740396899872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n # Serializer for EventGallery\n class EventGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = EventGallery\n-        fields = \n+        fields = '__all__'\n \n # Serializer for listing event details (basic view)\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n@@ -37,9 +37,9 @@\n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    images = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     class Meta:\n         model = Event\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1740396923185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    images = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n@@ -122,9 +122,9 @@\n         category_ids = validated_data.pop(\"category\", [])\n         organizer_ids = validated_data.pop(\"organizer\", [])\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n"
                },
                {
                    "date": 1740396935243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n         category_ids = validated_data.pop(\"category\", [])\n         organizer_ids = validated_data.pop(\"organizer\", [])\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n"
                },
                {
                    "date": 1740396948691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n         event.organizer.set(organizer_ids)\n \n         # Save images in EventGallery\n         for image_file in images_data:\n-            EventGallery.objects.create(event=event, images=image_file)\n+            EventGallery.objects.create(event=event, image=image_file)\n \n         return event\n \n     @transaction.atomic\n@@ -150,9 +150,9 @@\n         category_ids = validated_data.pop(\"category\", None)\n         organizer_ids = validated_data.pop(\"organizer\", None)\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n         # Update the event instance\n         instance = super().update(instance, validated_data)\n \n"
                },
                {
                    "date": 1740397059201,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         category_ids = validated_data.pop(\"category\", None)\n         organizer_ids = validated_data.pop(\"organizer\", None)\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n \n         # Update the event instance\n         instance = super().update(instance, validated_data)\n \n@@ -163,7 +163,7 @@\n             instance.organizer.set(organizer_ids)\n \n         # Save new images in EventGallery\n         for image_file in images_data:\n-            EventGallery.objects.create(event=instance, images=image_file)\n+            EventGallery.objects.create(event=instance, image=image_file)\n \n         return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740410812149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n         category_ids = validated_data.pop(\"category\", [])\n         organizer_ids = validated_data.pop(\"organizer\", [])\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n"
                },
                {
                    "date": 1740410941086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n         category_ids = validated_data.pop(\"category\", [])\n         organizer_ids = validated_data.pop(\"organizer\", [])\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n"
                },
                {
                    "date": 1740411266573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n         category_ids = validated_data.pop(\"category\", [])\n         organizer_ids = validated_data.pop(\"organizer\", [])\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n"
                },
                {
                    "date": 1740411279673,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         category_ids = validated_data.pop(\"category\", None)\n         organizer_ids = validated_data.pop(\"organizer\", None)\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"images[\")]\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n         # Update the event instance\n         instance = super().update(instance, validated_data)\n \n"
                },
                {
                    "date": 1741158589027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,32 @@\n         if data.get(\"organizer\"):\n             data = str_to_list(data, \"organizer\")\n \n         return super().to_internal_value(data)\n+    def to_representation(self, instance):\n+        attrs = super().to_representation(instance)\n \n+        # Make the gallery URLs absolute\n+        for item in attrs['information_gallery']:\n+            if item.get('image'):\n+                item['image'] = self.get_absolute_url(item['image'])\n+\n+        # Make the file URLs absolute\n+        for item in attrs['information_files']:\n+            if item.get('file'):\n+                item['file'] = self.get_absolute_url(item['file'])\n+\n+        return attrs\n+\n+    def get_absolute_url(self, file_field):\n+        \"\"\"\n+        Returns the absolute URL for a file or image field.\n+        \"\"\"\n+        request = self.context.get('request')\n+        if not request:\n+            return file_field.url\n+        return request.build_absolute_uri(file_field.url)\n+\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles event creation and image uploads.\n"
                },
                {
                    "date": 1741158630706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,13 +117,8 @@\n         for item in attrs['information_gallery']:\n             if item.get('image'):\n                 item['image'] = self.get_absolute_url(item['image'])\n \n-        # Make the file URLs absolute\n-        for item in attrs['information_files']:\n-            if item.get('file'):\n-                item['file'] = self.get_absolute_url(item['file'])\n-\n         return attrs\n \n     def get_absolute_url(self, file_field):\n         \"\"\"\n"
                },
                {
                    "date": 1741158695000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n     def to_representation(self, instance):\n         attrs = super().to_representation(instance)\n \n         # Make the gallery URLs absolute\n-        for item in attrs['information_gallery']:\n+        for item in attrs['image']:\n             if item.get('image'):\n                 item['image'] = self.get_absolute_url(item['image'])\n \n         return attrs\n"
                },
                {
                    "date": 1741158815511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,26 +110,26 @@\n             data = str_to_list(data, \"organizer\")\n \n         return super().to_internal_value(data)\n     def to_representation(self, instance):\n-        attrs = super().to_representation(instance)\n+    attrs = super().to_representation(instance)\n \n-        # Make the gallery URLs absolute\n-        for item in attrs['image']:\n-            if item.get('image'):\n-                item['image'] = self.get_absolute_url(item['image'])\n+    # Ensure 'image' field is present and is a string (URL path)\n+    if 'image' in attrs and isinstance(attrs['image'], str):\n+        attrs['image'] = self.get_absolute_url(attrs['image'])\n \n-        return attrs\n+    return attrs\n \n-    def get_absolute_url(self, file_field):\n-        \"\"\"\n-        Returns the absolute URL for a file or image field.\n-        \"\"\"\n-        request = self.context.get('request')\n-        if not request:\n-            return file_field.url\n-        return request.build_absolute_uri(file_field.url)\n+def get_absolute_url(self, image_path):\n+    \"\"\"\n+    Returns the absolute URL for the given image path.\n+    \"\"\"\n+    request = self.context.get('request')\n+    if request and image_path:\n+        return request.build_absolute_uri(image_path)  # Convert relative path to absolute URL\n+    return image_path  # Return as is if request is unavailable\n \n+\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles event creation and image uploads.\n"
                },
                {
                    "date": 1741158821292,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,24 +110,24 @@\n             data = str_to_list(data, \"organizer\")\n \n         return super().to_internal_value(data)\n     def to_representation(self, instance):\n-    attrs = super().to_representation(instance)\n+        attrs = super().to_representation(instance)\n \n-    # Ensure 'image' field is present and is a string (URL path)\n-    if 'image' in attrs and isinstance(attrs['image'], str):\n-        attrs['image'] = self.get_absolute_url(attrs['image'])\n+        # Ensure 'image' field is present and is a string (URL path)\n+        if 'image' in attrs and isinstance(attrs['image'], str):\n+            attrs['image'] = self.get_absolute_url(attrs['image'])\n \n-    return attrs\n+        return attrs\n \n-def get_absolute_url(self, image_path):\n-    \"\"\"\n-    Returns the absolute URL for the given image path.\n-    \"\"\"\n-    request = self.context.get('request')\n-    if request and image_path:\n-        return request.build_absolute_uri(image_path)  # Convert relative path to absolute URL\n-    return image_path  # Return as is if request is unavailable\n+    def get_absolute_url(self, image_path):\n+        \"\"\"\n+        Returns the absolute URL for the given image path.\n+        \"\"\"\n+        request = self.context.get('request')\n+        if request and image_path:\n+            return request.build_absolute_uri(image_path)  # Convert relative path to absolute URL\n+        return image_path  # Return as is if request is unavailable\n \n \n     @transaction.atomic\n     def create(self, validated_data):\n"
                },
                {
                    "date": 1741166370466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    image = #EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1741166375928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = #EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    image = serializers#EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1741166382361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = serializers#EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    image = serializers.SerializerMethodField#EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1741166388598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n class EventListSerializers(serializers.ModelSerializer):\n     # Nested fields for related models (full object details)\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = serializers.SerializerMethodField#EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    image = serializers.SerializerMethodField()#EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n"
                },
                {
                    "date": 1741166394629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,8 +31,9 @@\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n+        \n \n \n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741166403494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n-        \n+    def get_image\n \n \n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741166412086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,10 @@\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n-    def get_image\n+    def get_image(self, obj):\n+        return [img.image.url for img in obj.eventgallery_set.all()]\n \n \n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741166417907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        return [img.image.url for img in obj.eventgallery_set.all()]\n+        \n \n \n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741166424899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,10 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        \n+        class = QuerySet(models.QuerySet):\n+            \n \n \n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741166434175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        class = QuerySet(models.QuerySet):\n+        query = \n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166440474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        query = \n+        query = O\n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166448302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        query = O\n+        query = object.\n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166458899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        query = object.\n+        query = obj.image\n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166466169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        query = obj.image\n+        query = obj.image.all().fil\n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166471961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        query = obj.image.all().fil\n+        query = obj.image.all().order_by('id')\n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166481244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,10 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n-        query = obj.image.all().order_by('id')\n+        query = obj.image.all().order_by('position')\n+        \n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166490561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n         query = obj.image.all().order_by('position')\n-        \n+        serializers = \n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166495724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,10 @@\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n         query = obj.image.all().order_by('position')\n-        serializers = \n+        serializers = EventGallerySerializer(query, many=True)\n+        \n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166557823,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,12 +31,13 @@\n     \n     class Meta:\n         model = Event\n         fields = '__all__'\n+        \n     def get_image(self, obj):\n         query = obj.image.all().order_by('position')\n         serializers = EventGallerySerializer(query, many=True)\n-        \n+        return serializers.data\n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741166567220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,12 @@\n     image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n     class Meta:\n         model = Event\n         fields = '__all__'\n+     def get_image(self, obj):\n+        query = obj.image.all().order_by('position')\n+        serializers = EventGallerySerializer(query, many=True)\n+        return serializers.data\n \n \n \n import ast\n"
                },
                {
                    "date": 1741166577839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,13 +43,14 @@\n # Serializer for retrieving complete event details (detailed view)\n class EventRetrieveSerializers(serializers.ModelSerializer):\n     category = EventCategorySerializer(many=True,read_only=True)  # Full details of categories\n     organizer = EventOrganizerSerializer(many=True,read_only=True)  # Full details of organizers\n-    image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    # image = EventGallerySerializer(many=True,read_only=True)  # Full details of gallery images\n+    image = serializers.SerializerMethodField()\n     class Meta:\n         model = Event\n         fields = '__all__'\n-     def get_image(self, obj):\n+    def get_image(self, obj):\n         query = obj.image.all().order_by('position')\n         serializers = EventGallerySerializer(query, many=True)\n         return serializers.data\n \n"
                },
                {
                    "date": 1741166851431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,15 +48,22 @@\n     image = serializers.SerializerMethodField()\n     class Meta:\n         model = Event\n         fields = '__all__'\n-    def get_image(self, obj):\n-        query = obj.image.all().order_by('position')\n-        serializers = EventGallerySerializer(query, many=True)\n-        return serializers.data\n+    def get_event_images(self, obj):\n+        request = self.context.get('request')  # Get request from serializer context\n+        query = obj.images.all().order_by('position')  # Ensure correct related_name\n \n+        images = []\n+        for image_obj in query:\n+            if image_obj.image:  # Ensure image exists\n+                image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n+                images.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n \n+        return images\n \n+\n+\n import ast\n \n def str_to_list(data, value_to_convert):\n     \"\"\"\n"
                },
                {
                    "date": 1741166859436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,19 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n         \n-    def get_image(self, obj):\n-        query = obj.image.all().order_by('position')\n-        serializers = EventGallerySerializer(query, many=True)\n-        return serializers.data\n+    def get_event_images(self, obj):\n+        request = self.context.get('request')  # Get request from serializer context\n+        query = obj.images.all().order_by('position')  # Ensure correct related_name\n+\n+        images = []\n+        for image_obj in query:\n+            if image_obj.image:  # Ensure image exists\n+                image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n+                images.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n+\n+        return images\n             \n \n \n # Serializer for retrieving complete event details (detailed view)\n"
                },
                {
                    "date": 1741167183565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,22 +137,22 @@\n         return super().to_internal_value(data)\n     def to_representation(self, instance):\n         attrs = super().to_representation(instance)\n \n-        # Ensure 'image' field is present and is a string (URL path)\n-        if 'image' in attrs and isinstance(attrs['image'], str):\n-            attrs['image'] = self.get_absolute_url(attrs['image'])\n+        # Ensure 'image' field is present and is a valid file\n+        if 'image' in attrs and attrs['image']:\n+            attrs['image'] = self.get_absolute_url(instance.image)\n \n         return attrs\n \n-    def get_absolute_url(self, image_path):\n+    def get_absolute_url(self, image_field):\n         \"\"\"\n-        Returns the absolute URL for the given image path.\n+        Returns the absolute URL for the given image field.\n         \"\"\"\n         request = self.context.get('request')\n-        if request and image_path:\n-            return request.build_absolute_uri(image_path)  # Convert relative path to absolute URL\n-        return image_path  # Return as is if request is unavailable\n+        if request and image_field:\n+            return request.build_absolute_uri(image_field.url)  # Ensure we use .url\n+        return image_field.url if image_field else None  # Fallback in case request is missing\n \n \n     @transaction.atomic\n     def create(self, validated_data):\n"
                },
                {
                    "date": 1741167192228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,15 +144,15 @@\n \n         return attrs\n \n     def get_absolute_url(self, image_field):\n-        \"\"\"\n-        Returns the absolute URL for the given image field.\n-        \"\"\"\n-        request = self.context.get('request')\n-        if request and image_field:\n-            return request.build_absolute_uri(image_field.url)  # Ensure we use .url\n-        return image_field.url if image_field else None  # Fallback in case request is missing\n+            \"\"\"\n+            Returns the absolute URL for the given image field.\n+            \"\"\"\n+            request = self.context.get('request')\n+            if request and image_field:\n+                return request.build_absolute_uri(image_field.url)  # Ensure we use .url\n+            return image_field.url if image_field else None  # Fallback in case request is missing\n \n \n     @transaction.atomic\n     def create(self, validated_data):\n"
                },
                {
                    "date": 1741167336837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n         \n-    def get_event_images(self, obj):\n+    def get_images(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n         query = obj.images.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n"
                },
                {
                    "date": 1741167346931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n from rest_framework import serializers\n from ..models import Event, EventCategory, EventOrganizer, EventGallery\n from django.db import transaction\n import ast\n+import\n \n \n # Serializer for EventCategory\n class EventCategorySerializer(serializers.ModelSerializer):\n@@ -32,9 +33,9 @@\n     class Meta:\n         model = Event\n         fields = '__all__'\n         \n-    def get_images(self, obj):\n+    def get_image(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n         query = obj.images.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n"
                },
                {
                    "date": 1741167357368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import serializers\n from ..models import Event, EventCategory, EventOrganizer, EventGallery\n from django.db import transaction\n import ast\n-import\n+from \n \n \n # Serializer for EventCategory\n class EventCategorySerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741167369905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import serializers\n from ..models import Event, EventCategory, EventOrganizer, EventGallery\n from django.db import transaction\n import ast\n-from \n+from django.conf import settings\n \n \n # Serializer for EventCategory\n class EventCategorySerializer(serializers.ModelSerializer):\n@@ -56,9 +56,9 @@\n     image = serializers.SerializerMethodField()\n     class Meta:\n         model = Event\n         fields = '__all__'\n-    def get_event_images(self, obj):\n+    def get_images(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n         query = obj.images.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n"
                },
                {
                    "date": 1741167396252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,17 +56,17 @@\n     image = serializers.SerializerMethodField()\n     class Meta:\n         model = Event\n         fields = '__all__'\n-    def get_images(self, obj):\n+    def get_image(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n         query = obj.images.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n                 image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n-                images.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n+                image.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n \n         return images\n \n \n"
                },
                {
                    "date": 1741167404239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n                 image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n-                image.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n+                images.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n \n         return images\n \n \n"
                },
                {
                    "date": 1741167409820,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         fields = '__all__'\n         \n     def get_image(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n-        query = obj.images.all().order_by('position')  # Ensure correct related_name\n+        query = obj.image.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n@@ -58,9 +58,9 @@\n         model = Event\n         fields = '__all__'\n     def get_image(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n-        query = obj.images.all().order_by('position')  # Ensure correct related_name\n+        query = obj.image.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n"
                },
                {
                    "date": 1741167472360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n                 image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n-                images.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n+                images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n \n         return images\n             \n \n"
                },
                {
                    "date": 1741167486016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n                 image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n-                images.append({\"id\": image_obj.id, \"image_url\": image_url, \"position\": image_obj.position})\n+                images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n \n         return images\n \n \n"
                },
                {
                    "date": 1741502995175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,18 @@\n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n                 image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n-                images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n+                # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n+                images.append({\n+        \"id\": image_obj.id,\n+        \"image\": image_url,\n+        \"is_featured\": image_obj.is_featured,\n+        \"position\": image_obj.position if hasattr(image_obj, 'position') else 0,  # Default to 0 if not present\n+        \"created_date_time\": image_obj.created_date_time,\n+        \"created_date\": image_obj.created_date,\n+        \"updated_date\": image_obj.updated_date,\n+    })\n \n         return images\n             \n \n"
                },
                {
                    "date": 1741503000414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,16 +43,16 @@\n             if image_obj.image:  # Ensure image exists\n                 image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n-        \"id\": image_obj.id,\n-        \"image\": image_url,\n-        \"is_featured\": image_obj.is_featured,\n-        \"position\": image_obj.position if hasattr(image_obj, 'position') else 0,  # Default to 0 if not present\n-        \"created_date_time\": image_obj.created_date_time,\n-        \"created_date\": image_obj.created_date,\n-        \"updated_date\": image_obj.updated_date,\n-    })\n+                    \"id\": image_obj.id,\n+                    \"image\": image_url,\n+                    \"is_featured\": image_obj.is_featured,\n+                    \"position\": image_obj.position if hasattr(image_obj, 'position') else 0,  # Default to 0 if not present\n+                    \"created_date_time\": image_obj.created_date_time,\n+                    \"created_date\": image_obj.created_date,\n+                    \"updated_date\": image_obj.updated_date,\n+                })\n \n         return images\n             \n \n"
                },
                {
                    "date": 1741503035742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n-                    \"is_featured\": image_obj.is_featured,\n+                    \"is_featured\": image_obj.is_featured_image,\n                     \"position\": image_obj.position if hasattr(image_obj, 'position') else 0,  # Default to 0 if not present\n                     \"created_date_time\": image_obj.created_date_time,\n                     \"created_date\": image_obj.created_date,\n                     \"updated_date\": image_obj.updated_date,\n"
                },
                {
                    "date": 1741505471423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n-                    \"is_featured\": image_obj.is_featured_image,\n+                    \"is_featured_image\": image_obj.is_featured_image,\n                     \"position\": image_obj.position if hasattr(image_obj, 'position') else 0,  # Default to 0 if not present\n                     \"created_date_time\": image_obj.created_date_time,\n                     \"created_date\": image_obj.created_date,\n                     \"updated_date\": image_obj.updated_date,\n@@ -65,17 +65,26 @@\n     image = serializers.SerializerMethodField()\n     class Meta:\n         model = Event\n         fields = '__all__'\n-    def get_image(self, obj):\n+     def get_image(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n         query = obj.image.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n                 image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n-                images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n+                # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n+                images.append({\n+                    \"id\": image_obj.id,\n+                    \"image\": image_url,\n+                    \"is_featured_image\": image_obj.is_featured_image,\n+                    \"position\": image_obj.position if hasattr(image_obj, 'position') else 0,  # Default to 0 if not present\n+                    \"created_date_time\": image_obj.created_date_time,\n+                    \"created_date\": image_obj.created_date,\n+                    \"updated_date\": image_obj.updated_date,\n+                })\n \n         return images\n \n \n"
                },
                {
                    "date": 1741684877750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n     image = serializers.SerializerMethodField()\n     class Meta:\n         model = Event\n         fields = '__all__'\n-     def get_image(self, obj):\n+    def get_image(self, obj):\n         request = self.context.get('request')  # Get request from serializer context\n         query = obj.image.all().order_by('position')  # Ensure correct related_name\n \n         images = []\n@@ -158,9 +158,9 @@\n         attrs = super().to_representation(instance)\n \n         # Ensure 'image' field is present and is a valid file\n         if 'image' in attrs and attrs['image']:\n-            attrs['image'] = self.get_absolute_url(instance.image)\n+            attrs['image'] = instance.image)\n \n         return attrs\n \n     def get_absolute_url(self, image_field):\n"
                },
                {
                    "date": 1741684915974,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n-                image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n+                image_url = image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n@@ -158,9 +158,9 @@\n         attrs = super().to_representation(instance)\n \n         # Ensure 'image' field is present and is a valid file\n         if 'image' in attrs and attrs['image']:\n-            attrs['image'] = instance.image)\n+            attrs['image'] = instance.image\n \n         return attrs\n \n     def get_absolute_url(self, image_field):\n"
                },
                {
                    "date": 1741684921196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n-                image_url = image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n+                image_url = image_obj.image.url if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n"
                },
                {
                    "date": 1741684931945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n-                image_url = image_obj.image.url if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n+                image_url = image_obj.image.url \"\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n"
                },
                {
                    "date": 1741684975574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n-                image_url = image_obj.image.url \"\n+                image_url = image_obj.image.url\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n@@ -72,9 +72,9 @@\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n-                image_url = request.build_absolute_uri(image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n+                image_url = image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n"
                },
                {
                    "date": 1741684981984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n \n         images = []\n         for image_obj in query:\n             if image_obj.image:  # Ensure image exists\n-                image_url = image_obj.image.url) if request else f\"{settings.MEDIA_URL}{image_obj.image.url}\"\n+                image_url = image_obj.image.url\n                 # images.append({\"id\": image_obj.id, \"image\": image_url, \"position\": image_obj.position})\n                 images.append({\n                     \"id\": image_obj.id,\n                     \"image\": image_url,\n"
                },
                {
                    "date": 1741684996481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n             Returns the absolute URL for the given image field.\n             \"\"\"\n             request = self.context.get('request')\n             if request and image_field:\n-                return request.build_absolute_uri(image_field.url)  # Ensure we use .url\n+                return image_field.url)  # Ensure we use .url\n             return image_field.url if image_field else None  # Fallback in case request is missing\n \n \n     @transaction.atomic\n"
                },
                {
                    "date": 1741685010598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -162,16 +162,16 @@\n             attrs['image'] = instance.image\n \n         return attrs\n \n-    def get_absolute_url(self, image_field):\n-            \"\"\"\n-            Returns the absolute URL for the given image field.\n-            \"\"\"\n-            request = self.context.get('request')\n-            if request and image_field:\n-                return image_field.url)  # Ensure we use .url\n-            return image_field.url if image_field else None  # Fallback in case request is missing\n+    # def get_absolute_url(self, image_field):\n+    #         \"\"\"\n+    #         Returns the absolute URL for the given image field.\n+    #         \"\"\"\n+    #         request = self.context.get('request')\n+    #         if request and image_field:\n+    #             return image_field.url)  # Ensure we use .url\n+    #         return image_field.url if image_field else None  # Fallback in case request is missing\n \n \n     @transaction.atomic\n     def create(self, validated_data):\n"
                },
                {
                    "date": 1743058998936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,8 +185,15 @@\n         organizer_ids = validated_data.pop(\"organizer\", [])\n \n         # Extract multiple images from `images[0]`, `images[1]`, ...\n         images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n+        \n+        for index, image_file in enumerate(images_data):\n+            InformationGallery.objects.create(\n+                information=information,\n+                image=image_file,\n+                is_featured=(index == 0)  # Set only the first image as featured\n+            )\n \n         # Create the Event instance\n         event = super().create(validated_data)\n \n"
                },
                {
                    "date": 1743059004979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,9 @@\n         # Extract multiple images from `images[0]`, `images[1]`, ...\n         images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n         \n         for index, image_file in enumerate(images_data):\n-            InformationGallery.objects.create(\n+            EventGallery.objects.create(\n                 information=information,\n                 image=image_file,\n                 is_featured=(index == 0)  # Set only the first image as featured\n             )\n"
                },
                {
                    "date": 1743059011092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,9 +188,9 @@\n         images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n         \n         for index, image_file in enumerate(images_data):\n             EventGallery.objects.create(\n-                information=information,\n+                event=event,\n                 image=image_file,\n                 is_featured=(index == 0)  # Set only the first image as featured\n             )\n \n"
                },
                {
                    "date": 1743749233113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,41 +173,38 @@\n     #         return image_field.url if image_field else None  # Fallback in case request is missing\n \n \n     @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles event creation and image uploads.\n-        \"\"\"\n-        request = self.context.get(\"request\")\n+def create(self, validated_data):\n+    \"\"\"\n+    Handles event creation and image uploads.\n+    \"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract Many-to-Many fields\n-        category_ids = validated_data.pop(\"category\", [])\n-        organizer_ids = validated_data.pop(\"organizer\", [])\n+    # Extract Many-to-Many fields\n+    category_ids = validated_data.pop(\"category\", [])\n+    organizer_ids = validated_data.pop(\"organizer\", [])\n \n-        # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n-        \n-        for index, image_file in enumerate(images_data):\n-            EventGallery.objects.create(\n-                event=event,\n-                image=image_file,\n-                is_featured=(index == 0)  # Set only the first image as featured\n-            )\n+    # Create the Event instance first\n+    event = super().create(validated_data)\n \n-        # Create the Event instance\n-        event = super().create(validated_data)\n+    # Extract multiple images from `images[0]`, `images[1]`, ...\n+    images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n-        # Assign Many-to-Many relationships\n-        event.category.set(category_ids)\n-        event.organizer.set(organizer_ids)\n+    for index, image_file in enumerate(images_data):\n+        EventGallery.objects.create(\n+            event=event,\n+            image=image_file,\n+            is_featured=(index == 0)  # Set only the first image as featured\n+        )\n \n-        # Save images in EventGallery\n-        for image_file in images_data:\n-            EventGallery.objects.create(event=event, image=image_file)\n+    # Assign Many-to-Many relationships\n+    event.category.set(category_ids)\n+    event.organizer.set(organizer_ids)\n \n-        return event\n+    return event\n \n+\n     @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n         Handles full (PUT) and partial (PATCH) updates for events.\n"
                },
                {
                    "date": 1743749238399,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,36 +173,36 @@\n     #         return image_field.url if image_field else None  # Fallback in case request is missing\n \n \n     @transaction.atomic\n-def create(self, validated_data):\n-    \"\"\"\n-    Handles event creation and image uploads.\n-    \"\"\"\n-    request = self.context.get(\"request\")\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles event creation and image uploads.\n+        \"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract Many-to-Many fields\n-    category_ids = validated_data.pop(\"category\", [])\n-    organizer_ids = validated_data.pop(\"organizer\", [])\n+        # Extract Many-to-Many fields\n+        category_ids = validated_data.pop(\"category\", [])\n+        organizer_ids = validated_data.pop(\"organizer\", [])\n \n-    # Create the Event instance first\n-    event = super().create(validated_data)\n+        # Create the Event instance first\n+        event = super().create(validated_data)\n \n-    # Extract multiple images from `images[0]`, `images[1]`, ...\n-    images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n+        # Extract multiple images from `images[0]`, `images[1]`, ...\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n-    for index, image_file in enumerate(images_data):\n-        EventGallery.objects.create(\n-            event=event,\n-            image=image_file,\n-            is_featured=(index == 0)  # Set only the first image as featured\n-        )\n+        for index, image_file in enumerate(images_data):\n+            EventGallery.objects.create(\n+                event=event,\n+                image=image_file,\n+                is_featured=(index == 0)  # Set only the first image as featured\n+            )\n \n-    # Assign Many-to-Many relationships\n-    event.category.set(category_ids)\n-    event.organizer.set(organizer_ids)\n+        # Assign Many-to-Many relationships\n+        event.category.set(category_ids)\n+        event.organizer.set(organizer_ids)\n \n-    return event\n+        return event\n \n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1743749301991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,32 +204,35 @@\n         return event\n \n \n     @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles full (PUT) and partial (PATCH) updates for events.\n-        Supports new image uploads and Many-to-Many relationship updates.\n-        \"\"\"\n-        request = self.context.get(\"request\")\n+def update(self, instance, validated_data):\n+    \"\"\"\n+    Handles full (PUT) and partial (PATCH) updates for events.\n+    Supports new image uploads and Many-to-Many relationship updates.\n+    \"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract Many-to-Many fields\n-        category_ids = validated_data.pop(\"category\", None)\n-        organizer_ids = validated_data.pop(\"organizer\", None)\n+    # Extract Many-to-Many fields\n+    category_ids = validated_data.pop(\"category\", None)\n+    organizer_ids = validated_data.pop(\"organizer\", None)\n \n-        # Extract multiple images from `images[0]`, `images[1]`, ...\n-        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n+    # Extract multiple images from `images[0]`, `images[1]`, ...\n+    images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n-        # Update the event instance\n-        instance = super().update(instance, validated_data)\n+    # Update the event instance\n\\ No newline at end of file\n+    instance = super().update(instance, validated_data)\n \n-        # Update Many-to-Many relationships if provided\n-        if category_ids is not None:\n-            instance.category.set(category_ids)\n-        if organizer_ids is not None:\n-            instance.organizer.set(organizer_ids)\n+    # Update Many-to-Many relationships if provided\n+    if category_ids is not None:\n+        instance.category.set(category_ids)\n+    if organizer_ids is not None:\n+        instance.organizer.set(organizer_ids)\n \n-        # Save new images in EventGallery\n-        for image_file in images_data:\n-            EventGallery.objects.create(event=instance, image=image_file)\n+    # Handle the images - if you want to remove old ones, uncomment the following line:\n+    # EventGallery.objects.filter(event=instance).delete()  # Remove old images (if needed)\n \n-        return instance\n+    # Save new images in EventGallery\n+    for image_file in images_data:\n+        EventGallery.objects.create(event=instance, image=image_file)\n+\n+    return instance\n"
                },
                {
                    "date": 1743749307188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,35 +204,35 @@\n         return event\n \n \n     @transaction.atomic\n-def update(self, instance, validated_data):\n-    \"\"\"\n-    Handles full (PUT) and partial (PATCH) updates for events.\n-    Supports new image uploads and Many-to-Many relationship updates.\n-    \"\"\"\n-    request = self.context.get(\"request\")\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles full (PUT) and partial (PATCH) updates for events.\n+        Supports new image uploads and Many-to-Many relationship updates.\n+        \"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract Many-to-Many fields\n-    category_ids = validated_data.pop(\"category\", None)\n-    organizer_ids = validated_data.pop(\"organizer\", None)\n+        # Extract Many-to-Many fields\n+        category_ids = validated_data.pop(\"category\", None)\n+        organizer_ids = validated_data.pop(\"organizer\", None)\n \n-    # Extract multiple images from `images[0]`, `images[1]`, ...\n-    images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n+        # Extract multiple images from `images[0]`, `images[1]`, ...\n+        images_data = [file for key, file in request.FILES.items() if key.startswith(\"image[\")]\n \n-    # Update the event instance\n-    instance = super().update(instance, validated_data)\n+        # Update the event instance\n+        instance = super().update(instance, validated_data)\n \n-    # Update Many-to-Many relationships if provided\n\\ No newline at end of file\n-    if category_ids is not None:\n-        instance.category.set(category_ids)\n-    if organizer_ids is not None:\n-        instance.organizer.set(organizer_ids)\n+        # Update Many-to-Many relationships if provided\n+        if category_ids is not None:\n+            instance.category.set(category_ids)\n+        if organizer_ids is not None:\n+            instance.organizer.set(organizer_ids)\n \n-    # Handle the images - if you want to remove old ones, uncomment the following line:\n-    # EventGallery.objects.filter(event=instance).delete()  # Remove old images (if needed)\n+        # Handle the images - if you want to remove old ones, uncomment the following line:\n+        # EventGallery.objects.filter(event=instance).delete()  # Remove old images (if needed)\n \n-    # Save new images in EventGallery\n-    for image_file in images_data:\n-        EventGallery.objects.create(event=instance, image=image_file)\n+        # Save new images in EventGallery\n+        for image_file in images_data:\n+            EventGallery.objects.create(event=instance, image=image_file)\n \n-    return instance\n+        return instance\n"
                },
                {
                    "date": 1743750406072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,9 +193,9 @@\n         for index, image_file in enumerate(images_data):\n             EventGallery.objects.create(\n                 event=event,\n                 image=image_file,\n-                is_featured=(index == 0)  # Set only the first image as featured\n+                is_featured_image=(index == 0)  # Set only the first image as featured\n             )\n \n         # Assign Many-to-Many relationships\n         event.category.set(category_ids)\n"
                }
            ],
            "date": 1733477390024,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Event, EventCategory, EventOrganizer, EventGallery\n\n# Serializer for listing events (basic view)\nclass EventListSerializers(serializers.ModelSerializer):\n    # Nested fields for related models (just showing names or basic details)\n    category = serializers.StringRelatedField(many=True)  # Show related categories by name\n    organizer = serializers.StringRelatedField(many=True)  # Show related organizers by name\n\n    class Meta:\n        model = Event\n        fields = '__all__'\n\n\n# Serializer for retrieving detailed event information\nclass EventRetrieveSerializers(serializers.ModelSerializer):\n    # Nested fields for related models (showing detailed info)\n    category = serializers.StringRelatedField(many=True)\n    organizer = serializers.StringRelatedField(many=True)\n    gallery = serializers.StringRelatedField(many=True)  # Optional: For retrieving related images\n\n    class Meta:\n        model = Event\n        fields = '__all__'\n\n\n# Serializer for creating or updating events\nclass EventWriteSerializers(serializers.ModelSerializer):\n    # Nested fields for related models\n    category = serializers.PrimaryKeyRelatedField(queryset=EventCategory.objects.all(), many=True)\n    organizer = serializers.PrimaryKeyRelatedField(queryset=EventOrganizer.objects.all(), many=True)\n    gallery = serializers.PrimaryKeyRelatedField(queryset=EventGallery.objects.all(), many=True)\n    \n    class Meta:\n        model = Event\n        fields = [\n            'event_name', 'start_date', 'end_date', 'duration', 'event_type', 'venue', 'online_seat_limit', \n            'offline_seat_limit', 'is_offline_seat_limit', 'is_online_seat_limit', 'is_registration', \n            'registration_link', 'registration_type', 'amount', 'amount_type', 'amount_country', \n            'description', 'is_featured_event', 'category', 'organizer', 'gallery', 'created_date_time', \n            'created_date', 'updated_date'\n        ]\n    \n    def create(self, validated_data):\n        # Handle the creation of related fields (many-to-many relationships)\n        category_data = validated_data.pop('category')\n        organizer_data = validated_data.pop('organizer')\n        gallery_data = validated_data.pop('gallery')\n\n        # Create the Event instance\n        event = Event.objects.create(**validated_data)\n\n        # Handle many-to-many relationships\n        event.category.set(category_data)\n        event.organizer.set(organizer_data)\n        event.gallery.set(gallery_data)\n\n        return event\n\n    def update(self, instance, validated_data):\n        # Handle the updating of related fields (many-to-many relationships)\n        category_data = validated_data.pop('category', None)\n        organizer_data = validated_data.pop('organizer', None)\n        gallery_data = validated_data.pop('gallery', None)\n\n        # Update fields that are present in validated_data\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        \n        # Update many-to-many relationships\n        if category_data is not None:\n            instance.category.set(category_data)\n        if organizer_data is not None:\n            instance.organizer.set(organizer_data)\n        if gallery_data is not None:\n            instance.gallery.set(gallery_data)\n\n        # Save the updated instance\n        instance.save()\n\n        return instance\n"
        }
    ]
}