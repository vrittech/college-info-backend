{
    "sourceFile": "notifications/signals.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739437721914,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739438408907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,18 +3,17 @@\n from django.contrib.auth.models import Permission\n from django.contrib.admin.sites import site\n from django.apps import apps\n from accounts.models import CustomUser\n-from .models import Notification\n+from .models import Notification, NotificationUser\n from django.utils.text import camel_case_to_spaces\n \n def generate_model_map():\n     \"\"\"\n     Dynamically generates MODEL_MAP based on models registered in Django Admin,\n     excluding built-in apps like auth, contenttypes, sessions, and admin.\n     \"\"\"\n     excluded_apps = {'auth', 'contenttypes', 'sessions', 'admin'}\n-\n     model_map = {}\n \n     for model, model_admin in site._registry.items():\n         app_label = model._meta.app_label\n@@ -47,17 +46,20 @@\n     permission_codename = f'view_{model_name.lower()}'\n     view_permission = Permission.objects.filter(codename=permission_codename)\n     users_with_permission = CustomUser.objects.filter(user_permissions__in=view_permission)\n \n+    # Create notification\n     notification = Notification.objects.create(\n         title=title,\n         message=message,\n         module_name=module_name,\n         updated_id=str(identifier)\n     )\n-    notification.users.set(users_with_permission)\n-    notification.save()\n \n+    # Assign the notification to users & create NotificationUser entries\n+    for user in users_with_permission:\n+        NotificationUser.objects.create(user=user, notification=notification)\n+\n @receiver(post_save)\n def create_or_update_notification(sender, instance, created, **kwargs):\n     \"\"\"\n     Signal handler for create and update events.\n"
                }
            ],
            "date": 1739437721914,
            "name": "Commit-0",
            "content": "from django.db.models.signals import post_save, post_delete\nfrom django.dispatch import receiver\nfrom django.contrib.auth.models import Permission\nfrom django.contrib.admin.sites import site\nfrom django.apps import apps\nfrom accounts.models import CustomUser\nfrom .models import Notification\nfrom django.utils.text import camel_case_to_spaces\n\ndef generate_model_map():\n    \"\"\"\n    Dynamically generates MODEL_MAP based on models registered in Django Admin,\n    excluding built-in apps like auth, contenttypes, sessions, and admin.\n    \"\"\"\n    excluded_apps = {'auth', 'contenttypes', 'sessions', 'admin'}\n\n    model_map = {}\n\n    for model, model_admin in site._registry.items():\n        app_label = model._meta.app_label\n        model_name = model._meta.model_name\n        class_name = model.__name__\n\n        if app_label not in excluded_apps:\n            model_map[model_name] = (app_label, class_name)\n\n    return model_map\n\nMODEL_MAP = generate_model_map()\n\ndef notify_users(action, instance, module_name, model_name):\n    \"\"\"\n    Helper function to create notifications for users based on the action type.\n    \"\"\"\n    identifier = getattr(instance, 'slug', instance.id)  # Use slug if available, else id\n    readable_model_name = camel_case_to_spaces(model_name).title()  # Converts to human-readable format\n\n    action_messages = {\n        'created': f\"A new {readable_model_name} item was added in the {module_name} module.\",\n        'updated': f\"The {readable_model_name} item was updated in the {module_name} module.\",\n        'deleted': f\"The {readable_model_name} item was deleted from the {module_name} module.\"\n    }\n\n    title = f\"{readable_model_name} {action.capitalize()}\"\n    message = action_messages[action]\n\n    permission_codename = f'view_{model_name.lower()}'\n    view_permission = Permission.objects.filter(codename=permission_codename)\n    users_with_permission = CustomUser.objects.filter(user_permissions__in=view_permission)\n\n    notification = Notification.objects.create(\n        title=title,\n        message=message,\n        module_name=module_name,\n        updated_id=str(identifier)\n    )\n    notification.users.set(users_with_permission)\n    notification.save()\n\n@receiver(post_save)\ndef create_or_update_notification(sender, instance, created, **kwargs):\n    \"\"\"\n    Signal handler for create and update events.\n    \"\"\"\n    app_label = instance._meta.app_label\n    model_name = instance._meta.model_name\n\n    if model_name in MODEL_MAP:\n        action = 'created' if created else 'updated'\n        notify_users(action, instance, app_label, model_name)\n\n@receiver(post_delete)\ndef delete_notification(sender, instance, **kwargs):\n    \"\"\"\n    Signal handler for delete events.\n    \"\"\"\n    app_label = instance._meta.app_label\n    model_name = instance._meta.model_name\n\n    if model_name in MODEL_MAP:\n        notify_users('deleted', instance, app_label, model_name)\n"
        }
    ]
}