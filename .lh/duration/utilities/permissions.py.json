{
    "sourceFile": "duration/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739257990388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739263976300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,10 +25,9 @@\n         if CanManage(request):  # If user has manage permission, grant full access\n             return True\n \n         if view.action in [\"list\"]:\n-            return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n-\n+            return True\n         elif view.action in [\"retrieve\"]:\n             return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n \n         elif view.action in [\"create\"]:\n"
                },
                {
                    "date": 1739264505606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n def CanManage(request):\n     \"\"\"Check if the user has full manage access\"\"\"\n     return HasPermission(request, DURATION_PERMISSIONS[\"manage\"])\n \n-class DurationPermission(BasePermission):\n+class durationPermission(BasePermission):\n     \"\"\"\n     Permission class for managing durations based strictly on Django permissions.\n     \"\"\"\n \n@@ -26,8 +26,9 @@\n             return True\n \n         if view.action in [\"list\"]:\n             return True\n+        \n         elif view.action in [\"retrieve\"]:\n             return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n \n         elif view.action in [\"create\"]:\n"
                }
            ],
            "date": 1739257990388,
            "name": "Commit-0",
            "content": "from rest_framework.permissions import BasePermission\n\nDURATION_PERMISSIONS = {\n    \"add\": \"add_duration\",\n    \"change\": \"change_duration\",\n    \"delete\": \"delete_duration\",\n    \"view\": \"view_duration\",\n    \"manage\": \"manage_duration\",\n}\n\ndef HasPermission(request, codename):\n    \"\"\"Check if the user has a specific Django permission\"\"\"\n    return request.user.has_perm(f\"app_name.{codename}\")\n\ndef CanManage(request):\n    \"\"\"Check if the user has full manage access\"\"\"\n    return HasPermission(request, DURATION_PERMISSIONS[\"manage\"])\n\nclass DurationPermission(BasePermission):\n    \"\"\"\n    Permission class for managing durations based strictly on Django permissions.\n    \"\"\"\n\n    def has_permission(self, request, view):\n        if CanManage(request):  # If user has manage permission, grant full access\n            return True\n\n        if view.action in [\"list\"]:\n            return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n\n        elif view.action in [\"retrieve\"]:\n            return HasPermission(request, DURATION_PERMISSIONS[\"view\"])\n\n        elif view.action in [\"create\"]:\n            return HasPermission(request, DURATION_PERMISSIONS[\"add\"])\n\n        elif view.action in [\"update\", \"partial_update\"]:\n            return HasPermission(request, DURATION_PERMISSIONS[\"change\"])\n\n        elif view.action == \"destroy\":\n            return HasPermission(request, DURATION_PERMISSIONS[\"delete\"])\n\n        return False  # Default deny access\n"
        }
    ]
}