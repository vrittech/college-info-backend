{
    "sourceFile": "notify/utils.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 11,
            "patches": [
                {
                    "date": 1739869339685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739869690977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,37 @@\n from .models import Notification\n+from django.apps import apps\n \n-def create_notification(user, action, model_name, instance_id, message):\n+def get_model_name(instance):\n     \"\"\"\n-    Creates a notification for a user while preventing recursion errors.\n+    Returns the lowercase model name of an instance.\n     \"\"\"\n+    return instance.__class__.__name__.lower()\n+\n+def create_notification(user, action, instance):\n+    \"\"\"\n+    Creates a notification for a user only if they have permissions.\n+    \"\"\"\n     if not user or not user.is_authenticated:\n-        return  # Skip if user is invalid\n+        return  # Skip invalid users\n \n-    # Prevent recursive notifications by checking model type\n+    model_name = get_model_name(instance)\n+    \n+    # Prevent self-notifications\n     if model_name == \"notification\":\n-        return  # Prevent recursion errors\n+        return\n \n-    # Create notification\n+    # Ensure user has permission for the model\n+    from .permissions import get_group_permissions  # Import dynamically to avoid recursion\n+    user_permissions = get_group_permissions(user)\n+\n+    if model_name not in user_permissions:\n+        return  # Skip if the user has no permissions for this model\n+\n+    # Create the notification\n     Notification.objects.create(\n         user=user,\n         action=action,\n         model_name=model_name,\n-        instance_id=instance_id,\n-        message=message\n+        instance_id=instance.id,\n+        message=f\"You {action} a {model_name} record (ID: {instance.id}).\"\n     )\n"
                },
                {
                    "date": 1739869697836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     if model_name == \"notification\":\n         return\n \n     # Ensure user has permission for the model\n-    from .permissions import get_group_permissions  # Import dynamically to avoid recursion\n+    from ..permissions import get_group_permissions  # Import dynamically to avoid recursion\n     user_permissions = get_group_permissions(user)\n \n     if model_name not in user_permissions:\n         return  # Skip if the user has no permissions for this model\n"
                },
                {
                    "date": 1739869712603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     if model_name == \"notification\":\n         return\n \n     # Ensure user has permission for the model\n-    from ..permissions import get_group_permissions  # Import dynamically to avoid recursion\n+    from .permissions import get_group_permissions  # Import dynamically to avoid recursion\n     user_permissions = get_group_permissions(user)\n \n     if model_name not in user_permissions:\n         return  # Skip if the user has no permissions for this model\n"
                },
                {
                    "date": 1739869718349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,8 @@\n     if model_name == \"notification\":\n         return\n \n     # Ensure user has permission for the model\n-    from .permissions import get_group_permissions  # Import dynamically to avoid recursion\n     user_permissions = get_group_permissions(user)\n \n     if model_name not in user_permissions:\n         return  # Skip if the user has no permissions for this model\n"
                },
                {
                    "date": 1739869769162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,9 @@\n from .models import Notification\n from django.apps import apps\n+from mainproj.permissions import get_group_permissions  # Import dynamically to avoid recursion\n \n+\n def get_model_name(instance):\n     \"\"\"\n     Returns the lowercase model name of an instance.\n     \"\"\"\n"
                },
                {
                    "date": 1739870543641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,38 +1,36 @@\n from .models import Notification\n-from django.apps import apps\n-from mainproj.permissions import get_group_permissions  # Import dynamically to avoid recursion\n+from django.contrib.auth.models import Permission\n+from django.contrib.contenttypes.models import ContentType\n+from django.utils.timezone import now\n+from accounts.models import CustomUser\n \n-\n-def get_model_name(instance):\n+def notify_user(action, instance, user):\n     \"\"\"\n-    Returns the lowercase model name of an instance.\n-    \"\"\"\n-    return instance.__class__.__name__.lower()\n-\n-def create_notification(user, action, instance):\n-    \"\"\"\n     Creates a notification for a user only if they have permissions.\n     \"\"\"\n-    if not user or not user.is_authenticated:\n-        return  # Skip invalid users\n+    if not hasattr(instance, '_meta'):\n+        return  # Prevent recursion errors\n \n-    model_name = get_model_name(instance)\n-    \n-    # Prevent self-notifications\n-    if model_name == \"notification\":\n-        return\n+    model_name = instance._meta.model_name.lower()\n+    identifier = getattr(instance, 'slug', instance.id)  # Use slug if available, otherwise ID\n \n-    # Ensure user has permission for the model\n-    user_permissions = get_group_permissions(user)\n+    # Define action messages\n+    action_messages = {\n+        'created': f\"{user.get_full_name()} added a new {model_name} item.\",\n+        'updated': f\"{user.get_full_name()} updated a {model_name} item.\",\n+        'deleted': f\"{user.get_full_name()} deleted a {model_name} item.\",\n+    }\n \n-    if model_name not in user_permissions:\n-        return  # Skip if the user has no permissions for this model\n+    title = f\"{model_name.capitalize()} {action.capitalize()}\"\n+    message = action_messages[action]\n \n-    # Create the notification\n-    Notification.objects.create(\n-        user=user,\n-        action=action,\n-        model_name=model_name,\n-        instance_id=instance.id,\n-        message=f\"You {action} a {model_name} record (ID: {instance.id}).\"\n-    )\n+    # Fetch model permissions dynamically\n+    content_type = ContentType.objects.get_for_model(instance.__class__)\n+    permission_codename = f'view_{model_name}'\n+    view_permission = Permission.objects.filter(content_type=content_type, codename=permission_codename)\n+\n+    # Find users who have view permissions (only direct actor)\n+    user_has_permission = user.has_perm(f\"{instance._meta.app_label}.{permission_codename}\")\n+\n+    if not user_has_permission:\n+        return  # Skip if the user has\n"
                },
                {
                    "date": 1739871170347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,21 @@\n from .models import Notification\n from django.contrib.auth.models import Permission\n from django.contrib.contenttypes.models import ContentType\n from django.utils.timezone import now\n-from accounts.models import CustomUser\n+from .middleware import get_current_user  # Import user context\n \n-def notify_user(action, instance, user):\n+def notify_user(action, instance):\n     \"\"\"\n     Creates a notification for a user only if they have permissions.\n     \"\"\"\n     if not hasattr(instance, '_meta'):\n         return  # Prevent recursion errors\n \n+    user = get_current_user()  # Automatically fetch request user\n+    if not user:\n+        return  # Skip if user is unknown\n+\n     model_name = instance._meta.model_name.lower()\n     identifier = getattr(instance, 'slug', instance.id)  # Use slug if available, otherwise ID\n \n     # Define action messages\n@@ -26,11 +30,18 @@\n \n     # Fetch model permissions dynamically\n     content_type = ContentType.objects.get_for_model(instance.__class__)\n     permission_codename = f'view_{model_name}'\n-    view_permission = Permission.objects.filter(content_type=content_type, codename=permission_codename)\n-\n-    # Find users who have view permissions (only direct actor)\n     user_has_permission = user.has_perm(f\"{instance._meta.app_label}.{permission_codename}\")\n \n     if not user_has_permission:\n-        return  # Skip if the user has\n+        return  # Skip if user lacks permission\n+\n+    # Create the notification\n+    Notification.objects.create(\n+        user=user,\n+        title=title,\n+        message=message,\n+        module_name=instance._meta.app_label,\n+        updated_id=str(identifier),\n+        timestamp=now(),\n+    )\n"
                },
                {
                    "date": 1740119208230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,12 @@\n     if not hasattr(instance, '_meta'):\n         return  # Prevent recursion errors\n \n     user = get_current_user()  # Automatically fetch request user\n-    if not user:\n-        return  # Skip if user is unknown\n+    if not user or not user.is_authenticated:\n+    return\n \n+\n     model_name = instance._meta.model_name.lower()\n     identifier = getattr(instance, 'slug', instance.id)  # Use slug if available, otherwise ID\n \n     # Define action messages\n"
                },
                {
                    "date": 1740119215268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n     if not hasattr(instance, '_meta'):\n         return  # Prevent recursion errors\n \n     user = get_current_user()  # Automatically fetch request user\n-    if not user or not user.is_authenticated:\n-    return\n+    if not user or not user.is_authenticated: \n+        return\n \n \n     model_name = instance._meta.model_name.lower()\n     identifier = getattr(instance, 'slug', instance.id)  # Use slug if available, otherwise ID\n"
                },
                {
                    "date": 1740120892466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     if not hasattr(instance, '_meta'):\n         return  # Prevent recursion errors\n \n     user = get_current_user()  # Automatically fetch request user\n-    if not user or not user.is_authenticated: \n+    if not user or not user.is_authenticated: # Skip if user is not authenticated\n         return\n \n \n     model_name = instance._meta.model_name.lower()\n"
                },
                {
                    "date": 1740121030567,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,48 +1,48 @@\n-from .models import Notification\n-from django.contrib.auth.models import Permission\n-from django.contrib.contenttypes.models import ContentType\n-from django.utils.timezone import now\n-from .middleware import get_current_user  # Import user context\n+# from .models import Notification\n+# from django.contrib.auth.models import Permission\n+# from django.contrib.contenttypes.models import ContentType\n+# from django.utils.timezone import now\n+# from .middleware import get_current_user  # Import user context\n \n-def notify_user(action, instance):\n-    \"\"\"\n-    Creates a notification for a user only if they have permissions.\n-    \"\"\"\n-    if not hasattr(instance, '_meta'):\n-        return  # Prevent recursion errors\n+# def notify_user(action, instance):\n+#     \"\"\"\n+#     Creates a notification for a user only if they have permissions.\n+#     \"\"\"\n+#     if not hasattr(instance, '_meta'):\n+#         return  # Prevent recursion errors\n \n-    user = get_current_user()  # Automatically fetch request user\n-    if not user or not user.is_authenticated: # Skip if user is not authenticated\n-        return\n+#     user = get_current_user()  # Automatically fetch request user\n+#     if not user or not user.is_authenticated: # Skip if user is not authenticated\n+#         return\n \n \n-    model_name = instance._meta.model_name.lower()\n-    identifier = getattr(instance, 'slug', instance.id)  # Use slug if available, otherwise ID\n+#     model_name = instance._meta.model_name.lower()\n+#     identifier = getattr(instance, 'slug', instance.id)  # Use slug if available, otherwise ID\n \n-    # Define action messages\n-    action_messages = {\n-        'created': f\"{user.get_full_name()} added a new {model_name} item.\",\n-        'updated': f\"{user.get_full_name()} updated a {model_name} item.\",\n-        'deleted': f\"{user.get_full_name()} deleted a {model_name} item.\",\n-    }\n+#     # Define action messages\n+#     action_messages = {\n+#         'created': f\"{user.get_full_name()} added a new {model_name} item.\",\n+#         'updated': f\"{user.get_full_name()} updated a {model_name} item.\",\n+#         'deleted': f\"{user.get_full_name()} deleted a {model_name} item.\",\n+#     }\n \n-    title = f\"{model_name.capitalize()} {action.capitalize()}\"\n-    message = action_messages[action]\n+#     title = f\"{model_name.capitalize()} {action.capitalize()}\"\n+#     message = action_messages[action]\n \n-    # Fetch model permissions dynamically\n-    content_type = ContentType.objects.get_for_model(instance.__class__)\n-    permission_codename = f'view_{model_name}'\n-    user_has_permission = user.has_perm(f\"{instance._meta.app_label}.{permission_codename}\")\n+#     # Fetch model permissions dynamically\n+#     content_type = ContentType.objects.get_for_model(instance.__class__)\n+#     permission_codename = f'view_{model_name}'\n+#     user_has_permission = user.has_perm(f\"{instance._meta.app_label}.{permission_codename}\")\n \n-    if not user_has_permission:\n-        return  # Skip if user lacks permission\n+#     if not user_has_permission:\n+#         return  # Skip if user lacks permission\n \n-    # Create the notification\n-    Notification.objects.create(\n-        user=user,\n-        title=title,\n-        message=message,\n-        module_name=instance._meta.app_label,\n-        updated_id=str(identifier),\n-        timestamp=now(),\n-    )\n+#     # Create the notification\n+#     Notification.objects.create(\n+#         user=user,\n+#         title=title,\n+#         message=message,\n+#         module_name=instance._meta.app_label,\n+#         updated_id=str(identifier),\n+#         timestamp=now(),\n+#     )\n"
                }
            ],
            "date": 1739869339685,
            "name": "Commit-0",
            "content": "from .models import Notification\n\ndef create_notification(user, action, model_name, instance_id, message):\n    \"\"\"\n    Creates a notification for a user while preventing recursion errors.\n    \"\"\"\n    if not user or not user.is_authenticated:\n        return  # Skip if user is invalid\n\n    # Prevent recursive notifications by checking model type\n    if model_name == \"notification\":\n        return  # Prevent recursion errors\n\n    # Create notification\n    Notification.objects.create(\n        user=user,\n        action=action,\n        model_name=model_name,\n        instance_id=instance_id,\n        message=message\n    )\n"
        }
    ]
}