{
    "sourceFile": "notify/middleware.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1739871159447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740119765012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,21 @@\n import threading\n \n-_request_local = threading.local()\n+_request_user = threading.local()\n \n-class CaptureUserMiddleware:\n+class CurrentUserMiddleware:\n     \"\"\"\n-    Middleware to store the current request user.\n-    This allows signals to detect who performed the action.\n+    Middleware to track the current request's user.\n     \"\"\"\n     def __init__(self, get_response):\n         self.get_response = get_response\n \n     def __call__(self, request):\n-        _request_local.user = request.user if request.user.is_authenticated else None\n+        _request_user.value = request.user\n         response = self.get_response(request)\n         return response\n \n def get_current_user():\n     \"\"\"\n-    Retrieve the user performing the request.\n-    Returns None if there's no user context.\n+    Retrieve the request user.\n     \"\"\"\n-    return getattr(_request_local, \"user\", None)\n+    return getattr(_request_user, \"value\", None)\n"
                },
                {
                    "date": 1740119776529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,23 @@\n import threading\n \n-_request_user = threading.local()\n+_request_local = threading.local()\n \n-class CurrentUserMiddleware:\n+class CaptureUserMiddleware:\n     \"\"\"\n-    Middleware to track the current request's user.\n+    Middleware to store the current request user.\n+    This allows signals to detect who performed the action.\n     \"\"\"\n     def __init__(self, get_response):\n         self.get_response = get_response\n \n     def __call__(self, request):\n-        _request_user.value = request.user\n+        _request_local.user = request.user if request.user.is_authenticated else None\n         response = self.get_response(request)\n         return response\n \n def get_current_user():\n     \"\"\"\n-    Retrieve the request user.\n+    Retrieve the user performing the request.\n+    Returns None if there's no user context.\n     \"\"\"\n-    return getattr(_request_user, \"value\", None)\n+    return getattr(_request_local, \"user\", None)\n"
                },
                {
                    "date": 1740119788231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,23 +1,21 @@\n import threading\n \n-_request_local = threading.local()\n+_request_user = threading.local()\n \n-class CaptureUserMiddleware:\n+class CurrentUserMiddleware:\n     \"\"\"\n-    Middleware to store the current request user.\n-    This allows signals to detect who performed the action.\n+    Middleware to track the current request's user.\n     \"\"\"\n     def __init__(self, get_response):\n         self.get_response = get_response\n \n     def __call__(self, request):\n-        _request_local.user = request.user if request.user.is_authenticated else None\n+        _request_user.value = request.user\n         response = self.get_response(request)\n         return response\n \n def get_current_user():\n     \"\"\"\n-    Retrieve the user performing the request.\n-    Returns None if there's no user context.\n+    Retrieve the request user.\n     \"\"\"\n-    return getattr(_request_local, \"user\", None)\n+    return getattr(_request_user, \"value\", None)\n"
                },
                {
                    "date": 1740119794898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import threading\n \n _request_user = threading.local()\n \n-class CurrentUserMiddleware:\n+class CaptureUserMiddleware:\n     \"\"\"\n     Middleware to track the current request's user.\n     \"\"\"\n     def __init__(self, get_response):\n"
                },
                {
                    "date": 1740894370247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n def get_current_user():\n     \"\"\"\n     Retrieve the request user.\n     \"\"\"\n-    return getattr(_request_user, \"value\", None)\n+    return re\n"
                },
                {
                    "date": 1740894375656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n def get_current_user():\n     \"\"\"\n     Retrieve the request user.\n     \"\"\"\n-    return re\n+    return request.user\n"
                },
                {
                    "date": 1740894386561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,5 +17,5 @@\n def get_current_user():\n     \"\"\"\n     Retrieve the request user.\n     \"\"\"\n-    return request.user\n+    return getattr(_request_user, \"value\", None)\n"
                }
            ],
            "date": 1739871159447,
            "name": "Commit-0",
            "content": "import threading\n\n_request_local = threading.local()\n\nclass CaptureUserMiddleware:\n    \"\"\"\n    Middleware to store the current request user.\n    This allows signals to detect who performed the action.\n    \"\"\"\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        _request_local.user = request.user if request.user.is_authenticated else None\n        response = self.get_response(request)\n        return response\n\ndef get_current_user():\n    \"\"\"\n    Retrieve the user performing the request.\n    Returns None if there's no user context.\n    \"\"\"\n    return getattr(_request_local, \"user\", None)\n"
        }
    ]
}