{
    "sourceFile": "notify/serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 14,
            "patches": [
                {
                    "date": 1739869326773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739871956976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,5 @@\n \n class NotificationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Notification\n-        fields = [\"id\", \"action\", \"model_name\", \"instance_id\", \"message\", \"is_read\", \"created_at\"]\n+        fields = [\"id\", \"model_name\", \"instance_id\", \"message\", \"is_read\", \"created_at\"]\n"
                },
                {
                    "date": 1739872007530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,5 +3,5 @@\n \n class NotificationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Notification\n-        fields = [\"id\", \"model_name\", \"instance_id\", \"message\", \"is_read\", \"created_at\"]\n+        fields = '__all__'\n"
                },
                {
                    "date": 1739872021293,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n from rest_framework import serializers\n from .models import Notification\n+from ma\n \n class NotificationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Notification\n"
                },
                {
                    "date": 1740895970268,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,62 @@\n from rest_framework import serializers\n from .models import Notification\n-from ma\n+from accounts.models import CustomUser as User\n+from accounts.serializers import UserSerializer  # Assuming you have a UserSerializer\n \n class NotificationSerializer(serializers.ModelSerializer):\n+    # Custom fields\n+    user_details = serializers.SerializerMethodField(read_only=True)\n+    formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n+\n     class Meta:\n         model = Notification\n-        fields = '__all__'\n+        fields = [\n+            'id',\n+            'user',\n+            'user_details',  # Custom field\n+            'title',\n+            'casual_message',\n+            'detailed_message',\n+            'module_name',\n+            'updated_id',\n+            'timestamp',\n+            'formatted_timestamp',  # Custom field\n+        ]\n+        read_only_fields = ['id', 'timestamp', 'user_details', 'formatted_timestamp']\n+\n+    def get_user_details(self, obj):\n+        \"\"\"\n+        Return user details using the UserSerializer.\n+        \"\"\"\n+        user = obj.user\n+        return UserSerializer(user).data\n+\n+    def get_formatted_timestamp(self, obj):\n+        \"\"\"\n+        Return a formatted timestamp.\n+        \"\"\"\n+        return obj.timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")\n+\n+    def validate_title(self, value):\n+        \"\"\"\n+        Validate the title field.\n+        \"\"\"\n+        if len(value) > 255:\n+            raise serializers.ValidationError(\"Title must be less than 255 characters.\")\n+        return value\n+\n+    def validate_casual_message(self, value):\n+        \"\"\"\n+        Validate the casual_message field.\n+        \"\"\"\n+        if len(value) > 1000:\n+            raise serializers.ValidationError(\"Casual message must be less than 1000 characters.\")\n+        return value\n+\n+    def validate_detailed_message(self, value):\n+        \"\"\"\n+        Validate the detailed_message field.\n+        \"\"\"\n+        if len(value) > 5000:\n+            raise serializers.ValidationError(\"Detailed message must be less than 5000 characters.\")\n+        return value\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740895984580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,10 @@\n from rest_framework import serializers\n from .models import Notification\n from accounts.models import CustomUser as User\n-from accounts.serializers import UserSerializer  # Assuming you have a UserSerializer\n \n+\n+\n class NotificationSerializer(serializers.ModelSerializer):\n     # Custom fields\n     user_details = serializers.SerializerMethodField(read_only=True)\n     formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n"
                },
                {
                    "date": 1740895997524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,16 @@\n from rest_framework import serializers\n from .models import Notification\n from accounts.models import CustomUser as User\n \n+class UserSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = User\n+        fields = ['id', 'first_name', 'last_name', 'email']\n \n-\n class NotificationSerializer(serializers.ModelSerializer):\n     # Custom fields\n-    user_details = serializers.SerializerMethodField(read_only=True)\n+    user_details = UserSerializer(read_only=True)\n     formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n \n     class Meta:\n         model = Notification\n"
                },
                {
                    "date": 1740896442704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,12 +6,18 @@\n     class Meta:\n         model = User\n         fields = ['id', 'first_name', 'last_name', 'email']\n \n+from rest_framework import serializers\n+from .models import Notification\n+from accounts.models import CustomUser as User\n+from accounts.serializers import UserSerializer  # Assuming you have a UserSerializer\n+\n class NotificationSerializer(serializers.ModelSerializer):\n     # Custom fields\n-    user_details = UserSerializer(read_only=True)\n+    user_details = serializers.SerializerMethodField(read_only=True)\n     formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n+    is_read = serializers.SerializerMethodField(read_only=True)\n \n     class Meta:\n         model = Notification\n         fields = [\n@@ -24,10 +30,12 @@\n             'module_name',\n             'updated_id',\n             'timestamp',\n             'formatted_timestamp',  # Custom field\n+            'read_by',  # Users who have read the notification\n+            'is_read',  # Custom field to check if the current user has read the notification\n         ]\n-        read_only_fields = ['id', 'timestamp', 'user_details', 'formatted_timestamp']\n+        read_only_fields = ['id', 'timestamp', 'user_details', 'formatted_timestamp', 'is_read']\n \n     def get_user_details(self, obj):\n         \"\"\"\n         Return user details using the UserSerializer.\n@@ -40,27 +48,12 @@\n         Return a formatted timestamp.\n         \"\"\"\n         return obj.timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")\n \n-    def validate_title(self, value):\n+    def get_is_read(self, obj):\n         \"\"\"\n-        Validate the title field.\n+        Check if the current user has read the notification.\n         \"\"\"\n-        if len(value) > 255:\n-            raise serializers.ValidationError(\"Title must be less than 255 characters.\")\n-        return value\n-\n-    def validate_casual_message(self, value):\n-        \"\"\"\n-        Validate the casual_message field.\n-        \"\"\"\n-        if len(value) > 1000:\n-            raise serializers.ValidationError(\"Casual message must be less than 1000 characters.\")\n-        return value\n-\n-    def validate_detailed_message(self, value):\n-        \"\"\"\n-        Validate the detailed_message field.\n-        \"\"\"\n-        if len(value) > 5000:\n\\ No newline at end of file\n-            raise serializers.ValidationError(\"Detailed message must be less than 5000 characters.\")\n-        return value\n+        request = self.context.get('request')\n+        if request and request.user.is_authenticated:\n+            return request.user in obj.read_by.all()\n+        return False\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740896451459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,13 +6,8 @@\n     class Meta:\n         model = User\n         fields = ['id', 'first_name', 'last_name', 'email']\n \n-from rest_framework import serializers\n-from .models import Notification\n-from accounts.models import CustomUser as User\n-from accounts.serializers import UserSerializer  # Assuming you have a UserSerializer\n-\n class NotificationSerializer(serializers.ModelSerializer):\n     # Custom fields\n     user_details = serializers.SerializerMethodField(read_only=True)\n     formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n"
                },
                {
                    "date": 1740896466056,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         fields = ['id', 'first_name', 'last_name', 'email']\n \n class NotificationSerializer(serializers.ModelSerializer):\n     # Custom fields\n-    user_details = serializers.SerializerMethodField(read_only=True)\n+    user_details = UserSerializerread_only=True)\n     formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n     is_read = serializers.SerializerMethodField(read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1740896471433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         fields = ['id', 'first_name', 'last_name', 'email']\n \n class NotificationSerializer(serializers.ModelSerializer):\n     # Custom fields\n-    user_details = UserSerializerread_only=True)\n+    user_details = UserSerializer(read_only=True)\n     formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n     is_read = serializers.SerializerMethodField(read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1740896487624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n         fields = ['id', 'first_name', 'last_name', 'email']\n \n class NotificationSerializer(serializers.ModelSerializer):\n     # Custom fields\n-    user_details = UserSerializer(read_only=True)\n+    user_details = serializers.SerializerMethodField(read_only=True)\n     formatted_timestamp = serializers.SerializerMethodField(read_only=True)\n     is_read = serializers.SerializerMethodField(read_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1742801393045,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,10 @@\n     def get_formatted_timestamp(self, obj):\n         \"\"\"\n         Return a formatted timestamp.\n         \"\"\"\n-        return obj.timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")\n+        local_timestamp = localtime(obj.timestamp)  # Converts to local timezone (from settings.py)\n+    return local_timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")\n \n     def get_is_read(self, obj):\n         \"\"\"\n         Check if the current user has read the notification.\n"
                },
                {
                    "date": 1742801398540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n         \"\"\"\n         Return a formatted timestamp.\n         \"\"\"\n         local_timestamp = localtime(obj.timestamp)  # Converts to local timezone (from settings.py)\n-    return local_timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")\n+        return local_timestamp.strftime(\"%Y-%m-%d %H:%M:%S\")\n \n     def get_is_read(self, obj):\n         \"\"\"\n         Check if the current user has read the notification.\n"
                },
                {
                    "date": 1742801410012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n from rest_framework import serializers\n from .models import Notification\n from accounts.models import CustomUser as User\n+from django.utils.timezone import localtime\n \n+\n class UserSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = User\n         fields = ['id', 'first_name', 'last_name', 'email']\n"
                }
            ],
            "date": 1739869326773,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom .models import Notification\n\nclass NotificationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Notification\n        fields = [\"id\", \"action\", \"model_name\", \"instance_id\", \"message\", \"is_read\", \"created_at\"]\n"
        }
    ]
}