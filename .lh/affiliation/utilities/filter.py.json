{
    "sourceFile": "affiliation/utilities/filter.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1739939989473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739939994785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n import django_filters\n from django.db.models import Q\n-from .models import Affiliation\n+from ..models import Affiliation\n from coursemanagement.models import Course\n from certification.models import Certification\n \n class CharInFilter(django_filters.BaseInFilter, django_filters.CharFilter):\n"
                },
                {
                    "date": 1744214216050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n class NumberInFilter(django_filters.BaseInFilter, django_filters.NumberFilter):\n     pass\n \n class AffiliationFilter(django_filters.FilterSet):\n-    id = django_filters.UUIDFilter(field_name=\"public_id\", lookup_expr=\"exact\")\n+    id = django_filters.UUIDFilter(field_name=\"id\", lookup_expr=\"exact\")\n \n     # Support multiple values using `in` lookup\n     name = CharInFilter(field_name=\"name\", lookup_expr=\"in\")\n     address = CharInFilter(field_name=\"address\", lookup_expr=\"in\")\n"
                }
            ],
            "date": 1739939989473,
            "name": "Commit-0",
            "content": "import django_filters\nfrom django.db.models import Q\nfrom .models import Affiliation\nfrom coursemanagement.models import Course\nfrom certification.models import Certification\n\nclass CharInFilter(django_filters.BaseInFilter, django_filters.CharFilter):\n    pass\n\nclass NumberInFilter(django_filters.BaseInFilter, django_filters.NumberFilter):\n    pass\n\nclass AffiliationFilter(django_filters.FilterSet):\n    id = django_filters.UUIDFilter(field_name=\"public_id\", lookup_expr=\"exact\")\n\n    # Support multiple values using `in` lookup\n    name = CharInFilter(field_name=\"name\", lookup_expr=\"in\")\n    address = CharInFilter(field_name=\"address\", lookup_expr=\"in\")\n    district = CharInFilter(field_name=\"district__name\", lookup_expr=\"in\")\n    university_type = CharInFilter(field_name=\"university_type\", lookup_expr=\"in\")\n\n    # Filtering by multiple certifications (comma-separated values)\n    certification = django_filters.CharFilter(method=\"filter_by_certifications\")\n\n    # Date and year range filters\n    created_date = django_filters.DateFilter(field_name=\"created_date\", lookup_expr=\"exact\")\n    created_date__gte = django_filters.DateFilter(field_name=\"created_date\", lookup_expr=\"gte\")\n    created_date__lte = django_filters.DateFilter(field_name=\"created_date\", lookup_expr=\"lte\")\n    established_year = NumberInFilter(field_name=\"established_year\", lookup_expr=\"in\")\n    established_year__gte = django_filters.NumberFilter(field_name=\"established_year\", lookup_expr=\"gte\")\n    established_year__lte = django_filters.NumberFilter(field_name=\"established_year\", lookup_expr=\"lte\")\n    updated_date = django_filters.DateTimeFilter(field_name=\"updated_date\", lookup_expr=\"exact\")\n    updated_date__gte = django_filters.DateTimeFilter(field_name=\"updated_date\", lookup_expr=\"gte\")\n    updated_date__lte = django_filters.DateTimeFilter(field_name=\"updated_date\", lookup_expr=\"lte\")\n\n    phone_number = CharInFilter(field_name=\"phone_number\", lookup_expr=\"in\")\n    email = CharInFilter(field_name=\"email\", lookup_expr=\"in\")\n    description = CharInFilter(field_name=\"description\", lookup_expr=\"in\")\n    is_verified = django_filters.BooleanFilter(field_name=\"is_verified\")\n\n    # ManyToMany fields filtering using custom function\n    courses = django_filters.CharFilter(method=\"filter_by_courses\")\n    affiliated_colleges = django_filters.CharFilter(method=\"filter_by_affiliated_colleges\")\n\n    # Custom filtering methods for ManyToMany fields (comma-separated values)\n    def filter_by_certifications(self, queryset, name, value):\n        \"\"\"Filter by multiple certifications using comma-separated values\"\"\"\n        if value:\n            certifications = value.split(',') if ',' in value else [value]\n            queryset = queryset.filter(certification__id__in=certifications).distinct()\n        return queryset\n\n    def filter_by_courses(self, queryset, name, value):\n        \"\"\"Filter by multiple courses using comma-separated values\"\"\"\n        if value:\n            course_ids = value.split(',') if ',' in value else [value]\n            queryset = queryset.filter(course__id__in=course_ids).distinct()\n        return queryset\n\n    def filter_by_affiliated_colleges(self, queryset, name, value):\n        \"\"\"Filter by multiple affiliated colleges using comma-separated values\"\"\"\n        if value:\n            college_ids = value.split(',') if ',' in value else [value]\n            queryset = queryset.filter(affiliatedcollege__id__in=college_ids).distinct()\n        return queryset\n\n    class Meta:\n        model = Affiliation\n        fields = [\n            \"id\", \"name\", \"address\", \"district\", \"university_type\",\n            \"certification\", \"created_date\", \"established_year\",\n            \"updated_date\", \"phone_number\", \"email\", \"description\",\n            \"is_verified\", \"courses\", \"affiliated_colleges\"\n        ]\n"
        }
    ]
}