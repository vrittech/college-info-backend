{
    "sourceFile": "affiliation/serializers/affiliation_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1738133415027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738134315295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         \n         # Create the Affiliation instance\n         affiliation = Affiliation.objects.create(**validated_data)\n \n-        # Add certifications if provided\n+        # Associate certifications if provided\n         if certifications:\n             affiliation.certification.set(certifications)\n \n         return affiliation\n"
                },
                {
                    "date": 1738134332474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,9 @@\n         model = Affiliation\n         fields = '__all__'\n \n class AffiliationWriteSerializers(serializers.ModelSerializer):\n-    certification = serializers.ListField(\n-        child=serializers.IntegerField(), required=False, write_only=True\n-    )\n+    certification = serializers.CharField(write_only=True, required=False)\n \n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n"
                },
                {
                    "date": 1738134462322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,14 +11,28 @@\n         model = Affiliation\n         fields = '__all__'\n \n class AffiliationWriteSerializers(serializers.ModelSerializer):\n+    # Accept `certification` as a comma-separated string from form data\n     certification = serializers.CharField(write_only=True, required=False)\n \n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n \n+    def validate_certification(self, value):\n+        \"\"\"\n+        Converts a comma-separated string into a list of integers.\n+        \"\"\"\n+        if value:\n+            try:\n+                # Split the string and convert each value to an integer\n+                certification_ids = [int(pk.strip()) for pk in value.split(\",\") if pk.strip()]\n+                return certification_ids\n+            except ValueError:\n+                raise serializers.ValidationError(\"Certification must be a comma-separated list of valid integers.\")\n+        return []\n+\n     def create(self, validated_data):\n         # Extract certifications from the validated data\n         certifications = validated_data.pop('certification', [])\n         \n"
                },
                {
                    "date": 1738135815005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,12 +10,17 @@\n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n \n+from rest_framework import serializers\n+\n class AffiliationWriteSerializers(serializers.ModelSerializer):\n-    # Accept `certification` as a comma-separated string from form data\n+    # Accept `certification` as a comma-separated string for input\n     certification = serializers.CharField(write_only=True, required=False)\n \n+    # Include `certification` as a read-only field for the response\n+    certifications = serializers.SerializerMethodField()\n+\n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n \n@@ -24,9 +29,9 @@\n         Converts a comma-separated string into a list of integers.\n         \"\"\"\n         if value:\n             try:\n-                # Split the string and convert each value to an integer\n+                # Split the string and convert to integers\n                 certification_ids = [int(pk.strip()) for pk in value.split(\",\") if pk.strip()]\n                 return certification_ids\n             except ValueError:\n                 raise serializers.ValidationError(\"Certification must be a comma-separated list of valid integers.\")\n@@ -57,5 +62,11 @@\n         # Update certifications if provided\n         if certifications is not None:\n             instance.certification.set(certifications)\n \n-        return instance\n\\ No newline at end of file\n+        return instance\n+\n+    def get_certifications(self, obj):\n+        \"\"\"\n+        Get the certifications for the response.\n+        \"\"\"\n+        return [cert.id for cert in obj.certification.all()]\n"
                }
            ],
            "date": 1738133415027,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Affiliation\n\nclass AffiliationListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Affiliation\n        fields = '__all__'\n\nclass AffiliationRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Affiliation\n        fields = '__all__'\n\nclass AffiliationWriteSerializers(serializers.ModelSerializer):\n    certification = serializers.ListField(\n        child=serializers.IntegerField(), required=False, write_only=True\n    )\n\n    class Meta:\n        model = Affiliation\n        fields = '__all__'\n\n    def create(self, validated_data):\n        # Extract certifications from the validated data\n        certifications = validated_data.pop('certification', [])\n        \n        # Create the Affiliation instance\n        affiliation = Affiliation.objects.create(**validated_data)\n\n        # Add certifications if provided\n        if certifications:\n            affiliation.certification.set(certifications)\n\n        return affiliation\n\n    def update(self, instance, validated_data):\n        # Extract certifications from the validated data\n        certifications = validated_data.pop('certification', None)\n\n        # Update the instance fields\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n\n        # Update certifications if provided\n        if certifications is not None:\n            instance.certification.set(certifications)\n\n        return instance"
        }
    ]
}