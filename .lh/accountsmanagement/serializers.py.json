{
    "sourceFile": "accountsmanagement/serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739167254501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739167292516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,5 +149,7 @@\n \n     def validate(self, data):\n         if len(data.get('new_password')) < 8:\n             raise serializers.ValidationError(\"New password must be at least 8 characters long.\")\n-        return data\n\\ No newline at end of file\n+        return data\n+\n+    path('change-password/', CustomChangePasswordView.as_view(), name='change-password'),\n"
                }
            ],
            "date": 1739167254501,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom accounts.models import CustomUser\nfrom django.contrib.auth.hashers import make_password,check_password\n\nfrom django.core.cache import cache\nfrom django.db.models import Q\n\ndef TokenValidate(token,email,key):\n    user = CustomUser.objects.filter(Q(email=email))\n    if user.exists():\n        user = user.first()\n        user_check_key = key+str(user.id)\n        token_access = cache.get(user_check_key)\n        if token_access == token:\n            user.is_verified = True\n            user.save()\n            return True\n    return False\n    \n\nclass TokenValidationSerializer(serializers.Serializer):\n    otp = serializers.CharField()\n    email = serializers.CharField()\n    \n    def validate_otp(self, value):\n        # Perform your token validation logic here\n        email = self.initial_data.get('email')  # Access email from initial data\n        if not TokenValidate(value,email,\"password_reset_otp_\"):\n            raise serializers.ValidationError(\"Invalid token\")\n        return value\n\n        \nclass CustomPasswordResetSerializer(serializers.Serializer):\n    token = serializers.CharField(min_length=5)\n    password = serializers.CharField(min_length=4)\n    email = serializers.CharField()\n\n    class Meta:\n        fields = '__all__'\n\n    def validate_password(self, value):\n        # Hash the password using Django's make_password function\n        return make_password(value)\n    \n    def validate_token(self, value):\n        # Perform your token validation logic here\n        email = self.initial_data.get('email')  # Access email from initial data\n        if not TokenValidate(value,email,\"password_reset_otp_\"):\n            raise serializers.ValidationError(\"Invalid token\")\n        return value\n    \n    def validate(self, attrs):\n        attrs  =  super().validate(attrs)\n \n        if TokenValidate(self.initial_data.get('token') ,self.initial_data.get('email'),\"password_reset_otp_\"):\n            attrs['token_validate'] = True\n        else:\n            attrs['token_validate'] = False\n        return attrs\n    \nclass EmailResetSerializer(serializers.Serializer):\n    token = serializers.CharField(min_length=5)\n    second_email = serializers.EmailField()\n    email = serializers.EmailField()\n    password = serializers.CharField(max_length=255)\n\n    class Meta:\n        fields = '__all__'\n\n\n    def validate_token(self, value):\n        print(\"validiting token\")\n        # Perform your token validation logic here\n        email = self.initial_data.get('email')  # Access email from initial data\n        \n        if not TokenValidate(value,email,\"email_reset_otp_\"):\n            raise serializers.ValidationError(\"Invalid token\")\n        return value\n    \n\n    def validate_email(self, value):\n\n        email = self.initial_data.get('email')  # Access email from initial data\n        \n\n        user = CustomUser.objects.filter(Q(email=email))\n        if not user.exists():\n            raise serializers.ValidationError(\"Your account does not exists!.\")\n        return value\n    \n    def validate_password(self, value):\n\n        email = self.initial_data.get('email')  # Access email from initial data\n        input_password = self.initial_data.get('password')\n\n        user = CustomUser.objects.filter(Q(email=email))\n        if not user.exists():\n            raise serializers.ValidationError(\"Your account does not exists | You are unauthorized user.\")\n        if not check_password(input_password,CustomUser.objects.get(email=email).password):\n            raise serializers.ValidationError(\"You are unauthorized user\")\n     \n        return value\n     \n    \n    def validate(self, attrs):\n        attrs  =  super().validate(attrs)\n\n        if TokenValidate(self.initial_data.get('token') ,self.initial_data.get('email'),\"email_reset_otp_\"):\n            attrs['token_validate'] = True\n        else:\n            attrs['token_validate'] = False\n        return attrs\n\n \nclass EmailNumberSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n\nclass EmailChangeGetOtpSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    second_email = serializers.EmailField()\n\n\nclass ContactMeSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    subject = serializers.CharField(required = False)\n    message = serializers.CharField()\n    phone = serializers.CharField(required = False)\n    full_name =  serializers.CharField()\n\n# class EmailNumberSerializer(serializers.Serializer):\n    # email = serializers.EmailField()\n#     type = serializers.ChoiceField(choices=[\n#         ('verification', 'Verification'),\n#         ('reset_password', 'Reset Password')\n#     ])\n    \nclass PasswordNumberSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    # type = serializers.ChoiceField(choices=[\n    #     ('verification', 'Verification'),\n    #     ('reset_password', 'Reset Password')\n    # ])\n\nclass CustomChangePasswordSerializer(serializers.Serializer):\n    email = serializers.CharField(required=True)\n    old_password = serializers.CharField(write_only=True)\n    new_password = serializers.CharField(write_only=True)\n    confirm_new_password = serializers.CharField(write_only=True)\n\n    def validate(self, data):\n        if len(data.get('new_password')) < 8:\n            raise serializers.ValidationError(\"New password must be at least 8 characters long.\")\n        return data"
        }
    ]
}