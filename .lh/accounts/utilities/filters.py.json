{
    "sourceFile": "accounts/utilities/filters.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1741253717023,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1741332422332,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,57 @@\n+import django_filters\n+from accounts.models import CustomUser\n+\n+class CustomUserFilter(django_filters.FilterSet):\n+    \"\"\"\n+    Filter class for CustomUser model excluding image fields.\n+    Allows filtering by email, phone, college, is_verified, etc.\n+    \"\"\"\n+\n+    first_name = django_filters.CharFilter(lookup_expr='icontains')\n+    last_name = django_filters.CharFilter(lookup_expr='icontains')\n+    # full_name = django_filters.CharFilter(lookup_expr='icontains')\n+    email = django_filters.CharFilter(lookup_expr='icontains')\n+    phone = django_filters.CharFilter(lookup_expr='icontains')\n+    position = django_filters.NumberFilter()\n+    is_active = django_filters.BooleanFilter()\n+    is_verified = django_filters.BooleanFilter()\n+    college = django_filters.NumberFilter(field_name=\"college__id\")  # Filter by college ID\n+    social_media = django_filters.CharFilter(method='filter_social_media')\n+    groups = django_filters.CharFilter(method='filter_groups')\n+    user_permissions = django_filters.CharFilter(method='filter_permissions')\n+    \n+    # âœ… Using `lte` and `gte` for date filtering\n+    created_date__gte = django_filters.DateFilter(field_name=\"created_date\", lookup_expr=\"gte\")\n+    created_date__lte = django_filters.DateFilter(field_name=\"created_date\", lookup_expr=\"lte\")\n+    updated_date__gte = django_filters.DateFilter(field_name=\"updated_date\", lookup_expr=\"gte\")\n+    updated_date__lte = django_filters.DateFilter(field_name=\"updated_date\", lookup_expr=\"lte\")\n+\n+    class Meta:\n+        model = CustomUser\n+        fields = [\n+            'first_name', 'last_name', 'full_name', 'email', 'phone', 'position',\n+            'is_active', 'is_verified', 'college', 'social_media', 'groups',\n+            'user_permissions', 'created_date__gte', 'created_date__lte',\n+            'updated_date__gte', 'updated_date__lte'\n+        ]\n+\n+    def filter_social_media(self, queryset, name, value):\n+        \"\"\"\n+        Filter users based on social media name.\n+        Example: ?social_media=Facebook\n+        \"\"\"\n+        return queryset.filter(social_media__name__icontains=value)\n+\n+    def filter_groups(self, queryset, name, value):\n+        \"\"\"\n+        Filter users by group name.\n+        Example: ?groups=Admin\n+        \"\"\"\n+        return queryset.filter(groups__name__icontains=value)\n+\n+    def filter_permissions(self, queryset, name, value):\n+        \"\"\"\n+        Filter users by permission name.\n+        Example: ?user_permissions=can_view_college\n+        \"\"\"\n+        return queryset.filter(user_permissions__codename__icontains=value)\n"
                },
                {
                    "date": 1741332433503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n \n     class Meta:\n         model = CustomUser\n         fields = [\n-            'first_name', 'last_name', 'full_name', 'email', 'phone', 'position',\n+            'first_name', 'last_name', 'email', 'phone', 'position',\n             'is_active', 'is_verified', 'college', 'social_media', 'groups',\n             'user_permissions', 'created_date__gte', 'created_date__lte',\n             'updated_date__gte', 'updated_date__lte'\n         ]\n@@ -54,59 +54,4 @@\n         Filter users by permission name.\n         Example: ?user_permissions=can_view_college\n         \"\"\"\n         return queryset.filter(user_permissions__codename__icontains=value)\n-import django_filters\n-from django.db.models import Q\n-from ..models import CustomUser\n-from django.contrib.auth.models import Group\n-\n-\n-class CustomUserFilter(django_filters.FilterSet):\n-    first_name = django_filters.CharFilter(field_name=\"first_name\", lookup_expr=\"icontains\")\n-    last_name = django_filters.CharFilter(field_name=\"last_name\", lookup_expr=\"icontains\")\n-    position = django_filters.CharFilter(method='filter_by_multiple_positions')\n-    # department = django_filters.ModelMultipleChoiceFilter(\n-    #     field_name=\"department\",\n-    #     queryset=CustomUser.department.field.related_model.objects.all(),\n-    #     to_field_name=\"id\",  # Change to \"name\" if filtering by department name\n-    # )\n-    groups = django_filters.ModelMultipleChoiceFilter(\n-        field_name=\"groups\",\n-        queryset=Group.objects.all(),\n-        to_field_name=\"id\",  # Change to \"name\" if filtering by group name\n-    )\n-    is_staff = django_filters.BooleanFilter()\n-    is_active = django_filters.BooleanFilter()\n-    created_date_gte = django_filters.DateFilter(\n-        field_name=\"created_at\", lookup_expr=\"gte\", label=\"Created Date (From)\"\n-    )\n-    created_date_lte = django_filters.DateFilter(\n-        field_name=\"created_at\", lookup_expr=\"lte\", label=\"Created Date (To)\"\n-    )\n-    email = django_filters.CharFilter(method='filter_by_multiple_emails')\n-\n-    class Meta:\n-        model = CustomUser\n-        fields = {\n-            \"username\": [\"exact\", \"icontains\"],\n-        }\n-\n-    def filter_by_multiple_positions(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter to handle multiple positions. Accepts comma-separated values.\n-        \"\"\"\n-        if value:\n-            positions = value.split(',')  # Split comma-separated positions\n-            return queryset.filter(position__in=positions)\n-        return queryset\n-\n-    def filter_by_multiple_emails(self, queryset, name, value):\n-        \"\"\"\n-        Custom filter to handle multiple emails. Accepts comma-separated values.\n-        \"\"\"\n-        if value:\n-            emails = value.split(',')  # Split comma-separated emails\n-            return queryset.filter(email__in=emails)\n-        return queryset\n-\n-\n"
                },
                {
                    "date": 1742537941715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n     email = django_filters.CharFilter(lookup_expr='icontains')\n     phone = django_filters.CharFilter(lookup_expr='icontains')\n     position = django_filters.NumberFilter()\n     is_active = django_filters.BooleanFilter()\n+    \n     is_verified = django_filters.BooleanFilter()\n     college = django_filters.NumberFilter(field_name=\"college__id\")  # Filter by college ID\n     social_media = django_filters.CharFilter(method='filter_social_media')\n     groups = django_filters.CharFilter(method='filter_groups')\n"
                },
                {
                    "date": 1742537954989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     email = django_filters.CharFilter(lookup_expr='icontains')\n     phone = django_filters.CharFilter(lookup_expr='icontains')\n     position = django_filters.NumberFilter()\n     is_active = django_filters.BooleanFilter()\n-    \n+    is_staff = django_filters.BooleanFilter()\n     is_verified = django_filters.BooleanFilter()\n     college = django_filters.NumberFilter(field_name=\"college__id\")  # Filter by college ID\n     social_media = django_filters.CharFilter(method='filter_social_media')\n     groups = django_filters.CharFilter(method='filter_groups')\n@@ -29,9 +29,9 @@\n \n     class Meta:\n         model = CustomUser\n         fields = [\n-            'first_name', 'last_name', 'email', 'phone', 'position',\n+            'first_name','is' 'last_name', 'email', 'phone', 'position',\n             'is_active', 'is_verified', 'college', 'social_media', 'groups',\n             'user_permissions', 'created_date__gte', 'created_date__lte',\n             'updated_date__gte', 'updated_date__lte'\n         ]\n"
                },
                {
                    "date": 1742537960648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n \n     class Meta:\n         model = CustomUser\n         fields = [\n-            'first_name','is' 'last_name', 'email', 'phone', 'position',\n+            'first_name','is_staff', 'last_name', 'email', 'phone', 'position',\n             'is_active', 'is_verified', 'college', 'social_media', 'groups',\n             'user_permissions', 'created_date__gte', 'created_date__lte',\n             'updated_date__gte', 'updated_date__lte'\n         ]\n"
                }
            ],
            "date": 1741253717023,
            "name": "Commit-0",
            "content": "import django_filters\nfrom django.db.models import Q\nfrom ..models import CustomUser\nfrom django.contrib.auth.models import Group\n\n\nclass CustomUserFilter(django_filters.FilterSet):\n    first_name = django_filters.CharFilter(field_name=\"first_name\", lookup_expr=\"icontains\")\n    last_name = django_filters.CharFilter(field_name=\"last_name\", lookup_expr=\"icontains\")\n    position = django_filters.CharFilter(method='filter_by_multiple_positions')\n    # department = django_filters.ModelMultipleChoiceFilter(\n    #     field_name=\"department\",\n    #     queryset=CustomUser.department.field.related_model.objects.all(),\n    #     to_field_name=\"id\",  # Change to \"name\" if filtering by department name\n    # )\n    groups = django_filters.ModelMultipleChoiceFilter(\n        field_name=\"groups\",\n        queryset=Group.objects.all(),\n        to_field_name=\"id\",  # Change to \"name\" if filtering by group name\n    )\n    is_staff = django_filters.BooleanFilter()\n    is_active = django_filters.BooleanFilter()\n    created_date_gte = django_filters.DateFilter(\n        field_name=\"created_at\", lookup_expr=\"gte\", label=\"Created Date (From)\"\n    )\n    created_date_lte = django_filters.DateFilter(\n        field_name=\"created_at\", lookup_expr=\"lte\", label=\"Created Date (To)\"\n    )\n    email = django_filters.CharFilter(method='filter_by_multiple_emails')\n\n    class Meta:\n        model = CustomUser\n        fields = {\n            \"username\": [\"exact\", \"icontains\"],\n        }\n\n    def filter_by_multiple_positions(self, queryset, name, value):\n        \"\"\"\n        Custom filter to handle multiple positions. Accepts comma-separated values.\n        \"\"\"\n        if value:\n            positions = value.split(',')  # Split comma-separated positions\n            return queryset.filter(position__in=positions)\n        return queryset\n\n    def filter_by_multiple_emails(self, queryset, name, value):\n        \"\"\"\n        Custom filter to handle multiple emails. Accepts comma-separated values.\n        \"\"\"\n        if value:\n            emails = value.split(',')  # Split comma-separated emails\n            return queryset.filter(email__in=emails)\n        return queryset\n\n\n"
        }
    ]
}