{
    "sourceFile": "accounts/utilities/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1739265395873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739265404624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,4 +53,66 @@\n #             return view.get_object().user_id == request.user.id\n #         elif view.action == 'destroy':\n #             return isOwner(request)\n \n+from rest_framework.permissions import BasePermission, SAFE_METHODS\n+\n+ACCOUNTS_PERMISSIONS = {\n+    \"add\": \"add_customuser\",\n+    \"change\": \"change_customuser\",\n+    \"delete\": \"delete_customuser\",\n+    \"view\": \"view_customuser\",\n+    \"verify\": \"can_verify_user\",\n+}\n+\n+def HasPermission(request, codename):\n+    \"\"\"Check if the user has a specific Django permission\"\"\"\n+    return request.user.has_perm(f\"app_name.{codename}\")\n+\n+def IsSelfOrAdmin(request, obj):\n+    \"\"\"Ensure users can only modify their own account unless they have admin privileges\"\"\"\n+    return obj.id == request.user.id or request.user.is_superuser or request.user.is_staff\n+\n+class accountsPermission(BasePermission):\n+    \"\"\"\n+    Permission class for managing user accounts, ensuring high security.\n+    \"\"\"\n+\n+    def has_permission(self, request, view):\n+        if request.user.is_superuser:  # Superuser has all permissions\n+            return True\n+\n+        if view.action in [\"list\"]:\n+            return HasPermission(request, ACCOUNTS_PERMISSIONS[\"view\"]) and request.user.is_staff  # Restrict list access to staff/admins\n+\n+        elif view.action in [\"retrieve\"]:\n+            return HasPermission(request, ACCOUNTS_PERMISSIONS[\"view\"]) and (request.user.is_staff or request.user.id == view.kwargs.get('pk'))\n+\n+        elif view.action in [\"create\"]:\n+            return True  # Allow anyone (even unauthenticated users) to sign up\n+\n+        elif view.action in [\"update\", \"partial_update\"]:\n+            return HasPermission(request, ACCOUNTS_PERMISSIONS[\"change\"]) and request.user.is_authenticated  # User must be logged in\n+\n+        elif view.action == \"destroy\":\n+            return HasPermission(request, ACCOUNTS_PERMISSIONS[\"delete\"]) and request.user.is_superuser  # Only superusers can delete accounts\n+\n+        return False  # Default deny access\n+\n+    def has_object_permission(self, request, view, obj):\n+        \"\"\"\n+        Object-level permission to ensure users can only modify their own account,\n+        unless they have admin/superuser privileges.\n+        \"\"\"\n+        if request.user.is_superuser:  # Superuser has full access\n+            return True\n+\n+        if view.action in SAFE_METHODS:  # Read-only permissions for users\n+            return HasPermission(request, ACCOUNTS_PERMISSIONS[\"view\"])\n+\n+        if view.action in [\"update\", \"partial_update\"]:\n+            return HasPermission(request, ACCOUNTS_PERMISSIONS[\"change\"]) and IsSelfOrAdmin(request, obj)\n+\n+        if view.action == \"destroy\":\n+            return HasPermission(request, ACCOUNTS_PERMISSIONS[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n+\n+        return False  # Default deny access\n"
                }
            ],
            "date": 1739265395873,
            "name": "Commit-0",
            "content": "# #------permission are classified into three types------->\n# #first-level:-Admin,Superadmin,Superuser (this is  user model class which can be considered as ObjectA)\n# #second-level:-object 'B' is assigned to user(i.e in object B , ObjectA is assigned), where user called as ObjectA\n# #third-level:-object 'C' is assigned to object object B(i.e object B is assigned in object C)\n\n# #model ObjectB->user field\n# #model ObjectC->objectB field(objectB id)\n\n\n# #as example, we can consider as , user,company,job where user is ObjectA,company is ObjectB,job is ObjectC\n\n# from rest_framework.permissions import BasePermission\n\n# SUPER_ADMIN = 1\n# ADMIN = 2\n\n\n# def IsAuthenticated(request):\n#     return bool(request.user and request.user.is_authenticated)\n\n# def SuperAdminLevel(request):\n#     return bool(IsAuthenticated(request) and request.user.is_superuser)\n\n# def AdminLevel(request):\n#     return bool(IsAuthenticated(request) and request.user.role in [ADMIN,SUPER_ADMIN])\n\n# def isOwner(request):\n#     if str(request.user.id) == str(request.data.get('user')):\n#         return True\n    \n#     elif len(request.data)==0 and len(request.POST)==0:\n#         return True\n\n#     return False\n\n\n# # def ObjectBOwner(request):\n# #     company = ObjectB.objects.filter(id = request.data.get('objectb'),user = request.user.id)\n# #     if company.exists():\n# #         return True\n# #     return False\n\n# class accountsPermission(BasePermission):\n#     def has_permission(self, request, view):\n#         if view.action in [\"list\"]:\n#             return True\n#         elif view.action in ['retrieve']:\n#             return isOwner(request)\n#         elif view.action in ['create','update']:\n#             return isOwner(request) #second level\n#             return ObjectBOwner(request) #third level\n#         elif view.action == \"partial_update\":\n#             return view.get_object().user_id == request.user.id\n#         elif view.action == 'destroy':\n#             return isOwner(request)\n\n"
        }
    ]
}