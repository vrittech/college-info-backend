{
    "sourceFile": "accounts/serializers/custom_user_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1728378543651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1728378543651,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom django.contrib.auth.models import Group,Permission\nfrom ..models import CustomUser\nfrom django.contrib.auth.hashers import make_password\nfrom ...accountsmanagement import roles\nfrom ..utilities.permission import SecureFields\n\nclass CustomUserReadSerializer(serializers.ModelSerializer):\n    class Meta:\n        ref_name =  \"account serializers\"\n        model = CustomUser\n        # fields = '__all__' \n        exclude = ['password']\n\nclass CustomUserReadLimitedSerializer(serializers.ModelSerializer):\n    class Meta:\n        ref_name =  \"CustomUserReadLimitedSerializer serializers\"\n        model = CustomUser\n        fields = ['id','email','first_name','username',] \n\nclass CustomUserReadLimitedSerializer_1(serializers.ModelSerializer):\n    class Meta:\n        ref_name =  \"CustomUserReadLimitedSerializer serializers\"\n        model = CustomUser\n        fields = ['id','email','first_name','username','last_name','role','getRoleName']\n\n\nclass CustomUserSerializer(serializers.ModelSerializer):\n    \n    def validate_password(self,value):#field level validation\n        if len(value) < 5:\n            raise serializers.ValidationError('Password must be 8 digit')\n        return make_password(value) \n    \n    def validate_role(self,value):#field level validation\n        user = self.context['request'].user\n        # print(user.is_authenticated)\n        if not user.is_authenticated:\n            if value == roles.USER:\n                pass\n            else:\n                raise serializers.ValidationError(\"You can only set USER,PUBLISHER as role\") \n        elif user.role in [roles.ADMIN,roles.SUPER_ADMIN]:\n            return value\n        elif user.is_authenticated and value!=roles.USER:\n                raise serializers.ValidationError(\"You can only set USER as role\") \n        return value\n    \n    def validate_is_verified(self,value):\n\n        user = self.context['request'].user\n        if user.is_authenticated:\n            if user.role == roles.ADMIN:\n                return value\n            else:\n                return False\n        else:\n            return False\n\n    def validate_is_superuser(self,value):\n        if value == True:\n            raise serializers.ValidationError(\"You can not set USER as SYSTEM_ADMIN\") \n        else:\n            return False\n\n    def validate(self, attrs):\n        request = self.context.get('request')\n        action = self.context['view'].action     \n\n        if action == 'partial_update':\n            old_password = request.data.get('old_password')  \n            if old_password is not None:      \n                instance = self.instance\n                if not instance.check_password(old_password):\n                    raise serializers.ValidationError(\"Password does not match\")\n            attrs['old_password_change_case'] = True\n        return attrs        \n\n    def get_extra_kwargs(self):\n        extra_kwargs = super().get_extra_kwargs()\n        try:\n            if self.context['request'].method == 'PUT':\n                extra_kwargs['password'] = {'required': False}\n            return extra_kwargs\n        except:\n            pass\n    \n    class Meta:\n        ref_name =  \"accountWriteserializer\"\n        model = CustomUser\n        fields = '__all__' \n\n\n    def get_fields(self):\n        model_fields = super().get_fields()\n        SecureFields(self,model_fields,['email','is_active','is_verified','role','provider','username','is_superuser'],['PATCH','PUT'],[roles.ADMIN,roles.SUPER_ADMIN])\n        # SecureFields(self,model_fields,['provider'],['PATCH','PUT'],[]) #if empty [] it means it is striction for all\n        return model_fields\n\nclass RoleSerializer(serializers.Serializer):\n    role_id = serializers.IntegerField()\n    role_name = serializers.CharField()\n    def to_representation(self, instance):\n        return {'role_id': instance[0], 'role_name': instance[1]}\n\n\nclass GroupSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Group\n        fields = '__all__'  \n\nclass PermissionSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Permission\n        fields = '__all__'  \n\nclass LoginSerializer(serializers.Serializer):\n    email = serializers.EmailField()\n    username = serializers.CharField()\n    password = serializers.CharField()\n\nclass GroupNamesSerializer(serializers.Serializer):\n    group_names = serializers.ListField(child=serializers.CharField())\n\nclass PermissionGroupSerializer(serializers.Serializer):\n    permission_id = serializers.IntegerField()\n    groups = serializers.DictField(child=serializers.BooleanField())\n\n\nclass UserDetailsSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CustomUser\n        fields = ['id', 'full_name', 'phone', 'image', 'email']\n    \n  \n    "
        }
    ]
}