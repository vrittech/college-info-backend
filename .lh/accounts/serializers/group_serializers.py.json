{
    "sourceFile": "accounts/serializers/group_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1739425730328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739425738898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,13 +18,13 @@\n     class Meta:\n         model = Group\n         fields = ['id', 'name', 'permissions', 'permission_ids', 'position']\n \n-    def validate_position(self, value):\n-        # Check if a group with this position already exists in GroupExtension\n-        if GroupExtension.objects.filter(position=value).exists():\n-            raise serializers.ValidationError(\"A group with this position already exists.\")\n-        return value\n+    # def validate_position(self, value):\n+    #     # Check if a group with this position already exists in GroupExtension\n+    #     if GroupExtension.objects.filter(position=value).exists():\n+    #         raise serializers.ValidationError(\"A group with this position already exists.\")\n+    #     return value\n \n     def create(self, validated_data):\n         permission_ids = validated_data.pop('permission_ids', [])\n         position = validated_data.pop('position', None)\n"
                },
                {
                    "date": 1739425745351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n         group = Group.objects.create(**validated_data)\n         group.permissions.set(permission_ids)\n \n         # Create or update GroupExtension with the position\n-        GroupExtension.objects.create(group=group, position=position or group.id)\n+        # GroupExtension.objects.create(group=group, position=position or group.id)\n         return group\n \n     def update(self, instance, validated_data):\n         permission_ids = validated_data.pop('permission_ids', [])\n"
                },
                {
                    "date": 1739425752459,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n         instance.permissions.set(permission_ids)\n \n         # Update or create the related GroupExtension for position\n         if position:\n-            extension, created = GroupExtension.objects.get_or_create(group=instance)\n+            # extension, created = GroupExtension.objects.get_or_create(group=instance)\n             extension.position = position\n             extension.save()\n \n         return instance\n"
                },
                {
                    "date": 1739425758427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,11 +44,6 @@\n         instance.name = validated_data.get('name', instance.name)\n         instance.save()\n         instance.permissions.set(permission_ids)\n \n-        # Update or create the related GroupExtension for position\n-        if position:\n-            # extension, created = GroupExtension.objects.get_or_create(group=instance)\n-            extension.position = position\n-            extension.save()\n \n         return instance\n"
                }
            ],
            "date": 1739425730328,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom django.contrib.auth.models import Group, Permission\n# from accounts.models import GroupExtension\n\nclass PermissionSerializer(serializers.ModelSerializer):\n    class Meta:\n        ref_name = \"group\"\n        model = Permission\n        fields = ['id', 'name', 'codename']\n\nclass GroupSerializer(serializers.ModelSerializer):\n    permissions = PermissionSerializer(many=True, read_only=True)\n    permission_ids = serializers.ListField(\n        child=serializers.IntegerField(), write_only=True\n    )\n    position = serializers.IntegerField(required=False)\n\n    class Meta:\n        model = Group\n        fields = ['id', 'name', 'permissions', 'permission_ids', 'position']\n\n    def validate_position(self, value):\n        # Check if a group with this position already exists in GroupExtension\n        if GroupExtension.objects.filter(position=value).exists():\n            raise serializers.ValidationError(\"A group with this position already exists.\")\n        return value\n\n    def create(self, validated_data):\n        permission_ids = validated_data.pop('permission_ids', [])\n        position = validated_data.pop('position', None)\n\n        # Create the Group instance\n        group = Group.objects.create(**validated_data)\n        group.permissions.set(permission_ids)\n\n        # Create or update GroupExtension with the position\n        GroupExtension.objects.create(group=group, position=position or group.id)\n        return group\n\n    def update(self, instance, validated_data):\n        permission_ids = validated_data.pop('permission_ids', [])\n        position = validated_data.pop('position', None)\n\n        instance.name = validated_data.get('name', instance.name)\n        instance.save()\n        instance.permissions.set(permission_ids)\n\n        # Update or create the related GroupExtension for position\n        if position:\n            extension, created = GroupExtension.objects.get_or_create(group=instance)\n            extension.position = position\n            extension.save()\n\n        return instance\n"
        }
    ]
}