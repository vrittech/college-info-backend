{
    "sourceFile": "accounts/viewsets/permission_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1738669134215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738669146799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from rest_framework.response import Response\n from rest_framework.decorators import action\n from rest_framework import viewsets\n from collections import defaultdict\n-from \n+from ..utilities\n from ..serializers.permission_serializers import PermissionSerializer\n \n \n class PermissionViewSet(viewsets.ReadOnlyModelViewSet):\n"
                },
                {
                    "date": 1738669153726,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from rest_framework.response import Response\n from rest_framework.decorators import action\n from rest_framework import viewsets\n from collections import defaultdict\n-from ..utilities\n+from ..utilities.pagination import MyPageNumberPagination\n from ..serializers.permission_serializers import PermissionSerializer\n \n \n class PermissionViewSet(viewsets.ReadOnlyModelViewSet):\n@@ -24,8 +24,9 @@\n         'id': ['exact'],\n         'name': ['exact', 'icontains'],\n         'codename': ['exact', 'icontains']\n     }\n+    \n \n     def get_queryset(self):\n         \"\"\"\n         Dynamically fetch permissions for custom apps.\n"
                },
                {
                    "date": 1738669158993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         'id': ['exact'],\n         'name': ['exact', 'icontains'],\n         'codename': ['exact', 'icontains']\n     }\n-    \n+    pagination_class = MyPageNumberPagination\n \n     def get_queryset(self):\n         \"\"\"\n         Dynamically fetch permissions for custom apps.\n"
                },
                {
                    "date": 1739346271443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,22 +57,33 @@\n             content_type__app_label__in=custom_app_labels\n         ).select_related('content_type')\n \n     @action(detail=False, methods=['get'])\n-    def grouped_by_model(self, request):\n-        \"\"\"\n-        Group permissions by models only.\n-        \"\"\"\n-        # Fetch permissions and group by model\n-        permissions = self.get_queryset()\n-        grouped_permissions = defaultdict(list)\n+def grouped_by_model(self, request):\n+    \"\"\"\n+    Group permissions by models only, replacing codename with action labels.\n+    \"\"\"\n+    # Fetch permissions and group by model\n+    permissions = self.get_queryset()\n+    grouped_permissions = defaultdict(list)\n \n-        for permission in permissions:\n-            model_name = permission.content_type.model\n-            grouped_permissions[model_name].append({\n\\ No newline at end of file\n-                'id': permission.id,\n-                'name': permission.name,\n-                'codename': permission.codename,\n-            })\n+    # Mapping for readable actions\n+    ACTION_MAPPING = {\n+        \"add\": \"Add\",\n+        \"change\": \"Edit\",\n+        \"delete\": \"Delete\",\n+        \"view\": \"View\"\n+    }\n \n-        # Convert grouped data to a serializable dict\n-        return Response(dict(grouped_permissions))\n+    for permission in permissions:\n+        model_name = permission.content_type.model\n+        action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\")\n+        action_label = ACTION_MAPPING.get(action_key, permission.codename)  # Default to codename if unknown\n+\n+        grouped_permissions[model_name].append({\n+            'id': permission.id,\n+            'name': permission.name,\n+            'action': action_label,  # Replacing codename with a user-friendly label\n+        })\n+\n+    # Convert grouped data to a serializable dict\n+    return Response(dict(grouped_permissions))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739346276651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,33 +57,33 @@\n             content_type__app_label__in=custom_app_labels\n         ).select_related('content_type')\n \n     @action(detail=False, methods=['get'])\n-def grouped_by_model(self, request):\n-    \"\"\"\n-    Group permissions by models only, replacing codename with action labels.\n-    \"\"\"\n-    # Fetch permissions and group by model\n-    permissions = self.get_queryset()\n-    grouped_permissions = defaultdict(list)\n+    def grouped_by_model(self, request):\n+        \"\"\"\n+        Group permissions by models only, replacing codename with action labels.\n+        \"\"\"\n+        # Fetch permissions and group by model\n+        permissions = self.get_queryset()\n+        grouped_permissions = defaultdict(list)\n \n-    # Mapping for readable actions\n-    ACTION_MAPPING = {\n-        \"add\": \"Add\",\n-        \"change\": \"Edit\",\n-        \"delete\": \"Delete\",\n-        \"view\": \"View\"\n-    }\n+        # Mapping for readable actions\n+        ACTION_MAPPING = {\n+            \"add\": \"Add\",\n+            \"change\": \"Edit\",\n+            \"delete\": \"Delete\",\n+            \"view\": \"View\"\n+        }\n\\ No newline at end of file\n \n-    for permission in permissions:\n-        model_name = permission.content_type.model\n-        action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\")\n-        action_label = ACTION_MAPPING.get(action_key, permission.codename)  # Default to codename if unknown\n+        for permission in permissions:\n+            model_name = permission.content_type.model\n+            action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\")\n+            action_label = ACTION_MAPPING.get(action_key, permission.codename)  # Default to codename if unknown\n \n-        grouped_permissions[model_name].append({\n-            'id': permission.id,\n-            'name': permission.name,\n-            'action': action_label,  # Replacing codename with a user-friendly label\n-        })\n+            grouped_permissions[model_name].append({\n+                'id': permission.id,\n+                'name': permission.name,\n+                'action': action_label,  # Replacing codename with a user-friendly label\n+            })\n \n-    # Convert grouped data to a serializable dict\n-    return Response(dict(grouped_permissions))\n+        # Convert grouped data to a serializable dict\n+        return Response(dict(grouped_permissions))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739346413891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,33 +57,37 @@\n             content_type__app_label__in=custom_app_labels\n         ).select_related('content_type')\n \n     @action(detail=False, methods=['get'])\n-    def grouped_by_model(self, request):\n-        \"\"\"\n-        Group permissions by models only, replacing codename with action labels.\n-        \"\"\"\n-        # Fetch permissions and group by model\n-        permissions = self.get_queryset()\n-        grouped_permissions = defaultdict(list)\n+def grouped_by_model(self, request):\n+    \"\"\"\n+    Group permissions by models only, replacing codename with action labels.\n+    \"\"\"\n+    # Fetch permissions and group by model\n+    permissions = self.get_queryset()\n+    grouped_permissions = defaultdict(list)\n \n-        # Mapping for readable actions\n-        ACTION_MAPPING = {\n-            \"add\": \"Add\",\n-            \"change\": \"Edit\",\n-            \"delete\": \"Delete\",\n-            \"view\": \"View\"\n-        }\n+    # Standard Django permission mappings\n+    ACTION_MAPPING = {\n+        \"add\": \"Add\",\n+        \"change\": \"Edit\",\n+        \"delete\": \"Delete\",\n+        \"view\": \"View\",\n+        \"manage\": \"Manage\",  # Handling 'manage' if it exists\n\\ No newline at end of file\n+        \"verify\": \"Verify\"   # Handling 'verify' if it exists\n+    }\n \n-        for permission in permissions:\n-            model_name = permission.content_type.model\n-            action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\")\n-            action_label = ACTION_MAPPING.get(action_key, permission.codename)  # Default to codename if unknown\n+    for permission in permissions:\n+        model_name = permission.content_type.model\n+        action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\", \"manage\")\n+        \n+        # Use the mapping or keep the original action if it's unknown\n+        action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n \n-            grouped_permissions[model_name].append({\n-                'id': permission.id,\n-                'name': permission.name,\n-                'action': action_label,  # Replacing codename with a user-friendly label\n-            })\n+        grouped_permissions[model_name].append({\n+            'id': permission.id,\n+            'name': permission.name,\n+            'action': action_label,  # Replacing codename with a user-friendly label\n+        })\n \n-        # Convert grouped data to a serializable dict\n-        return Response(dict(grouped_permissions))\n+    # Convert grouped data to a serializable dict\n+    return Response(dict(grouped_permissions))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739350428552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,23 +71,26 @@\n         \"add\": \"Add\",\n         \"change\": \"Edit\",\n         \"delete\": \"Delete\",\n         \"view\": \"View\",\n-        \"manage\": \"Manage\",  # Handling 'manage' if it exists\n-        \"verify\": \"Verify\"   # Handling 'verify' if it exists\n+        \"manage\": \"Manage\",  \n+        \"verify\": \"Verify\"\n     }\n \n     for permission in permissions:\n         model_name = permission.content_type.model\n-        action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\", \"manage\")\n-        \n-        # Use the mapping or keep the original action if it's unknown\n+        action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\", \"verify\")\n+\n+        # Use mapping, or capitalize unknown actions\n         action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n \n+        # Remove \"Can \" from permission name\n+        clean_name = permission.name.replace(\"Can \", \"\")\n+\n         grouped_permissions[model_name].append({\n             'id': permission.id,\n-            'name': permission.name,\n-            'action': action_label,  # Replacing codename with a user-friendly label\n+            'name': clean_name,  # Cleaned-up name without \"Can\"\n+            'action': action_label,\n         })\n \n     # Convert grouped data to a serializable dict\n     return Response(dict(grouped_permissions))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739350437215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,40 +57,40 @@\n             content_type__app_label__in=custom_app_labels\n         ).select_related('content_type')\n \n     @action(detail=False, methods=['get'])\n-def grouped_by_model(self, request):\n-    \"\"\"\n-    Group permissions by models only, replacing codename with action labels.\n-    \"\"\"\n-    # Fetch permissions and group by model\n-    permissions = self.get_queryset()\n-    grouped_permissions = defaultdict(list)\n+    def grouped_by_model(self, request):\n+        \"\"\"\n+        Group permissions by models only, replacing codename with action labels.\n+        \"\"\"\n+        # Fetch permissions and group by model\n+        permissions = self.get_queryset()\n+        grouped_permissions = defaultdict(list)\n \n-    # Standard Django permission mappings\n-    ACTION_MAPPING = {\n-        \"add\": \"Add\",\n-        \"change\": \"Edit\",\n-        \"delete\": \"Delete\",\n-        \"view\": \"View\",\n-        \"manage\": \"Manage\",  \n-        \"verify\": \"Verify\"\n-    }\n+        # Standard Django permission mappings\n+        ACTION_MAPPING = {\n+            \"add\": \"Add\",\n+            \"change\": \"Edit\",\n+            \"delete\": \"Delete\",\n+            \"view\": \"View\",\n+            \"manage\": \"Manage\",  \n+            \"verify\": \"Verify\"\n+        }\n \n-    for permission in permissions:\n-        model_name = permission.content_type.model\n\\ No newline at end of file\n-        action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\", \"verify\")\n+        for permission in permissions:\n+            model_name = permission.content_type.model\n+            action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\", \"verify\")\n \n-        # Use mapping, or capitalize unknown actions\n-        action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n+            # Use mapping, or capitalize unknown actions\n+            action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n \n-        # Remove \"Can \" from permission name\n-        clean_name = permission.name.replace(\"Can \", \"\")\n+            # Remove \"Can \" from permission name\n+            clean_name = permission.name.replace(\"Can \", \"\")\n \n-        grouped_permissions[model_name].append({\n-            'id': permission.id,\n-            'name': clean_name,  # Cleaned-up name without \"Can\"\n-            'action': action_label,\n-        })\n+            grouped_permissions[model_name].append({\n+                'id': permission.id,\n+                'name': clean_name,  # Cleaned-up name without \"Can\"\n+                'action': action_label,\n+            })\n \n-    # Convert grouped data to a serializable dict\n-    return Response(dict(grouped_permissions))\n+        # Convert grouped data to a serializable dict\n+        return Response(dict(grouped_permissions))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739350637720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,40 +57,43 @@\n             content_type__app_label__in=custom_app_labels\n         ).select_related('content_type')\n \n     @action(detail=False, methods=['get'])\n-    def grouped_by_model(self, request):\n-        \"\"\"\n-        Group permissions by models only, replacing codename with action labels.\n-        \"\"\"\n-        # Fetch permissions and group by model\n-        permissions = self.get_queryset()\n-        grouped_permissions = defaultdict(list)\n+def grouped_by_model(self, request):\n+    \"\"\"\n+    Group permissions by models only, replacing codename with action labels.\n+    \"\"\"\n+    # Fetch permissions and group by model\n+    permissions = self.get_queryset()\n+    grouped_permissions = defaultdict(list)\n \n-        # Standard Django permission mappings\n-        ACTION_MAPPING = {\n-            \"add\": \"Add\",\n-            \"change\": \"Edit\",\n-            \"delete\": \"Delete\",\n-            \"view\": \"View\",\n-            \"manage\": \"Manage\",  \n-            \"verify\": \"Verify\"\n-        }\n+    # Standard and custom action mappings\n+    ACTION_MAPPING = {\n+        \"add\": \"Add\",\n+        \"change\": \"Edit\",\n+        \"delete\": \"Delete\",\n+        \"view\": \"View\",\n+        \"manage\": \"Manage\",\n+        \"verify\": \"Verify\"  # Ensure \"verify\" is correctly mapped\n+    }\n \n-        for permission in permissions:\n-            model_name = permission.content_type.model\n\\ No newline at end of file\n-            action_key = permission.codename.split(\"_\")[0]  # Extract action (e.g., \"add\", \"change\", \"verify\")\n+    for permission in permissions:\n+        model_name = permission.content_type.model\n+        codename_parts = permission.codename.split(\"_\")  # Extract parts (e.g., ['verify', 'user'])\n \n-            # Use mapping, or capitalize unknown actions\n-            action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n+        # Ensure there's an action in the codename\n+        action_key = codename_parts[0] if len(codename_parts) > 1 else permission.codename  \n \n-            # Remove \"Can \" from permission name\n-            clean_name = permission.name.replace(\"Can \", \"\")\n+        # Use mapping or fallback to capitalized action\n+        action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n \n-            grouped_permissions[model_name].append({\n-                'id': permission.id,\n-                'name': clean_name,  # Cleaned-up name without \"Can\"\n-                'action': action_label,\n-            })\n+        # Ensure \"Can\" is removed from permission name\n+        clean_name = permission.name.replace(\"Can \", \"\")\n \n-        # Convert grouped data to a serializable dict\n-        return Response(dict(grouped_permissions))\n+        grouped_permissions[model_name].append({\n+            'id': permission.id,\n+            'name': clean_name,  # Cleaned-up name without \"Can\"\n+            'action': action_label  # Ensure correct action name\n+        })\n+\n+    # Convert grouped data to a serializable dict\n+    return Response(dict(grouped_permissions))\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739350643329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,43 +57,43 @@\n             content_type__app_label__in=custom_app_labels\n         ).select_related('content_type')\n \n     @action(detail=False, methods=['get'])\n-def grouped_by_model(self, request):\n-    \"\"\"\n-    Group permissions by models only, replacing codename with action labels.\n-    \"\"\"\n-    # Fetch permissions and group by model\n-    permissions = self.get_queryset()\n-    grouped_permissions = defaultdict(list)\n+    def grouped_by_model(self, request):\n+        \"\"\"\n+        Group permissions by models only, replacing codename with action labels.\n+        \"\"\"\n+        # Fetch permissions and group by model\n+        permissions = self.get_queryset()\n+        grouped_permissions = defaultdict(list)\n \n-    # Standard and custom action mappings\n-    ACTION_MAPPING = {\n-        \"add\": \"Add\",\n-        \"change\": \"Edit\",\n-        \"delete\": \"Delete\",\n-        \"view\": \"View\",\n-        \"manage\": \"Manage\",\n-        \"verify\": \"Verify\"  # Ensure \"verify\" is correctly mapped\n-    }\n+        # Standard and custom action mappings\n+        ACTION_MAPPING = {\n+            \"add\": \"Add\",\n+            \"change\": \"Edit\",\n+            \"delete\": \"Delete\",\n+            \"view\": \"View\",\n+            \"manage\": \"Manage\",\n+            \"verify\": \"Verify\"  # Ensure \"verify\" is correctly mapped\n+        }\n \n-    for permission in permissions:\n-        model_name = permission.content_type.model\n-        codename_parts = permission.codename.split(\"_\")  # Extract parts (e.g., ['verify', 'user'])\n+        for permission in permissions:\n+            model_name = permission.content_type.model\n\\ No newline at end of file\n+            codename_parts = permission.codename.split(\"_\")  # Extract parts (e.g., ['verify', 'user'])\n \n-        # Ensure there's an action in the codename\n-        action_key = codename_parts[0] if len(codename_parts) > 1 else permission.codename  \n+            # Ensure there's an action in the codename\n+            action_key = codename_parts[0] if len(codename_parts) > 1 else permission.codename  \n \n-        # Use mapping or fallback to capitalized action\n-        action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n+            # Use mapping or fallback to capitalized action\n+            action_label = ACTION_MAPPING.get(action_key, action_key.capitalize())\n \n-        # Ensure \"Can\" is removed from permission name\n-        clean_name = permission.name.replace(\"Can \", \"\")\n+            # Ensure \"Can\" is removed from permission name\n+            clean_name = permission.name.replace(\"Can \", \"\")\n \n-        grouped_permissions[model_name].append({\n-            'id': permission.id,\n-            'name': clean_name,  # Cleaned-up name without \"Can\"\n-            'action': action_label  # Ensure correct action name\n-        })\n+            grouped_permissions[model_name].append({\n+                'id': permission.id,\n+                'name': clean_name,  # Cleaned-up name without \"Can\"\n+                'action': action_label  # Ensure correct action name\n+            })\n \n-    # Convert grouped data to a serializable dict\n-    return Response(dict(grouped_permissions))\n+        # Convert grouped data to a serializable dict\n+        return Response(dict(grouped_permissions))\n\\ No newline at end of file\n"
                }
            ],
            "date": 1738669134215,
            "name": "Commit-0",
            "content": "from django.apps import apps\nfrom django.contrib.auth.models import Permission\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom rest_framework.permissions import IsAdminUser\nfrom rest_framework.response import Response\nfrom rest_framework.decorators import action\nfrom rest_framework import viewsets\nfrom collections import defaultdict\nfrom \nfrom ..serializers.permission_serializers import PermissionSerializer\n\n\nclass PermissionViewSet(viewsets.ReadOnlyModelViewSet):\n    \"\"\"\n    ViewSet to list permissions and provide an additional grouped-by-apps view.\n    \"\"\"\n    serializer_class = PermissionSerializer\n    permission_classes = [IsAdminUser]\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['codename', 'id', 'name']\n    filterset_fields = {\n        'id': ['exact'],\n        'name': ['exact', 'icontains'],\n        'codename': ['exact', 'icontains']\n    }\n\n    def get_queryset(self):\n        \"\"\"\n        Dynamically fetch permissions for custom apps.\n        \"\"\"\n        # Define excluded apps (Django built-in and third-party)\n        excluded_apps = [\n            'django.contrib.admin',\n            'django.contrib.auth',\n            'django.contrib.contenttypes',\n            'django.contrib.sessions',\n            'django.contrib.messages',\n            'django.contrib.staticfiles',\n            'corsheaders',\n            'rest_framework',\n            'drf_yasg',\n            'django_celery_beat',\n            'django_filters',\n        ]\n\n        # Dynamically identify custom app labels\n        custom_app_labels = [\n            app.label for app in apps.get_app_configs()\n            if app.name not in excluded_apps\n        ]\n\n        # Fetch permissions related to these custom apps\n        return Permission.objects.filter(\n            content_type__app_label__in=custom_app_labels\n        ).select_related('content_type')\n\n    @action(detail=False, methods=['get'])\n    def grouped_by_model(self, request):\n        \"\"\"\n        Group permissions by models only.\n        \"\"\"\n        # Fetch permissions and group by model\n        permissions = self.get_queryset()\n        grouped_permissions = defaultdict(list)\n\n        for permission in permissions:\n            model_name = permission.content_type.model\n            grouped_permissions[model_name].append({\n                'id': permission.id,\n                'name': permission.name,\n                'codename': permission.codename,\n            })\n\n        # Convert grouped data to a serializable dict\n        return Response(dict(grouped_permissions))"
        }
    ]
}