{
    "sourceFile": "accounts/viewsets/custom_user_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 41,
            "patches": [
                {
                    "date": 1738669074931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738669082825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n from rest_framework.decorators import action\n-\n+from ..uti\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n"
                },
                {
                    "date": 1738669088465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n from rest_framework.decorators import action\n-from ..uti\n+from ..utilities.pagination\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n"
                },
                {
                    "date": 1738669094838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n from rest_framework.decorators import action\n-from ..utilities.pagination\n+from ..utilities.pagination import MyPageNumberPagination\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n@@ -21,8 +21,9 @@\n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('position')\n     permission_classes = [permissions.IsAuthenticated]\n     # filterset_class = CustomUserFilter\n+    \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n"
                },
                {
                    "date": 1739423551215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,12 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n-    queryset = CustomUser.objects.all().order_by('position')\n+    queryset = CustomUser.objects.all().order_by(')\n     permission_classes = [permissions.IsAuthenticated]\n     # filterset_class = CustomUserFilter\n-    \n+    pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n"
                },
                {
                    "date": 1739509125490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,12 @@\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n+from mainproj.permissions import *\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n-    queryset = CustomUser.objects.all().order_by(')\n+    queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [permissions.IsAuthenticated]\n     # filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n"
                },
                {
                    "date": 1739702754897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n from mainproj.permissions import *\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n-    permission_classes = [permissions.IsAuthenticated]\n+    permission_classes = [permissions.IsAuthenticated,DynamicModelPermission]\n     # filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n@@ -55,5 +55,11 @@\n     @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\")\n     def GetSelfDetail(self, request, *args, **kwargs):\n         self.object = request.user  # Set the object directly to the current user\n         serializer = self.get_serializer(self.object)\n+        return Response(serializer.data)\n+    \n+    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n+    def college_admins(self, request, *args, **kwargs):\n+        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n+        serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740112967813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n from rest_framework import status\n from django.views.decorators.csrf import csrf_exempt\n-from ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers\n+from ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers,CustomUserWriteSerializersCollegeAdmin\n from rest_framework.response import Response\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n@@ -17,12 +17,13 @@\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n+from mainproj.permissions import DynamicModelPermission\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n-    permission_classes = [permissions.IsAuthenticated,DynamicModelPermission]\n+    permission_classes = [DynamicModelPermission]\n     # filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n@@ -33,8 +34,10 @@\n         if self.action in ['list']:\n             return CustomUserReadSerializer\n         elif self.action in ['create', 'update', 'partial_update']:\n             return CustomUserWriteSerializer\n+        elif self.action in ['signup_college_admin']:\n+            return CustomUserWriteSerializersCollegeAdmin\n         elif self.action in ['retrieve']:\n             return CustomUserRetrieveSerializer\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n@@ -61,5 +64,19 @@\n     @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n     def college_admins(self, request, *args, **kwargs):\n         queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n         serializer = self.get_serializer(queryset, many=True)\n-        return Response(serializer.data)\n\\ No newline at end of file\n+        return Response(serializer.data)\n+    \n+    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    def signup_college_admin(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n+        print\n+\n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response(\n+                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740112975291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n-        print\n+        print(serializer,\"\")\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n"
                },
                {
                    "date": 1740112980650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n-        print(serializer,\"\")\n+        print(serializer,\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n"
                },
                {
                    "date": 1740113245433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,8 @@\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n-        print(serializer,\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n"
                },
                {
                    "date": 1740377473085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n         return Response(serializer.data)\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n+        serializer = self.get_serializer(data=request.data)  \n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n"
                },
                {
                    "date": 1740379568389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n-                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data},\n+                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data,},\n                 status=status.HTTP_201_CREATED\n             )\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740379573732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n-                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data,},\n+                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data,\"access\":},\n                 status=status.HTTP_201_CREATED\n             )\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740379687085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,15 +67,24 @@\n         serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n-    def signup_college_admin(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)  \n+def signup_college_admin(self, request, *args, **kwargs):\n+    serializer = self.get_serializer(data=request.data)  \n \n-        if serializer.is_valid():\n-            serializer.save()\n-            return Response(\n-                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data,\"access\":},\n-                status=status.HTTP_201_CREATED\n-            )\n\\ No newline at end of file\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+    if serializer.is_valid():\n+        serializer.save()\n+        # Generate tokens for the newly created user\n+        user = serializer.instance\n+        refresh = RefreshToken.for_user(user)\n+        access_token = str(refresh.access_token)\n+        \n+        return Response(\n+            {\n+                \"message\": \"College Admin signed up successfully!\",\n+                \"data\": serializer.data,\n+                \"access\": access_token\n+            },\n+            status=status.HTTP_201_CREATED\n+        )\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740379692230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,24 +67,24 @@\n         serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n-def signup_college_admin(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)  \n+    def signup_college_admin(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)  \n \n-    if serializer.is_valid():\n-        serializer.save()\n-        # Generate tokens for the newly created user\n-        user = serializer.instance\n-        refresh = RefreshToken.for_user(user)\n-        access_token = str(refresh.access_token)\n-        \n-        return Response(\n-            {\n-                \"message\": \"College Admin signed up successfully!\",\n-                \"data\": serializer.data,\n-                \"access\": access_token\n-            },\n-            status=status.HTTP_201_CREATED\n-        )\n\\ No newline at end of file\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+        if serializer.is_valid():\n+            serializer.save()\n+            # Generate tokens for the newly created user\n+            user = serializer.instance\n+            refresh = RefreshToken.for_user(user)\n+            access_token = str(refresh.access_token)\n+            \n+            return Response(\n+                {\n+                    \"message\": \"College Admin signed up successfully!\",\n+                    \"data\": serializer.data,\n+                    \"access\": access_token\n+                },\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740379702173,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,11 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n+from rest_framework_simplejwt.tokens import RefreshToken\n \n+\n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n     # filterset_class = CustomUserFilter\n"
                },
                {
                    "date": 1740379707849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,90 @@\n+from rest_framework import viewsets\n+from rest_framework import permissions\n+from django.contrib.auth import get_user_model\n+from rest_framework.views import APIView\n+from drf_yasg.utils import swagger_auto_schema\n+from drf_yasg import openapi\n+from rest_framework import status\n+from django.views.decorators.csrf import csrf_exempt\n+from ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers,CustomUserWriteSerializersCollegeAdmin\n+from rest_framework.response import Response\n+from accounts.models import CustomUser\n+from django.contrib.auth import authenticate,login\n+from rest_framework_simplejwt.tokens import RefreshToken\n+from rest_framework.decorators import action\n+from ..utilities.pagination import MyPageNumberPagination\n+# from accounts.utilities.filters import CustomUserFilter\n+# accounts/utilities/filters.py\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from mainproj.permissions import *\n+from mainproj.permissions import DynamicModelPermission\n+\n+class CustomUserViewSet(viewsets.ModelViewSet):\n+    queryset = CustomUser.objects.all().order_by('-id')\n+    permission_classes = [DynamicModelPermission]\n+    # filterset_class = CustomUserFilter\n+    pagination_class = MyPageNumberPagination\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    \n+    search_fields = ['position', 'email', 'full_name','first_name','last_name']\n+    ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n+\n+    def get_serializer_class(self):\n+        if self.action in ['list']:\n+            return CustomUserReadSerializer\n+        elif self.action in ['create', 'update', 'partial_update']:\n+            return CustomUserWriteSerializer\n+        elif self.action in ['signup_college_admin']:\n+            return CustomUserWriteSerializersCollegeAdmin\n+        elif self.action in ['retrieve']:\n+            return CustomUserRetrieveSerializer\n+        elif self.action in ['changePassword']:\n+            return CustomUserChangePasswordSerializers\n+        return CustomUserReadSerializer\n+    \n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\")\n+    def changePassword(self, request, *args, **kwargs):\n+        serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n+        \n+        if serializer.is_valid():\n+            user = request.user  # Get the current authenticated user\n+            user.set_password(serializer.validated_data['new_password'])  # Hash and set the new password\n+            user.save()  # Save the updated user instance\n+            return Response({\"detail\": \"Password changed successfully\"}, status=status.HTTP_200_OK)\n+        \n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+    \n+    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\")\n+    def GetSelfDetail(self, request, *args, **kwargs):\n+        self.object = request.user  # Set the object directly to the current user\n+        serializer = self.get_serializer(self.object)\n+        return Response(serializer.data)\n+    \n+    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n+    def college_admins(self, request, *args, **kwargs):\n+        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n+        serializer = self.get_serializer(queryset, many=True)\n+        return Response(serializer.data)\n+    \n+    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    def signup_college_admin(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)  \n+\n+        if serializer.is_valid():\n+            serializer.save()\n+            # Generate tokens for the newly created user\n+            user = serializer.instance\n+            refresh = RefreshToken.for_user(user)\n+            access_token = str(refresh.access_token)\n+            \n+            return Response(\n+                {\n+                    \"message\": \"College Admin signed up successfully!\",\n+                    \"data\": serializer.data,\n+                    \"access\": access_token\n+                },\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740380468278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,117 +66,29 @@\n         queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n         serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n     \n-    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n-    def signup_college_admin(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)  \n+   from rest_framework_simplejwt.tokens import RefreshToken\n \n-        if serializer.is_valid():\n-            serializer.save()\n-            # Generate tokens for the newly created user\n-            user = serializer.instance\n-            refresh = RefreshToken.for_user(user)\n-            access_token = str(refresh.access_token)\n-            \n-            return Response(\n-                {\n-                    \"message\": \"College Admin signed up successfully!\",\n-                    \"data\": serializer.data,\n-                    \"access\": access_token\n-                },\n-                status=status.HTTP_201_CREATED\n-            )\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-from rest_framework import viewsets\n-from rest_framework import permissions\n-from django.contrib.auth import get_user_model\n-from rest_framework.views import APIView\n-from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n-from rest_framework import status\n-from django.views.decorators.csrf import csrf_exempt\n-from ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers,CustomUserWriteSerializersCollegeAdmin\n-from rest_framework.response import Response\n-from accounts.models import CustomUser\n-from django.contrib.auth import authenticate,login\n-from rest_framework_simplejwt.tokens import RefreshToken\n-from rest_framework.decorators import action\n-from ..utilities.pagination import MyPageNumberPagination\n-# from accounts.utilities.filters import CustomUserFilter\n-# accounts/utilities/filters.py\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from mainproj.permissions import *\n-from mainproj.permissions import DynamicModelPermission\n-from rest_framework_simplejwt.tokens import RefreshToken\n+@action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+def signup_college_admin(self, request, *args, **kwargs):\n+    serializer = self.get_serializer(data=request.data)  \n \n-\n-class CustomUserViewSet(viewsets.ModelViewSet):\n-    queryset = CustomUser.objects.all().order_by('-id')\n-    permission_classes = [DynamicModelPermission]\n-    # filterset_class = CustomUserFilter\n-    pagination_class = MyPageNumberPagination\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    \n-    search_fields = ['position', 'email', 'full_name','first_name','last_name']\n-    ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n-\n-    def get_serializer_class(self):\n-        if self.action in ['list']:\n-            return CustomUserReadSerializer\n-        elif self.action in ['create', 'update', 'partial_update']:\n-            return CustomUserWriteSerializer\n-        elif self.action in ['signup_college_admin']:\n-            return CustomUserWriteSerializersCollegeAdmin\n-        elif self.action in ['retrieve']:\n-            return CustomUserRetrieveSerializer\n-        elif self.action in ['changePassword']:\n-            return CustomUserChangePasswordSerializers\n-        return CustomUserReadSerializer\n-    \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\")\n-    def changePassword(self, request, *args, **kwargs):\n-        serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n+    if serializer.is_valid():\n+        serializer.save()\n+        # Generate tokens for the newly created user\n+        user = serializer.instance\n+        refresh = RefreshToken.for_user(user)\n+        access_token = str(refresh.access_token)\n+        refresh_token = str(refresh)\n         \n-        if serializer.is_valid():\n-            user = request.user  # Get the current authenticated user\n-            user.set_password(serializer.validated_data['new_password'])  # Hash and set the new password\n-            user.save()  # Save the updated user instance\n-            return Response({\"detail\": \"Password changed successfully\"}, status=status.HTTP_200_OK)\n-        \n+        return Response(\n+            {\n+                \"message\": \"College Admin signed up successfully!\",\n+                \"data\": serializer.data,\n+                \"access\": access_token,\n+                \"refresh\": refresh_token\n+            },\n+            status=status.HTTP_201_CREATED\n+        )\n+    else:\n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n-    \n-    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\")\n-    def GetSelfDetail(self, request, *args, **kwargs):\n-        self.object = request.user  # Set the object directly to the current user\n-        serializer = self.get_serializer(self.object)\n-        return Response(serializer.data)\n-    \n-    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n-    def college_admins(self, request, *args, **kwargs):\n-        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n-        serializer = self.get_serializer(queryset, many=True)\n-        return Response(serializer.data)\n-    \n\\ No newline at end of file\n-    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n-    def signup_college_admin(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)  \n-\n-        if serializer.is_valid():\n-            serializer.save()\n-            # Generate tokens for the newly created user\n-            user = serializer.instance\n-            refresh = RefreshToken.for_user(user)\n-            access_token = str(refresh.access_token)\n-            \n-            return Response(\n-                {\n-                    \"message\": \"College Admin signed up successfully!\",\n-                    \"data\": serializer.data,\n-                    \"access\": access_token\n-                },\n-                status=status.HTTP_201_CREATED\n-            )\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1740380478669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,30 +65,28 @@\n     def college_admins(self, request, *args, **kwargs):\n         queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n         serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n-    \n-   from rest_framework_simplejwt.tokens import RefreshToken\n \n-@action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n-def signup_college_admin(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)  \n+    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    def signup_college_admin(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)  \n \n-    if serializer.is_valid():\n-        serializer.save()\n-        # Generate tokens for the newly created user\n-        user = serializer.instance\n-        refresh = RefreshToken.for_user(user)\n-        access_token = str(refresh.access_token)\n-        refresh_token = str(refresh)\n-        \n-        return Response(\n-            {\n-                \"message\": \"College Admin signed up successfully!\",\n-                \"data\": serializer.data,\n-                \"access\": access_token,\n-                \"refresh\": refresh_token\n-            },\n-            status=status.HTTP_201_CREATED\n-        )\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+        if serializer.is_valid():\n+            serializer.save()\n+            # Generate tokens for the newly created user\n+            user = serializer.instance\n+            refresh = RefreshToken.for_user(user)\n+            access_token = str(refresh.access_token)\n+            refresh_token = str(refresh)\n+            \n+            return Response(\n+                {\n+                    \"message\": \"College Admin signed up successfully!\",\n+                    \"data\": serializer.data,\n+                    \"access\": access_token,\n+                    \"refresh\": refresh_token\n+                },\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1740985178613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,8 +29,20 @@\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n \n+\n+    def get_queryset(self):\n+        if self.request.user.is_superuser:\n+            return super().get_queryset()\n+        elif self.request.user.is_staff:\n+            return super().get_queryset()\n+        elif self.request.user.is_authenticated:\n+            return super().get_queryset().filter(id=self.request.user.id)\n+        else:\n+            return CustomUser.objects.none()\n+\n+\n     def get_serializer_class(self):\n         if self.action in ['list']:\n             return CustomUserReadSerializer\n         elif self.action in ['create', 'update', 'partial_update']:\n@@ -42,9 +54,9 @@\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n         return CustomUserReadSerializer\n     \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\")\n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",)\n     def changePassword(self, request, *args, **kwargs):\n         serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n         \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740985189860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,8 +18,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n+from res\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n@@ -54,9 +55,9 @@\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n         return CustomUserReadSerializer\n     \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",)\n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes=[IsAuthenticated])\n     def changePassword(self, request, *args, **kwargs):\n         serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n         \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740985195211,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n-from res\n+from rest_\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740985216186,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n-from rest_\n+from rest_framework.permissions import IsAuthenticated\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n@@ -55,9 +55,9 @@\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n         return CustomUserReadSerializer\n     \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes=[IsAuthenticated])\n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes=[Allow])\n     def changePassword(self, request, *args, **kwargs):\n         serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n         \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740985226624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,22 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n-from rest_framework.permissions import IsAuthenticated\n+from rest_framework.permissions import IsAuthenticated,AAdmin(admin.ModelAdmin):\n+    ''A'''\n \n+    list_display = ('',)\n+    list_filter = ('',)\n+    inlines = [\n+        Inline,\n+    ]\n+    raw_id_fields = ('',)\n+    readonly_fields = ('',)\n+    search_fields = ('',)\n+    date_hierarchy = ''\n+    ordering = ('',)\n+\n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n     # filterset_class = CustomUserFilter\n@@ -55,9 +67,9 @@\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n         return CustomUserReadSerializer\n     \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes=[Allow])\n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes=[AllowAny])\n     def changePassword(self, request, *args, **kwargs):\n         serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n         \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740985232559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n-from rest_framework.permissions import IsAuthenticated,AAdmin(admin.ModelAdmin):\n-    ''A'''\n+from rest_framework.permissions import IsAuthenticated,AllowAnyAdmin(admin.ModelAdmin):\n+    ''AllowAny'''\n \n     list_display = ('',)\n     list_filter = ('',)\n     inlines = [\n"
                },
                {
                    "date": 1740985243057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,22 +18,10 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n-from rest_framework.permissions import IsAuthenticated,AllowAnyAdmin(admin.ModelAdmin):\n-    ''AllowAny'''\n+from rest_framework.permissions import IsAuthenticated,Ad\n \n-    list_display = ('',)\n-    list_filter = ('',)\n-    inlines = [\n-        Inline,\n-    ]\n-    raw_id_fields = ('',)\n-    readonly_fields = ('',)\n-    search_fields = ('',)\n-    date_hierarchy = ''\n-    ordering = ('',)\n-\n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n     # filterset_class = CustomUserFilter\n"
                },
                {
                    "date": 1740985248710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n from mainproj.permissions import DynamicModelPermission\n-from rest_framework.permissions import IsAuthenticated,Ad\n+from rest_framework.permissions import IsAuthenticated,AllowAny\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740985301529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n         return CustomUserReadSerializer\n     \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes=[AllowAny])\n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\")\n     def changePassword(self, request, *args, **kwargs):\n         serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n         \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740985309667,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n         return CustomUserReadSerializer\n     \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\")\n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes)\n     def changePassword(self, request, *args, **kwargs):\n         serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n         \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740985328238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n         return CustomUserReadSerializer\n     \n-    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes)\n+    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\",permission_classes=[IsAuthenticated])\n     def changePassword(self, request, *args, **kwargs):\n         serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n         \n         if serializer.is_valid():\n@@ -67,9 +67,9 @@\n             return Response({\"detail\": \"Password changed successfully\"}, status=status.HTTP_200_OK)\n         \n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n     \n-    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\")\n+    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\",permission_classes)\n     def GetSelfDetail(self, request, *args, **kwargs):\n         self.object = request.user  # Set the object directly to the current user\n         serializer = self.get_serializer(self.object)\n         return Response(serializer.data)\n"
                },
                {
                    "date": 1740985336780,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,15 +67,15 @@\n             return Response({\"detail\": \"Password changed successfully\"}, status=status.HTTP_200_OK)\n         \n         return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n     \n-    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\",permission_classes)\n+    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\",permission_classes=[IsAuthenticated])\n     def GetSelfDetail(self, request, *args, **kwargs):\n         self.object = request.user  # Set the object directly to the current user\n         serializer = self.get_serializer(self.object)\n         return Response(serializer.data)\n     \n-    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n+    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\",)\n     def college_admins(self, request, *args, **kwargs):\n         queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n         serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n"
                },
                {
                    "date": 1740985342100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         self.object = request.user  # Set the object directly to the current user\n         serializer = self.get_serializer(self.object)\n         return Response(serializer.data)\n     \n-    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\",)\n+    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\",permission_classes=[IsAuthenticated])\n     def college_admins(self, request, *args, **kwargs):\n         queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n         serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n"
                },
                {
                    "date": 1741253729481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [DynamicModelPermission]\n-    # filterset_class = CustomUserFilter\n+    filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n"
                },
                {
                    "date": 1741253734696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n from rest_framework.decorators import action\n from ..utilities.pagination import MyPageNumberPagination\n-# from accounts.utilities.filters import CustomUserFilter\n+from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n"
                },
                {
                    "date": 1741255609088,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n-    ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n+    ordering_fields =['position', 'email', 'full_name','first_name','last_name','id']\n \n \n     def get_queryset(self):\n         if self.request.user.is_superuser:\n"
                },
                {
                    "date": 1741255616808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n-    ordering_fields =['position', 'email', 'full_name','first_name','last_name','id']\n+    ordering_fields =['position', 'email', 'full_name','first_name','last_name','id','created_date']\n \n \n     def get_queryset(self):\n         if self.request.user.is_superuser:\n"
                },
                {
                    "date": 1741255624126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n-    ordering_fields =['position', 'email', 'full_name','first_name','last_name','id','created_date']\n+    ordering_fields =['position', 'email', 'full_name','first_name','last_name','id','created_date','updated_date']\n \n \n     def get_queryset(self):\n         if self.request.user.is_superuser:\n"
                },
                {
                    "date": 1741255641295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n-    search_fields = ['position', 'email', 'full_name','first_name','last_name']\n+    search_fields = ['position', 'email', 'full_name','first_name','last_name','']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name','id','created_date','updated_date']\n \n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1741255646565,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n-    search_fields = ['position', 'email', 'full_name','first_name','last_name','']\n+    search_fields = ['position', 'email', 'full_name','first_name','last_name','group__name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name','id','created_date','updated_date']\n \n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1741255681702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n-    search_fields = ['position', 'email', 'full_name','first_name','last_name','group__name']\n+    search_fields = ['position', 'email', 'full_name','first_name','last_name','groups__name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name','id','created_date','updated_date']\n \n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1741255777554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n-    search_fields = ['position', 'email', 'full_name','first_name','last_name','groups__name']\n+    search_fields = ['position', 'email','first_name','last_name','groups__name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name','id','created_date','updated_date']\n \n \n     def get_queryset(self):\n"
                }
            ],
            "date": 1738669074931,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework import permissions\nfrom django.contrib.auth import get_user_model\nfrom rest_framework.views import APIView\nfrom drf_yasg.utils import swagger_auto_schema\nfrom drf_yasg import openapi\nfrom rest_framework import status\nfrom django.views.decorators.csrf import csrf_exempt\nfrom ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers\nfrom rest_framework.response import Response\nfrom accounts.models import CustomUser\nfrom django.contrib.auth import authenticate,login\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom rest_framework.decorators import action\n\n# from accounts.utilities.filters import CustomUserFilter\n# accounts/utilities/filters.py\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass CustomUserViewSet(viewsets.ModelViewSet):\n    queryset = CustomUser.objects.all().order_by('position')\n    permission_classes = [permissions.IsAuthenticated]\n    # filterset_class = CustomUserFilter\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    \n    search_fields = ['position', 'email', 'full_name','first_name','last_name']\n    ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n\n    def get_serializer_class(self):\n        if self.action in ['list']:\n            return CustomUserReadSerializer\n        elif self.action in ['create', 'update', 'partial_update']:\n            return CustomUserWriteSerializer\n        elif self.action in ['retrieve']:\n            return CustomUserRetrieveSerializer\n        elif self.action in ['changePassword']:\n            return CustomUserChangePasswordSerializers\n        return CustomUserReadSerializer\n    \n    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\")\n    def changePassword(self, request, *args, **kwargs):\n        serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n        \n        if serializer.is_valid():\n            user = request.user  # Get the current authenticated user\n            user.set_password(serializer.validated_data['new_password'])  # Hash and set the new password\n            user.save()  # Save the updated user instance\n            return Response({\"detail\": \"Password changed successfully\"}, status=status.HTTP_200_OK)\n        \n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    \n    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\")\n    def GetSelfDetail(self, request, *args, **kwargs):\n        self.object = request.user  # Set the object directly to the current user\n        serializer = self.get_serializer(self.object)\n        return Response(serializer.data)"
        }
    ]
}