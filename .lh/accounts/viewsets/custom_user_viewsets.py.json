{
    "sourceFile": "accounts/viewsets/custom_user_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1738669074931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738669082825,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n from rest_framework.decorators import action\n-\n+from ..uti\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n"
                },
                {
                    "date": 1738669088465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n from rest_framework.decorators import action\n-from ..uti\n+from ..utilities.pagination\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n"
                },
                {
                    "date": 1738669094838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n from rest_framework.decorators import action\n-from ..utilities.pagination\n+from ..utilities.pagination import MyPageNumberPagination\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n@@ -21,8 +21,9 @@\n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('position')\n     permission_classes = [permissions.IsAuthenticated]\n     # filterset_class = CustomUserFilter\n+    \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n"
                },
                {
                    "date": 1739423551215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,12 +18,12 @@\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n-    queryset = CustomUser.objects.all().order_by('position')\n+    queryset = CustomUser.objects.all().order_by(')\n     permission_classes = [permissions.IsAuthenticated]\n     # filterset_class = CustomUserFilter\n-    \n+    pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n     search_fields = ['position', 'email', 'full_name','first_name','last_name']\n     ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n"
                },
                {
                    "date": 1739509125490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,12 @@\n # from accounts.utilities.filters import CustomUserFilter\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n+from mainproj.permissions import *\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n-    queryset = CustomUser.objects.all().order_by(')\n+    queryset = CustomUser.objects.all().order_by('-id')\n     permission_classes = [permissions.IsAuthenticated]\n     # filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n"
                },
                {
                    "date": 1739702754897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n from mainproj.permissions import *\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n-    permission_classes = [permissions.IsAuthenticated]\n+    permission_classes = [permissions.IsAuthenticated,DynamicModelPermission]\n     # filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n@@ -55,5 +55,11 @@\n     @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\")\n     def GetSelfDetail(self, request, *args, **kwargs):\n         self.object = request.user  # Set the object directly to the current user\n         serializer = self.get_serializer(self.object)\n+        return Response(serializer.data)\n+    \n+    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n+    def college_admins(self, request, *args, **kwargs):\n+        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n+        serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740112967813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n from rest_framework import status\n from django.views.decorators.csrf import csrf_exempt\n-from ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers\n+from ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers,CustomUserWriteSerializersCollegeAdmin\n from rest_framework.response import Response\n from accounts.models import CustomUser\n from django.contrib.auth import authenticate,login\n from rest_framework_simplejwt.tokens import RefreshToken\n@@ -17,12 +17,13 @@\n # accounts/utilities/filters.py\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from mainproj.permissions import *\n+from mainproj.permissions import DynamicModelPermission\n \n class CustomUserViewSet(viewsets.ModelViewSet):\n     queryset = CustomUser.objects.all().order_by('-id')\n-    permission_classes = [permissions.IsAuthenticated,DynamicModelPermission]\n+    permission_classes = [DynamicModelPermission]\n     # filterset_class = CustomUserFilter\n     pagination_class = MyPageNumberPagination\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     \n@@ -33,8 +34,10 @@\n         if self.action in ['list']:\n             return CustomUserReadSerializer\n         elif self.action in ['create', 'update', 'partial_update']:\n             return CustomUserWriteSerializer\n+        elif self.action in ['signup_college_admin']:\n+            return CustomUserWriteSerializersCollegeAdmin\n         elif self.action in ['retrieve']:\n             return CustomUserRetrieveSerializer\n         elif self.action in ['changePassword']:\n             return CustomUserChangePasswordSerializers\n@@ -61,5 +64,19 @@\n     @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n     def college_admins(self, request, *args, **kwargs):\n         queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n         serializer = self.get_serializer(queryset, many=True)\n-        return Response(serializer.data)\n\\ No newline at end of file\n+        return Response(serializer.data)\n+    \n+    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    def signup_college_admin(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n+        print\n+\n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response(\n+                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740112975291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n-        print\n+        print(serializer,\"\")\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n"
                },
                {
                    "date": 1740112980650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n-        print(serializer,\"\")\n+        print(serializer,\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n"
                },
                {
                    "date": 1740113245433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,8 @@\n     \n     @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # âœ… FIX: Pass `data=request.data`\n-        print(serializer,\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n"
                }
            ],
            "date": 1738669074931,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework import permissions\nfrom django.contrib.auth import get_user_model\nfrom rest_framework.views import APIView\nfrom drf_yasg.utils import swagger_auto_schema\nfrom drf_yasg import openapi\nfrom rest_framework import status\nfrom django.views.decorators.csrf import csrf_exempt\nfrom ..serializers.custom_user_serializers import CustomUserReadSerializer, CustomUserWriteSerializer, CustomUserRetrieveSerializer,CustomUserChangePasswordSerializers\nfrom rest_framework.response import Response\nfrom accounts.models import CustomUser\nfrom django.contrib.auth import authenticate,login\nfrom rest_framework_simplejwt.tokens import RefreshToken\nfrom rest_framework.decorators import action\n\n# from accounts.utilities.filters import CustomUserFilter\n# accounts/utilities/filters.py\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\n\nclass CustomUserViewSet(viewsets.ModelViewSet):\n    queryset = CustomUser.objects.all().order_by('position')\n    permission_classes = [permissions.IsAuthenticated]\n    # filterset_class = CustomUserFilter\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    \n    search_fields = ['position', 'email', 'full_name','first_name','last_name']\n    ordering_fields =['position', 'email', 'full_name','first_name','last_name']\n\n    def get_serializer_class(self):\n        if self.action in ['list']:\n            return CustomUserReadSerializer\n        elif self.action in ['create', 'update', 'partial_update']:\n            return CustomUserWriteSerializer\n        elif self.action in ['retrieve']:\n            return CustomUserRetrieveSerializer\n        elif self.action in ['changePassword']:\n            return CustomUserChangePasswordSerializers\n        return CustomUserReadSerializer\n    \n    @action(detail=False, methods=['post'], name=\"changePassword\", url_path=\"change-password\")\n    def changePassword(self, request, *args, **kwargs):\n        serializer = CustomUserChangePasswordSerializers(data=request.data, context={'request': request})\n        \n        if serializer.is_valid():\n            user = request.user  # Get the current authenticated user\n            user.set_password(serializer.validated_data['new_password'])  # Hash and set the new password\n            user.save()  # Save the updated user instance\n            return Response({\"detail\": \"Password changed successfully\"}, status=status.HTTP_200_OK)\n        \n        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n    \n    @action(detail=False, methods=['get'], name=\"GetSelfDetail\", url_path=\"me\")\n    def GetSelfDetail(self, request, *args, **kwargs):\n        self.object = request.user  # Set the object directly to the current user\n        serializer = self.get_serializer(self.object)\n        return Response(serializer.data)"
        }
    ]
}