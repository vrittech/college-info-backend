{
    "sourceFile": "accounts/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1739786438931,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740113747193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n # Create your models here.\n class CustomUser(AbstractUser):\n     # roles = models.CharField(max_length = 250,null = True) \n     full_name = models.CharField(max_length = 250,null = True)\n-    college = models.ForeignKey(College,null = True,on_delete = models.SET_NULL,related_name='user',bla)\n+    college = models.ForeignKey(College,null = True,on_delete = models.SET_NULL,related_name='user',blank=True)\n     social_media = models.ManyToManyField(SocialMedia,blank=True)\n     email = models.EmailField(max_length = 250,unique = True)\n     # social_links = models.ManyToManyField(SocialMedia,blank=True)\n     position = models.PositiveIntegerField(default=0)\n@@ -42,15 +42,8 @@\n     class Meta:\n         permissions = [\n             ('manage_user', 'Manage User'),\n         ]\n-    \n-    @property\n-    def full_name(self):\n-        try:\n-            return self.first_name + \" \" + self.last_name\n-        except:\n-            return self.username\n \n \n # class GroupExtension(models.Model):\n #     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n"
                },
                {
                    "date": 1740113843875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,14 @@\n     class Meta:\n         permissions = [\n             ('manage_user', 'Manage User'),\n         ]\n+    \n+    @full_name.setter\n+    def full_name(self, value):\n+        name_parts = value.split(\" \", 1)\n+        self.first_name = name_parts[0]\n+        self.last_name = name_parts[1] if len(name_parts) > 1 else \"\"\n \n \n # class GroupExtension(models.Model):\n #     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n"
                },
                {
                    "date": 1740113881730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n \n # Create your models here.\n class CustomUser(AbstractUser):\n     # roles = models.CharField(max_length = 250,null = True) \n+    first_name = models.CharField(max_length = 250,null = True)\n+    last_name = models.CharField(max_length = 250,null = True)\n     full_name = models.CharField(max_length = 250,null = True)\n     college = models.ForeignKey(College,null = True,on_delete = models.SET_NULL,related_name='user',blank=True)\n     social_media = models.ManyToManyField(SocialMedia,blank=True)\n     email = models.EmailField(max_length = 250,unique = True)\n"
                },
                {
                    "date": 1740113968197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,8 +45,12 @@\n         permissions = [\n             ('manage_user', 'Manage User'),\n         ]\n     \n+    @property\n+    def full_name(self):\n+        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name else self.username\n+    \n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n         self.first_name = name_parts[0]\n"
                },
                {
                    "date": 1740114212162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         ]\n     \n     @property\n     def full_name(self):\n-        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name else self.username\n+        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name else \n     \n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n"
                },
                {
                    "date": 1740114217314,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         ]\n     \n     @property\n     def full_name(self):\n-        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name else \n+        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name\n     \n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n"
                },
                {
                    "date": 1740114222423,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         ]\n     \n     @property\n     def full_name(self):\n-        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name\n+        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name el\n     \n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n"
                },
                {
                    "date": 1740114227488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         ]\n     \n     @property\n     def full_name(self):\n-        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name el\n+        return f\"{self.first_name} {self.last_name}\".strip()\n     \n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n"
                },
                {
                    "date": 1740114521875,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     updated_at = models.DateTimeField(auto_now=True)\n \n \n     def __str__(self):\n-        return self.username\n+        return self.first_name\n     \n     class Meta:\n         permissions = [\n             ('manage_user', 'Manage User'),\n"
                },
                {
                    "date": 1740114527389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n     USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = ['username']\n+    REQUIRED_FIELDS = ['email']\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n"
                },
                {
                    "date": 1740114559372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n     USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = ['email']\n+    # REQUIRED_FIELDS = ['email']\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n"
                },
                {
                    "date": 1740114571516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n     USERNAME_FIELD = 'email'\n-    # REQUIRED_FIELDS = ['email']\n+    # REQUIRED_FIELDS = ['user']\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n"
                },
                {
                    "date": 1740114590552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,16 @@\n     avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n     professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n \n     USERNAME_FIELD = 'email'\n-    # REQUIRED_FIELDS = ['user']\n+    REQUIRED_FIELDS = ['username']\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n \n     def __str__(self):\n-        return self.first_name\n+        return self.username\n     \n     class Meta:\n         permissions = [\n             ('manage_user', 'Manage User'),\n"
                },
                {
                    "date": 1740114596396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         ]\n     \n     @property\n     def full_name(self):\n-        return f\"{self.first_name} {self.last_name}\".strip()\n+        return f\"{self.first_name} {self.last_name}\".strip() if self.first_name or self.last_name else self.username\n     \n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n"
                },
                {
                    "date": 1740114731487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,60 +4,61 @@\n from django.contrib.auth.models import Group, Permission\n from socialmedia.models import SocialMedia\n \n # Create your models here.\n+import uuid\n+from django.utils.text import slugify\n+\n class CustomUser(AbstractUser):\n-    # roles = models.CharField(max_length = 250,null = True) \n-    first_name = models.CharField(max_length = 250,null = True)\n-    last_name = models.CharField(max_length = 250,null = True)\n-    full_name = models.CharField(max_length = 250,null = True)\n-    college = models.ForeignKey(College,null = True,on_delete = models.SET_NULL,related_name='user',blank=True)\n-    social_media = models.ManyToManyField(SocialMedia,blank=True)\n-    email = models.EmailField(max_length = 250,unique = True)\n-    # social_links = models.ManyToManyField(SocialMedia,blank=True)\n-    position = models.PositiveIntegerField(default=0)\n-    phone = models.CharField(max_length=15,null=True , default = '')\n+    first_name = models.CharField(max_length=250, null=True, blank=True)\n+    last_name = models.CharField(max_length=250, null=True, blank=True)\n+    full_name = models.CharField(max_length=250, null=True, blank=True)\n+    email = models.EmailField(max_length=250, unique=True)\n+    phone = models.CharField(max_length=15, null=True, default='')\n     \n-    groups = models.ManyToManyField(\n-        Group,\n-        related_name=\"customuser_groups\",  # Custom related name\n-        blank=True\n-    )\n-    user_permissions = models.ManyToManyField(\n-        Permission,\n-        related_name=\"customuser_permissions\",  # Custom related name\n-        blank=True\n-    )\n+    USERNAME_FIELD = 'email'  # Login with email\n+    REQUIRED_FIELDS = []  # Remove 'username' from required fields\n \n-    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n-    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n-\n-    USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = ['username']\n-\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n+    def save(self, *args, **kwargs):\n+        # Auto-set first_name and last_name from full_name\n+        if self.full_name:\n+            name_parts = self.full_name.split(\" \", 1)\n+            self.first_name = name_parts[0]\n+            self.last_name = name_parts[1] if len(name_parts) > 1 else \"\"\n \n+        # Auto-generate username from full_name (if empty)\n+        if not self.username:\n+            base_username = slugify(self.full_name)[:30]  # Convert to lowercase, hyphenated\n+            unique_username = base_username\n+\n+            # Ensure uniqueness\n+            counter = 1\n+            while CustomUser.objects.filter(username=unique_username).exists():\n+                unique_username = f\"{base_username}-{counter}\"\n+                counter += 1\n+\n+            self.username = unique_username\n+\n+        super().save(*args, **kwargs)\n+\n     def __str__(self):\n-        return self.username\n-    \n-    class Meta:\n-        permissions = [\n-            ('manage_user', 'Manage User'),\n-        ]\n-    \n+        return self.email  # Display email instead of username\n+\n     @property\n     def full_name(self):\n         return f\"{self.first_name} {self.last_name}\".strip() if self.first_name or self.last_name else self.username\n-    \n+\n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n         self.first_name = name_parts[0]\n         self.last_name = name_parts[1] if len(name_parts) > 1 else \"\"\n \n \n+\n # class GroupExtension(models.Model):\n #     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n #     position = models.PositiveIntegerField(default=0)\n     \n"
                },
                {
                    "date": 1740114764179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,61 +4,60 @@\n from django.contrib.auth.models import Group, Permission\n from socialmedia.models import SocialMedia\n \n # Create your models here.\n-import uuid\n-from django.utils.text import slugify\n-\n class CustomUser(AbstractUser):\n-    first_name = models.CharField(max_length=250, null=True, blank=True)\n-    last_name = models.CharField(max_length=250, null=True, blank=True)\n-    full_name = models.CharField(max_length=250, null=True, blank=True)\n-    email = models.EmailField(max_length=250, unique=True)\n-    phone = models.CharField(max_length=15, null=True, default='')\n+    # roles = models.CharField(max_length = 250,null = True) \n+    first_name = models.CharField(max_length = 250,null = True)\n+    last_name = models.CharField(max_length = 250,null = True)\n+    full_name = models.CharField(max_length = 250,null = True)\n+    college = models.ForeignKey(College,null = True,on_delete = models.SET_NULL,related_name='user',blank=True)\n+    social_media = models.ManyToManyField(SocialMedia,blank=True)\n+    email = models.EmailField(max_length = 250,unique = True)\n+    # social_links = models.ManyToManyField(SocialMedia,blank=True)\n+    position = models.PositiveIntegerField(default=0)\n+    phone = models.CharField(max_length=15,null=True , default = '')\n     \n-    USERNAME_FIELD = 'email'  # Login with email\n-    REQUIRED_FIELDS = []  # Remove 'username' from required fields\n+    groups = models.ManyToManyField(\n+        Group,\n+        related_name=\"customuser_groups\",  # Custom related name\n+        blank=True\n+    )\n+    user_permissions = models.ManyToManyField(\n+        Permission,\n+        related_name=\"customuser_permissions\",  # Custom related name\n+        blank=True\n+    )\n \n+    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n+    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n+\n+    USERNAME_FIELD = 'email'\n+    REQUIRED_FIELDS = ['username']\n+\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n-    def save(self, *args, **kwargs):\n-        # Auto-set first_name and last_name from full_name\n-        if self.full_name:\n-            name_parts = self.full_name.split(\" \", 1)\n-            self.first_name = name_parts[0]\n-            self.last_name = name_parts[1] if len(name_parts) > 1 else \"\"\n \n-        # Auto-generate username from full_name (if empty)\n-        if not self.username:\n-            base_username = slugify(self.full_name)[:30]  # Convert to lowercase, hyphenated\n-            unique_username = base_username\n-\n-            # Ensure uniqueness\n-            counter = 1\n-            while CustomUser.objects.filter(username=unique_username).exists():\n-                unique_username = f\"{base_username}-{counter}\"\n-                counter += 1\n-\n-            self.username = unique_username\n-\n-        super().save(*args, **kwargs)\n-\n     def __str__(self):\n-        return self.email  # Display email instead of username\n-\n+        return self.username\n+    \n+    class Meta:\n+        permissions = [\n+            ('manage_user', 'Manage User'),\n+        ]\n+    \n     @property\n     def full_name(self):\n         return f\"{self.first_name} {self.last_name}\".strip() if self.first_name or self.last_name else self.username\n-\n+    \n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n         self.first_name = name_parts[0]\n         self.last_name = name_parts[1] if len(name_parts) > 1 else \"\"\n \n \n-\n # class GroupExtension(models.Model):\n #     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n #     position = models.PositiveIntegerField(default=0)\n     \n"
                },
                {
                    "date": 1740114796087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,21 @@\n+import uuid\n from django.db import models\n-from django.contrib.auth.models import AbstractUser\n+from django.contrib.auth.models import AbstractUser, Group, Permission\n+from django.utils.text import slugify\n from collegemanagement.models import College\n-from django.contrib.auth.models import Group, Permission\n from socialmedia.models import SocialMedia\n \n-# Create your models here.\n+\n class CustomUser(AbstractUser):\n-    # roles = models.CharField(max_length = 250,null = True) \n-    first_name = models.CharField(max_length = 250,null = True)\n-    last_name = models.CharField(max_length = 250,null = True)\n-    full_name = models.CharField(max_length = 250,null = True)\n-    college = models.ForeignKey(College,null = True,on_delete = models.SET_NULL,related_name='user',blank=True)\n-    social_media = models.ManyToManyField(SocialMedia,blank=True)\n-    email = models.EmailField(max_length = 250,unique = True)\n-    # social_links = models.ManyToManyField(SocialMedia,blank=True)\n+    first_name = models.CharField(max_length=250, null=True, blank=True)\n+    last_name = models.CharField(max_length=250, null=True, blank=True)\n+    full_name = models.CharField(max_length=250, null=True, blank=True)\n+    college = models.ForeignKey(College, null=True, on_delete=models.SET_NULL, related_name='user', blank=True)\n+    social_media = models.ManyToManyField(SocialMedia, blank=True)\n+    email = models.EmailField(max_length=250, unique=True)\n     position = models.PositiveIntegerField(default=0)\n-    phone = models.CharField(max_length=15,null=True , default = '')\n+    phone = models.CharField(max_length=15, null=True, default='')\n     \n     groups = models.ManyToManyField(\n         Group,\n         related_name=\"customuser_groups\",  # Custom related name\n@@ -27,61 +26,52 @@\n         related_name=\"customuser_permissions\",  # Custom related name\n         blank=True\n     )\n \n-    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n-    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n+    avatar = models.ImageField(upload_to='profile', null=True, blank=True)\n+    professional_image = models.ImageField(upload_to='profile', null=True, blank=True)\n \n     USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = ['username']\n+    REQUIRED_FIELDS = []  # Remove 'username' from required fields\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n+    def save(self, *args, **kwargs):\n+        # Auto-set first_name and last_name from full_name\n+        if self.full_name:\n+            name_parts = self.full_name.split(\" \", 1)\n+            self.first_name = name_parts[0]\n+            self.last_name = name_parts[1] if len(name_parts) > 1 else \"\"\n \n+        # Auto-generate username from full_name (if empty)\n+        if not self.username:\n+            base_username = slugify(self.full_name)[:30] if self.full_name else f\"user-{uuid.uuid4().hex[:8]}\"\n+            unique_username = base_username\n+\n+            # Ensure uniqueness\n+            counter = 1\n+            while CustomUser.objects.filter(username=unique_username).exists():\n+                unique_username = f\"{base_username}-{counter}\"\n+                counter += 1\n+\n+            self.username = unique_username\n+\n+        super().save(*args, **kwargs)\n+\n     def __str__(self):\n-        return self.username\n-    \n+        return self.email  # Display email instead of username\n+\n     class Meta:\n         permissions = [\n             ('manage_user', 'Manage User'),\n         ]\n-    \n+\n     @property\n     def full_name(self):\n         return f\"{self.first_name} {self.last_name}\".strip() if self.first_name or self.last_name else self.username\n-    \n+\n     @full_name.setter\n     def full_name(self, value):\n         name_parts = value.split(\" \", 1)\n         self.first_name = name_parts[0]\n         self.last_name = name_parts[1] if len(name_parts) > 1 else \"\"\n-\n-\n-# class GroupExtension(models.Model):\n-#     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n-#     position = models.PositiveIntegerField(default=0)\n-    \n-#     def __int__(self):\n-#         return self.position\n-    \n-#     class Meta:\n-#         permissions = [\n-#             ('manage_group_extension', 'Manage group extension'),\n-#         ]\n-#     def save(self, *args, **kwargs):\n-#         # Ensure the superuser status is not changed accidentally\n-#         if not self.is_superuser:\n-#             print(\"####################Superuser status cannot be changed.##################\")\n-#             # You can log or add checks here if needed\n-#             pass\n-#         super().save(*args, **kwargs)\n-\n-\n-    # def save(self, *args, **kwargs):\n-    #     # Set position to the Group ID if position is 0 (or could be None)\n-    #     if self.position == 0:\n-    #         super().save(*args, **kwargs)  # Save initially to get the group ID\n-    #         self.position = self.group.id\n-    #         super().save(*args, **kwargs)  # Save again to update position with group ID\n-    #     else:\n-    #         super().save(*args, **kwargs)\n"
                },
                {
                    "date": 1740132844581,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     avatar = models.ImageField(upload_to='profile', null=True, blank=True)\n     professional_image = models.ImageField(upload_to='profile', null=True, blank=True)\n \n     USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = []  # Remove 'username' from required fields\n+    REQUIRED_FIELDS = [user]  # Remove 'username' from required fields\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n"
                },
                {
                    "date": 1740132849921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,9 +30,9 @@\n     avatar = models.ImageField(upload_to='profile', null=True, blank=True)\n     professional_image = models.ImageField(upload_to='profile', null=True, blank=True)\n \n     USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = [user]  # Remove 'username' from required fields\n+    REQUIRED_FIELDS = ['username]  # Remove 'username' from required fields\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n"
                },
                {
                    "date": 1741246714929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,12 @@\n     social_media = models.ManyToManyField(SocialMedia, blank=True)\n     email = models.EmailField(max_length=250, unique=True)\n     position = models.PositiveIntegerField(default=0)\n     phone = models.CharField(max_length=15, null=True, default='')\n+    is_active = models.BooleanField(default=True)\n+    remarks = models.CharField(max_length=200,null=True,default = '')\n+\n+    is_verified = models.BooleanField(default=False)\n     \n     groups = models.ManyToManyField(\n         Group,\n         related_name=\"customuser_groups\",  # Custom related name\n@@ -30,9 +34,9 @@\n     avatar = models.ImageField(upload_to='profile', null=True, blank=True)\n     professional_image = models.ImageField(upload_to='profile', null=True, blank=True)\n \n     USERNAME_FIELD = 'email'\n-    REQUIRED_FIELDS = ['username]  # Remove 'username' from required fields\n+    REQUIRED_FIELDS = ['username']  # Remove 'username' from required fields\n \n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n"
                },
                {
                    "date": 1741253256251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,8 @@\n     position = models.PositiveIntegerField(default=0)\n     phone = models.CharField(max_length=15, null=True, default='')\n     is_active = models.BooleanField(default=True)\n     remarks = models.CharField(max_length=200,null=True,default = '')\n-\n     is_verified = models.BooleanField(default=False)\n     \n     groups = models.ManyToManyField(\n         Group,\n@@ -36,9 +35,9 @@\n \n     USERNAME_FIELD = 'email'\n     REQUIRED_FIELDS = ['username']  # Remove 'username' from required fields\n \n-    created_at = models.DateTimeField(auto_now_add=True)\n+    created_date = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n \n     def save(self, *args, **kwargs):\n         # Auto-set first_name and last_name from full_name\n"
                }
            ],
            "date": 1739786438931,
            "name": "Commit-0",
            "content": "from django.db import models\nfrom django.contrib.auth.models import AbstractUser\nfrom collegemanagement.models import College\nfrom django.contrib.auth.models import Group, Permission\nfrom socialmedia.models import SocialMedia\n\n# Create your models here.\nclass CustomUser(AbstractUser):\n    # roles = models.CharField(max_length = 250,null = True) \n    full_name = models.CharField(max_length = 250,null = True)\n    college = models.ForeignKey(College,null = True,on_delete = models.SET_NULL,related_name='user',bla)\n    social_media = models.ManyToManyField(SocialMedia,blank=True)\n    email = models.EmailField(max_length = 250,unique = True)\n    # social_links = models.ManyToManyField(SocialMedia,blank=True)\n    position = models.PositiveIntegerField(default=0)\n    phone = models.CharField(max_length=15,null=True , default = '')\n    \n    groups = models.ManyToManyField(\n        Group,\n        related_name=\"customuser_groups\",  # Custom related name\n        blank=True\n    )\n    user_permissions = models.ManyToManyField(\n        Permission,\n        related_name=\"customuser_permissions\",  # Custom related name\n        blank=True\n    )\n\n    avatar = models.ImageField(upload_to='profile',null=True,blank=True)\n    professional_image = models.ImageField(upload_to='profile',null=True,blank=True)\n\n    USERNAME_FIELD = 'email'\n    REQUIRED_FIELDS = ['username']\n\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n\n\n    def __str__(self):\n        return self.username\n    \n    class Meta:\n        permissions = [\n            ('manage_user', 'Manage User'),\n        ]\n    \n    @property\n    def full_name(self):\n        try:\n            return self.first_name + \" \" + self.last_name\n        except:\n            return self.username\n\n\n# class GroupExtension(models.Model):\n#     group = models.OneToOneField(Group, on_delete=models.CASCADE, related_name='extension')\n#     position = models.PositiveIntegerField(default=0)\n    \n#     def __int__(self):\n#         return self.position\n    \n#     class Meta:\n#         permissions = [\n#             ('manage_group_extension', 'Manage group extension'),\n#         ]\n#     def save(self, *args, **kwargs):\n#         # Ensure the superuser status is not changed accidentally\n#         if not self.is_superuser:\n#             print(\"####################Superuser status cannot be changed.##################\")\n#             # You can log or add checks here if needed\n#             pass\n#         super().save(*args, **kwargs)\n\n\n    # def save(self, *args, **kwargs):\n    #     # Set position to the Group ID if position is 0 (or could be None)\n    #     if self.position == 0:\n    #         super().save(*args, **kwargs)  # Save initially to get the group ID\n    #         self.position = self.group.id\n    #         super().save(*args, **kwargs)  # Save again to update position with group ID\n    #     else:\n    #         super().save(*args, **kwargs)\n"
        }
    ]
}