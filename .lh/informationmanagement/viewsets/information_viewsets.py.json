{
    "sourceFile": "informationmanagement/viewsets/information_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 47,
            "patches": [
                {
                    "date": 1733481577467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733481584980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     serializer_class = InformationListSerializers\n     # permission_classes = [informationmanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = Information.objects.all().order_by\n+    queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return InformationWriteSerializers\n"
                },
                {
                    "date": 1733727070491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,11 +15,11 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1733727079323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'information_category': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733727113593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n     # permission_classes = [informationmanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n"
                },
                {
                    "date": 1733727147205,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'information_category': ['exact'],\n     }\n-\n+('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n \n"
                },
                {
                    "date": 1733727165343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,16 +12,16 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n         'information_category': ['exact'],\n     }\n-('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n+# ('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n \n"
                },
                {
                    "date": 1733727175145,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date',]\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1733727187994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1733727199769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__title', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1733727221852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__title', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1733727227415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name', 'affiliation', 'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name',  'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1733727237132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name',  'district', 'college', 'faculty', 'file', 'is_view', 'created_date', 'updated_date',]\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1733727255183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n-    ordering_fields = ['id']\n+    ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n \n     filterset_fields = {\n         'id': ['exact'],\n         'information_category': ['exact'],\n"
                },
                {
                    "date": 1733727303420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,11 +16,20 @@\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n \n     filterset_fields = {\n-        'id': ['exact'],\n-        'information_category': ['exact'],\n-    }\n+    'id': ['exact'],\n+    'title': ['exact', 'icontains'],\n+    'publish_date': ['exact', 'gte', 'lte'],\n+    'active_period_start': ['exact', 'gte', 'lte'],\n+    'active_period_end': ['exact', 'gte', 'lte'],\n+    'level__name': ['exact', 'icontains'],\n+    'sublevel__name': ['exact', 'icontains'],\n+    'course__name': ['exact', 'icontains'],\n+    'created_date': ['exact', 'gte', 'lte'],\n+    'updated_date': ['exact', 'gte', 'lte'],\n+}\n+\n # ('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1733727308911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n     'sublevel__name': ['exact', 'icontains'],\n     'course__name': ['exact', 'icontains'],\n     'created_date': ['exact', 'gte', 'lte'],\n     'updated_date': ['exact', 'gte', 'lte'],\n-}\n+    }\n \n # ('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733727596817,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n \n     filterset_fields = {\n     'id': ['exact'],\n+    'id': ['exact'],\n     'title': ['exact', 'icontains'],\n     'publish_date': ['exact', 'gte', 'lte'],\n     'active_period_start': ['exact', 'gte', 'lte'],\n     'active_period_end': ['exact', 'gte', 'lte'],\n"
                },
                {
                    "date": 1733730053433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,14 +17,14 @@\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n \n     filterset_fields = {\n     'id': ['exact'],\n-    'id': ['exact'],\n+    'state': ['exact'],\n     'title': ['exact', 'icontains'],\n     'publish_date': ['exact', 'gte', 'lte'],\n     'active_period_start': ['exact', 'gte', 'lte'],\n     'active_period_end': ['exact', 'gte', 'lte'],\n-    'level__name': ['exact', 'icontains'],\n+    # 'level__name': ['exact', 'icontains'],\n     'sublevel__name': ['exact', 'icontains'],\n     'course__name': ['exact', 'icontains'],\n     'created_date': ['exact', 'gte', 'lte'],\n     'updated_date': ['exact', 'gte', 'lte'],\n"
                },
                {
                    "date": 1733730065898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n+    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n \n     filterset_fields = {\n     'id': ['exact'],\n"
                },
                {
                    "date": 1738142127451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,23 +13,23 @@\n     queryset = Information.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n-    ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'level__name', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n+    ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n \n-    filterset_fields = {\n-    'id': ['exact'],\n-    'state': ['exact'],\n-    'title': ['exact', 'icontains'],\n-    'publish_date': ['exact', 'gte', 'lte'],\n-    'active_period_start': ['exact', 'gte', 'lte'],\n-    'active_period_end': ['exact', 'gte', 'lte'],\n-    # 'level__name': ['exact', 'icontains'],\n-    'sublevel__name': ['exact', 'icontains'],\n-    'course__name': ['exact', 'icontains'],\n-    'created_date': ['exact', 'gte', 'lte'],\n-    'updated_date': ['exact', 'gte', 'lte'],\n-    }\n+    # filterset_fields = {\n+    # 'id': ['exact'],\n+    # 'state': ['exact'],\n+    # 'title': ['exact', 'icontains'],\n+    # 'publish_date': ['exact', 'gte', 'lte'],\n+    # 'active_period_start': ['exact', 'gte', 'lte'],\n+    # 'active_period_end': ['exact', 'gte', 'lte'],\n+    # # 'level__name': ['exact', 'icontains'],\n+    # 'sublevel__name': ['exact', 'icontains'],\n+    # 'course__name': ['exact', 'icontains'],\n+    # 'created_date': ['exact', 'gte', 'lte'],\n+    # 'updated_date': ['exact', 'gte', 'lte'],\n+    # }\n \n # ('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1738142135559,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     # permission_classes = [informationmanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n+    filterset\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n"
                },
                {
                    "date": 1738142152434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     # permission_classes = [informationmanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n-    filterset\n+    filterset_class = InformationFilter\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n"
                },
                {
                    "date": 1738142159940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Information\n from ..serializers.information_serializers import InformationListSerializers, InformationRetrieveSerializers, InformationWriteSerializers\n from ..utilities.importbase import *\n+from ..utilities\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n     # permission_classes = [informationmanagementPermission]\n"
                },
                {
                    "date": 1738212189198,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,18 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Information\n from ..serializers.information_serializers import InformationListSerializers, InformationRetrieveSerializers, InformationWriteSerializers\n from ..utilities.importbase import *\n-from ..utilities\n+from ..utilities.filters import InformationFilter\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n     # permission_classes = [informationmanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n     filterset_class = InformationFilter\n+    lookup_field\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n"
                },
                {
                    "date": 1738307405156,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n     filterset_class = InformationFilter\n-    lookup_field\n+    lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n     ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n@@ -48,4 +48,25 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n+\n+    def create(self, request, *args, **kwargs):\n+        \"\"\"\n+        Override the create method to return the request data as the response.\n+        \"\"\"\n+        response = super().create(request, *args, **kwargs)\n+        return Response(request.data, status=response.status_code)\n+\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Override the update method to return the request data as the response.\n+        \"\"\"\n+        response = super().update(request, *args, **kwargs)\n+        return Response(request.data, status=response.status_code)\n+\n+    def partial_update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Override the partial_update method to return the request data as the response.\n+        \"\"\"\n+        response = super().partial_update(request, *args, **kwargs)\n+        return Response(request.data, status=response.status_code)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738307427812,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n from ..models import Information\n from ..serializers.information_serializers import InformationListSerializers, InformationRetrieveSerializers, InformationWriteSerializers\n from ..utilities.importbase import *\n from ..utilities.filters import InformationFilter\n+from rest_framework import viewsets, status\n+from rest_framework.response import Response\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n     # permission_classes = [informationmanagementPermission]\n"
                },
                {
                    "date": 1738481667415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,26 +49,4 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-\n-\n-    def create(self, request, *args, **kwargs):\n-        \"\"\"\n-        Override the create method to return the request data as the response.\n-        \"\"\"\n-        response = super().create(request, *args, **kwargs)\n-        return Response(request.data, status=response.status_code)\n-\n-    def update(self, request, *args, **kwargs):\n-        \"\"\"\n-        Override the update method to return the request data as the response.\n-        \"\"\"\n-        response = super().update(request, *args, **kwargs)\n-        return Response(request.data, status=response.status_code)\n-\n-    def partial_update(self, request, *args, **kwargs):\n-        \"\"\"\n-        Override the partial_update method to return the request data as the response.\n-        \"\"\"\n-        response = super().partial_update(request, *args, **kwargs)\n-        return Response(request.data, status=response.status_code)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738481753570,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,4 +49,43 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+def get_serializer_class(self):\n+        \"\"\"\n+        Returns the appropriate serializer class based on the request type.\n+        \"\"\"\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return InformationWriteSerializers\n+        elif self.action == 'retrieve':\n+            return InformationRetrieveSerializers\n+        return InformationListSerializers\n+\n+    def create(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles creating a new Information object.\n+        Returns the full object data using InformationRetrieveSerializers.\n+        \"\"\"\n+        serializer = self.get_serializer(data=request.data, context={'request': request})\n+        serializer.is_valid(raise_exception=True)\n+        instance = serializer.save()\n+\n+        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_201_CREATED)\n+\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles updating an existing Information object.\n+        Returns the updated object data using InformationRetrieveSerializers.\n+        \"\"\"\n+        instance = self.get_object()\n+        serializer = self.get_serializer(instance, data=request.data, context={'request': request}, partial=True)\n+        serializer.is_valid(raise_exception=True)\n+        instance = serializer.save()\n+\n+        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Allows additional filtering logic if needed.\n+        \"\"\"\n+        queryset = super().get_queryset()\n+        return queryset\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738481764952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,17 +49,17 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-def get_serializer_class(self):\n-        \"\"\"\n-        Returns the appropriate serializer class based on the request type.\n-        \"\"\"\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return InformationWriteSerializers\n-        elif self.action == 'retrieve':\n-            return InformationRetrieveSerializers\n-        return InformationListSerializers\n+    def get_serializer_class(self):\n+            \"\"\"\n+            Returns the appropriate serializer class based on the request type.\n+            \"\"\"\n+            if self.action in ['create', 'update', 'partial_update']:\n+                return InformationWriteSerializers\n+            elif self.action == 'retrieve':\n+                return InformationRetrieveSerializers\n+            return InformationListSerializers\n \n     def create(self, request, *args, **kwargs):\n         \"\"\"\n         Handles creating a new Information object.\n"
                },
                {
                    "date": 1738748550520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n     # permission_classes = [informationmanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n     filterset_class = InformationFilter\n     lookup_field = \"slug\"\n"
                },
                {
                    "date": 1739264686563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from rest_framework.response import Response\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n-    # permission_classes = [informationmanagementPermission]\n+    permission_classes = [informationmanagementPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n     filterset_class = InformationFilter\n"
                },
                {
                    "date": 1739509541073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from ..utilities.filters import InformationFilter\n from rest_framework import viewsets, status\n from rest_framework.response import Response\n+from mainproj\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n     permission_classes = [informationmanagementPermission]\n"
                },
                {
                    "date": 1739509547908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from ..utilities.filters import InformationFilter\n from rest_framework import viewsets, status\n from rest_framework.response import Response\n-from mainproj\n+from mainproj.permissions import DynamicModelPermission\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n     permission_classes = [informationmanagementPermission]\n"
                },
                {
                    "date": 1739767344541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n from mainproj.permissions import DynamicModelPermission\n \n class informationViewsets(viewsets.ModelViewSet):\n     serializer_class = InformationListSerializers\n-    permission_classes = [informationmanagementPermission]\n-    authentication_classes = [JWTAuthentication]\n+    permission_classes = [DynamicModelPermission]\n+    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n     filterset_class = InformationFilter\n     lookup_field = \"slug\"\n"
                },
                {
                    "date": 1739948040657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n-    ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n+    ordering_fields =  ['id','title', 'publish_date', 'active_period_start','created_date', 'updated_date',]\n \n     # filterset_fields = {\n     # 'id': ['exact'],\n     # 'state': ['exact'],\n"
                },
                {
                    "date": 1739948055239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n             \"\"\"\n             if self.action in ['create', 'update', 'partial_update']:\n                 return InformationWriteSerializers\n             elif self.action == 'retrieve':\n-                return InformationRetrieveSerializers\n+                return InformationListSerializers\n             return InformationListSerializers\n \n     def create(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1739948117881,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,12 +81,5 @@\n         serializer = self.get_serializer(instance, data=request.data, context={'request': request}, partial=True)\n         serializer.is_valid(raise_exception=True)\n         instance = serializer.save()\n \n-        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Allows additional filtering logic if needed.\n-        \"\"\"\n-        queryset = super().get_queryset()\n-        return queryset\n\\ No newline at end of file\n+        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739948130278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n-    ordering_fields =  ['id','title', 'publish_date', 'active_period_start','created_date', 'updated_date',]\n+    ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n \n     # filterset_fields = {\n     # 'id': ['exact'],\n     # 'state': ['exact'],\n@@ -57,9 +57,9 @@\n             \"\"\"\n             if self.action in ['create', 'update', 'partial_update']:\n                 return InformationWriteSerializers\n             elif self.action == 'retrieve':\n-                return InformationListSerializers\n+                return InformationRetrieveSerializers\n             return InformationListSerializers\n \n     def create(self, request, *args, **kwargs):\n         \"\"\"\n@@ -81,5 +81,12 @@\n         serializer = self.get_serializer(instance, data=request.data, context={'request': request}, partial=True)\n         serializer.is_valid(raise_exception=True)\n         instance = serializer.save()\n \n-        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n\\ No newline at end of file\n+        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n+\n+    def get_queryset(self):\n+        \"\"\"\n+        Allows additional filtering logic if needed.\n+        \"\"\"\n+        queryset = super().get_queryset()\n+        return queryset\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739948151009,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,17 +38,10 @@\n \n # ('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        return queryset\n+        return queryse\n \n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return InformationWriteSerializers\n-        elif self.action == 'retrieve':\n-            return InformationRetrieveSerializers\n-        return super().get_serializer_class()\n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739948172016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,13 +38,10 @@\n \n # ('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        return queryse\n+        return queryset\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n     def get_serializer_class(self):\n             \"\"\"\n             Returns the appropriate serializer class based on the request type.\n             \"\"\"\n"
                },
                {
                    "date": 1739948230035,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,12 +71,5 @@\n         serializer = self.get_serializer(instance, data=request.data, context={'request': request}, partial=True)\n         serializer.is_valid(raise_exception=True)\n         instance = serializer.save()\n \n-        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n-\n-    def get_queryset(self):\n-        \"\"\"\n-        Allows additional filtering logic if needed.\n-        \"\"\"\n-        queryset = super().get_queryset()\n-        return queryset\n\\ No newline at end of file\n+        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739948286502,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,25 +51,25 @@\n                 return InformationRetrieveSerializers\n             return InformationListSerializers\n \n     def create(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles creating a new Information object.\n-        Returns the full object data using InformationRetrieveSerializers.\n-        \"\"\"\n-        serializer = self.get_serializer(data=request.data, context={'request': request})\n-        serializer.is_valid(raise_exception=True)\n-        instance = serializer.save()\n+    \"\"\"\n+    Handles creating a new Information object.\n+    Returns the full object data using InformationRetrieveSerializers.\n+    \"\"\"\n+    serializer = self.get_serializer(data=request.data)\n+    serializer.is_valid(raise_exception=True)\n+    instance = serializer.save()\n \n-        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_201_CREATED)\n+    return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_201_CREATED)\n \n-    def update(self, request, *args, **kwargs):\n-        \"\"\"\n-        Handles updating an existing Information object.\n\\ No newline at end of file\n-        Returns the updated object data using InformationRetrieveSerializers.\n-        \"\"\"\n-        instance = self.get_object()\n-        serializer = self.get_serializer(instance, data=request.data, context={'request': request}, partial=True)\n-        serializer.is_valid(raise_exception=True)\n-        instance = serializer.save()\n+def update(self, request, *args, **kwargs):\n+    \"\"\"\n+    Handles updating an existing Information object.\n+    Returns the updated object data using InformationRetrieveSerializers.\n+    \"\"\"\n+    instance = self.get_object()\n+    serializer = self.get_serializer(instance, data=request.data, partial=True)\n+    serializer.is_valid(raise_exception=True)\n+    instance = serializer.save()\n \n-        return Response(InformationRetrieveSerializers(instance).data, status=status.HTTP_200_OK)\n+    return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1739948292067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,25 +51,25 @@\n                 return InformationRetrieveSerializers\n             return InformationListSerializers\n \n     def create(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles creating a new Information object.\n-    Returns the full object data using InformationRetrieveSerializers.\n-    \"\"\"\n-    serializer = self.get_serializer(data=request.data)\n-    serializer.is_valid(raise_exception=True)\n-    instance = serializer.save()\n+        \"\"\"\n+        Handles creating a new Information object.\n+        Returns the full object data using InformationRetrieveSerializers.\n+        \"\"\"\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        instance = serializer.save()\n \n-    return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_201_CREATED)\n+        return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_201_CREATED)\n \n-def update(self, request, *args, **kwargs):\n-    \"\"\"\n-    Handles updating an existing Information object.\n-    Returns the updated object data using InformationRetrieveSerializers.\n-    \"\"\"\n-    instance = self.get_object()\n-    serializer = self.get_serializer(instance, data=request.data, partial=True)\n-    serializer.is_valid(raise_exception=True)\n-    instance = serializer.save()\n+    def update(self, request, *args, **kwargs):\n+        \"\"\"\n+        Handles updating an existing Information object.\n+        Returns the updated object data using InformationRetrieveSerializers.\n+        \"\"\"\n+        instance = self.get_object()\n+        serializer = self.get_serializer(instance, data=request.data, partial=True)\n+        serializer.is_valid(raise_exception=True)\n+        instance = serializer.save()\n \n-    return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_200_OK)\n+        return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_200_OK)\n"
                },
                {
                    "date": 1739948333204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,68 +1,57 @@\n-from rest_framework import viewsets\n+from rest_framework import viewsets, status\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n+from rest_framework.response import Response\n from ..models import Information\n-from ..serializers.information_serializers import InformationListSerializers, InformationRetrieveSerializers, InformationWriteSerializers\n-from ..utilities.importbase import *\n+from ..serializers.information_serializers import (\n+    InformationListSerializers, InformationRetrieveSerializers, InformationWriteSerializers\n+)\n from ..utilities.filters import InformationFilter\n-from rest_framework import viewsets, status\n-from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n \n class informationViewsets(viewsets.ModelViewSet):\n-    serializer_class = InformationListSerializers\n     permission_classes = [DynamicModelPermission]\n-    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n     filterset_class = InformationFilter\n     lookup_field = \"slug\"\n \n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n-    ordering_fields =  ['id','title', 'publish_date', 'active_period_start', 'active_period_end', 'sublevel__name', 'course__name','created_date', 'updated_date',]\n+    filter_backends = [DjangoFilterBackend, SearchFilter, OrderingFilter]  # 🔹 FIX: Corrected Order\n+    search_fields = [\n+        'id', 'title', 'publish_date', 'active_period_start', 'active_period_end', \n+        'sublevel__name', 'course__name', 'created_date', 'updated_date'\n+    ]\n+    ordering_fields = search_fields\n \n-    # filterset_fields = {\n-    # 'id': ['exact'],\n-    # 'state': ['exact'],\n-    # 'title': ['exact', 'icontains'],\n-    # 'publish_date': ['exact', 'gte', 'lte'],\n-    # 'active_period_start': ['exact', 'gte', 'lte'],\n-    # 'active_period_end': ['exact', 'gte', 'lte'],\n-    # # 'level__name': ['exact', 'icontains'],\n-    # 'sublevel__name': ['exact', 'icontains'],\n-    # 'course__name': ['exact', 'icontains'],\n-    # 'created_date': ['exact', 'gte', 'lte'],\n-    # 'updated_date': ['exact', 'gte', 'lte'],\n-    # }\n-\n-# ('title', 'publish_date', 'active_period_start', 'active_period_end', 'level', 'sublevel', 'course', 'affiliation', 'district', 'college', 'faculty', 'information_tagging', 'information_category', 'short_description', 'description', 'image', 'file', 'is_view', 'created_date', 'updated_date', )\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n     def get_serializer_class(self):\n-            \"\"\"\n-            Returns the appropriate serializer class based on the request type.\n-            \"\"\"\n-            if self.action in ['create', 'update', 'partial_update']:\n-                return InformationWriteSerializers\n-            elif self.action == 'retrieve':\n-                return InformationRetrieveSerializers\n-            return InformationListSerializers\n+        \"\"\"\n+        Returns the appropriate serializer class based on the request type.\n+        \"\"\"\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return InformationWriteSerializers\n+        elif self.action == 'retrieve':\n+            return InformationRetrieveSerializers\n+        return InformationListSerializers\n \n     def create(self, request, *args, **kwargs):\n         \"\"\"\n         Handles creating a new Information object.\n         Returns the full object data using InformationRetrieveSerializers.\n         \"\"\"\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n-        instance = serializer.save()\n+        self.perform_create(serializer)  # 🔹 FIX: Uses DRF standard method\n \n-        return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_201_CREATED)\n+        return Response(\n+            InformationRetrieveSerializers(serializer.instance, context=self.get_serializer_context()).data, \n+            status=status.HTTP_201_CREATED\n+        )\n \n+    def perform_create(self, serializer):\n+        \"\"\"Handles creating a new Information object (DRF standard method).\"\"\"\n+        serializer.save()\n+\n     def update(self, request, *args, **kwargs):\n         \"\"\"\n         Handles updating an existing Information object.\n         Returns the updated object data using InformationRetrieveSerializers.\n@@ -71,5 +60,8 @@\n         serializer = self.get_serializer(instance, data=request.data, partial=True)\n         serializer.is_valid(raise_exception=True)\n         instance = serializer.save()\n \n-        return Response(InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, status=status.HTTP_200_OK)\n+        return Response(\n+            InformationRetrieveSerializers(instance, context=self.get_serializer_context()).data, \n+            status=status.HTTP_200_OK\n+        )\n"
                },
                {
                    "date": 1739948345135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from mainproj.permissions import DynamicModelPermission\n \n class informationViewsets(viewsets.ModelViewSet):\n     permission_classes = [DynamicModelPermission]\n-    pagination_class = MyPageNumberPagination\n+    # pagination_class = MyPageNumberPagination\n     queryset = Information.objects.all().order_by('-id')\n     filterset_class = InformationFilter\n     lookup_field = \"slug\"\n \n"
                },
                {
                    "date": 1739948498530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,12 +22,10 @@\n         'sublevel__name', 'course__name', 'created_date', 'updated_date'\n     ]\n     ordering_fields = search_fields\n \n-    def get_serializer_class(self):\n-        \"\"\"\n-        Returns the appropriate serializer class based on the request type.\n-        \"\"\"\n+        def get_serializer_class(self):\n+        \"\"\"Return different serializers for different actions\"\"\"\n         if self.action in ['create', 'update', 'partial_update']:\n             return InformationWriteSerializers\n         elif self.action == 'retrieve':\n             return InformationRetrieveSerializers\n"
                },
                {
                    "date": 1739948532316,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'sublevel__name', 'course__name', 'created_date', 'updated_date'\n     ]\n     ordering_fields = search_fields\n \n-        def get_serializer_class(self):\n+    def get_serializer_class(self):\n         \"\"\"Return different serializers for different actions\"\"\"\n         if self.action in ['create', 'update', 'partial_update']:\n             return InformationWriteSerializers\n         elif self.action == 'retrieve':\n"
                },
                {
                    "date": 1739948555065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,9 +37,9 @@\n         Returns the full object data using InformationRetrieveSerializers.\n         \"\"\"\n         serializer = self.get_serializer(data=request.data)\n         serializer.is_valid(raise_exception=True)\n-        self.perform_create(serializer)  # 🔹 FIX: Uses DRF standard method\n+        self.perform_create(serializer)  \n \n         return Response(\n             InformationRetrieveSerializers(serializer.instance, context=self.get_serializer_context()).data, \n             status=status.HTTP_201_CREATED\n"
                }
            ],
            "date": 1733481577467,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Information\nfrom ..serializers.information_serializers import InformationListSerializers, InformationRetrieveSerializers, InformationWriteSerializers\nfrom ..utilities.importbase import *\n\nclass informationViewsets(viewsets.ModelViewSet):\n    serializer_class = InformationListSerializers\n    # permission_classes = [informationmanagementPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = Information.objects.all().order_by\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return InformationWriteSerializers\n        elif self.action == 'retrieve':\n            return InformationRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}