{
    "sourceFile": "informationmanagement/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 22,
            "patches": [
                {
                    "date": 1739786154635,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739945765730,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     # template_name  = models.CharField(max_length=255,null=True,blank=True)\n     public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n     slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n     title = models.CharField(max_length=510,unique=True)\n-    publish_date = models.DateTimeField()\n+    publish_date = models.DateField()\n     active_period_start = models.DateField()\n     active_period_end = models.DateField()\n     \n     level = models.ManyToManyField(Level, blank=True)\n"
                },
                {
                    "date": 1739945778179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     # template_name  = models.CharField(max_length=255,null=True,blank=True)\n     public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n     slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n     title = models.CharField(max_length=510,unique=True)\n-    publish_date = models.DateField()\n+    publish_date = models.DateField(null=)\n     active_period_start = models.DateField()\n     active_period_end = models.DateField()\n     \n     level = models.ManyToManyField(Level, blank=True)\n"
                },
                {
                    "date": 1739945785580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,11 +62,11 @@\n     # template_name  = models.CharField(max_length=255,null=True,blank=True)\n     public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n     slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n     title = models.CharField(max_length=510,unique=True)\n-    publish_date = models.DateField(null=)\n-    active_period_start = models.DateField()\n-    active_period_end = models.DateField()\n+    publish_date = models.DateField(null=True, blank=True)\n+    active_period_start = models.DateField(null=True, blank=True))\n+    active_period_end = models.DateField(null=True, blank=True))\n     \n     level = models.ManyToManyField(Level, blank=True)\n     sublevel = models.ManyToManyField(SubLevel, blank=True)\n     course = models.ManyToManyField(Course, blank=True)\n"
                },
                {
                    "date": 1739945798047,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n     slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n     title = models.CharField(max_length=510,unique=True)\n     publish_date = models.DateField(null=True, blank=True)\n-    active_period_start = models.DateField(null=True, blank=True))\n+    active_period_start = models.DateField(null=True, blank=True)\n     active_period_end = models.DateField(null=True, blank=True))\n     \n     level = models.ManyToManyField(Level, blank=True)\n     sublevel = models.ManyToManyField(SubLevel, blank=True)\n"
                },
                {
                    "date": 1740031769456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,9 +64,9 @@\n     slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n     title = models.CharField(max_length=510,unique=True)\n     publish_date = models.DateField(null=True, blank=True)\n     active_period_start = models.DateField(null=True, blank=True)\n-    active_period_end = models.DateField(null=True, blank=True))\n+    active_period_end = models.DateField(null=True, blank=True)\n     \n     level = models.ManyToManyField(Level, blank=True)\n     sublevel = models.ManyToManyField(SubLevel, blank=True)\n     course = models.ManyToManyField(Course, blank=True)\n@@ -122,8 +122,9 @@\n     image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n     is_featured = models.BooleanField(default=False)\n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n+    \n \n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1740031777925,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,9 @@\n     image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n     is_featured = models.BooleanField(default=False)\n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n-    \n+    manager = models.Man\n \n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1740031784987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -122,9 +122,8 @@\n     image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n     is_featured = models.BooleanField(default=False)\n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n-    manager = models.Man\n \n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1740130555252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,8 +33,10 @@\n         ]\n \n \n class InformationCategory(models.Model):\n+    public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n+    slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n     name = models.CharField(max_length=100)\n     is_show = models.BooleanField(default=False)\n     image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n"
                },
                {
                    "date": 1740130581593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,8 +52,11 @@\n             count = InformationCategory.objects.filter(is_show=True).exclude(pk=self.pk).count()\n             if count >= 2:\n                 raise ValidationError(\"Only two categories can be shown at a time.\")\n         \n+        if not self.slug:\n+            self.slug = slugify(self.name)\n+        \n         super().save(*args, **kwargs)\n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1740380841333,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         return self.title if self.title else \"Unnamed\"\n     \n     def save(self, *args, **kwargs):\n         if not self.slug:\n-            self.slug = slugify(self.name)\n+            self.slug = slugify(self.name) \n         super().save(*args, **kwargs)\n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1740380951011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         return self.title if self.title else \"Unnamed\"\n     \n     def save(self, *args, **kwargs):\n         if not self.slug:\n-            self.slug = slugify(self.name) \n+            self.slug = f'{slugify(self.name)}-{str(self.public_id)[1:5]}{str(self.public_id)[-1:-5]}'\n         super().save(*args, **kwargs)\n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1740381058960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,27 @@\n class Information(SEOFields):\n     # template_name  = models.CharField(max_length=255,null=True,blank=True)\n     public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n     slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n-    title = models.CharField(max_length=510,unique=True)\n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    \n+    = models.CharField(max_length=510,unique=True)\n     publish_date = models.DateField(null=True, blank=True)\n     active_period_start = models.DateField(null=True, blank=True)\n     active_period_end = models.DateField(null=True, blank=True)\n     \n"
                },
                {
                    "date": 1740381066177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,27 +66,9 @@\n class Information(SEOFields):\n     # template_name  = models.CharField(max_length=255,null=True,blank=True)\n     public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n     slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    \n-    = models.CharField(max_length=510,unique=True)\n+    title = models.CharField(max_length=510,unique=True)\n     publish_date = models.DateField(null=True, blank=True)\n     active_period_start = models.DateField(null=True, blank=True)\n     active_period_end = models.DateField(null=True, blank=True)\n     \n"
                },
                {
                    "date": 1740381487893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,8 @@\n     image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n     is_featured = models.BooleanField(default=False)\n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n-\n     \n     class Meta:\n         permissions = [\n             ('manage_informationgallery', 'Manage Information Gallery'),\n"
                },
                {
                    "date": 1741067688040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n         return self.title if self.title else \"Unnamed\"\n     \n     def save(self, *args, **kwargs):\n         if not self.slug:\n-            self.slug = f'{slugify(self.name)}-{str(self.public_id)[1:5]}{str(self.public_id)[-1:-5]}'\n+            self.slug = f'{slugify(self.title)}-{str(self.public_id)[1:5]}{str(self.public_id)[-1:-5]}'\n         super().save(*args, **kwargs)\n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1741502211836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,8 +88,9 @@\n     description = models.TextField(null=True, blank=True)\n     # image = models.ManyToManyField(InformationGallery, blank=True)\n     # file = models.ManyToManyField(InformationFiles, blank=True)\n     state = models.BooleanField(default=False)\n+    \n \n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n     \n"
                },
                {
                    "date": 1741502223637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,10 +88,11 @@\n     description = models.TextField(null=True, blank=True)\n     # image = models.ManyToManyField(InformationGallery, blank=True)\n     # file = models.ManyToManyField(InformationFiles, blank=True)\n     state = models.BooleanField(default=False)\n-    \n+        featured_image = models.CharField(max_length = 500 , null = True,blank = True)\n \n+\n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n     \n     def __str__(self):\n"
                },
                {
                    "date": 1741502228910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     description = models.TextField(null=True, blank=True)\n     # image = models.ManyToManyField(InformationGallery, blank=True)\n     # file = models.ManyToManyField(InformationFiles, blank=True)\n     state = models.BooleanField(default=False)\n-        featured_image = models.CharField(max_length = 500 , null = True,blank = True)\n+    featured_image = models.CharField(max_length = 500 , null = True,blank = True)\n \n \n     created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n"
                },
                {
                    "date": 1741502342696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,5 +133,23 @@\n     \n     class Meta:\n         permissions = [\n             ('manage_informationgallery', 'Manage Information Gallery'),\n-        ]\n\\ No newline at end of file\n+        ]\n+    \n+    def save(self, *args, **kwargs):\n+        # Ensure that only one featured image exists for this information\n+        if self.is_featured:\n+            # Unfeature any other images linked to this information\n+            InformationGallery.objects.filter(information=self.information, is_featured=True).update(is_featured=False)\n+\n+        # Save the current instance first\n+        super().save(*args, **kwargs)\n+\n+        # Update the Information model's featured_image field if this is the featured image\n+        if self.is_featured and self.image:\n+            site_url = getattr(settings, \"SITE_URL\", \"https://collegeinfoapi.com\")  # Default fallback URL\n+            absolute_url = urljoin(site_url, self.image.url)  # Construct absolute URL\n+\n+            # Update the `featured_image` field of the related `Information` instance\n+            self.information.featured_image = absolute_url\n+            self.information.save(update_fields=['featured_image'])  # Save only the updated field\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741502359774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n \n \n     def __str__(self):\n+        \n         return self.name if self.name else \"Unnamed\"\n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1741502382005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,10 @@\n from mainproj.utilities.seo import SEOFields\n from django.core.exceptions import ValidationError\n from django.utils.text import slugify\n import uuid\n+from urllib.parse import urljoin\n+from django.conf import settings\n \n class InformationTagging(models.Model):\n     name = models.CharField(max_length=100,null=True,blank = True)\n     url = models.URLField(blank=True, null=True)\n@@ -24,9 +26,8 @@\n     updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n \n \n     def __str__(self):\n-        \n         return self.name if self.name else \"Unnamed\"\n     \n     class Meta:\n         permissions = [\n"
                },
                {
                    "date": 1741502395908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,157 @@\n+from django.db import models\n+from affiliation.models import Affiliation\n+# from college.models import College\n+from coursemanagement.models import Course\n+from collegemanagement.models import College\n+from district.models import District\n+from faculty.models import Faculty\n+from level.models import Level, SubLevel\n+# from semester.models import Semester  \n+from collegetype.models import CollegeType\n+# from collegeleveltype.models import CollegeLevelType\n+from certification.models import Certification\n+from mainproj.utilities.seo import SEOFields\n+from django.core.exceptions import ValidationError\n+from django.utils.text import slugify\n+import uuid\n+from urllib.parse import urljoin\n+from django.conf import settings\n+\n+class InformationTagging(models.Model):\n+    name = models.CharField(max_length=100,null=True,blank = True)\n+    url = models.URLField(blank=True, null=True)\n+    is_show = models.BooleanField(default=False)\n+    image = models.ImageField(upload_to='information_tagging/',null=True,blank=True)\n+    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n+    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n+\n+\n+    def __str__(self):\n+        return self.name if self.name else \"Unnamed\"\n+    \n+    class Meta:\n+        permissions = [\n+            ('manage_information_tagging', 'Manage Information Tagging'),\n+        ]\n+\n+\n+class InformationCategory(models.Model):\n+    public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n+    slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n+    name = models.CharField(max_length=100)\n+    is_show = models.BooleanField(default=False)\n+    image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n+    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n+    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n+\n+\n+    def __str__(self):\n+       return self.name if self.name else \"Unnamed\"\n+    \n+    def save(self, *args, **kwargs):\n+        # If is_show is being set to True, check the current count of True entries\n+        if self.is_show:\n+            count = InformationCategory.objects.filter(is_show=True).exclude(pk=self.pk).count()\n+            if count >= 2:\n+                raise ValidationError(\"Only two categories can be shown at a time.\")\n+        \n+        if not self.slug:\n+            self.slug = slugify(self.name)\n+        \n+        super().save(*args, **kwargs)\n+    \n+    class Meta:\n+        permissions = [\n+            ('manage_information_category', 'Manage Information Category'),\n+        ]\n+    \n+class Information(SEOFields):\n+    # template_name  = models.CharField(max_length=255,null=True,blank=True)\n+    public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n+    slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n+    title = models.CharField(max_length=510,unique=True)\n+    publish_date = models.DateField(null=True, blank=True)\n+    active_period_start = models.DateField(null=True, blank=True)\n+    active_period_end = models.DateField(null=True, blank=True)\n+    \n+    level = models.ManyToManyField(Level, blank=True)\n+    sublevel = models.ManyToManyField(SubLevel, blank=True)\n+    course = models.ManyToManyField(Course, blank=True)\n+    affiliation = models.ManyToManyField(Affiliation)\n+  \n+    district = models.ManyToManyField(District, blank=True)\n+    college = models.ManyToManyField(College, blank=True)\n+    faculty = models.ManyToManyField(Faculty, blank=True)\n+    \n+    information_tagging = models.ManyToManyField(InformationTagging, blank=True)\n+    information_category = models.ManyToManyField(InformationCategory, blank=True)\n+    \n+    short_description = models.TextField(null=True, blank=True)\n+    description = models.TextField(null=True, blank=True)\n+    # image = models.ManyToManyField(InformationGallery, blank=True)\n+    # file = models.ManyToManyField(InformationFiles, blank=True)\n+    state = models.BooleanField(default=False)\n+    featured_image = models.CharField(max_length = 500 , null = True,blank = True)\n+\n+\n+    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n+    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n+    \n+    def __str__(self):\n+        return self.title if self.title else \"Unnamed\"\n+    \n+    def save(self, *args, **kwargs):\n+        if not self.slug:\n+            self.slug = f'{slugify(self.title)}-{str(self.public_id)[1:5]}{str(self.public_id)[-1:-5]}'\n+        super().save(*args, **kwargs)\n+    \n+    class Meta:\n+        permissions = [\n+            ('manage_information', 'Manage Information'),\n+        ]\n+\n+    def get_active_period(self):\n+        return f\"{self.active_period_start} to {self.active_period_end}\"\n+\n+\n+class InformationFiles(models.Model):\n+    information  = models.ForeignKey(Information, on_delete=models.CASCADE,related_name='information_files')\n+    file = models.FileField(upload_to='information_docs/',null=True,blank=True)\n+    \n+    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n+    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n+   \n+    class Meta:\n+        permissions = [\n+            ('manage_informationfiles', 'Manage Information Files'),\n+        ]\n+        \n+class InformationGallery(models.Model):\n+    information = models.ForeignKey(Information, on_delete=models.CASCADE,related_name='information_gallery')\n+    image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n+    is_featured = models.BooleanField(default=False)\n+    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n+    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n+    \n+    class Meta:\n+        permissions = [\n+            ('manage_informationgallery', 'Manage Information Gallery'),\n+        ]\n+    \n+    def save(self, *args, **kwargs):\n+        # Ensure that only one featured image exists for this information\n+        if self.is_featured:\n+            # Unfeature any other images linked to this information\n+            InformationGallery.objects.filter(information=self.information, is_featured=True).update(is_featured=False)\n+\n+        # Save the current instance first\n+        super().save(*args, **kwargs)\n+\n+        # Update the Information model's featured_image field if this is the featured image\n+        if self.is_featured and self.image:\n+            site_url = getattr(settings, \"SITE_URL\", \"https://collegeinfoapi.com\")  # Default fallback URL\n+            absolute_url = urljoin(site_url, self.image.url)  # Construct absolute URL\n+\n+            # Update the `featured_image` field of the related `Information` instance\n+            self.information.featured_image = absolute_url\n+            self.information.save(update_fields=['featured_image'])  # Save only the updated field\n\\ No newline at end of file\n"
                }
            ],
            "date": 1739786154635,
            "name": "Commit-0",
            "content": "from django.db import models\nfrom affiliation.models import Affiliation\n# from college.models import College\nfrom coursemanagement.models import Course\nfrom collegemanagement.models import College\nfrom district.models import District\nfrom faculty.models import Faculty\nfrom level.models import Level, SubLevel\n# from semester.models import Semester  \nfrom collegetype.models import CollegeType\n# from collegeleveltype.models import CollegeLevelType\nfrom certification.models import Certification\nfrom mainproj.utilities.seo import SEOFields\nfrom django.core.exceptions import ValidationError\nfrom django.utils.text import slugify\nimport uuid\n\nclass InformationTagging(models.Model):\n    name = models.CharField(max_length=100,null=True,blank = True)\n    url = models.URLField(blank=True, null=True)\n    is_show = models.BooleanField(default=False)\n    image = models.ImageField(upload_to='information_tagging/',null=True,blank=True)\n    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n\n\n    def __str__(self):\n        return self.name if self.name else \"Unnamed\"\n    \n    class Meta:\n        permissions = [\n            ('manage_information_tagging', 'Manage Information Tagging'),\n        ]\n\n\nclass InformationCategory(models.Model):\n    name = models.CharField(max_length=100)\n    is_show = models.BooleanField(default=False)\n    image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n\n\n    def __str__(self):\n       return self.name if self.name else \"Unnamed\"\n    \n    def save(self, *args, **kwargs):\n        # If is_show is being set to True, check the current count of True entries\n        if self.is_show:\n            count = InformationCategory.objects.filter(is_show=True).exclude(pk=self.pk).count()\n            if count >= 2:\n                raise ValidationError(\"Only two categories can be shown at a time.\")\n        \n        super().save(*args, **kwargs)\n    \n    class Meta:\n        permissions = [\n            ('manage_information_category', 'Manage Information Category'),\n        ]\n    \nclass Information(SEOFields):\n    # template_name  = models.CharField(max_length=255,null=True,blank=True)\n    public_id = models.UUIDField(default=uuid.uuid4,editable=False,unique=True)\n    slug = models.SlugField(max_length=255, unique=True, null=True, blank=True)\n    title = models.CharField(max_length=510,unique=True)\n    publish_date = models.DateTimeField()\n    active_period_start = models.DateField()\n    active_period_end = models.DateField()\n    \n    level = models.ManyToManyField(Level, blank=True)\n    sublevel = models.ManyToManyField(SubLevel, blank=True)\n    course = models.ManyToManyField(Course, blank=True)\n    affiliation = models.ManyToManyField(Affiliation)\n  \n    district = models.ManyToManyField(District, blank=True)\n    college = models.ManyToManyField(College, blank=True)\n    faculty = models.ManyToManyField(Faculty, blank=True)\n    \n    information_tagging = models.ManyToManyField(InformationTagging, blank=True)\n    information_category = models.ManyToManyField(InformationCategory, blank=True)\n    \n    short_description = models.TextField(null=True, blank=True)\n    description = models.TextField(null=True, blank=True)\n    # image = models.ManyToManyField(InformationGallery, blank=True)\n    # file = models.ManyToManyField(InformationFiles, blank=True)\n    state = models.BooleanField(default=False)\n\n    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n    \n    def __str__(self):\n        return self.title if self.title else \"Unnamed\"\n    \n    def save(self, *args, **kwargs):\n        if not self.slug:\n            self.slug = slugify(self.name)\n        super().save(*args, **kwargs)\n    \n    class Meta:\n        permissions = [\n            ('manage_information', 'Manage Information'),\n        ]\n\n    def get_active_period(self):\n        return f\"{self.active_period_start} to {self.active_period_end}\"\n\n\nclass InformationFiles(models.Model):\n    information  = models.ForeignKey(Information, on_delete=models.CASCADE,related_name='information_files')\n    file = models.FileField(upload_to='information_docs/',null=True,blank=True)\n    \n    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n   \n    class Meta:\n        permissions = [\n            ('manage_informationfiles', 'Manage Information Files'),\n        ]\n        \nclass InformationGallery(models.Model):\n    information = models.ForeignKey(Information, on_delete=models.CASCADE,related_name='information_gallery')\n    image = models.ImageField(upload_to='information_category/',null=True,blank=True)\n    is_featured = models.BooleanField(default=False)\n    created_date = models.DateField(auto_now_add=True, null=True, blank=True)\n    updated_date = models.DateTimeField(auto_now=True, null=True, blank=True)\n\n    \n    class Meta:\n        permissions = [\n            ('manage_informationgallery', 'Manage Information Gallery'),\n        ]"
        }
    ]
}