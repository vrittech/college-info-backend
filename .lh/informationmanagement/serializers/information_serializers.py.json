{
    "sourceFile": "informationmanagement/serializers/information_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 91,
            "patches": [
                {
                    "date": 1733485840683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733485850119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,4 +133,24 @@\n         if image_ids:\n             instance.image.set(image_ids)\n \n         return instance\n+\n+\n+{\n+  \"title\": \"Sample Information\",\n+  \"publish_date\": \"2024-12-01T00:00:00Z\",\n+  \"active_period_start\": \"2024-12-01\",\n+  \"active_period_end\": \"2024-12-31\",\n+  \"level\": [1, 2],\n+  \"sublevel\": [3],\n+  \"course\": [4, 5],\n+  \"affiliation\": [6],\n+  \"district\": [7],\n+  \"college\": [8],\n+  \"faculty\": [9],\n+  \"information_tagging\": [10],\n+  \"information_category\": [11],\n+  \"image\": [12, 13],\n+  \"short_description\": \"Short description here\",\n+  \"description\": \"Detailed description here\"\n+}\n"
                },
                {
                    "date": 1733485855388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,22 +135,22 @@\n \n         return instance\n \n \n-{\n-  \"title\": \"Sample Information\",\n-  \"publish_date\": \"2024-12-01T00:00:00Z\",\n-  \"active_period_start\": \"2024-12-01\",\n-  \"active_period_end\": \"2024-12-31\",\n-  \"level\": [1, 2],\n-  \"sublevel\": [3],\n-  \"course\": [4, 5],\n-  \"affiliation\": [6],\n-  \"district\": [7],\n-  \"college\": [8],\n-  \"faculty\": [9],\n-  \"information_tagging\": [10],\n-  \"information_category\": [11],\n-  \"image\": [12, 13],\n-  \"short_description\": \"Short description here\",\n-  \"description\": \"Detailed description here\"\n-}\n+# {\n+#   \"title\": \"Sample Information\",\n+#   \"publish_date\": \"2024-12-01T00:00:00Z\",\n+#   \"active_period_start\": \"2024-12-01\",\n+#   \"active_period_end\": \"2024-12-31\",\n+#   \"level\": [1, 2],\n+#   \"sublevel\": [3],\n+#   \"course\": [4, 5],\n+#   \"affiliation\": [6],\n+#   \"district\": [7],\n+#   \"college\": [8],\n+#   \"faculty\": [9],\n+#   \"information_tagging\": [10],\n+#   \"information_category\": [11],\n+#   \"image\": [12, 13],\n+#   \"short_description\": \"Short description here\",\n+#   \"description\": \"Detailed description here\"\n+# }\n"
                },
                {
                    "date": 1733485870897,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from .models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery\n+from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n"
                },
                {
                    "date": 1738141138621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,113 +30,117 @@\n         model = Information\n         fields = '__all__'\n \n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    level = serializers.PrimaryKeyRelatedField(queryset=Level.objects.all(), many=True, required=False)\n-    sublevel = serializers.PrimaryKeyRelatedField(queryset=SubLevel.objects.all(), many=True, required=False)\n-    course = serializers.PrimaryKeyRelatedField(queryset=Course.objects.all(), many=True, required=False)\n-    affiliation = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all(), many=True, required=False)\n-    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all(), many=True, required=False)\n-    college = serializers.PrimaryKeyRelatedField(queryset=College.objects.all(), many=True, required=False)\n-    faculty = serializers.PrimaryKeyRelatedField(queryset=Faculty.objects.all(), many=True, required=False)\n-    information_tagging = serializers.PrimaryKeyRelatedField(queryset=InformationTagging.objects.all(), many=True, required=False)\n-    information_category = serializers.PrimaryKeyRelatedField(queryset=InformationCategory.objects.all(), many=True, required=False)\n-    image = serializers.PrimaryKeyRelatedField(queryset=InformationGallery.objects.all(), many=True, required=False)\n+class InformationWriteSerializer(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling Many-to-Many fields as comma-separated values\n+    and handling binary image uploads in form-data.\n+    \"\"\"\n \n+    # Expecting image uploads as binary files in form-data\n+    image = serializers.ListField(\n+        child=serializers.ImageField(max_length=None, allow_empty_file=False, use_url=False),\n+        write_only=True,\n+        required=False\n+    )\n+\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n+    def parse_comma_separated_values(self, field_name):\n+        \"\"\"\n+        Parses comma-separated values (e.g., \"1,2,3\") from form-data into a list of integers.\n+        \"\"\"\n+        field_value = self.initial_data.get(field_name, \"\")\n+        if field_value:\n+            try:\n+                return [int(pk.strip()) for pk in field_value.split(\",\") if pk.strip()]\n+            except ValueError:\n+                raise serializers.ValidationError({field_name: \"Must be a comma-separated list of integers.\"})\n+        return []\n+\n+    @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n-        Handles creation of Information instance with related objects based on provided ids.\n+        Handles creation of Information instance with Many-to-Many fields and binary image uploads.\n         \"\"\"\n-        # Extract the related fields (ManyToMany)\n-        level_ids = validated_data.pop('level', [])\n-        sublevel_ids = validated_data.pop('sublevel', [])\n-        course_ids = validated_data.pop('course', [])\n-        affiliation_ids = validated_data.pop('affiliation', [])\n-        district_ids = validated_data.pop('district', [])\n-        college_ids = validated_data.pop('college', [])\n-        faculty_ids = validated_data.pop('faculty', [])\n-        information_tagging_ids = validated_data.pop('information_tagging', [])\n-        information_category_ids = validated_data.pop('information_category', [])\n-        image_ids = validated_data.pop('image', [])\n+        # Extract Many-to-Many relationships from form-data (comma-separated values)\n+        level_ids = self.parse_comma_separated_values('level')\n+        sublevel_ids = self.parse_comma_separated_values('sublevel')\n+        course_ids = self.parse_comma_separated_values('course')\n+        affiliation_ids = self.parse_comma_separated_values('affiliation')\n+        district_ids = self.parse_comma_separated_values('district')\n+        college_ids = self.parse_comma_separated_values('college')\n+        faculty_ids = self.parse_comma_separated_values('faculty')\n+        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n+        information_category_ids = self.parse_comma_separated_values('information_category')\n \n-        # Create the Information instance first\n+        # Extract images from validated data\n+        images = validated_data.pop('image', [])\n+\n+        # Create the Information instance\n         information = Information.objects.create(**validated_data)\n \n-        # Assign ManyToMany relationships\n-        if level_ids:\n-            information.level.set(level_ids)\n-        if sublevel_ids:\n-            information.sublevel.set(sublevel_ids)\n-        if course_ids:\n-            information.course.set(course_ids)\n-        if affiliation_ids:\n-            information.affiliation.set(affiliation_ids)\n-        if district_ids:\n-            information.district.set(district_ids)\n-        if college_ids:\n-            information.college.set(college_ids)\n-        if faculty_ids:\n-            information.faculty.set(faculty_ids)\n-        if information_tagging_ids:\n-            information.information_tagging.set(information_tagging_ids)\n-        if information_category_ids:\n-            information.information_category.set(information_category_ids)\n-        if image_ids:\n-            information.image.set(image_ids)\n+        # Assign Many-to-Many relationships\n+        information.level.set(level_ids)\n+        information.sublevel.set(sublevel_ids)\n+        information.course.set(course_ids)\n+        information.affiliation.set(affiliation_ids)\n+        information.district.set(district_ids)\n+        information.college.set(college_ids)\n+        information.faculty.set(faculty_ids)\n+        information.information_tagging.set(information_tagging_ids)\n+        information.information_category.set(information_category_ids)\n \n+        # Save image uploads\n+        for img in images:\n+            InformationGallery.objects.create(information=information, image=img)\n+\n         return information\n \n+    @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n-        Handles the update of Information instance with related objects based on provided ids.\n+        Handles updating of Information instance with Many-to-Many fields and binary image uploads.\n         \"\"\"\n-        # Extract the related fields (ManyToMany)\n-        level_ids = validated_data.pop('level', [])\n-        sublevel_ids = validated_data.pop('sublevel', [])\n-        course_ids = validated_data.pop('course', [])\n-        affiliation_ids = validated_data.pop('affiliation', [])\n-        district_ids = validated_data.pop('district', [])\n-        college_ids = validated_data.pop('college', [])\n-        faculty_ids = validated_data.pop('faculty', [])\n-        information_tagging_ids = validated_data.pop('information_tagging', [])\n-        information_category_ids = validated_data.pop('information_category', [])\n-        image_ids = validated_data.pop('image', [])\n+        # Extract Many-to-Many relationships from form-data (comma-separated values)\n+        level_ids = self.parse_comma_separated_values('level')\n+        sublevel_ids = self.parse_comma_separated_values('sublevel')\n+        course_ids = self.parse_comma_separated_values('course')\n+        affiliation_ids = self.parse_comma_separated_values('affiliation')\n+        district_ids = self.parse_comma_separated_values('district')\n+        college_ids = self.parse_comma_separated_values('college')\n+        faculty_ids = self.parse_comma_separated_values('faculty')\n+        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n+        information_category_ids = self.parse_comma_separated_values('information_category')\n \n-        # Update the fields of the Information instance\n+        # Extract images from validated data\n+        images = validated_data.pop('image', [])\n+\n+        # Update instance fields\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n \n-        # Update ManyToMany relationships\n-        if level_ids:\n-            instance.level.set(level_ids)\n-        if sublevel_ids:\n-            instance.sublevel.set(sublevel_ids)\n-        if course_ids:\n-            instance.course.set(course_ids)\n-        if affiliation_ids:\n-            instance.affiliation.set(affiliation_ids)\n-        if district_ids:\n-            instance.district.set(district_ids)\n-        if college_ids:\n-            instance.college.set(college_ids)\n-        if faculty_ids:\n-            instance.faculty.set(faculty_ids)\n-        if information_tagging_ids:\n-            instance.information_tagging.set(information_tagging_ids)\n-        if information_category_ids:\n-            instance.information_category.set(information_category_ids)\n-        if image_ids:\n-            instance.image.set(image_ids)\n+        # Update Many-to-Many relationships\n+        instance.level.set(level_ids)\n+        instance.sublevel.set(sublevel_ids)\n+        instance.course.set(course_ids)\n+        instance.affiliation.set(affiliation_ids)\n+        instance.district.set(district_ids)\n+        instance.college.set(college_ids)\n+        instance.faculty.set(faculty_ids)\n+        instance.information_tagging.set(information_tagging_ids)\n+        instance.information_category.set(information_category_ids)\n \n+        # Save new image uploads (append to existing images)\n+        for img in images:\n+            InformationGallery.objects.create(information=instance, image=img)\n+\n         return instance\n \n-\n # {\n #   \"title\": \"Sample Information\",\n #   \"publish_date\": \"2024-12-01T00:00:00Z\",\n #   \"active_period_start\": \"2024-12-01\",\n"
                },
                {
                    "date": 1738141162323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,7 @@\n from rest_framework import serializers\n+from django.db import transaction\n+\n from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738141558139,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         model = Information\n         fields = '__all__'\n \n \n-class InformationWriteSerializer(serializers.ModelSerializer):\n+class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling Many-to-Many fields as comma-separated values\n     and handling binary image uploads in form-data.\n     \"\"\"\n"
                },
                {
                    "date": 1738231846439,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,99 +49,99 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-    def parse_comma_separated_values(self, field_name):\n-        \"\"\"\n-        Parses comma-separated values (e.g., \"1,2,3\") from form-data into a list of integers.\n-        \"\"\"\n-        field_value = self.initial_data.get(field_name, \"\")\n-        if field_value:\n-            try:\n-                return [int(pk.strip()) for pk in field_value.split(\",\") if pk.strip()]\n-            except ValueError:\n-                raise serializers.ValidationError({field_name: \"Must be a comma-separated list of integers.\"})\n-        return []\n+    # def parse_comma_separated_values(self, field_name):\n+    #     \"\"\"\n+    #     Parses comma-separated values (e.g., \"1,2,3\") from form-data into a list of integers.\n+    #     \"\"\"\n+    #     field_value = self.initial_data.get(field_name, \"\")\n+    #     if field_value:\n+    #         try:\n+    #             return [int(pk.strip()) for pk in field_value.split(\",\") if pk.strip()]\n+    #         except ValueError:\n+    #             raise serializers.ValidationError({field_name: \"Must be a comma-separated list of integers.\"})\n+    #     return []\n \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance with Many-to-Many fields and binary image uploads.\n-        \"\"\"\n-        # Extract Many-to-Many relationships from form-data (comma-separated values)\n-        level_ids = self.parse_comma_separated_values('level')\n-        sublevel_ids = self.parse_comma_separated_values('sublevel')\n-        course_ids = self.parse_comma_separated_values('course')\n-        affiliation_ids = self.parse_comma_separated_values('affiliation')\n-        district_ids = self.parse_comma_separated_values('district')\n-        college_ids = self.parse_comma_separated_values('college')\n-        faculty_ids = self.parse_comma_separated_values('faculty')\n-        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n-        information_category_ids = self.parse_comma_separated_values('information_category')\n+    # @transaction.atomic\n+    # def create(self, validated_data):\n+    #     \"\"\"\n+    #     Handles creation of Information instance with Many-to-Many fields and binary image uploads.\n+    #     \"\"\"\n+    #     # Extract Many-to-Many relationships from form-data (comma-separated values)\n+    #     level_ids = self.parse_comma_separated_values('level')\n+    #     sublevel_ids = self.parse_comma_separated_values('sublevel')\n+    #     course_ids = self.parse_comma_separated_values('course')\n+    #     affiliation_ids = self.parse_comma_separated_values('affiliation')\n+    #     district_ids = self.parse_comma_separated_values('district')\n+    #     college_ids = self.parse_comma_separated_values('college')\n+    #     faculty_ids = self.parse_comma_separated_values('faculty')\n+    #     information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n+    #     information_category_ids = self.parse_comma_separated_values('information_category')\n \n-        # Extract images from validated data\n-        images = validated_data.pop('image', [])\n+    #     # Extract images from validated data\n+    #     images = validated_data.pop('image', [])\n \n-        # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n+    #     # Create the Information instance\n+    #     information = Information.objects.create(**validated_data)\n \n-        # Assign Many-to-Many relationships\n-        information.level.set(level_ids)\n-        information.sublevel.set(sublevel_ids)\n-        information.course.set(course_ids)\n-        information.affiliation.set(affiliation_ids)\n-        information.district.set(district_ids)\n-        information.college.set(college_ids)\n-        information.faculty.set(faculty_ids)\n-        information.information_tagging.set(information_tagging_ids)\n-        information.information_category.set(information_category_ids)\n+    #     # Assign Many-to-Many relationships\n+    #     information.level.set(level_ids)\n+    #     information.sublevel.set(sublevel_ids)\n+    #     information.course.set(course_ids)\n+    #     information.affiliation.set(affiliation_ids)\n+    #     information.district.set(district_ids)\n+    #     information.college.set(college_ids)\n+    #     information.faculty.set(faculty_ids)\n+    #     information.information_tagging.set(information_tagging_ids)\n+    #     information.information_category.set(information_category_ids)\n \n-        # Save image uploads\n-        for img in images:\n-            InformationGallery.objects.create(information=information, image=img)\n+    #     # Save image uploads\n+    #     for img in images:\n+    #         InformationGallery.objects.create(information=information, image=img)\n \n-        return information\n+    #     return information\n \n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating of Information instance with Many-to-Many fields and binary image uploads.\n-        \"\"\"\n-        # Extract Many-to-Many relationships from form-data (comma-separated values)\n-        level_ids = self.parse_comma_separated_values('level')\n-        sublevel_ids = self.parse_comma_separated_values('sublevel')\n-        course_ids = self.parse_comma_separated_values('course')\n-        affiliation_ids = self.parse_comma_separated_values('affiliation')\n-        district_ids = self.parse_comma_separated_values('district')\n-        college_ids = self.parse_comma_separated_values('college')\n-        faculty_ids = self.parse_comma_separated_values('faculty')\n-        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n-        information_category_ids = self.parse_comma_separated_values('information_category')\n+    # @transaction.atomic\n+    # def update(self, instance, validated_data):\n+    #     \"\"\"\n+    #     Handles updating of Information instance with Many-to-Many fields and binary image uploads.\n+    #     \"\"\"\n+    #     # Extract Many-to-Many relationships from form-data (comma-separated values)\n+    #     level_ids = self.parse_comma_separated_values('level')\n+    #     sublevel_ids = self.parse_comma_separated_values('sublevel')\n+    #     course_ids = self.parse_comma_separated_values('course')\n+    #     affiliation_ids = self.parse_comma_separated_values('affiliation')\n+    #     district_ids = self.parse_comma_separated_values('district')\n+    #     college_ids = self.parse_comma_separated_values('college')\n+    #     faculty_ids = self.parse_comma_separated_values('faculty')\n+    #     information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n+    #     information_category_ids = self.parse_comma_separated_values('information_category')\n \n-        # Extract images from validated data\n-        images = validated_data.pop('image', [])\n+    #     # Extract images from validated data\n+    #     images = validated_data.pop('image', [])\n \n-        # Update instance fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    #     # Update instance fields\n+    #     for attr, value in validated_data.items():\n+    #         setattr(instance, attr, value)\n+    #     instance.save()\n \n-        # Update Many-to-Many relationships\n-        instance.level.set(level_ids)\n-        instance.sublevel.set(sublevel_ids)\n-        instance.course.set(course_ids)\n-        instance.affiliation.set(affiliation_ids)\n-        instance.district.set(district_ids)\n-        instance.college.set(college_ids)\n-        instance.faculty.set(faculty_ids)\n-        instance.information_tagging.set(information_tagging_ids)\n-        instance.information_category.set(information_category_ids)\n+    #     # Update Many-to-Many relationships\n+    #     instance.level.set(level_ids)\n+    #     instance.sublevel.set(sublevel_ids)\n+    #     instance.course.set(course_ids)\n+    #     instance.affiliation.set(affiliation_ids)\n+    #     instance.district.set(district_ids)\n+    #     instance.college.set(college_ids)\n+    #     instance.faculty.set(faculty_ids)\n+    #     instance.information_tagging.set(information_tagging_ids)\n+    #     instance.information_category.set(information_category_ids)\n \n-        # Save new image uploads (append to existing images)\n-        for img in images:\n-            InformationGallery.objects.create(information=instance, image=img)\n+    #     # Save new image uploads (append to existing images)\n+    #     for img in images:\n+    #         InformationGallery.objects.create(information=instance, image=img)\n \n-        return instance\n+    #     return instance\n \n # {\n #   \"title\": \"Sample Information\",\n #   \"publish_date\": \"2024-12-01T00:00:00Z\",\n"
                },
                {
                    "date": 1738231853640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,99 +49,99 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-    # def parse_comma_separated_values(self, field_name):\n-    #     \"\"\"\n-    #     Parses comma-separated values (e.g., \"1,2,3\") from form-data into a list of integers.\n-    #     \"\"\"\n-    #     field_value = self.initial_data.get(field_name, \"\")\n-    #     if field_value:\n-    #         try:\n-    #             return [int(pk.strip()) for pk in field_value.split(\",\") if pk.strip()]\n-    #         except ValueError:\n-    #             raise serializers.ValidationError({field_name: \"Must be a comma-separated list of integers.\"})\n-    #     return []\n+    def parse_comma_separated_values(self, field_name):\n+        \"\"\"\n+        Parses comma-separated values (e.g., \"1,2,3\") from form-data into a list of integers.\n+        \"\"\"\n+        field_value = self.initial_data.get(field_name, \"\")\n+        if field_value:\n+            try:\n+                return [int(pk.strip()) for pk in field_value.split(\",\") if pk.strip()]\n+            except ValueError:\n+                raise serializers.ValidationError({field_name: \"Must be a comma-separated list of integers.\"})\n+        return []\n \n-    # @transaction.atomic\n-    # def create(self, validated_data):\n-    #     \"\"\"\n-    #     Handles creation of Information instance with Many-to-Many fields and binary image uploads.\n-    #     \"\"\"\n-    #     # Extract Many-to-Many relationships from form-data (comma-separated values)\n-    #     level_ids = self.parse_comma_separated_values('level')\n-    #     sublevel_ids = self.parse_comma_separated_values('sublevel')\n-    #     course_ids = self.parse_comma_separated_values('course')\n-    #     affiliation_ids = self.parse_comma_separated_values('affiliation')\n-    #     district_ids = self.parse_comma_separated_values('district')\n-    #     college_ids = self.parse_comma_separated_values('college')\n-    #     faculty_ids = self.parse_comma_separated_values('faculty')\n-    #     information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n-    #     information_category_ids = self.parse_comma_separated_values('information_category')\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance with Many-to-Many fields and binary image uploads.\n+        \"\"\"\n+        # Extract Many-to-Many relationships from form-data (comma-separated values)\n+        level_ids = self.parse_comma_separated_values('level')\n+        sublevel_ids = self.parse_comma_separated_values('sublevel')\n+        course_ids = self.parse_comma_separated_values('course')\n+        affiliation_ids = self.parse_comma_separated_values('affiliation')\n+        district_ids = self.parse_comma_separated_values('district')\n+        college_ids = self.parse_comma_separated_values('college')\n+        faculty_ids = self.parse_comma_separated_values('faculty')\n+        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n+        information_category_ids = self.parse_comma_separated_values('information_category')\n \n-    #     # Extract images from validated data\n-    #     images = validated_data.pop('image', [])\n+        # Extract images from validated data\n+        images = validated_data.pop('image', [])\n \n-    #     # Create the Information instance\n-    #     information = Information.objects.create(**validated_data)\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n \n-    #     # Assign Many-to-Many relationships\n-    #     information.level.set(level_ids)\n-    #     information.sublevel.set(sublevel_ids)\n-    #     information.course.set(course_ids)\n-    #     information.affiliation.set(affiliation_ids)\n-    #     information.district.set(district_ids)\n-    #     information.college.set(college_ids)\n-    #     information.faculty.set(faculty_ids)\n-    #     information.information_tagging.set(information_tagging_ids)\n-    #     information.information_category.set(information_category_ids)\n+        # Assign Many-to-Many relationships\n+        information.level.set(level_ids)\n+        information.sublevel.set(sublevel_ids)\n+        information.course.set(course_ids)\n+        information.affiliation.set(affiliation_ids)\n+        information.district.set(district_ids)\n+        information.college.set(college_ids)\n+        information.faculty.set(faculty_ids)\n+        information.information_tagging.set(information_tagging_ids)\n+        information.information_category.set(information_category_ids)\n \n-    #     # Save image uploads\n-    #     for img in images:\n-    #         InformationGallery.objects.create(information=information, image=img)\n+        # Save image uploads\n+        for img in images:\n+            InformationGallery.objects.create(information=information, image=img)\n \n-    #     return information\n+        return information\n \n-    # @transaction.atomic\n-    # def update(self, instance, validated_data):\n-    #     \"\"\"\n-    #     Handles updating of Information instance with Many-to-Many fields and binary image uploads.\n-    #     \"\"\"\n-    #     # Extract Many-to-Many relationships from form-data (comma-separated values)\n-    #     level_ids = self.parse_comma_separated_values('level')\n-    #     sublevel_ids = self.parse_comma_separated_values('sublevel')\n-    #     course_ids = self.parse_comma_separated_values('course')\n-    #     affiliation_ids = self.parse_comma_separated_values('affiliation')\n-    #     district_ids = self.parse_comma_separated_values('district')\n-    #     college_ids = self.parse_comma_separated_values('college')\n-    #     faculty_ids = self.parse_comma_separated_values('faculty')\n-    #     information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n-    #     information_category_ids = self.parse_comma_separated_values('information_category')\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating of Information instance with Many-to-Many fields and binary image uploads.\n+        \"\"\"\n+        # Extract Many-to-Many relationships from form-data (comma-separated values)\n+        level_ids = self.parse_comma_separated_values('level')\n+        sublevel_ids = self.parse_comma_separated_values('sublevel')\n+        course_ids = self.parse_comma_separated_values('course')\n+        affiliation_ids = self.parse_comma_separated_values('affiliation')\n+        district_ids = self.parse_comma_separated_values('district')\n+        college_ids = self.parse_comma_separated_values('college')\n+        faculty_ids = self.parse_comma_separated_values('faculty')\n+        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n+        information_category_ids = self.parse_comma_separated_values('information_category')\n \n-    #     # Extract images from validated data\n-    #     images = validated_data.pop('image', [])\n+        # Extract images from validated data\n+        images = validated_data.pop('image', [])\n \n-    #     # Update instance fields\n-    #     for attr, value in validated_data.items():\n-    #         setattr(instance, attr, value)\n-    #     instance.save()\n+        # Update instance fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    #     # Update Many-to-Many relationships\n-    #     instance.level.set(level_ids)\n-    #     instance.sublevel.set(sublevel_ids)\n-    #     instance.course.set(course_ids)\n-    #     instance.affiliation.set(affiliation_ids)\n-    #     instance.district.set(district_ids)\n-    #     instance.college.set(college_ids)\n-    #     instance.faculty.set(faculty_ids)\n-    #     instance.information_tagging.set(information_tagging_ids)\n-    #     instance.information_category.set(information_category_ids)\n+        # Update Many-to-Many relationships\n+        instance.level.set(level_ids)\n+        instance.sublevel.set(sublevel_ids)\n+        instance.course.set(course_ids)\n+        instance.affiliation.set(affiliation_ids)\n+        instance.district.set(district_ids)\n+        instance.college.set(college_ids)\n+        instance.faculty.set(faculty_ids)\n+        instance.information_tagging.set(information_tagging_ids)\n+        instance.information_category.set(information_category_ids)\n \n-    #     # Save new image uploads (append to existing images)\n-    #     for img in images:\n-    #         InformationGallery.objects.create(information=instance, image=img)\n+        # Save new image uploads (append to existing images)\n+        for img in images:\n+            InformationGallery.objects.create(information=instance, image=img)\n \n-    #     return instance\n+        return instance\n \n # {\n #   \"title\": \"Sample Information\",\n #   \"publish_date\": \"2024-12-01T00:00:00Z\",\n"
                },
                {
                    "date": 1738232593414,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,24 +139,5 @@\n         # Save new image uploads (append to existing images)\n         for img in images:\n             InformationGallery.objects.create(information=instance, image=img)\n \n-        return instance\n-\n-# {\n-#   \"title\": \"Sample Information\",\n-#   \"publish_date\": \"2024-12-01T00:00:00Z\",\n-#   \"active_period_start\": \"2024-12-01\",\n-#   \"active_period_end\": \"2024-12-31\",\n-#   \"level\": [1, 2],\n-#   \"sublevel\": [3],\n-#   \"course\": [4, 5],\n-#   \"affiliation\": [6],\n-#   \"district\": [7],\n-#   \"college\": [8],\n-#   \"faculty\": [9],\n-#   \"information_tagging\": [10],\n-#   \"information_category\": [11],\n-#   \"image\": [12, 13],\n-#   \"short_description\": \"Short description here\",\n-#   \"description\": \"Detailed description here\"\n-# }\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738234550142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,112 +32,73 @@\n         model = Information\n         fields = '__all__'\n \n \n+from rest_framework import serializers\n+from django.db import transaction\n+from .models import Information, InformationGallery, InformationFiles\n+\n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n-    Serializer for handling Many-to-Many fields as comma-separated values\n-    and handling binary image uploads in form-data.\n+    Serializer for handling binary image & file uploads in form-data.\n+    Many-to-Many fields are managed automatically by Django.\n     \"\"\"\n \n-    # Expecting image uploads as binary files in form-data\n-    image = serializers.ListField(\n-        child=serializers.ImageField(max_length=None, allow_empty_file=False, use_url=False),\n-        write_only=True,\n-        required=False\n-    )\n-\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-    def parse_comma_separated_values(self, field_name):\n-        \"\"\"\n-        Parses comma-separated values (e.g., \"1,2,3\") from form-data into a list of integers.\n-        \"\"\"\n-        field_value = self.initial_data.get(field_name, \"\")\n-        if field_value:\n-            try:\n-                return [int(pk.strip()) for pk in field_value.split(\",\") if pk.strip()]\n-            except ValueError:\n-                raise serializers.ValidationError({field_name: \"Must be a comma-separated list of integers.\"})\n-        return []\n-\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n-        Handles creation of Information instance with Many-to-Many fields and binary image uploads.\n+        Handles creation of Information instance and processes image & file uploads.\n         \"\"\"\n-        # Extract Many-to-Many relationships from form-data (comma-separated values)\n-        level_ids = self.parse_comma_separated_values('level')\n-        sublevel_ids = self.parse_comma_separated_values('sublevel')\n-        course_ids = self.parse_comma_separated_values('course')\n-        affiliation_ids = self.parse_comma_separated_values('affiliation')\n-        district_ids = self.parse_comma_separated_values('district')\n-        college_ids = self.parse_comma_separated_values('college')\n-        faculty_ids = self.parse_comma_separated_values('faculty')\n-        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n-        information_category_ids = self.parse_comma_separated_values('information_category')\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n \n-        # Extract images from validated data\n-        images = validated_data.pop('image', [])\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Files in array format\n+                files_data.append(file)\n \n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n \n-        # Assign Many-to-Many relationships\n-        information.level.set(level_ids)\n-        information.sublevel.set(sublevel_ids)\n-        information.course.set(course_ids)\n-        information.affiliation.set(affiliation_ids)\n-        information.district.set(district_ids)\n-        information.college.set(college_ids)\n-        information.faculty.set(faculty_ids)\n-        information.information_tagging.set(information_tagging_ids)\n-        information.information_category.set(information_category_ids)\n-\n         # Save image uploads\n-        for img in images:\n-            InformationGallery.objects.create(information=information, image=img)\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n \n+        # Save file uploads\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n+\n         return information\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n-        Handles updating of Information instance with Many-to-Many fields and binary image uploads.\n+        Handles updating an Information instance and manages image & file uploads.\n         \"\"\"\n-        # Extract Many-to-Many relationships from form-data (comma-separated values)\n-        level_ids = self.parse_comma_separated_values('level')\n-        sublevel_ids = self.parse_comma_separated_values('sublevel')\n-        course_ids = self.parse_comma_separated_values('course')\n-        affiliation_ids = self.parse_comma_separated_values('affiliation')\n-        district_ids = self.parse_comma_separated_values('district')\n-        college_ids = self.parse_comma_separated_values('college')\n-        faculty_ids = self.parse_comma_separated_values('faculty')\n-        information_tagging_ids = self.parse_comma_separated_values('information_tagging')\n-        information_category_ids = self.parse_comma_separated_values('information_category')\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n\\ No newline at end of file\n \n-        # Extract images from validated data\n-        images = validated_data.pop('image', [])\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Files in array format\n+                files_data.append(file)\n \n         # Update instance fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+        instance = super().update(instance, validated_data)\n \n-        # Update Many-to-Many relationships\n-        instance.level.set(level_ids)\n-        instance.sublevel.set(sublevel_ids)\n-        instance.course.set(course_ids)\n-        instance.affiliation.set(affiliation_ids)\n-        instance.district.set(district_ids)\n-        instance.college.set(college_ids)\n-        instance.faculty.set(faculty_ids)\n-        instance.information_tagging.set(information_tagging_ids)\n-        instance.information_category.set(information_category_ids)\n-\n         # Save new image uploads (append to existing images)\n-        for img in images:\n-            InformationGallery.objects.create(information=instance, image=img)\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n \n-        return instance\n+        # Save new file uploads (append to existing files)\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n"
                },
                {
                    "date": 1738234557354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,13 +31,8 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-\n-from rest_framework import serializers\n-from django.db import transaction\n-from .models import Information, InformationGallery, InformationFiles\n-\n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling binary image & file uploads in form-data.\n     Many-to-Many fields are managed automatically by Django.\n@@ -100,5 +95,5 @@\n         # Save new file uploads (append to existing files)\n         for file_item in files_data:\n             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n\\ No newline at end of file\n+        return instance\n"
                },
                {
                    "date": 1738234621589,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from rest_framework import serializers\n from django.db import transaction\n \n-from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery\n+from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery,\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n"
                },
                {
                    "date": 1738234630126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from rest_framework import serializers\n from django.db import transaction\n \n-from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery,\n+from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery, InformationFiles\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n"
                },
                {
                    "date": 1738235436352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,10 @@\n from django.db import transaction\n \n from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery, InformationFiles\n \n+\n+\n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n         fields = '__all__'\n"
                },
                {
                    "date": 1738235625158,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,16 +2,70 @@\n from django.db import transaction\n \n from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery, InformationFiles\n \n+class LevelSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Level\n+        fields = '__all__'\n \n+class SubLevelSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = SubLevel\n+        fields = '__all__'\n \n+class CourseSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Course\n+        fields = '__all__'\n+\n+class AffiliationSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Affiliation\n+        fields = '__all__'\n+\n+class DistrictSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = District\n+        fields = '__all__'\n+\n+class CollegeSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = College\n+        fields = '__all__'\n+\n+class FacultySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Faculty\n+        fields = '__all__'\n+\n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n         fields = '__all__'\n \n+class InformationCategorySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationCategory\n+        fields = '__all__'\n \n+# 🔹 Serializers for File & Image Uploads\n+class InformationGallerySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationGallery\n+        fields = '__all__'\n+\n+class InformationFilesSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationFiles\n+        fields = '__all__'\n+\n+class InformationTaggingSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationTagging\n+        fields = '__all__'\n+\n+\n class InformationCategorySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationCategory\n         fields = '__all__'\n@@ -23,8 +77,21 @@\n         fields = '__all__'\n \n \n class InformationListSerializers(serializers.ModelSerializer):\n+        level = LevelSerializer(many=True, read_only=True)\n+    sublevel = SubLevelSerializer(many=True, read_only=True)\n+    course = CourseSerializer(many=True, read_only=True)\n+    affiliation = AffiliationSerializer(many=True, read_only=True)\n+    district = DistrictSerializer(many=True, read_only=True)\n+    college = CollegeSerializer(many=True, read_only=True)\n+    faculty = FacultySerializer(many=True, read_only=True)\n+    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n+    information_category = InformationCategorySerializer(many=True, read_only=True)\n+    \n+    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738235642204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,9 +77,9 @@\n         fields = '__all__'\n \n \n class InformationListSerializers(serializers.ModelSerializer):\n-        level = LevelSerializer(many=True, read_only=True)\n+    level = LevelSerializer(many=True, read_only=True)\n     sublevel = SubLevelSerializer(many=True, read_only=True)\n     course = CourseSerializer(many=True, read_only=True)\n     affiliation = AffiliationSerializer(many=True, read_only=True)\n     district = DistrictSerializer(many=True, read_only=True)\n@@ -105,8 +105,20 @@\n     \"\"\"\n     Serializer for handling binary image & file uploads in form-data.\n     Many-to-Many fields are managed automatically by Django.\n     \"\"\"\n+    level = LevelSerializer(many=True, read_only=True)\n+    sublevel = SubLevelSerializer(many=True, read_only=True)\n+    course = CourseSerializer(many=True, read_only=True)\n+    affiliation = AffiliationSerializer(many=True, read_only=True)\n+    district = DistrictSerializer(many=True, read_only=True)\n+    college = CollegeSerializer(many=True, read_only=True)\n+    faculty = FacultySerializer(many=True, read_only=True)\n+    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n+    information_category = InformationCategorySerializer(many=True, read_only=True)\n+    \n+    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n"
                },
                {
                    "date": 1738235649488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,17 +96,8 @@\n         fields = '__all__'\n \n \n class InformationRetrieveSerializers(serializers.ModelSerializer):\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n-\n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling binary image & file uploads in form-data.\n-    Many-to-Many fields are managed automatically by Django.\n-    \"\"\"\n     level = LevelSerializer(many=True, read_only=True)\n     sublevel = SubLevelSerializer(many=True, read_only=True)\n     course = CourseSerializer(many=True, read_only=True)\n     affiliation = AffiliationSerializer(many=True, read_only=True)\n@@ -117,9 +108,19 @@\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n     gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n     uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n \n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling binary image & file uploads in form-data.\n+    Many-to-Many fields are managed automatically by Django.\n+    \"\"\"\n+    \n+\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738235682902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n \n         for key, file in self.context['request'].FILES.items():\n             if key.startswith('images['):  # Images in array format\n                 images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Files in array format\n+            elif key.startswith('file['):  # Files in array format\n                 files_data.append(file)\n \n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n"
                },
                {
                    "date": 1738235698905,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n \n         for key, file in self.context['request'].FILES.items():\n             if key.startswith('images['):  # Images in array format\n                 images_data.append(file)\n-            elif key.startswith('file['):  # Files in array format\n+            elif key.startswith('files['):  # Files in array format\n                 files_data.append(file)\n \n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n@@ -163,9 +163,9 @@\n \n         for key, file in self.context['request'].FILES.items():\n             if key.startswith('images['):  # Images in array format\n                 images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Files in array format\n+            elif key.startswith('file['):  # Files in array format\n                 files_data.append(file)\n \n         # Update instance fields\n         instance = super().update(instance, validated_data)\n"
                },
                {
                    "date": 1738235713774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -163,9 +163,9 @@\n \n         for key, file in self.context['request'].FILES.items():\n             if key.startswith('images['):  # Images in array format\n                 images_data.append(file)\n-            elif key.startswith('file['):  # Files in array format\n+            elif key.startswith('files['):  # Files in array format\n                 files_data.append(file)\n \n         # Update instance fields\n         instance = super().update(instance, validated_data)\n"
                },
                {
                    "date": 1738235732919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,9 +106,9 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n     uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n     class Meta:\n         model = Information\n         fields = '__all__'\n"
                },
                {
                    "date": 1738235746273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n     uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n     class Meta:\n         model = Information\n@@ -107,9 +107,9 @@\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n     images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738235761244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n     images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n"
                },
                {
                    "date": 1738235782493,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n     files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n     class Meta:\n         model = Information\n"
                },
                {
                    "date": 1738235795416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n     information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n"
                },
                {
                    "date": 1738235808270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -106,10 +106,10 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738236728885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n \n class LevelSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Level\n+        ref_name\n         fields = '__all__'\n \n class SubLevelSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236735684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n \n class LevelSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Level\n-        ref_name\n+        ref_name = 'levels'\n         fields = '__all__'\n \n class SubLevelSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236741983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n \n class SubLevelSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = SubLevel\n+        ref_name = 'sublevels'\n         fields = '__all__'\n \n class CourseSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236747791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,8 +22,9 @@\n \n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Affiliation\n+        ref_name = 'affiliations'\n         fields = '__all__'\n \n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236757646,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n \n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n+        \n         fields = '__all__'\n \n class CollegeSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236765447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,19 +28,21 @@\n \n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n-        \n+        ref_name = 'districts'\n         fields = '__all__'\n \n class CollegeSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = College\n+        ref_name = 'colleges'\n         fields = '__all__'\n \n class FacultySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Faculty\n+        \n         fields = '__all__'\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236771300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,14 +40,15 @@\n \n class FacultySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Faculty\n-        \n+        ref_name = 'faculties'\n         fields = '__all__'\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n+        \n         fields = '__all__'\n \n class InformationCategorySerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236778959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,20 +46,22 @@\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n-        \n+        ref_name = 'information_taggings'\n         fields = '__all__'\n \n class InformationCategorySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationCategory\n+        ref_name = 'information_categories'\n         fields = '__all__'\n \n # 🔹 Serializers for File & Image Uploads\n class InformationGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationGallery\n+        ref_name = 'information_galleries'\n         fields = '__all__'\n \n class InformationFilesSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738236789693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,9 @@\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n+        \n         fields = '__all__'\n \n \n class InformationCategorySerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738236797263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationTagging\n-        \n+        ref_name = 'information_taggings'\n         fields = '__all__'\n \n \n class InformationCategorySerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738236803392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,8 +65,9 @@\n \n class InformationFilesSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationFiles\n+        ref_name = 'information_files'\n         fields = '__all__'\n \n class InformationTaggingSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -77,8 +78,9 @@\n \n class InformationCategorySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationCategory\n+        \n         fields = '__all__'\n \n \n class InformationGallerySerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738236817317,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n \n class InformationCategorySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationCategory\n-        \n+        ref_name = 'information_categories'\n         fields = '__all__'\n \n \n class InformationGallerySerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738236822966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n \n class InformationGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationGallery\n+        \n         fields = '__all__'\n \n \n class InformationListSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738236833336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n \n class InformationGallerySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = InformationGallery\n-        \n+        ref\n         fields = '__all__'\n \n \n class InformationListSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738236838702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,194 @@\n+from rest_framework import serializers\n+from django.db import transaction\n+\n+from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery, InformationFiles\n+\n+class LevelSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Level\n+        ref_name = 'levels'\n+        fields = '__all__'\n+\n+class SubLevelSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = SubLevel\n+        ref_name = 'sublevels'\n+        fields = '__all__'\n+\n+class CourseSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Course\n+        fields = '__all__'\n+\n+class AffiliationSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Affiliation\n+        ref_name = 'affiliations'\n+        fields = '__all__'\n+\n+class DistrictSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = District\n+        ref_name = 'districts'\n+        fields = '__all__'\n+\n+class CollegeSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = College\n+        ref_name = 'colleges'\n+        fields = '__all__'\n+\n+class FacultySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Faculty\n+        ref_name = 'faculties'\n+        fields = '__all__'\n+\n+class InformationTaggingSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationTagging\n+        ref_name = 'information_taggings'\n+        fields = '__all__'\n+\n+class InformationCategorySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationCategory\n+        ref_name = 'information_categories'\n+        fields = '__all__'\n+\n+# 🔹 Serializers for File & Image Uploads\n+class InformationGallerySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationGallery\n+        ref_name = 'information_galleries'\n+        fields = '__all__'\n+\n+class InformationFilesSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationFiles\n+        ref_name = 'information_files'\n+        fields = '__all__'\n+\n+class InformationTaggingSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationTagging\n+        ref_name = 'information_taggings'\n+        fields = '__all__'\n+\n+\n+class InformationCategorySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationCategory\n+        ref_name = 'information_categories'\n+        fields = '__all__'\n+\n+\n+class InformationGallerySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = InformationGallery\n+        ref_name = 'information_galleries'\n+        fields = '__all__'\n+\n+\n+class InformationListSerializers(serializers.ModelSerializer):\n+    level = LevelSerializer(many=True, read_only=True)\n+    sublevel = SubLevelSerializer(many=True, read_only=True)\n+    course = CourseSerializer(many=True, read_only=True)\n+    affiliation = AffiliationSerializer(many=True, read_only=True)\n+    district = DistrictSerializer(many=True, read_only=True)\n+    college = CollegeSerializer(many=True, read_only=True)\n+    faculty = FacultySerializer(many=True, read_only=True)\n+    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n+    information_category = InformationCategorySerializer(many=True, read_only=True)\n+    \n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+\n+class InformationRetrieveSerializers(serializers.ModelSerializer):\n+    level = LevelSerializer(many=True, read_only=True)\n+    sublevel = SubLevelSerializer(many=True, read_only=True)\n+    course = CourseSerializer(many=True, read_only=True)\n+    affiliation = AffiliationSerializer(many=True, read_only=True)\n+    district = DistrictSerializer(many=True, read_only=True)\n+    college = CollegeSerializer(many=True, read_only=True)\n+    faculty = FacultySerializer(many=True, read_only=True)\n+    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n+    information_category = InformationCategorySerializer(many=True, read_only=True)\n+    \n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling binary image & file uploads in form-data.\n+    Many-to-Many fields are managed automatically by Django.\n+    \"\"\"\n+    \n+\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance and processes image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n+\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n+\n+        # Save image uploads\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n+\n+        # Save file uploads\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n+\n+        return information\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating an Information instance and manages image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n+\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Save new image uploads (append to existing images)\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n+\n+        # Save new file uploads (append to existing files)\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n"
                },
                {
                    "date": 1738237415245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,262 +127,135 @@\n         fields = '__all__'\n \n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n-    Serializer for handling binary image & file uploads in form-data.\n-    Many-to-Many fields are managed automatically by Django.\n+    Serializer for handling Information creation and Many-to-Many fields correctly.\n+    Also handles image and file uploads properly.\n     \"\"\"\n-    \n \n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n+    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n+    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n+    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n+    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n+    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n+    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n+    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n+    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n+    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance and processes image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n+    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n-\n-        # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n-\n-        # Save image uploads\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n-\n-        # Save file uploads\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n-\n-        return information\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating an Information instance and manages image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n-\n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n-\n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n-\n-        # Save new image uploads (append to existing images)\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n-\n-        # Save new file uploads (append to existing files)\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n-\n-        return instance\n-from rest_framework import serializers\n-from django.db import transaction\n-\n-from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery, InformationFiles\n-\n-class LevelSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = Level\n-        ref_name = 'levels'\n-        fields = '__all__'\n-\n-class SubLevelSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = SubLevel\n-        ref_name = 'sublevels'\n-        fields = '__all__'\n-\n-class CourseSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = Course\n-        fields = '__all__'\n-\n-class AffiliationSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = Affiliation\n-        ref_name = 'affiliations'\n-        fields = '__all__'\n-\n-class DistrictSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = District\n-        ref_name = 'districts'\n-        fields = '__all__'\n-\n-class CollegeSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = College\n-        ref_name = 'colleges'\n-        fields = '__all__'\n-\n-class FacultySerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = Faculty\n-        ref_name = 'faculties'\n-        fields = '__all__'\n-\n-class InformationTaggingSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = InformationTagging\n-        ref_name = 'information_taggings'\n-        fields = '__all__'\n-\n-class InformationCategorySerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = InformationCategory\n-        ref_name = 'information_categories'\n-        fields = '__all__'\n-\n-# 🔹 Serializers for File & Image Uploads\n-class InformationGallerySerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = InformationGallery\n-        ref_name = 'information_galleries'\n-        fields = '__all__'\n-\n-class InformationFilesSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = InformationFiles\n-        ref_name = 'information_files'\n-        fields = '__all__'\n-\n-class InformationTaggingSerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = InformationTagging\n-        ref_name = 'information_taggings'\n-        fields = '__all__'\n-\n-\n-class InformationCategorySerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = InformationCategory\n-        ref_name = 'information_categories'\n-        fields = '__all__'\n-\n-\n-class InformationGallerySerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = InformationGallery\n-        ref\n-        fields = '__all__'\n-\n-\n-class InformationListSerializers(serializers.ModelSerializer):\n-    level = LevelSerializer(many=True, read_only=True)\n-    sublevel = SubLevelSerializer(many=True, read_only=True)\n-    course = CourseSerializer(many=True, read_only=True)\n-    affiliation = AffiliationSerializer(many=True, read_only=True)\n-    district = DistrictSerializer(many=True, read_only=True)\n-    college = CollegeSerializer(many=True, read_only=True)\n-    faculty = FacultySerializer(many=True, read_only=True)\n-    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n-    information_category = InformationCategorySerializer(many=True, read_only=True)\n-    \n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n-\n-    class Meta:\n         model = Information\n         fields = '__all__'\n \n-\n-class InformationRetrieveSerializers(serializers.ModelSerializer):\n-    level = LevelSerializer(many=True, read_only=True)\n-    sublevel = SubLevelSerializer(many=True, read_only=True)\n-    course = CourseSerializer(many=True, read_only=True)\n-    affiliation = AffiliationSerializer(many=True, read_only=True)\n-    district = DistrictSerializer(many=True, read_only=True)\n-    college = CollegeSerializer(many=True, read_only=True)\n-    faculty = FacultySerializer(many=True, read_only=True)\n-    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n-    information_category = InformationCategorySerializer(many=True, read_only=True)\n-    \n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n-\n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling binary image & file uploads in form-data.\n-    Many-to-Many fields are managed automatically by Django.\n-    \"\"\"\n-    \n-\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n-\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n-        Handles creation of Information instance and processes image & file uploads.\n+        Handles creation of Information instance, Many-to-Many relationships,\n+        and uploads images & files.\n         \"\"\"\n-        # Extract images and files from request's FILES\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', [])\n+        sublevel_data = validated_data.pop('sublevel', [])\n+        course_data = validated_data.pop('course', [])\n+        affiliation_data = validated_data.pop('affiliation', [])\n+        district_data = validated_data.pop('district', [])\n+        college_data = validated_data.pop('college', [])\n+        faculty_data = validated_data.pop('faculty', [])\n+        information_tagging_data = validated_data.pop('information_tagging', [])\n+        information_category_data = validated_data.pop('information_category', [])\n+\n+        # Extract images & files from request FILES\n         images_data = []\n         files_data = []\n \n         for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n+            if key.startswith('images['):  # Accept multiple images\n                 images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n                 files_data.append(file)\n \n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n \n-        # Save image uploads\n+        # Assign Many-to-Many relationships using .set()\n+        information.level.set(level_data)\n+        information.sublevel.set(sublevel_data)\n+        information.course.set(course_data)\n+        information.affiliation.set(affiliation_data)\n+        information.district.set(district_data)\n+        information.college.set(college_data)\n+        information.faculty.set(faculty_data)\n+        information.information_tagging.set(information_tagging_data)\n+        information.information_category.set(information_category_data)\n+\n+        # Save images to InformationGallery\n         for image_file in images_data:\n             InformationGallery.objects.create(information=information, image=image_file)\n \n-        # Save file uploads\n+        # Save files to InformationFiles\n         for file_item in files_data:\n             InformationFiles.objects.create(information=information, file=file_item)\n \n         return information\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n-        Handles updating an Information instance and manages image & file uploads.\n+        Handles updating of Information instance, Many-to-Many relationships,\n+        and uploads new images & files.\n         \"\"\"\n-        # Extract images and files from request's FILES\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', None)\n+        sublevel_data = validated_data.pop('sublevel', None)\n+        course_data = validated_data.pop('course', None)\n+        affiliation_data = validated_data.pop('affiliation', None)\n+        district_data = validated_data.pop('district', None)\n+        college_data = validated_data.pop('college', None)\n+        faculty_data = validated_data.pop('faculty', None)\n+        information_tagging_data = validated_data.pop('information_tagging', None)\n+        information_category_data = validated_data.pop('information_category', None)\n+\n+        # Extract images & files from request FILES\n         images_data = []\n         files_data = []\n \n         for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n+            if key.startswith('images['):  # Accept multiple images\n                 images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n                 files_data.append(file)\n \n         # Update instance fields\n         instance = super().update(instance, validated_data)\n \n-        # Save new image uploads (append to existing images)\n+        # Update Many-to-Many relationships if provided\n+        if level_data is not None:\n+            instance.level.set(level_data)\n+        if sublevel_data is not None:\n+            instance.sublevel.set(sublevel_data)\n+        if course_data is not None:\n+            instance.course.set(course_data)\n+        if affiliation_data is not None:\n+            instance.affiliation.set(affiliation_data)\n+        if district_data is not None:\n+            instance.district.set(district_data)\n+        if college_data is not None:\n+            instance.college.set(college_data)\n+        if faculty_data is not None:\n+            instance.faculty.set(faculty_data)\n+        if information_tagging_data is not None:\n+            instance.information_tagging.set(information_tagging_data)\n+        if information_category_data is not None:\n+            instance.information_category.set(information_category_data)\n+\n+        # Save new images to InformationGallery\n         for image_file in images_data:\n             InformationGallery.objects.create(information=instance, image=image_file)\n \n-        # Save new file uploads (append to existing files)\n+        # Save new files to InformationFiles\n         for file_item in files_data:\n             InformationFiles.objects.create(information=instance, file=file_item)\n \n         return instance\n"
                },
                {
                    "date": 1738237563142,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,137 +125,5 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Also handles image and file uploads properly.\n-    \"\"\"\n \n-    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n-    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n-    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n-    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n-    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n-    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n-    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n-    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n-    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n-\n-    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n-\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance, Many-to-Many relationships,\n-        and uploads images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', [])\n-        sublevel_data = validated_data.pop('sublevel', [])\n-        course_data = validated_data.pop('course', [])\n-        affiliation_data = validated_data.pop('affiliation', [])\n-        district_data = validated_data.pop('district', [])\n-        college_data = validated_data.pop('college', [])\n-        faculty_data = validated_data.pop('faculty', [])\n-        information_tagging_data = validated_data.pop('information_tagging', [])\n-        information_category_data = validated_data.pop('information_category', [])\n-\n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n-\n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n-\n-        # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n-\n-        # Assign Many-to-Many relationships using .set()\n-        information.level.set(level_data)\n-        information.sublevel.set(sublevel_data)\n-        information.course.set(course_data)\n-        information.affiliation.set(affiliation_data)\n-        information.district.set(district_data)\n-        information.college.set(college_data)\n-        information.faculty.set(faculty_data)\n-        information.information_tagging.set(information_tagging_data)\n-        information.information_category.set(information_category_data)\n-\n-        # Save images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n-\n-        # Save files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n-\n-        return information\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', None)\n-        sublevel_data = validated_data.pop('sublevel', None)\n-        course_data = validated_data.pop('course', None)\n-        affiliation_data = validated_data.pop('affiliation', None)\n-        district_data = validated_data.pop('district', None)\n-        college_data = validated_data.pop('college', None)\n-        faculty_data = validated_data.pop('faculty', None)\n-        information_tagging_data = validated_data.pop('information_tagging', None)\n-        information_category_data = validated_data.pop('information_category', None)\n-\n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n-\n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n-\n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n-\n-        # Update Many-to-Many relationships if provided\n-        if level_data is not None:\n-            instance.level.set(level_data)\n-        if sublevel_data is not None:\n-            instance.sublevel.set(sublevel_data)\n-        if course_data is not None:\n-            instance.course.set(course_data)\n-        if affiliation_data is not None:\n-            instance.affiliation.set(affiliation_data)\n-        if district_data is not None:\n-            instance.district.set(district_data)\n-        if college_data is not None:\n-            instance.college.set(college_data)\n-        if faculty_data is not None:\n-            instance.faculty.set(faculty_data)\n-        if information_tagging_data is not None:\n-            instance.information_tagging.set(information_tagging_data)\n-        if information_category_data is not None:\n-            instance.information_category.set(information_category_data)\n-\n-        # Save new images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n-\n-        # Save new files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n-\n-        return instance\n"
                },
                {
                    "date": 1738237714587,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,5 +125,70 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling binary image & file uploads in form-data.\n+    Many-to-Many fields are managed automatically by Django.\n+    \"\"\"\n+    \n \n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+    \n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance and processes image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n+\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n+\n+        # Save image uploads\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n+\n+        # Save file uploads\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n+\n+        return information\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating an Information instance and manages image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n+\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Save new image uploads (append to existing images)\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n+\n+        # Save new file uploads (append to existing files)\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n"
                },
                {
                    "date": 1738237722168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,10 @@\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n-    \n+\n+\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles creation of Information instance and processes image & file uploads.\n"
                },
                {
                    "date": 1738237727844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,10 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-\n+    def create(self, validated_data):\n+        return super().create(validated_data)\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles creation of Information instance and processes image & file uploads.\n"
                },
                {
                    "date": 1738237735937,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,10 @@\n         model = Information\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        return super().create(validated_data)\n+        data = super().create(validated_data)\n+    \n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles creation of Information instance and processes image & file uploads.\n"
                },
                {
                    "date": 1738237745798,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n         model = Information\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        data = super().create(validated_data)\n+\n     \n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n"
                },
                {
                    "date": 1738237764328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,10 +136,8 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-    def create(self, validated_data):\n-\n     \n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n@@ -155,9 +153,9 @@\n             elif key.startswith('files['):  # Files in array format\n                 files_data.append(file)\n \n         # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n+        information =         data = super().create(validated_data)\n \n         # Save image uploads\n         for image_file in images_data:\n             InformationGallery.objects.create(information=information, image=image_file)\n"
                },
                {
                    "date": 1738237778580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n             elif key.startswith('files['):  # Files in array format\n                 files_data.append(file)\n \n         # Create the Information instance\n-        information =         data = super().create(validated_data)\n+        information = super().create(validated_data)\n \n         # Save image uploads\n         for image_file in images_data:\n             InformationGallery.objects.create(information=information, image=image_file)\n"
                },
                {
                    "date": 1738238638709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,4 +192,6 @@\n         for file_item in files_data:\n             InformationFiles.objects.create(information=instance, file=file_item)\n \n         return instance\n+\n+\n"
                },
                {
                    "date": 1738238644953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,4 +194,137 @@\n \n         return instance\n \n \n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling Information creation and Many-to-Many fields correctly.\n+    Also handles image and file uploads properly.\n+    \"\"\"\n+\n+    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n+    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n+    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n+    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n+    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n+    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n+    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n+    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n+    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n+\n+    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance, Many-to-Many relationships,\n+        and uploads images & files.\n+        \"\"\"\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', [])\n+        sublevel_data = validated_data.pop('sublevel', [])\n+        course_data = validated_data.pop('course', [])\n+        affiliation_data = validated_data.pop('affiliation', [])\n+        district_data = validated_data.pop('district', [])\n+        college_data = validated_data.pop('college', [])\n+        faculty_data = validated_data.pop('faculty', [])\n+        information_tagging_data = validated_data.pop('information_tagging', [])\n+        information_category_data = validated_data.pop('information_category', [])\n+\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n+\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n+\n+        # Assign Many-to-Many relationships using .set()\n+        information.level.set(level_data)\n+        information.sublevel.set(sublevel_data)\n+        information.course.set(course_data)\n+        information.affiliation.set(affiliation_data)\n+        information.district.set(district_data)\n+        information.college.set(college_data)\n+        information.faculty.set(faculty_data)\n+        information.information_tagging.set(information_tagging_data)\n+        information.information_category.set(information_category_data)\n+\n+        # Save images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n+\n+        # Save files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n+\n+        return information\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating of Information instance, Many-to-Many relationships,\n+        and uploads new images & files.\n+        \"\"\"\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', None)\n+        sublevel_data = validated_data.pop('sublevel', None)\n+        course_data = validated_data.pop('course', None)\n+        affiliation_data = validated_data.pop('affiliation', None)\n+        district_data = validated_data.pop('district', None)\n+        college_data = validated_data.pop('college', None)\n+        faculty_data = validated_data.pop('faculty', None)\n+        information_tagging_data = validated_data.pop('information_tagging', None)\n+        information_category_data = validated_data.pop('information_category', None)\n+\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n+\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Update Many-to-Many relationships if provided\n+        if level_data is not None:\n+            instance.level.set(level_data)\n+        if sublevel_data is not None:\n+            instance.sublevel.set(sublevel_data)\n+        if course_data is not None:\n+            instance.course.set(course_data)\n+        if affiliation_data is not None:\n+            instance.affiliation.set(affiliation_data)\n+        if district_data is not None:\n+            instance.district.set(district_data)\n+        if college_data is not None:\n+            instance.college.set(college_data)\n+        if faculty_data is not None:\n+            instance.faculty.set(faculty_data)\n+        if information_tagging_data is not None:\n+            instance.information_tagging.set(information_tagging_data)\n+        if information_category_data is not None:\n+            instance.information_category.set(information_category_data)\n+\n+        # Save new images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n+\n+        # Save new files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738238653417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,137 +194,137 @@\n \n         return instance\n \n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Also handles image and file uploads properly.\n-    \"\"\"\n+# class InformationWriteSerializers(serializers.ModelSerializer):\n+#     \"\"\"\n+#     Serializer for handling Information creation and Many-to-Many fields correctly.\n+#     Also handles image and file uploads properly.\n+#     \"\"\"\n \n-    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n-    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n-    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n-    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n-    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n-    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n-    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n-    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n-    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n+#     level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n+#     sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n+#     course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n+#     affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n+#     district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n+#     college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n+#     faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n+#     information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n+#     information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n \n-    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+#     gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+#     uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n+#     class Meta:\n+#         model = Information\n+#         fields = '__all__'\n \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance, Many-to-Many relationships,\n-        and uploads images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', [])\n-        sublevel_data = validated_data.pop('sublevel', [])\n-        course_data = validated_data.pop('course', [])\n-        affiliation_data = validated_data.pop('affiliation', [])\n-        district_data = validated_data.pop('district', [])\n-        college_data = validated_data.pop('college', [])\n-        faculty_data = validated_data.pop('faculty', [])\n-        information_tagging_data = validated_data.pop('information_tagging', [])\n-        information_category_data = validated_data.pop('information_category', [])\n+#     @transaction.atomic\n+#     def create(self, validated_data):\n+#         \"\"\"\n+#         Handles creation of Information instance, Many-to-Many relationships,\n+#         and uploads images & files.\n+#         \"\"\"\n+#         # Extract Many-to-Many fields from validated_data\n+#         level_data = validated_data.pop('level', [])\n+#         sublevel_data = validated_data.pop('sublevel', [])\n+#         course_data = validated_data.pop('course', [])\n+#         affiliation_data = validated_data.pop('affiliation', [])\n+#         district_data = validated_data.pop('district', [])\n+#         college_data = validated_data.pop('college', [])\n+#         faculty_data = validated_data.pop('faculty', [])\n+#         information_tagging_data = validated_data.pop('information_tagging', [])\n+#         information_category_data = validated_data.pop('information_category', [])\n \n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n+#         # Extract images & files from request FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Accept multiple images\n+#                 images_data.append(file)\n+#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+#                 files_data.append(file)\n \n-        # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n+#         # Create the Information instance\n+#         information = Information.objects.create(**validated_data)\n \n-        # Assign Many-to-Many relationships using .set()\n-        information.level.set(level_data)\n-        information.sublevel.set(sublevel_data)\n-        information.course.set(course_data)\n-        information.affiliation.set(affiliation_data)\n-        information.district.set(district_data)\n-        information.college.set(college_data)\n-        information.faculty.set(faculty_data)\n-        information.information_tagging.set(information_tagging_data)\n-        information.information_category.set(information_category_data)\n+#         # Assign Many-to-Many relationships using .set()\n+#         information.level.set(level_data)\n+#         information.sublevel.set(sublevel_data)\n+#         information.course.set(course_data)\n+#         information.affiliation.set(affiliation_data)\n+#         information.district.set(district_data)\n+#         information.college.set(college_data)\n+#         information.faculty.set(faculty_data)\n+#         information.information_tagging.set(information_tagging_data)\n+#         information.information_category.set(information_category_data)\n \n-        # Save images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n+#         # Save images to InformationGallery\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=information, image=image_file)\n \n-        # Save files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n+#         # Save files to InformationFiles\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=information, file=file_item)\n \n\\ No newline at end of file\n-        return information\n+#         return information\n \n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', None)\n-        sublevel_data = validated_data.pop('sublevel', None)\n-        course_data = validated_data.pop('course', None)\n-        affiliation_data = validated_data.pop('affiliation', None)\n-        district_data = validated_data.pop('district', None)\n-        college_data = validated_data.pop('college', None)\n-        faculty_data = validated_data.pop('faculty', None)\n-        information_tagging_data = validated_data.pop('information_tagging', None)\n-        information_category_data = validated_data.pop('information_category', None)\n+#     @transaction.atomic\n+#     def update(self, instance, validated_data):\n+#         \"\"\"\n+#         Handles updating of Information instance, Many-to-Many relationships,\n+#         and uploads new images & files.\n+#         \"\"\"\n+#         # Extract Many-to-Many fields from validated_data\n+#         level_data = validated_data.pop('level', None)\n+#         sublevel_data = validated_data.pop('sublevel', None)\n+#         course_data = validated_data.pop('course', None)\n+#         affiliation_data = validated_data.pop('affiliation', None)\n+#         district_data = validated_data.pop('district', None)\n+#         college_data = validated_data.pop('college', None)\n+#         faculty_data = validated_data.pop('faculty', None)\n+#         information_tagging_data = validated_data.pop('information_tagging', None)\n+#         information_category_data = validated_data.pop('information_category', None)\n \n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n+#         # Extract images & files from request FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Accept multiple images\n+#                 images_data.append(file)\n+#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+#                 files_data.append(file)\n \n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n+#         # Update instance fields\n+#         instance = super().update(instance, validated_data)\n \n-        # Update Many-to-Many relationships if provided\n-        if level_data is not None:\n-            instance.level.set(level_data)\n-        if sublevel_data is not None:\n-            instance.sublevel.set(sublevel_data)\n-        if course_data is not None:\n-            instance.course.set(course_data)\n-        if affiliation_data is not None:\n-            instance.affiliation.set(affiliation_data)\n-        if district_data is not None:\n-            instance.district.set(district_data)\n-        if college_data is not None:\n-            instance.college.set(college_data)\n-        if faculty_data is not None:\n-            instance.faculty.set(faculty_data)\n-        if information_tagging_data is not None:\n-            instance.information_tagging.set(information_tagging_data)\n-        if information_category_data is not None:\n-            instance.information_category.set(information_category_data)\n+#         # Update Many-to-Many relationships if provided\n+#         if level_data is not None:\n+#             instance.level.set(level_data)\n+#         if sublevel_data is not None:\n+#             instance.sublevel.set(sublevel_data)\n+#         if course_data is not None:\n+#             instance.course.set(course_data)\n+#         if affiliation_data is not None:\n+#             instance.affiliation.set(affiliation_data)\n+#         if district_data is not None:\n+#             instance.district.set(district_data)\n+#         if college_data is not None:\n+#             instance.college.set(college_data)\n+#         if faculty_data is not None:\n+#             instance.faculty.set(faculty_data)\n+#         if information_tagging_data is not None:\n+#             instance.information_tagging.set(information_tagging_data)\n+#         if information_category_data is not None:\n+#             instance.information_category.set(information_category_data)\n \n-        # Save new images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n+#         # Save new images to InformationGallery\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=instance, image=image_file)\n \n-        # Save new files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n+#         # Save new files to InformationFiles\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n+#         return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738238764910,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,137 +194,137 @@\n \n         return instance\n \n \n-# class InformationWriteSerializers(serializers.ModelSerializer):\n-#     \"\"\"\n-#     Serializer for handling Information creation and Many-to-Many fields correctly.\n-#     Also handles image and file uploads properly.\n-#     \"\"\"\n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling Information creation and Many-to-Many fields correctly.\n+    Also handles image and file uploads properly.\n+    \"\"\"\n \n-#     level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n-#     sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n-#     course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n-#     affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n-#     district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n-#     college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n-#     faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n-#     information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n-#     information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n+    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n+    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n+    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n+    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n+    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n+    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n+    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n+    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n+    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n \n-#     gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-#     uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n-#     class Meta:\n-#         model = Information\n-#         fields = '__all__'\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n \n-#     @transaction.atomic\n-#     def create(self, validated_data):\n-#         \"\"\"\n-#         Handles creation of Information instance, Many-to-Many relationships,\n-#         and uploads images & files.\n-#         \"\"\"\n-#         # Extract Many-to-Many fields from validated_data\n-#         level_data = validated_data.pop('level', [])\n-#         sublevel_data = validated_data.pop('sublevel', [])\n-#         course_data = validated_data.pop('course', [])\n-#         affiliation_data = validated_data.pop('affiliation', [])\n-#         district_data = validated_data.pop('district', [])\n-#         college_data = validated_data.pop('college', [])\n-#         faculty_data = validated_data.pop('faculty', [])\n-#         information_tagging_data = validated_data.pop('information_tagging', [])\n-#         information_category_data = validated_data.pop('information_category', [])\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance, Many-to-Many relationships,\n+        and uploads images & files.\n+        \"\"\"\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', [])\n+        sublevel_data = validated_data.pop('sublevel', [])\n+        course_data = validated_data.pop('course', [])\n+        affiliation_data = validated_data.pop('affiliation', [])\n+        district_data = validated_data.pop('district', [])\n+        college_data = validated_data.pop('college', [])\n+        faculty_data = validated_data.pop('faculty', [])\n+        information_tagging_data = validated_data.pop('information_tagging', [])\n+        information_category_data = validated_data.pop('information_category', [])\n \n-#         # Extract images & files from request FILES\n-#         images_data = []\n-#         files_data = []\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n \n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Accept multiple images\n-#                 images_data.append(file)\n-#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-#                 files_data.append(file)\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n \n-#         # Create the Information instance\n-#         information = Information.objects.create(**validated_data)\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n \n-#         # Assign Many-to-Many relationships using .set()\n-#         information.level.set(level_data)\n-#         information.sublevel.set(sublevel_data)\n-#         information.course.set(course_data)\n-#         information.affiliation.set(affiliation_data)\n-#         information.district.set(district_data)\n-#         information.college.set(college_data)\n-#         information.faculty.set(faculty_data)\n-#         information.information_tagging.set(information_tagging_data)\n-#         information.information_category.set(information_category_data)\n+        # Assign Many-to-Many relationships using .set()\n+        information.level.set(level_data)\n+        information.sublevel.set(sublevel_data)\n+        information.course.set(course_data)\n+        information.affiliation.set(affiliation_data)\n+        information.district.set(district_data)\n+        information.college.set(college_data)\n+        information.faculty.set(faculty_data)\n+        information.information_tagging.set(information_tagging_data)\n+        information.information_category.set(information_category_data)\n \n-#         # Save images to InformationGallery\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=information, image=image_file)\n+        # Save images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n \n-#         # Save files to InformationFiles\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=information, file=file_item)\n+        # Save files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n \n\\ No newline at end of file\n-#         return information\n+        return information\n \n-#     @transaction.atomic\n-#     def update(self, instance, validated_data):\n-#         \"\"\"\n-#         Handles updating of Information instance, Many-to-Many relationships,\n-#         and uploads new images & files.\n-#         \"\"\"\n-#         # Extract Many-to-Many fields from validated_data\n-#         level_data = validated_data.pop('level', None)\n-#         sublevel_data = validated_data.pop('sublevel', None)\n-#         course_data = validated_data.pop('course', None)\n-#         affiliation_data = validated_data.pop('affiliation', None)\n-#         district_data = validated_data.pop('district', None)\n-#         college_data = validated_data.pop('college', None)\n-#         faculty_data = validated_data.pop('faculty', None)\n-#         information_tagging_data = validated_data.pop('information_tagging', None)\n-#         information_category_data = validated_data.pop('information_category', None)\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating of Information instance, Many-to-Many relationships,\n+        and uploads new images & files.\n+        \"\"\"\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', None)\n+        sublevel_data = validated_data.pop('sublevel', None)\n+        course_data = validated_data.pop('course', None)\n+        affiliation_data = validated_data.pop('affiliation', None)\n+        district_data = validated_data.pop('district', None)\n+        college_data = validated_data.pop('college', None)\n+        faculty_data = validated_data.pop('faculty', None)\n+        information_tagging_data = validated_data.pop('information_tagging', None)\n+        information_category_data = validated_data.pop('information_category', None)\n \n-#         # Extract images & files from request FILES\n-#         images_data = []\n-#         files_data = []\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n \n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Accept multiple images\n-#                 images_data.append(file)\n-#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-#                 files_data.append(file)\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n \n-#         # Update instance fields\n-#         instance = super().update(instance, validated_data)\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n \n-#         # Update Many-to-Many relationships if provided\n-#         if level_data is not None:\n-#             instance.level.set(level_data)\n-#         if sublevel_data is not None:\n-#             instance.sublevel.set(sublevel_data)\n-#         if course_data is not None:\n-#             instance.course.set(course_data)\n-#         if affiliation_data is not None:\n-#             instance.affiliation.set(affiliation_data)\n-#         if district_data is not None:\n-#             instance.district.set(district_data)\n-#         if college_data is not None:\n-#             instance.college.set(college_data)\n-#         if faculty_data is not None:\n-#             instance.faculty.set(faculty_data)\n-#         if information_tagging_data is not None:\n-#             instance.information_tagging.set(information_tagging_data)\n-#         if information_category_data is not None:\n-#             instance.information_category.set(information_category_data)\n+        # Update Many-to-Many relationships if provided\n+        if level_data is not None:\n+            instance.level.set(level_data)\n+        if sublevel_data is not None:\n+            instance.sublevel.set(sublevel_data)\n+        if course_data is not None:\n+            instance.course.set(course_data)\n+        if affiliation_data is not None:\n+            instance.affiliation.set(affiliation_data)\n+        if district_data is not None:\n+            instance.district.set(district_data)\n+        if college_data is not None:\n+            instance.college.set(college_data)\n+        if faculty_data is not None:\n+            instance.faculty.set(faculty_data)\n+        if information_tagging_data is not None:\n+            instance.information_tagging.set(information_tagging_data)\n+        if information_category_data is not None:\n+            instance.information_category.set(information_category_data)\n \n-#         # Save new images to InformationGallery\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=instance, image=image_file)\n+        # Save new images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n \n-#         # Save new files to InformationFiles\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=instance, file=file_item)\n+        # Save new files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n \n-#         return instance\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738238772594,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,75 +125,75 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling binary image & file uploads in form-data.\n-    Many-to-Many fields are managed automatically by Django.\n-    \"\"\"\n+# class InformationWriteSerializers(serializers.ModelSerializer):\n+#     \"\"\"\n+#     Serializer for handling binary image & file uploads in form-data.\n+#     Many-to-Many fields are managed automatically by Django.\n+#     \"\"\"\n     \n \n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n+#     class Meta:\n+#         model = Information\n+#         fields = '__all__'\n \n     \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance and processes image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n+#     @transaction.atomic\n+#     def create(self, validated_data):\n+#         \"\"\"\n+#         Handles creation of Information instance and processes image & file uploads.\n+#         \"\"\"\n+#         # Extract images and files from request's FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Images in array format\n+#                 images_data.append(file)\n+#             elif key.startswith('files['):  # Files in array format\n+#                 files_data.append(file)\n \n-        # Create the Information instance\n-        information = super().create(validated_data)\n+#         # Create the Information instance\n+#         information = super().create(validated_data)\n \n-        # Save image uploads\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n+#         # Save image uploads\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=information, image=image_file)\n \n-        # Save file uploads\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n+#         # Save file uploads\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=information, file=file_item)\n \n-        return information\n+#         return information\n \n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating an Information instance and manages image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n+#     @transaction.atomic\n+#     def update(self, instance, validated_data):\n+#         \"\"\"\n+#         Handles updating an Information instance and manages image & file uploads.\n+#         \"\"\"\n+#         # Extract images and files from request's FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Images in array format\n+#                 images_data.append(file)\n+#             elif key.startswith('files['):  # Files in array format\n+#                 files_data.append(file)\n \n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n+#         # Update instance fields\n+#         instance = super().update(instance, validated_data)\n \n-        # Save new image uploads (append to existing images)\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n+#         # Save new image uploads (append to existing images)\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=instance, image=image_file)\n \n-        # Save new file uploads (append to existing files)\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n+#         # Save new file uploads (append to existing files)\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n+#         return instance\n \n \n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n"
                },
                {
                    "date": 1738238816408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,75 +125,75 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-# class InformationWriteSerializers(serializers.ModelSerializer):\n-#     \"\"\"\n-#     Serializer for handling binary image & file uploads in form-data.\n-#     Many-to-Many fields are managed automatically by Django.\n-#     \"\"\"\n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling binary image & file uploads in form-data.\n+    Many-to-Many fields are managed automatically by Django.\n+    \"\"\"\n     \n \n-#     class Meta:\n-#         model = Information\n-#         fields = '__all__'\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n \n     \n-#     @transaction.atomic\n-#     def create(self, validated_data):\n-#         \"\"\"\n-#         Handles creation of Information instance and processes image & file uploads.\n-#         \"\"\"\n-#         # Extract images and files from request's FILES\n-#         images_data = []\n-#         files_data = []\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance and processes image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n \n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Images in array format\n-#                 images_data.append(file)\n-#             elif key.startswith('files['):  # Files in array format\n-#                 files_data.append(file)\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n \n-#         # Create the Information instance\n-#         information = super().create(validated_data)\n+        # Create the Information instance\n+        information = super().create(validated_data)\n \n-#         # Save image uploads\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=information, image=image_file)\n+        # Save image uploads\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n \n-#         # Save file uploads\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=information, file=file_item)\n+        # Save file uploads\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n \n-#         return information\n+        return information\n \n-#     @transaction.atomic\n-#     def update(self, instance, validated_data):\n-#         \"\"\"\n-#         Handles updating an Information instance and manages image & file uploads.\n-#         \"\"\"\n-#         # Extract images and files from request's FILES\n-#         images_data = []\n-#         files_data = []\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating an Information instance and manages image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n \n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Images in array format\n-#                 images_data.append(file)\n-#             elif key.startswith('files['):  # Files in array format\n-#                 files_data.append(file)\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n \n-#         # Update instance fields\n-#         instance = super().update(instance, validated_data)\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n \n-#         # Save new image uploads (append to existing images)\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=instance, image=image_file)\n+        # Save new image uploads (append to existing images)\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n \n-#         # Save new file uploads (append to existing files)\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=instance, file=file_item)\n+        # Save new file uploads (append to existing files)\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n \n-#         return instance\n+        return instance\n \n \n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n"
                },
                {
                    "date": 1738238953443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,206 +125,206 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling binary image & file uploads in form-data.\n-    Many-to-Many fields are managed automatically by Django.\n-    \"\"\"\n+# class InformationWriteSerializers(serializers.ModelSerializer):\n+#     \"\"\"\n+#     Serializer for handling binary image & file uploads in form-data.\n+#     Many-to-Many fields are managed automatically by Django.\n+#     \"\"\"\n     \n \n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n+#     class Meta:\n+#         model = Information\n+#         fields = '__all__'\n \n     \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance and processes image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n+#     @transaction.atomic\n+#     def create(self, validated_data):\n+#         \"\"\"\n+#         Handles creation of Information instance and processes image & file uploads.\n+#         \"\"\"\n+#         # Extract images and files from request's FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Images in array format\n+#                 images_data.append(file)\n+#             elif key.startswith('files['):  # Files in array format\n+#                 files_data.append(file)\n \n-        # Create the Information instance\n-        information = super().create(validated_data)\n+#         # Create the Information instance\n+#         information = super().create(validated_data)\n \n-        # Save image uploads\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n+#         # Save image uploads\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=information, image=image_file)\n \n-        # Save file uploads\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n+#         # Save file uploads\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=information, file=file_item)\n \n-        return information\n+#         return information\n \n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating an Information instance and manages image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n+#     @transaction.atomic\n+#     def update(self, instance, validated_data):\n+#         \"\"\"\n+#         Handles updating an Information instance and manages image & file uploads.\n+#         \"\"\"\n+#         # Extract images and files from request's FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Images in array format\n+#                 images_data.append(file)\n+#             elif key.startswith('files['):  # Files in array format\n+#                 files_data.append(file)\n \n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n+#         # Update instance fields\n+#         instance = super().update(instance, validated_data)\n \n-        # Save new image uploads (append to existing images)\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n+#         # Save new image uploads (append to existing images)\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=instance, image=image_file)\n \n-        # Save new file uploads (append to existing files)\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n+#         # Save new file uploads (append to existing files)\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n+#         return instance\n \n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Also handles image and file uploads properly.\n-    \"\"\"\n+# class InformationWriteSerializers(serializers.ModelSerializer):\n+#     \"\"\"\n+#     Serializer for handling Information creation and Many-to-Many fields correctly.\n+#     Also handles image and file uploads properly.\n+#     \"\"\"\n \n-    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n-    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n-    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n-    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n-    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n-    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n-    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n-    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n-    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n+#     level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n+#     sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n+#     course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n+#     affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n+#     district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n+#     college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n+#     faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n+#     information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n+#     information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n \n-    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+#     gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+#     uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n \n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n+#     class Meta:\n+#         model = Information\n+#         fields = '__all__'\n \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance, Many-to-Many relationships,\n-        and uploads images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', [])\n-        sublevel_data = validated_data.pop('sublevel', [])\n-        course_data = validated_data.pop('course', [])\n-        affiliation_data = validated_data.pop('affiliation', [])\n-        district_data = validated_data.pop('district', [])\n-        college_data = validated_data.pop('college', [])\n-        faculty_data = validated_data.pop('faculty', [])\n-        information_tagging_data = validated_data.pop('information_tagging', [])\n-        information_category_data = validated_data.pop('information_category', [])\n+#     @transaction.atomic\n+#     def create(self, validated_data):\n+#         \"\"\"\n+#         Handles creation of Information instance, Many-to-Many relationships,\n+#         and uploads images & files.\n+#         \"\"\"\n+#         # Extract Many-to-Many fields from validated_data\n+#         level_data = validated_data.pop('level', [])\n+#         sublevel_data = validated_data.pop('sublevel', [])\n+#         course_data = validated_data.pop('course', [])\n+#         affiliation_data = validated_data.pop('affiliation', [])\n+#         district_data = validated_data.pop('district', [])\n+#         college_data = validated_data.pop('college', [])\n+#         faculty_data = validated_data.pop('faculty', [])\n+#         information_tagging_data = validated_data.pop('information_tagging', [])\n+#         information_category_data = validated_data.pop('information_category', [])\n \n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n+#         # Extract images & files from request FILES\n+#         images_data = []\n+#         files_data = []\n\\ No newline at end of file\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Accept multiple images\n+#                 images_data.append(file)\n+#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+#                 files_data.append(file)\n \n-        # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n+#         # Create the Information instance\n+#         information = Information.objects.create(**validated_data)\n \n-        # Assign Many-to-Many relationships using .set()\n-        information.level.set(level_data)\n-        information.sublevel.set(sublevel_data)\n-        information.course.set(course_data)\n-        information.affiliation.set(affiliation_data)\n-        information.district.set(district_data)\n-        information.college.set(college_data)\n-        information.faculty.set(faculty_data)\n-        information.information_tagging.set(information_tagging_data)\n-        information.information_category.set(information_category_data)\n+#         # Assign Many-to-Many relationships using .set()\n+#         information.level.set(level_data)\n+#         information.sublevel.set(sublevel_data)\n+#         information.course.set(course_data)\n+#         information.affiliation.set(affiliation_data)\n+#         information.district.set(district_data)\n+#         information.college.set(college_data)\n+#         information.faculty.set(faculty_data)\n+#         information.information_tagging.set(information_tagging_data)\n+#         information.information_category.set(information_category_data)\n \n-        # Save images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n+#         # Save images to InformationGallery\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=information, image=image_file)\n \n-        # Save files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n+#         # Save files to InformationFiles\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=information, file=file_item)\n \n-        return information\n+#         return information\n \n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', None)\n-        sublevel_data = validated_data.pop('sublevel', None)\n-        course_data = validated_data.pop('course', None)\n-        affiliation_data = validated_data.pop('affiliation', None)\n-        district_data = validated_data.pop('district', None)\n-        college_data = validated_data.pop('college', None)\n-        faculty_data = validated_data.pop('faculty', None)\n-        information_tagging_data = validated_data.pop('information_tagging', None)\n-        information_category_data = validated_data.pop('information_category', None)\n+#     @transaction.atomic\n+#     def update(self, instance, validated_data):\n+#         \"\"\"\n+#         Handles updating of Information instance, Many-to-Many relationships,\n+#         and uploads new images & files.\n+#         \"\"\"\n+#         # Extract Many-to-Many fields from validated_data\n+#         level_data = validated_data.pop('level', None)\n+#         sublevel_data = validated_data.pop('sublevel', None)\n+#         course_data = validated_data.pop('course', None)\n+#         affiliation_data = validated_data.pop('affiliation', None)\n+#         district_data = validated_data.pop('district', None)\n+#         college_data = validated_data.pop('college', None)\n+#         faculty_data = validated_data.pop('faculty', None)\n+#         information_tagging_data = validated_data.pop('information_tagging', None)\n+#         information_category_data = validated_data.pop('information_category', None)\n \n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n+#         # Extract images & files from request FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Accept multiple images\n+#                 images_data.append(file)\n+#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+#                 files_data.append(file)\n \n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n+#         # Update instance fields\n+#         instance = super().update(instance, validated_data)\n \n-        # Update Many-to-Many relationships if provided\n-        if level_data is not None:\n-            instance.level.set(level_data)\n-        if sublevel_data is not None:\n-            instance.sublevel.set(sublevel_data)\n-        if course_data is not None:\n-            instance.course.set(course_data)\n-        if affiliation_data is not None:\n-            instance.affiliation.set(affiliation_data)\n-        if district_data is not None:\n-            instance.district.set(district_data)\n-        if college_data is not None:\n-            instance.college.set(college_data)\n-        if faculty_data is not None:\n-            instance.faculty.set(faculty_data)\n-        if information_tagging_data is not None:\n-            instance.information_tagging.set(information_tagging_data)\n-        if information_category_data is not None:\n-            instance.information_category.set(information_category_data)\n+#         # Update Many-to-Many relationships if provided\n+#         if level_data is not None:\n+#             instance.level.set(level_data)\n+#         if sublevel_data is not None:\n+#             instance.sublevel.set(sublevel_data)\n+#         if course_data is not None:\n+#             instance.course.set(course_data)\n+#         if affiliation_data is not None:\n+#             instance.affiliation.set(affiliation_data)\n+#         if district_data is not None:\n+#             instance.district.set(district_data)\n+#         if college_data is not None:\n+#             instance.college.set(college_data)\n+#         if faculty_data is not None:\n+#             instance.faculty.set(faculty_data)\n+#         if information_tagging_data is not None:\n+#             instance.information_tagging.set(information_tagging_data)\n+#         if information_category_data is not None:\n+#             instance.information_category.set(information_category_data)\n \n-        # Save new images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n+#         # Save new images to InformationGallery\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=instance, image=image_file)\n \n-        # Save new files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n+#         # Save new files to InformationFiles\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n+#         return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738238958723,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,75 +125,75 @@\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-# class InformationWriteSerializers(serializers.ModelSerializer):\n-#     \"\"\"\n-#     Serializer for handling binary image & file uploads in form-data.\n-#     Many-to-Many fields are managed automatically by Django.\n-#     \"\"\"\n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling binary image & file uploads in form-data.\n+    Many-to-Many fields are managed automatically by Django.\n+    \"\"\"\n     \n \n-#     class Meta:\n-#         model = Information\n-#         fields = '__all__'\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n \n     \n-#     @transaction.atomic\n-#     def create(self, validated_data):\n-#         \"\"\"\n-#         Handles creation of Information instance and processes image & file uploads.\n-#         \"\"\"\n-#         # Extract images and files from request's FILES\n-#         images_data = []\n-#         files_data = []\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance and processes image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n \n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Images in array format\n-#                 images_data.append(file)\n-#             elif key.startswith('files['):  # Files in array format\n-#                 files_data.append(file)\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n \n-#         # Create the Information instance\n-#         information = super().create(validated_data)\n+        # Create the Information instance\n+        information = super().create(validated_data)\n \n-#         # Save image uploads\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=information, image=image_file)\n+        # Save image uploads\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n \n-#         # Save file uploads\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=information, file=file_item)\n+        # Save file uploads\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n \n-#         return information\n+        return information\n \n-#     @transaction.atomic\n-#     def update(self, instance, validated_data):\n-#         \"\"\"\n-#         Handles updating an Information instance and manages image & file uploads.\n-#         \"\"\"\n-#         # Extract images and files from request's FILES\n-#         images_data = []\n-#         files_data = []\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating an Information instance and manages image & file uploads.\n+        \"\"\"\n+        # Extract images and files from request's FILES\n+        images_data = []\n+        files_data = []\n \n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Images in array format\n-#                 images_data.append(file)\n-#             elif key.startswith('files['):  # Files in array format\n-#                 files_data.append(file)\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Images in array format\n+                images_data.append(file)\n+            elif key.startswith('files['):  # Files in array format\n+                files_data.append(file)\n \n-#         # Update instance fields\n-#         instance = super().update(instance, validated_data)\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n \n-#         # Save new image uploads (append to existing images)\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=instance, image=image_file)\n+        # Save new image uploads (append to existing images)\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n \n-#         # Save new file uploads (append to existing files)\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=instance, file=file_item)\n+        # Save new file uploads (append to existing files)\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n \n-#         return instance\n+        return instance\n \n \n # class InformationWriteSerializers(serializers.ModelSerializer):\n #     \"\"\"\n"
                },
                {
                    "date": 1738305598066,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,137 +194,4 @@\n \n         return instance\n \n \n-# class InformationWriteSerializers(serializers.ModelSerializer):\n-#     \"\"\"\n-#     Serializer for handling Information creation and Many-to-Many fields correctly.\n-#     Also handles image and file uploads properly.\n-#     \"\"\"\n-\n-#     level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n-#     sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n-#     course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n-#     affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n-#     district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n-#     college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n-#     faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n-#     information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n-#     information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n-\n-#     gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-#     uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n-\n-#     class Meta:\n-#         model = Information\n-#         fields = '__all__'\n-\n-#     @transaction.atomic\n-#     def create(self, validated_data):\n-#         \"\"\"\n-#         Handles creation of Information instance, Many-to-Many relationships,\n-#         and uploads images & files.\n-#         \"\"\"\n-#         # Extract Many-to-Many fields from validated_data\n-#         level_data = validated_data.pop('level', [])\n-#         sublevel_data = validated_data.pop('sublevel', [])\n-#         course_data = validated_data.pop('course', [])\n-#         affiliation_data = validated_data.pop('affiliation', [])\n-#         district_data = validated_data.pop('district', [])\n-#         college_data = validated_data.pop('college', [])\n-#         faculty_data = validated_data.pop('faculty', [])\n-#         information_tagging_data = validated_data.pop('information_tagging', [])\n-#         information_category_data = validated_data.pop('information_category', [])\n-\n-#         # Extract images & files from request FILES\n-#         images_data = []\n-#         files_data = []\n-\n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Accept multiple images\n-#                 images_data.append(file)\n-#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-#                 files_data.append(file)\n-\n-#         # Create the Information instance\n-#         information = Information.objects.create(**validated_data)\n-\n-#         # Assign Many-to-Many relationships using .set()\n-#         information.level.set(level_data)\n-#         information.sublevel.set(sublevel_data)\n-#         information.course.set(course_data)\n-#         information.affiliation.set(affiliation_data)\n-#         information.district.set(district_data)\n-#         information.college.set(college_data)\n-#         information.faculty.set(faculty_data)\n-#         information.information_tagging.set(information_tagging_data)\n-#         information.information_category.set(information_category_data)\n-\n-#         # Save images to InformationGallery\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=information, image=image_file)\n-\n-#         # Save files to InformationFiles\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=information, file=file_item)\n-\n-#         return information\n-\n-#     @transaction.atomic\n-#     def update(self, instance, validated_data):\n-#         \"\"\"\n-#         Handles updating of Information instance, Many-to-Many relationships,\n-#         and uploads new images & files.\n-#         \"\"\"\n-#         # Extract Many-to-Many fields from validated_data\n-#         level_data = validated_data.pop('level', None)\n-#         sublevel_data = validated_data.pop('sublevel', None)\n-#         course_data = validated_data.pop('course', None)\n-#         affiliation_data = validated_data.pop('affiliation', None)\n-#         district_data = validated_data.pop('district', None)\n-#         college_data = validated_data.pop('college', None)\n-#         faculty_data = validated_data.pop('faculty', None)\n-#         information_tagging_data = validated_data.pop('information_tagging', None)\n-#         information_category_data = validated_data.pop('information_category', None)\n-\n-#         # Extract images & files from request FILES\n-#         images_data = []\n-#         files_data = []\n-\n-#         for key, file in self.context['request'].FILES.items():\n-#             if key.startswith('images['):  # Accept multiple images\n-#                 images_data.append(file)\n-#             elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-#                 files_data.append(file)\n-\n-#         # Update instance fields\n-#         instance = super().update(instance, validated_data)\n-\n-#         # Update Many-to-Many relationships if provided\n-#         if level_data is not None:\n-#             instance.level.set(level_data)\n-#         if sublevel_data is not None:\n-#             instance.sublevel.set(sublevel_data)\n-#         if course_data is not None:\n-#             instance.course.set(course_data)\n-#         if affiliation_data is not None:\n-#             instance.affiliation.set(affiliation_data)\n-#         if district_data is not None:\n-#             instance.district.set(district_data)\n-#         if college_data is not None:\n-#             instance.college.set(college_data)\n-#         if faculty_data is not None:\n-#             instance.faculty.set(faculty_data)\n-#         if information_tagging_data is not None:\n-#             instance.information_tagging.set(information_tagging_data)\n-#         if information_category_data is not None:\n-#             instance.information_category.set(information_category_data)\n-\n-#         # Save new images to InformationGallery\n-#         for image_file in images_data:\n-#             InformationGallery.objects.create(information=instance, image=image_file)\n-\n-#         # Save new files to InformationFiles\n-#         for file_item in files_data:\n-#             InformationFiles.objects.create(information=instance, file=file_item)\n-\n-#         return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738305604478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -194,4 +194,137 @@\n \n         return instance\n \n \n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling Information creation and Many-to-Many fields correctly.\n+    Also handles image and file uploads properly.\n+    \"\"\"\n+\n+    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n+    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n+    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n+    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n+    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n+    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n+    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n+    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n+    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n+\n+    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance, Many-to-Many relationships,\n+        and uploads images & files.\n+        \"\"\"\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', [])\n+        sublevel_data = validated_data.pop('sublevel', [])\n+        course_data = validated_data.pop('course', [])\n+        affiliation_data = validated_data.pop('affiliation', [])\n+        district_data = validated_data.pop('district', [])\n+        college_data = validated_data.pop('college', [])\n+        faculty_data = validated_data.pop('faculty', [])\n+        information_tagging_data = validated_data.pop('information_tagging', [])\n+        information_category_data = validated_data.pop('information_category', [])\n+\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n+\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n+\n+        # Assign Many-to-Many relationships using .set()\n+        information.level.set(level_data)\n+        information.sublevel.set(sublevel_data)\n+        information.course.set(course_data)\n+        information.affiliation.set(affiliation_data)\n+        information.district.set(district_data)\n+        information.college.set(college_data)\n+        information.faculty.set(faculty_data)\n+        information.information_tagging.set(information_tagging_data)\n+        information.information_category.set(information_category_data)\n+\n+        # Save images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n+\n+        # Save files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n+\n+        return information\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating of Information instance, Many-to-Many relationships,\n+        and uploads new images & files.\n+        \"\"\"\n+        # Extract Many-to-Many fields from validated_data\n+        level_data = validated_data.pop('level', None)\n+        sublevel_data = validated_data.pop('sublevel', None)\n+        course_data = validated_data.pop('course', None)\n+        affiliation_data = validated_data.pop('affiliation', None)\n+        district_data = validated_data.pop('district', None)\n+        college_data = validated_data.pop('college', None)\n+        faculty_data = validated_data.pop('faculty', None)\n+        information_tagging_data = validated_data.pop('information_tagging', None)\n+        information_category_data = validated_data.pop('information_category', None)\n+\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n+\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Update Many-to-Many relationships if provided\n+        if level_data is not None:\n+            instance.level.set(level_data)\n+        if sublevel_data is not None:\n+            instance.sublevel.set(sublevel_data)\n+        if course_data is not None:\n+            instance.course.set(course_data)\n+        if affiliation_data is not None:\n+            instance.affiliation.set(affiliation_data)\n+        if district_data is not None:\n+            instance.district.set(district_data)\n+        if college_data is not None:\n+            instance.college.set(college_data)\n+        if faculty_data is not None:\n+            instance.faculty.set(faculty_data)\n+        if information_tagging_data is not None:\n+            instance.information_tagging.set(information_tagging_data)\n+        if information_category_data is not None:\n+            instance.information_category.set(information_category_data)\n+\n+        # Save new images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n+\n+        # Save new files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738305615848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,92 +108,92 @@\n         model = Information\n         fields = '__all__'\n \n \n-class InformationRetrieveSerializers(serializers.ModelSerializer):\n-    level = LevelSerializer(many=True, read_only=True)\n-    sublevel = SubLevelSerializer(many=True, read_only=True)\n-    course = CourseSerializer(many=True, read_only=True)\n-    affiliation = AffiliationSerializer(many=True, read_only=True)\n-    district = DistrictSerializer(many=True, read_only=True)\n-    college = CollegeSerializer(many=True, read_only=True)\n-    faculty = FacultySerializer(many=True, read_only=True)\n-    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n-    information_category = InformationCategorySerializer(many=True, read_only=True)\n+# class InformationRetrieveSerializers(serializers.ModelSerializer):\n+#     level = LevelSerializer(many=True, read_only=True)\n+#     sublevel = SubLevelSerializer(many=True, read_only=True)\n+#     course = CourseSerializer(many=True, read_only=True)\n+#     affiliation = AffiliationSerializer(many=True, read_only=True)\n+#     district = DistrictSerializer(many=True, read_only=True)\n+#     college = CollegeSerializer(many=True, read_only=True)\n+#     faculty = FacultySerializer(many=True, read_only=True)\n+#     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n+#     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n+#     information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+#     information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+#     class Meta:\n+#         model = Information\n+#         fields = '__all__'\n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling binary image & file uploads in form-data.\n-    Many-to-Many fields are managed automatically by Django.\n-    \"\"\"\n+# class InformationWriteSerializers(serializers.ModelSerializer):\n+#     \"\"\"\n+#     Serializer for handling binary image & file uploads in form-data.\n+#     Many-to-Many fields are managed automatically by Django.\n+#     \"\"\"\n     \n \n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n+#     class Meta:\n+#         model = Information\n+#         fields = '__all__'\n \n     \n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance and processes image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n+#     @transaction.atomic\n+#     def create(self, validated_data):\n+#         \"\"\"\n+#         Handles creation of Information instance and processes image & file uploads.\n+#         \"\"\"\n+#         # Extract images and files from request's FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Images in array format\n+#                 images_data.append(file)\n+#             elif key.startswith('files['):  # Files in array format\n+#                 files_data.append(file)\n \n-        # Create the Information instance\n-        information = super().create(validated_data)\n+#         # Create the Information instance\n+#         information = super().create(validated_data)\n \n-        # Save image uploads\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n+#         # Save image uploads\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=information, image=image_file)\n \n-        # Save file uploads\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n+#         # Save file uploads\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=information, file=file_item)\n \n-        return information\n+#         return information\n \n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating an Information instance and manages image & file uploads.\n-        \"\"\"\n-        # Extract images and files from request's FILES\n-        images_data = []\n-        files_data = []\n+#     @transaction.atomic\n+#     def update(self, instance, validated_data):\n+#         \"\"\"\n+#         Handles updating an Information instance and manages image & file uploads.\n+#         \"\"\"\n+#         # Extract images and files from request's FILES\n+#         images_data = []\n+#         files_data = []\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Images in array format\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Files in array format\n-                files_data.append(file)\n+#         for key, file in self.context['request'].FILES.items():\n+#             if key.startswith('images['):  # Images in array format\n+#                 images_data.append(file)\n+#             elif key.startswith('files['):  # Files in array format\n+#                 files_data.append(file)\n \n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n+#         # Update instance fields\n+#         instance = super().update(instance, validated_data)\n \n-        # Save new image uploads (append to existing images)\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n+#         # Save new image uploads (append to existing images)\n+#         for image_file in images_data:\n+#             InformationGallery.objects.create(information=instance, image=image_file)\n \n-        # Save new file uploads (append to existing files)\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n+#         # Save new file uploads (append to existing files)\n+#         for file_item in files_data:\n+#             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n+#         return instance\n \n \n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n"
                },
                {
                    "date": 1738305635841,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,24 +108,24 @@\n         model = Information\n         fields = '__all__'\n \n \n-# class InformationRetrieveSerializers(serializers.ModelSerializer):\n-#     level = LevelSerializer(many=True, read_only=True)\n-#     sublevel = SubLevelSerializer(many=True, read_only=True)\n-#     course = CourseSerializer(many=True, read_only=True)\n-#     affiliation = AffiliationSerializer(many=True, read_only=True)\n-#     district = DistrictSerializer(many=True, read_only=True)\n-#     college = CollegeSerializer(many=True, read_only=True)\n-#     faculty = FacultySerializer(many=True, read_only=True)\n-#     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n-#     information_category = InformationCategorySerializer(many=True, read_only=True)\n+class InformationRetrieveSerializers(serializers.ModelSerializer):\n+    level = LevelSerializer(many=True, read_only=True)\n+    sublevel = SubLevelSerializer(many=True, read_only=True)\n+    course = CourseSerializer(many=True, read_only=True)\n+    affiliation = AffiliationSerializer(many=True, read_only=True)\n+    district = DistrictSerializer(many=True, read_only=True)\n+    college = CollegeSerializer(many=True, read_only=True)\n+    faculty = FacultySerializer(many=True, read_only=True)\n+    information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n+    information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-#     information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-#     information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n-#     class Meta:\n-#         model = Information\n-#         fields = '__all__'\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n \n # class InformationWriteSerializers(serializers.ModelSerializer):\n #     \"\"\"\n #     Serializer for handling binary image & file uploads in form-data.\n"
                },
                {
                    "date": 1738305694541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -326,5 +326,5 @@\n         # Save new files to InformationFiles\n         for file_item in files_data:\n             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n\\ No newline at end of file\n+        return instance \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738306421193,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,139 +192,4 @@\n #         for file_item in files_data:\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n-\n-\n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Also handles image and file uploads properly.\n-    \"\"\"\n-\n-    level = serializers.PrimaryKeyRelatedField(many=True, queryset=Level.objects.all(), required=False)\n-    sublevel = serializers.PrimaryKeyRelatedField(many=True, queryset=SubLevel.objects.all(), required=False)\n-    course = serializers.PrimaryKeyRelatedField(many=True, queryset=Course.objects.all(), required=False)\n-    affiliation = serializers.PrimaryKeyRelatedField(many=True, queryset=Affiliation.objects.all(), required=False)\n-    district = serializers.PrimaryKeyRelatedField(many=True, queryset=District.objects.all(), required=False)\n-    college = serializers.PrimaryKeyRelatedField(many=True, queryset=College.objects.all(), required=False)\n-    faculty = serializers.PrimaryKeyRelatedField(many=True, queryset=Faculty.objects.all(), required=False)\n-    information_tagging = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationTagging.objects.all(), required=False)\n-    information_category = serializers.PrimaryKeyRelatedField(many=True, queryset=InformationCategory.objects.all(), required=False)\n-\n-    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n-\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance, Many-to-Many relationships,\n-        and uploads images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', [])\n-        sublevel_data = validated_data.pop('sublevel', [])\n-        course_data = validated_data.pop('course', [])\n-        affiliation_data = validated_data.pop('affiliation', [])\n-        district_data = validated_data.pop('district', [])\n-        college_data = validated_data.pop('college', [])\n-        faculty_data = validated_data.pop('faculty', [])\n-        information_tagging_data = validated_data.pop('information_tagging', [])\n-        information_category_data = validated_data.pop('information_category', [])\n-\n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n-\n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n-\n-        # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n-\n-        # Assign Many-to-Many relationships using .set()\n-        information.level.set(level_data)\n-        information.sublevel.set(sublevel_data)\n-        information.course.set(course_data)\n-        information.affiliation.set(affiliation_data)\n-        information.district.set(district_data)\n-        information.college.set(college_data)\n-        information.faculty.set(faculty_data)\n-        information.information_tagging.set(information_tagging_data)\n-        information.information_category.set(information_category_data)\n-\n-        # Save images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n-\n-        # Save files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n-\n-        return information\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n-        \"\"\"\n-        # Extract Many-to-Many fields from validated_data\n-        level_data = validated_data.pop('level', None)\n-        sublevel_data = validated_data.pop('sublevel', None)\n-        course_data = validated_data.pop('course', None)\n-        affiliation_data = validated_data.pop('affiliation', None)\n-        district_data = validated_data.pop('district', None)\n-        college_data = validated_data.pop('college', None)\n-        faculty_data = validated_data.pop('faculty', None)\n-        information_tagging_data = validated_data.pop('information_tagging', None)\n-        information_category_data = validated_data.pop('information_category', None)\n-\n-        # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n-\n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n-                files_data.append(file)\n-\n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n-\n-        # Update Many-to-Many relationships if provided\n-        if level_data is not None:\n-            instance.level.set(level_data)\n-        if sublevel_data is not None:\n-            instance.sublevel.set(sublevel_data)\n-        if course_data is not None:\n-            instance.course.set(course_data)\n-        if affiliation_data is not None:\n-            instance.affiliation.set(affiliation_data)\n-        if district_data is not None:\n-            instance.district.set(district_data)\n-        if college_data is not None:\n-            instance.college.set(college_data)\n-        if faculty_data is not None:\n-            instance.faculty.set(faculty_data)\n-        if information_tagging_data is not None:\n-            instance.information_tagging.set(information_tagging_data)\n-        if information_category_data is not None:\n-            instance.information_category.set(information_category_data)\n-\n-        # Save new images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n-\n-        # Save new files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n-\n-        return instance \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738306452909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -192,4 +192,140 @@\n #         for file_item in files_data:\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n+from rest_framework import serializers\n+from django.db import transaction\n+\n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling Information creation and Many-to-Many fields correctly.\n+    Accepts only IDs for many-to-many fields.\n+    \"\"\"\n+\n+    level = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    sublevel = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    course = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    affiliation = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    district = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    college = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    faculty = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    information_tagging = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+\n+    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n+    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance, Many-to-Many relationships,\n+        and uploads images & files.\n+        \"\"\"\n+        # Extract Many-to-Many field IDs\n+        level_ids = validated_data.pop('level', [])\n+        sublevel_ids = validated_data.pop('sublevel', [])\n+        course_ids = validated_data.pop('course', [])\n+        affiliation_ids = validated_data.pop('affiliation', [])\n+        district_ids = validated_data.pop('district', [])\n+        college_ids = validated_data.pop('college', [])\n+        faculty_ids = validated_data.pop('faculty', [])\n+        information_tagging_ids = validated_data.pop('information_tagging', [])\n+        information_category_ids = validated_data.pop('information_category', [])\n+\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n+\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n+\n+        # Assign Many-to-Many relationships using .set()\n+        information.level.set(Level.objects.filter(id__in=level_ids))\n+        information.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n+        information.course.set(Course.objects.filter(id__in=course_ids))\n+        information.affiliation.set(Affiliation.objects.filter(id__in=affiliation_ids))\n+        information.district.set(District.objects.filter(id__in=district_ids))\n+        information.college.set(College.objects.filter(id__in=college_ids))\n+        information.faculty.set(Faculty.objects.filter(id__in=faculty_ids))\n+        information.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n+        information.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n+\n+        # Save images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n+\n+        # Save files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n+\n+        return information\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating of Information instance, Many-to-Many relationships,\n+        and uploads new images & files.\n+        \"\"\"\n+        # Extract Many-to-Many field IDs\n+        level_ids = validated_data.pop('level', None)\n+        sublevel_ids = validated_data.pop('sublevel', None)\n+        course_ids = validated_data.pop('course', None)\n+        affiliation_ids = validated_data.pop('affiliation', None)\n+        district_ids = validated_data.pop('district', None)\n+        college_ids = validated_data.pop('college', None)\n+        faculty_ids = validated_data.pop('faculty', None)\n+        information_tagging_ids = validated_data.pop('information_tagging', None)\n+        information_category_ids = validated_data.pop('information_category', None)\n+\n+        # Extract images & files from request FILES\n+        images_data = []\n+        files_data = []\n+\n+        for key, file in self.context['request'].FILES.items():\n+            if key.startswith('images['):  # Accept multiple images\n+                images_data.append(file)\n+            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+                files_data.append(file)\n+\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Update Many-to-Many relationships if provided\n+        if level_ids is not None:\n+            instance.level.set(Level.objects.filter(id__in=level_ids))\n+        if sublevel_ids is not None:\n+            instance.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n+        if course_ids is not None:\n+            instance.course.set(Course.objects.filter(id__in=course_ids))\n+        if affiliation_ids is not None:\n+            instance.affiliation.set(Affiliation.objects.filter(id__in=affiliation_ids))\n+        if district_ids is not None:\n+            instance.district.set(District.objects.filter(id__in=district_ids))\n+        if college_ids is not None:\n+            instance.college.set(College.objects.filter(id__in=college_ids))\n+        if faculty_ids is not None:\n+            instance.faculty.set(Faculty.objects.filter(id__in=faculty_ids))\n+        if information_tagging_ids is not None:\n+            instance.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n+        if information_category_ids is not None:\n+            instance.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n+\n+        # Save new images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n+\n+        # Save new files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n"
                },
                {
                    "date": 1738306484760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n \n         for key, file in self.context['request'].FILES.items():\n             if key.startswith('images['):  # Accept multiple images\n                 images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+            elif key.startswith('urriculum_file_uploadc['):  # Accept multiple files\n                 files_data.append(file)\n \n         # Update instance fields\n         instance = super().update(instance, validated_data)\n"
                },
                {
                    "date": 1738306491645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -293,9 +293,9 @@\n \n         for key, file in self.context['request'].FILES.items():\n             if key.startswith('images['):  # Accept multiple images\n                 images_data.append(file)\n-            elif key.startswith('urriculum_file_uploadc['):  # Accept multiple files\n+            elif key.startswith('files['):  # Accept multiple files\n                 files_data.append(file)\n \n         # Update instance fields\n         instance = super().update(instance, validated_data)\n"
                },
                {
                    "date": 1738306512512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -242,9 +242,9 @@\n \n         for key, file in self.context['request'].FILES.items():\n             if key.startswith('images['):  # Accept multiple images\n                 images_data.append(file)\n-            elif key.startswith('curriculum_file_upload['):  # Accept multiple files\n+            elif key.startswith('files['):  # Accept multiple files\n                 files_data.append(file)\n \n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n"
                },
                {
                    "date": 1738479593551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,10 +119,11 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='information_gallery')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n+\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738479608244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,10 +100,10 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='information_gallery')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n"
                },
                {
                    "date": 1738479627341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -212,10 +212,10 @@\n     faculty = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n     information_tagging = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n     information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n \n-    gallery_images = InformationGallerySerializer(many=True, read_only=True, source='informationgallery_set')\n-    uploaded_files = InformationFilesSerializer(many=True, read_only=True, source='informationfiles_set')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='information_gallery')\n+    information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n"
                },
                {
                    "date": 1738480041281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,15 +193,12 @@\n #         for file_item in files_data:\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n-from rest_framework import serializers\n-from django.db import transaction\n-\n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Accepts only IDs for many-to-many fields.\n+    Accepts only IDs for many-to-many fields, handles file and image uploads.\n     \"\"\"\n \n     level = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n     sublevel = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n@@ -212,15 +209,38 @@\n     faculty = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n     information_tagging = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n     information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n \n+    # Return uploaded images and files\n     information_gallery = InformationGallerySerializer(many=True, read_only=True, source='information_gallery')\n     information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n \n+    # Fields for handling deletion of existing files/images\n+    delete_information_gallery = serializers.ListField(child=serializers.IntegerField(), write_only=True, required=False)\n+    delete_information_files = serializers.ListField(child=serializers.IntegerField(), write_only=True, required=False)\n+\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n+    def extract_images_and_files(self):\n+        \"\"\"\n+        Extracts multiple image and file uploads from request.FILES.\n+        Handles formats like information_gallery[0], information_gallery[1], information_files[0], information_files[1]\n+        \"\"\"\n+        images_data = []\n+        files_data = []\n+        request = self.context.get('request')\n+\n+        if request and hasattr(request, 'FILES'):\n+            for key, file in request.FILES.items():\n+                if key.startswith('information_gallery['):  # Accept multiple images\n+                    images_data.append(file)\n+                elif key.startswith('information_files['):  # Accept multiple files\n+                    files_data.append(file)\n+\n+        return images_data, files_data\n+\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\"\n         Handles creation of Information instance, Many-to-Many relationships,\n@@ -237,17 +257,10 @@\n         information_tagging_ids = validated_data.pop('information_tagging', [])\n         information_category_ids = validated_data.pop('information_category', [])\n \n         # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n+        images_data, files_data = self.extract_images_and_files()\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Accept multiple files\n-                files_data.append(file)\n-\n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n \n         # Assign Many-to-Many relationships using .set()\n@@ -274,9 +287,9 @@\n     @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n         Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n+        and uploads/deletes images & files.\n         \"\"\"\n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', None)\n         sublevel_ids = validated_data.pop('sublevel', None)\n@@ -288,16 +301,13 @@\n         information_tagging_ids = validated_data.pop('information_tagging', None)\n         information_category_ids = validated_data.pop('information_category', None)\n \n         # Extract images & files from request FILES\n-        images_data = []\n-        files_data = []\n+        images_data, files_data = self.extract_images_and_files()\n \n-        for key, file in self.context['request'].FILES.items():\n-            if key.startswith('images['):  # Accept multiple images\n-                images_data.append(file)\n-            elif key.startswith('files['):  # Accept multiple files\n-                files_data.append(file)\n+        # Extract delete requests\n+        delete_images = validated_data.pop('delete_information_gallery', [])\n+        delete_files = validated_data.pop('delete_information_files', [])\n \n         # Update instance fields\n         instance = super().update(instance, validated_data)\n \n@@ -320,13 +330,21 @@\n             instance.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n         if information_category_ids is not None:\n             instance.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n \n+        # Delete selected images\n+        if delete_images:\n+            InformationGallery.objects.filter(id__in=delete_images, information=instance).delete()\n+\n+        # Delete selected files\n+        if delete_files:\n+            InformationFiles.objects.filter(id__in=delete_files, information=instance).delete()\n+\n         # Save new images to InformationGallery\n         for image_file in images_data:\n             InformationGallery.objects.create(information=instance, image=image_file)\n \n         # Save new files to InformationFiles\n         for file_item in files_data:\n             InformationFiles.objects.create(information=instance, file=file_item)\n \n-        return instance\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738481159640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='information_gallery')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True)\n     information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n \n     class Meta:\n         model = Information\n"
                },
                {
                    "date": 1738481169043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,9 +101,9 @@\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n     information_gallery = InformationGallerySerializer(many=True, read_only=True)\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n+    information_files = InformationFilesSerializer(many=True, read_only=True)\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n@@ -119,9 +119,9 @@\n     faculty = FacultySerializer(many=True, read_only=True)\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='information_gallery')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True)\n     information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n \n     class Meta:\n         model = Information\n"
                },
                {
                    "date": 1738481174278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n     information_tagging = InformationTaggingSerializer(many=True, read_only=True)\n     information_category = InformationCategorySerializer(many=True, read_only=True)\n     \n     information_gallery = InformationGallerySerializer(many=True, read_only=True)\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n+    information_files = InformationFilesSerializer(many=True, read_only=True)\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n"
                },
                {
                    "date": 1738481194871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,9 +210,9 @@\n     information_tagging = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n     information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n \n     # Return uploaded images and files\n-    information_gallery = InformationGallerySerializer(many=True, read_only=True, source='information_gallery')\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True)\n     information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n \n     # Fields for handling deletion of existing files/images\n     delete_information_gallery = serializers.ListField(child=serializers.IntegerField(), write_only=True, required=False)\n"
                },
                {
                    "date": 1738481499434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,14 +211,10 @@\n     information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n \n     # Return uploaded images and files\n     information_gallery = InformationGallerySerializer(many=True, read_only=True)\n-    information_files = InformationFilesSerializer(many=True, read_only=True, source='information_files')\n+    information_files = InformationFilesSerializer(many=True, read_only=True)\n \n-    # Fields for handling deletion of existing files/images\n-    delete_information_gallery = serializers.ListField(child=serializers.IntegerField(), write_only=True, required=False)\n-    delete_information_files = serializers.ListField(child=serializers.IntegerField(), write_only=True, required=False)\n-\n     class Meta:\n         model = Information\n         fields = '__all__'\n \n@@ -287,9 +283,9 @@\n     @transaction.atomic\n     def update(self, instance, validated_data):\n         \"\"\"\n         Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads/deletes images & files.\n+        and uploads new images & files.\n         \"\"\"\n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', None)\n         sublevel_ids = validated_data.pop('sublevel', None)\n@@ -303,12 +299,8 @@\n \n         # Extract images & files from request FILES\n         images_data, files_data = self.extract_images_and_files()\n \n-        # Extract delete requests\n-        delete_images = validated_data.pop('delete_information_gallery', [])\n-        delete_files = validated_data.pop('delete_information_files', [])\n-\n         # Update instance fields\n         instance = super().update(instance, validated_data)\n \n         # Update Many-to-Many relationships if provided\n@@ -330,16 +322,8 @@\n             instance.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n         if information_category_ids is not None:\n             instance.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n \n-        # Delete selected images\n-        if delete_images:\n-            InformationGallery.objects.filter(id__in=delete_images, information=instance).delete()\n-\n-        # Delete selected files\n-        if delete_files:\n-            InformationFiles.objects.filter(id__in=delete_files, information=instance).delete()\n-\n         # Save new images to InformationGallery\n         for image_file in images_data:\n             InformationGallery.objects.create(information=instance, image=image_file)\n \n"
                },
                {
                    "date": 1738487147389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,36 +196,38 @@\n #         return instance\n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Accepts only IDs for many-to-many fields, handles file and image uploads.\n+    Accepts only IDs for Many-to-Many fields and handles file/image uploads.\n     \"\"\"\n \n-    level = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    sublevel = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    course = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    affiliation = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    district = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    college = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    faculty = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    information_tagging = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    level = IntegerListField(child=serializers.IntegerField(), required=False)\n+    sublevel = IntegerListField(child=serializers.IntegerField(), required=False)\n+    course = IntegerListField(child=serializers.IntegerField(), required=False)\n+    affiliation = IntegerListField(child=serializers.IntegerField(), required=False)\n+    district = IntegerListField(child=serializers.IntegerField(), required=False)\n+    college = IntegerListField(child=serializers.IntegerField(), required=False)\n+    faculty = IntegerListField(child=serializers.IntegerField(), required=False)\n+    information_tagging = IntegerListField(child=serializers.IntegerField(), required=False)\n+    information_category = IntegerListField(child=serializers.IntegerField(), required=False)\n \n-    # Return uploaded images and files\n-    information_gallery = InformationGallerySerializer(many=True, read_only=True)\n-    information_files = InformationFilesSerializer(many=True, read_only=True)\n+    # Read-only for returned images and files\n+    information_gallery = serializers.SerializerMethodField()\n+    information_files = serializers.SerializerMethodField()\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n \n+    def get_information_gallery(self, obj):\n+        return [img.image.url for img in obj.information_gallery.all()]\n+\n+    def get_information_files(self, obj):\n+        return [file.file.url for file in obj.information_files.all()]\n+\n     def extract_images_and_files(self):\n-        \"\"\"\n-        Extracts multiple image and file uploads from request.FILES.\n-        Handles formats like information_gallery[0], information_gallery[1], information_files[0], information_files[1]\n-        \"\"\"\n-        images_data = []\n-        files_data = []\n+        \"\"\" Extracts multiple image and file uploads from request.FILES. \"\"\"\n+        images_data, files_data = [], []\n         request = self.context.get('request')\n \n         if request and hasattr(request, 'FILES'):\n             for key, file in request.FILES.items():\n@@ -241,8 +243,9 @@\n         \"\"\"\n         Handles creation of Information instance, Many-to-Many relationships,\n         and uploads images & files.\n         \"\"\"\n+\n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', [])\n         sublevel_ids = validated_data.pop('sublevel', [])\n         course_ids = validated_data.pop('course', [])\n@@ -258,18 +261,18 @@\n \n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n \n-        # Assign Many-to-Many relationships using .set()\n-        information.level.set(Level.objects.filter(id__in=level_ids))\n-        information.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n-        information.course.set(Course.objects.filter(id__in=course_ids))\n-        information.affiliation.set(Affiliation.objects.filter(id__in=affiliation_ids))\n-        information.district.set(District.objects.filter(id__in=district_ids))\n-        information.college.set(College.objects.filter(id__in=college_ids))\n-        information.faculty.set(Faculty.objects.filter(id__in=faculty_ids))\n-        information.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n-        information.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n+        # Assign Many-to-Many relationships\n+        information.level.add(*level_ids)\n+        information.sublevel.add(*sublevel_ids)\n+        information.course.add(*course_ids)\n+        information.affiliation.add(*affiliation_ids)\n+        information.district.add(*district_ids)\n+        information.college.add(*college_ids)\n+        information.faculty.add(*faculty_ids)\n+        information.information_tagging.add(*information_tagging_ids)\n+        information.information_category.add(*information_category_ids)\n \n         # Save images to InformationGallery\n         for image_file in images_data:\n             InformationGallery.objects.create(information=information, image=image_file)\n@@ -285,8 +288,9 @@\n         \"\"\"\n         Handles updating of Information instance, Many-to-Many relationships,\n         and uploads new images & files.\n         \"\"\"\n+\n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', None)\n         sublevel_ids = validated_data.pop('sublevel', None)\n         course_ids = validated_data.pop('course', None)\n@@ -304,8 +308,58 @@\n         instance = super().update(instance, validated_data)\n \n         # Update Many-to-Many relationships if provided\n         if level_ids is not None:\n+            instance.level.set(level_ids)\n+        if sublevel_ids is not None:\n+            instance.sublevel.set(sublevel_ids)\n+        if course_ids is not None:\n+            instance.course.set(course_ids)\n+        if affiliation_ids is not None:\n+            instance.affiliation.set(affiliation_ids)\n+        if district_ids is not None:\n+            instance.district.set(district_ids)\n+        if college_ids is not None:\n+            instance.college.set(college_ids)\n+        if faculty_ids is not None:\n+            instance.faculty.set(faculty_ids)\n+        if information_tagging_ids is not None:\n+            instance.information_tagging.set(information_tagging_ids)\n+        if information_category_ids is not None:\n+            instance.information_category.set(information_category_ids)\n+\n+        # Save new images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n+\n+        # Save new files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n+        \"\"\"\n+        Handles updating of Information instance, Many-to-Many relationships,\n+        and uploads new images & files.\n+        \"\"\"\n+        # Extract Many-to-Many field IDs\n+        level_ids = validated_data.pop('level', None)\n+        sublevel_ids = validated_data.pop('sublevel', None)\n+        course_ids = validated_data.pop('course', None)\n+        affiliation_ids = validated_data.pop('affiliation', None)\n+        district_ids = validated_data.pop('district', None)\n+        college_ids = validated_data.pop('college', None)\n+        faculty_ids = validated_data.pop('faculty', None)\n+        information_tagging_ids = validated_data.pop('information_tagging', None)\n+        information_category_ids = validated_data.pop('information_category', None)\n+\n+        # Extract images & files from request FILES\n+        images_data, files_data = self.extract_images_and_files()\n+\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Update Many-to-Many relationships if provided\n+        if level_ids is not None:\n             instance.level.set(Level.objects.filter(id__in=level_ids))\n         if sublevel_ids is not None:\n             instance.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n         if course_ids is not None:\n"
                },
                {
                    "date": 1738487153337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,38 +196,36 @@\n #         return instance\n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Accepts only IDs for Many-to-Many fields and handles file/image uploads.\n+    Accepts only IDs for many-to-many fields, handles file and image uploads.\n     \"\"\"\n \n-    level = IntegerListField(child=serializers.IntegerField(), required=False)\n-    sublevel = IntegerListField(child=serializers.IntegerField(), required=False)\n-    course = IntegerListField(child=serializers.IntegerField(), required=False)\n-    affiliation = IntegerListField(child=serializers.IntegerField(), required=False)\n-    district = IntegerListField(child=serializers.IntegerField(), required=False)\n-    college = IntegerListField(child=serializers.IntegerField(), required=False)\n-    faculty = IntegerListField(child=serializers.IntegerField(), required=False)\n-    information_tagging = IntegerListField(child=serializers.IntegerField(), required=False)\n-    information_category = IntegerListField(child=serializers.IntegerField(), required=False)\n+    level = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    sublevel = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    course = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    affiliation = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    district = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    college = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    faculty = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    information_tagging = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n+    information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n \n-    # Read-only for returned images and files\n-    information_gallery = serializers.SerializerMethodField()\n-    information_files = serializers.SerializerMethodField()\n+    # Return uploaded images and files\n+    information_gallery = InformationGallerySerializer(many=True, read_only=True)\n+    information_files = InformationFilesSerializer(many=True, read_only=True)\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n \n-    def get_information_gallery(self, obj):\n-        return [img.image.url for img in obj.information_gallery.all()]\n-\n-    def get_information_files(self, obj):\n-        return [file.file.url for file in obj.information_files.all()]\n-\n     def extract_images_and_files(self):\n-        \"\"\" Extracts multiple image and file uploads from request.FILES. \"\"\"\n-        images_data, files_data = [], []\n+        \"\"\"\n+        Extracts multiple image and file uploads from request.FILES.\n+        Handles formats like information_gallery[0], information_gallery[1], information_files[0], information_files[1]\n+        \"\"\"\n+        images_data = []\n+        files_data = []\n         request = self.context.get('request')\n \n         if request and hasattr(request, 'FILES'):\n             for key, file in request.FILES.items():\n@@ -243,9 +241,8 @@\n         \"\"\"\n         Handles creation of Information instance, Many-to-Many relationships,\n         and uploads images & files.\n         \"\"\"\n-\n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', [])\n         sublevel_ids = validated_data.pop('sublevel', [])\n         course_ids = validated_data.pop('course', [])\n@@ -261,18 +258,18 @@\n \n         # Create the Information instance\n         information = Information.objects.create(**validated_data)\n \n-        # Assign Many-to-Many relationships\n-        information.level.add(*level_ids)\n-        information.sublevel.add(*sublevel_ids)\n-        information.course.add(*course_ids)\n-        information.affiliation.add(*affiliation_ids)\n-        information.district.add(*district_ids)\n-        information.college.add(*college_ids)\n-        information.faculty.add(*faculty_ids)\n-        information.information_tagging.add(*information_tagging_ids)\n-        information.information_category.add(*information_category_ids)\n+        # Assign Many-to-Many relationships using .set()\n+        information.level.set(Level.objects.filter(id__in=level_ids))\n+        information.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n+        information.course.set(Course.objects.filter(id__in=course_ids))\n+        information.affiliation.set(Affiliation.objects.filter(id__in=affiliation_ids))\n+        information.district.set(District.objects.filter(id__in=district_ids))\n+        information.college.set(College.objects.filter(id__in=college_ids))\n+        information.faculty.set(Faculty.objects.filter(id__in=faculty_ids))\n+        information.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n+        information.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n \n         # Save images to InformationGallery\n         for image_file in images_data:\n             InformationGallery.objects.create(information=information, image=image_file)\n@@ -288,9 +285,8 @@\n         \"\"\"\n         Handles updating of Information instance, Many-to-Many relationships,\n         and uploads new images & files.\n         \"\"\"\n-\n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', None)\n         sublevel_ids = validated_data.pop('sublevel', None)\n         course_ids = validated_data.pop('course', None)\n@@ -308,58 +304,8 @@\n         instance = super().update(instance, validated_data)\n \n         # Update Many-to-Many relationships if provided\n         if level_ids is not None:\n-            instance.level.set(level_ids)\n-        if sublevel_ids is not None:\n-            instance.sublevel.set(sublevel_ids)\n-        if course_ids is not None:\n-            instance.course.set(course_ids)\n-        if affiliation_ids is not None:\n-            instance.affiliation.set(affiliation_ids)\n-        if district_ids is not None:\n-            instance.district.set(district_ids)\n-        if college_ids is not None:\n-            instance.college.set(college_ids)\n-        if faculty_ids is not None:\n-            instance.faculty.set(faculty_ids)\n-        if information_tagging_ids is not None:\n-            instance.information_tagging.set(information_tagging_ids)\n-        if information_category_ids is not None:\n-            instance.information_category.set(information_category_ids)\n-\n-        # Save new images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n-\n-        # Save new files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n-\n-        return instance\n-        \"\"\"\n-        Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n-        \"\"\"\n-        # Extract Many-to-Many field IDs\n-        level_ids = validated_data.pop('level', None)\n-        sublevel_ids = validated_data.pop('sublevel', None)\n-        course_ids = validated_data.pop('course', None)\n-        affiliation_ids = validated_data.pop('affiliation', None)\n-        district_ids = validated_data.pop('district', None)\n-        college_ids = validated_data.pop('college', None)\n-        faculty_ids = validated_data.pop('faculty', None)\n-        information_tagging_ids = validated_data.pop('information_tagging', None)\n-        information_category_ids = validated_data.pop('information_category', None)\n-\n-        # Extract images & files from request FILES\n-        images_data, files_data = self.extract_images_and_files()\n-\n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n-\n-        # Update Many-to-Many relationships if provided\n-        if level_ids is not None:\n             instance.level.set(Level.objects.filter(id__in=level_ids))\n         if sublevel_ids is not None:\n             instance.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n         if course_ids is not None:\n"
                },
                {
                    "date": 1738487163755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,142 +193,4 @@\n #         for file_item in files_data:\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Accepts only IDs for many-to-many fields, handles file and image uploads.\n-    \"\"\"\n-\n-    level = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    sublevel = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    course = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    affiliation = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    district = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    college = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    faculty = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    information_tagging = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-    information_category = serializers.ListSerializer(child=serializers.IntegerField(), required=False)\n-\n-    # Return uploaded images and files\n-    information_gallery = InformationGallerySerializer(many=True, read_only=True)\n-    information_files = InformationFilesSerializer(many=True, read_only=True)\n-\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n-\n-    def extract_images_and_files(self):\n-        \"\"\"\n-        Extracts multiple image and file uploads from request.FILES.\n-        Handles formats like information_gallery[0], information_gallery[1], information_files[0], information_files[1]\n-        \"\"\"\n-        images_data = []\n-        files_data = []\n-        request = self.context.get('request')\n-\n-        if request and hasattr(request, 'FILES'):\n-            for key, file in request.FILES.items():\n-                if key.startswith('information_gallery['):  # Accept multiple images\n-                    images_data.append(file)\n-                elif key.startswith('information_files['):  # Accept multiple files\n-                    files_data.append(file)\n-\n-        return images_data, files_data\n-\n-    @transaction.atomic\n-    def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance, Many-to-Many relationships,\n-        and uploads images & files.\n-        \"\"\"\n-        # Extract Many-to-Many field IDs\n-        level_ids = validated_data.pop('level', [])\n-        sublevel_ids = validated_data.pop('sublevel', [])\n-        course_ids = validated_data.pop('course', [])\n-        affiliation_ids = validated_data.pop('affiliation', [])\n-        district_ids = validated_data.pop('district', [])\n-        college_ids = validated_data.pop('college', [])\n-        faculty_ids = validated_data.pop('faculty', [])\n-        information_tagging_ids = validated_data.pop('information_tagging', [])\n-        information_category_ids = validated_data.pop('information_category', [])\n-\n-        # Extract images & files from request FILES\n-        images_data, files_data = self.extract_images_and_files()\n-\n-        # Create the Information instance\n-        information = Information.objects.create(**validated_data)\n-\n-        # Assign Many-to-Many relationships using .set()\n-        information.level.set(Level.objects.filter(id__in=level_ids))\n-        information.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n-        information.course.set(Course.objects.filter(id__in=course_ids))\n-        information.affiliation.set(Affiliation.objects.filter(id__in=affiliation_ids))\n-        information.district.set(District.objects.filter(id__in=district_ids))\n-        information.college.set(College.objects.filter(id__in=college_ids))\n-        information.faculty.set(Faculty.objects.filter(id__in=faculty_ids))\n-        information.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n-        information.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n-\n-        # Save images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=information, image=image_file)\n-\n-        # Save files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=information, file=file_item)\n-\n-        return information\n-\n-    @transaction.atomic\n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n-        \"\"\"\n-        # Extract Many-to-Many field IDs\n-        level_ids = validated_data.pop('level', None)\n-        sublevel_ids = validated_data.pop('sublevel', None)\n-        course_ids = validated_data.pop('course', None)\n-        affiliation_ids = validated_data.pop('affiliation', None)\n-        district_ids = validated_data.pop('district', None)\n-        college_ids = validated_data.pop('college', None)\n-        faculty_ids = validated_data.pop('faculty', None)\n-        information_tagging_ids = validated_data.pop('information_tagging', None)\n-        information_category_ids = validated_data.pop('information_category', None)\n-\n-        # Extract images & files from request FILES\n-        images_data, files_data = self.extract_images_and_files()\n-\n-        # Update instance fields\n-        instance = super().update(instance, validated_data)\n-\n-        # Update Many-to-Many relationships if provided\n-        if level_ids is not None:\n-            instance.level.set(Level.objects.filter(id__in=level_ids))\n-        if sublevel_ids is not None:\n-            instance.sublevel.set(SubLevel.objects.filter(id__in=sublevel_ids))\n-        if course_ids is not None:\n-            instance.course.set(Course.objects.filter(id__in=course_ids))\n-        if affiliation_ids is not None:\n-            instance.affiliation.set(Affiliation.objects.filter(id__in=affiliation_ids))\n-        if district_ids is not None:\n-            instance.district.set(District.objects.filter(id__in=district_ids))\n-        if college_ids is not None:\n-            instance.college.set(College.objects.filter(id__in=college_ids))\n-        if faculty_ids is not None:\n-            instance.faculty.set(Faculty.objects.filter(id__in=faculty_ids))\n-        if information_tagging_ids is not None:\n-            instance.information_tagging.set(InformationTagging.objects.filter(id__in=information_tagging_ids))\n-        if information_category_ids is not None:\n-            instance.information_category.set(InformationCategory.objects.filter(id__in=information_category_ids))\n-\n-        # Save new images to InformationGallery\n-        for image_file in images_data:\n-            InformationGallery.objects.create(information=instance, image=image_file)\n-\n-        # Save new files to InformationFiles\n-        for file_item in files_data:\n-            InformationFiles.objects.create(information=instance, file=file_item)\n-\n-        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738487168977,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,4 +193,147 @@\n #         for file_item in files_data:\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n+\n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\"\n+    Serializer for handling Information creation and Many-to-Many fields correctly.\n+    Accepts only IDs for Many-to-Many fields and handles file/image uploads.\n+    \"\"\"\n+\n+    level = IntegerListField(child=serializers.IntegerField(), required=False)\n+    sublevel = IntegerListField(child=serializers.IntegerField(), required=False)\n+    course = IntegerListField(child=serializers.IntegerField(), required=False)\n+    affiliation = IntegerListField(child=serializers.IntegerField(), required=False)\n+    district = IntegerListField(child=serializers.IntegerField(), required=False)\n+    college = IntegerListField(child=serializers.IntegerField(), required=False)\n+    faculty = IntegerListField(child=serializers.IntegerField(), required=False)\n+    information_tagging = IntegerListField(child=serializers.IntegerField(), required=False)\n+    information_category = IntegerListField(child=serializers.IntegerField(), required=False)\n+\n+    # Read-only for returned images and files\n+    information_gallery = serializers.SerializerMethodField()\n+    information_files = serializers.SerializerMethodField()\n+\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+    def get_information_gallery(self, obj):\n+        return [img.image.url for img in obj.information_gallery.all()]\n+\n+    def get_information_files(self, obj):\n+        return [file.file.url for file in obj.information_files.all()]\n+\n+    def extract_images_and_files(self):\n+        \"\"\" Extracts multiple image and file uploads from request.FILES. \"\"\"\n+        images_data, files_data = [], []\n+        request = self.context.get('request')\n+\n+        if request and hasattr(request, 'FILES'):\n+            for key, file in request.FILES.items():\n+                if key.startswith('information_gallery['):  # Accept multiple images\n+                    images_data.append(file)\n+                elif key.startswith('information_files['):  # Accept multiple files\n+                    files_data.append(file)\n+\n+        return images_data, files_data\n+\n+    @transaction.atomic\n+    def create(self, validated_data):\n+        \"\"\"\n+        Handles creation of Information instance, Many-to-Many relationships,\n+        and uploads images & files.\n+        \"\"\"\n+\n+        # Extract Many-to-Many field IDs\n+        level_ids = validated_data.pop('level', [])\n+        sublevel_ids = validated_data.pop('sublevel', [])\n+        course_ids = validated_data.pop('course', [])\n+        affiliation_ids = validated_data.pop('affiliation', [])\n+        district_ids = validated_data.pop('district', [])\n+        college_ids = validated_data.pop('college', [])\n+        faculty_ids = validated_data.pop('faculty', [])\n+        information_tagging_ids = validated_data.pop('information_tagging', [])\n+        information_category_ids = validated_data.pop('information_category', [])\n+\n+        # Extract images & files from request FILES\n+        images_data, files_data = self.extract_images_and_files()\n+\n+        # Create the Information instance\n+        information = Information.objects.create(**validated_data)\n+\n+        # Assign Many-to-Many relationships\n+        information.level.add(*level_ids)\n+        information.sublevel.add(*sublevel_ids)\n+        information.course.add(*course_ids)\n+        information.affiliation.add(*affiliation_ids)\n+        information.district.add(*district_ids)\n+        information.college.add(*college_ids)\n+        information.faculty.add(*faculty_ids)\n+        information.information_tagging.add(*information_tagging_ids)\n+        information.information_category.add(*information_category_ids)\n+\n+        # Save images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=information, image=image_file)\n+\n+        # Save files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=information, file=file_item)\n+\n+        return information\n+\n+    @transaction.atomic\n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating of Information instance, Many-to-Many relationships,\n+        and uploads new images & files.\n+        \"\"\"\n+\n+        # Extract Many-to-Many field IDs\n+        level_ids = validated_data.pop('level', None)\n+        sublevel_ids = validated_data.pop('sublevel', None)\n+        course_ids = validated_data.pop('course', None)\n+        affiliation_ids = validated_data.pop('affiliation', None)\n+        district_ids = validated_data.pop('district', None)\n+        college_ids = validated_data.pop('college', None)\n+        faculty_ids = validated_data.pop('faculty', None)\n+        information_tagging_ids = validated_data.pop('information_tagging', None)\n+        information_category_ids = validated_data.pop('information_category', None)\n+\n+        # Extract images & files from request FILES\n+        images_data, files_data = self.extract_images_and_files()\n+\n+        # Update instance fields\n+        instance = super().update(instance, validated_data)\n+\n+        # Update Many-to-Many relationships if provided\n+        if level_ids is not None:\n+            instance.level.set(level_ids)\n+        if sublevel_ids is not None:\n+            instance.sublevel.set(sublevel_ids)\n+        if course_ids is not None:\n+            instance.course.set(course_ids)\n+        if affiliation_ids is not None:\n+            instance.affiliation.set(affiliation_ids)\n+        if district_ids is not None:\n+            instance.district.set(district_ids)\n+        if college_ids is not None:\n+            instance.college.set(college_ids)\n+        if faculty_ids is not None:\n+            instance.faculty.set(faculty_ids)\n+        if information_tagging_ids is not None:\n+            instance.information_tagging.set(information_tagging_ids)\n+        if information_category_ids is not None:\n+            instance.information_category.set(information_category_ids)\n+\n+        # Save new images to InformationGallery\n+        for image_file in images_data:\n+            InformationGallery.objects.create(information=instance, image=image_file)\n+\n+        # Save new files to InformationFiles\n+        for file_item in files_data:\n+            InformationFiles.objects.create(information=instance, file=file_item)\n+\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738487188137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,20 @@\n \n     class Meta:\n         model = Information\n         fields = '__all__'\n+        \n \n+class IntegerListField(serializers.ListField):\n+    \"\"\" Custom serializer field to handle list of integers from form-data properly. \"\"\"\n+    def to_internal_value(self, data):\n+        if isinstance(data, str):  \n+            try:\n+                data = list(map(int, data.split(',')))  # Convert CSV string to list of ints\n+            except ValueError:\n+                raise serializers.ValidationError(\"Invalid list format. Expected comma-separated integers.\")\n+        return super().to_internal_value(data)\n+\n # class InformationWriteSerializers(serializers.ModelSerializer):\n #     \"\"\"\n #     Serializer for handling binary image & file uploads in form-data.\n #     Many-to-Many fields are managed automatically by Django.\n"
                },
                {
                    "date": 1738487515818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,13 +205,20 @@\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n \n+class IntegerListField(serializers.ListField):\n+    \"\"\" Converts comma-separated form-data lists into Python lists \"\"\"\n+    def to_internal_value(self, data):\n+        if isinstance(data, str):\n+            try:\n+                return list(map(int, data.strip(\"[]\").split(',')))  # Convert \"[2,3]\" -> [2,3]\n+            except ValueError:\n+                raise serializers.ValidationError(\"Invalid format. Expected comma-separated numbers.\")\n+        return super().to_internal_value(data)\n+\n class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\"\n-    Serializer for handling Information creation and Many-to-Many fields correctly.\n-    Accepts only IDs for Many-to-Many fields and handles file/image uploads.\n-    \"\"\"\n+    \"\"\" Handles Many-to-Many fields and file/image uploads \"\"\"\n \n     level = IntegerListField(child=serializers.IntegerField(), required=False)\n     sublevel = IntegerListField(child=serializers.IntegerField(), required=False)\n     course = IntegerListField(child=serializers.IntegerField(), required=False)\n@@ -236,27 +243,24 @@\n     def get_information_files(self, obj):\n         return [file.file.url for file in obj.information_files.all()]\n \n     def extract_images_and_files(self):\n-        \"\"\" Extracts multiple image and file uploads from request.FILES. \"\"\"\n+        \"\"\" Extract multiple images and files from `image[0]`, `image[1]` keys in request.FILES \"\"\"\n         images_data, files_data = [], []\n         request = self.context.get('request')\n \n         if request and hasattr(request, 'FILES'):\n             for key, file in request.FILES.items():\n-                if key.startswith('information_gallery['):  # Accept multiple images\n+                if key.startswith('image['):  # Accept multiple images as `image[0]`, `image[1]`\n                     images_data.append(file)\n-                elif key.startswith('information_files['):  # Accept multiple files\n+                elif key.startswith('file['):  # Accept multiple files as `file[0]`, `file[1]`\n                     files_data.append(file)\n \n         return images_data, files_data\n \n     @transaction.atomic\n     def create(self, validated_data):\n-        \"\"\"\n-        Handles creation of Information instance, Many-to-Many relationships,\n-        and uploads images & files.\n-        \"\"\"\n+        \"\"\" Handles Many-to-Many relationships and image/file uploads \"\"\"\n \n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', [])\n         sublevel_ids = validated_data.pop('sublevel', [])\n@@ -270,9 +274,9 @@\n \n         # Extract images & files from request FILES\n         images_data, files_data = self.extract_images_and_files()\n \n-        # Create the Information instance\n+        # Create Information instance\n         information = Information.objects.create(**validated_data)\n \n         # Assign Many-to-Many relationships\n         information.level.add(*level_ids)\n@@ -296,12 +300,9 @@\n         return information\n \n     @transaction.atomic\n     def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating of Information instance, Many-to-Many relationships,\n-        and uploads new images & files.\n-        \"\"\"\n+        \"\"\" Handles updates for Many-to-Many relationships and file uploads \"\"\"\n \n         # Extract Many-to-Many field IDs\n         level_ids = validated_data.pop('level', None)\n         sublevel_ids = validated_data.pop('sublevel', None)\n@@ -318,9 +319,9 @@\n \n         # Update instance fields\n         instance = super().update(instance, validated_data)\n \n-        # Update Many-to-Many relationships if provided\n+        # Update Many-to-Many relationships\n         if level_ids is not None:\n             instance.level.set(level_ids)\n         if sublevel_ids is not None:\n             instance.sublevel.set(sublevel_ids)\n"
                },
                {
                    "date": 1738487521172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,18 +127,8 @@\n         model = Information\n         fields = '__all__'\n         \n \n-class IntegerListField(serializers.ListField):\n-    \"\"\" Custom serializer field to handle list of integers from form-data properly. \"\"\"\n-    def to_internal_value(self, data):\n-        if isinstance(data, str):  \n-            try:\n-                data = list(map(int, data.split(',')))  # Convert CSV string to list of ints\n-            except ValueError:\n-                raise serializers.ValidationError(\"Invalid list format. Expected comma-separated integers.\")\n-        return super().to_internal_value(data)\n-\n # class InformationWriteSerializers(serializers.ModelSerializer):\n #     \"\"\"\n #     Serializer for handling binary image & file uploads in form-data.\n #     Many-to-Many fields are managed automatically by Django.\n"
                },
                {
                    "date": 1738487842805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,16 +195,22 @@\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n \n-class IntegerListField(serializers.ListField):\n-    \"\"\" Converts comma-separated form-data lists into Python lists \"\"\"\n+lass IntegerListField(serializers.ListField):\n+    \"\"\" Converts form-data list-like strings (e.g., '[2,3]') into actual Python lists of integers. \"\"\"\n     def to_internal_value(self, data):\n-        if isinstance(data, str):\n+        if isinstance(data, list):  \n+            return [int(i) for i in data]  # Ensure each value is an integer\n+        \n+        if isinstance(data, str):  \n             try:\n-                return list(map(int, data.strip(\"[]\").split(',')))  # Convert \"[2,3]\" -> [2,3]\n+                # Handles form-data where data is sent as a string (e.g., \"[2,3]\")\n+                clean_data = data.strip(\"[]\").replace(\" \", \"\")  # Remove brackets & spaces\n+                return list(map(int, clean_data.split(',')))  # Convert to list of integers\n             except ValueError:\n-                raise serializers.ValidationError(\"Invalid format. Expected comma-separated numbers.\")\n+                raise serializers.ValidationError(\"Invalid format. Expected comma-separated integers.\")\n+        \n         return super().to_internal_value(data)\n \n class InformationWriteSerializers(serializers.ModelSerializer):\n     \"\"\" Handles Many-to-Many fields and file/image uploads \"\"\"\n"
                },
                {
                    "date": 1738487855105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -195,9 +195,9 @@\n #             InformationFiles.objects.create(information=instance, file=file_item)\n \n #         return instance\n \n-lass IntegerListField(serializers.ListField):\n+class IntegerListField(serializers.ListField):\n     \"\"\" Converts form-data list-like strings (e.g., '[2,3]') into actual Python lists of integers. \"\"\"\n     def to_internal_value(self, data):\n         if isinstance(data, list):  \n             return [int(i) for i in data]  # Ensure each value is an integer\n"
                },
                {
                    "date": 1738487863104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,9 +200,9 @@\n     \"\"\" Converts form-data list-like strings (e.g., '[2,3]') into actual Python lists of integers. \"\"\"\n     def to_internal_value(self, data):\n         if isinstance(data, list):  \n             return [int(i) for i in data]  # Ensure each value is an integer\n-        \n+        z\n         if isinstance(data, str):  \n             try:\n                 # Handles form-data where data is sent as a string (e.g., \"[2,3]\")\n                 clean_data = data.strip(\"[]\").replace(\" \", \"\")  # Remove brackets & spaces\n"
                },
                {
                    "date": 1738488950123,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -196,18 +196,24 @@\n \n #         return instance\n \n class IntegerListField(serializers.ListField):\n-    \"\"\" Converts form-data list-like strings (e.g., '[2,3]') into actual Python lists of integers. \"\"\"\n+    \"\"\" Converts stringified lists from form-data (e.g., '[2,3]') into real Python lists of integers. \"\"\"\n+    \n     def to_internal_value(self, data):\n         if isinstance(data, list):  \n-            return [int(i) for i in data]  # Ensure each value is an integer\n-        z\n+            return [int(i) for i in data]  # Already a list, convert values to integers\n+        \n         if isinstance(data, str):  \n             try:\n-                # Handles form-data where data is sent as a string (e.g., \"[2,3]\")\n-                clean_data = data.strip(\"[]\").replace(\" \", \"\")  # Remove brackets & spaces\n-                return list(map(int, clean_data.split(',')))  # Convert to list of integers\n+                # Handle data sent as: \"2,3\" or \"[2,3]\"\n+                clean_data = data.strip(\"[]\").replace(\" \", \"\")  # Remove brackets and spaces\n+                \n+                if \",\" in clean_data:  # \"2,3\" case\n+                    return list(map(int, clean_data.split(',')))  # Convert to list of integers\n+                \n+                return [int(clean_data)]  # Handle single integer case (e.g., \"2\" -> [2])\n+\n             except ValueError:\n                 raise serializers.ValidationError(\"Invalid format. Expected comma-separated integers.\")\n         \n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1738488956302,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n from rest_framework import serializers\n from django.db import transaction\n+import ast\n \n from ..models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery, InformationFiles\n \n class LevelSerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1738490418902,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,70 +197,30 @@\n \n #         return instance\n \n class IntegerListField(serializers.ListField):\n-    \"\"\" Converts stringified lists from form-data (e.g., '[2,3]') into real Python lists of integers. \"\"\"\n+    \"\"\" Handles Many-to-Many fields in form-data correctly (e.g., '[2,3]', '2,3'). \"\"\"\n     \n     def to_internal_value(self, data):\n         if isinstance(data, list):  \n             return [int(i) for i in data]  # Already a list, convert values to integers\n         \n         if isinstance(data, str):  \n             try:\n-                # Handle data sent as: \"2,3\" or \"[2,3]\"\n-                clean_data = data.strip(\"[]\").replace(\" \", \"\")  # Remove brackets and spaces\n-                \n-                if \",\" in clean_data:  # \"2,3\" case\n-                    return list(map(int, clean_data.split(',')))  # Convert to list of integers\n-                \n-                return [int(clean_data)]  # Handle single integer case (e.g., \"2\" -> [2])\n+                clean_data = data.strip(\"[]\").replace(\" \", \"\")  # Remove brackets & spaces\n \n+                # If string is like \"2,3\", split and convert to list\n+                if \",\" in clean_data:\n+                    return list(map(int, clean_data.split(',')))\n+\n+                # If single number, return as list\n+                return [int(clean_data)]  \n+\n             except ValueError:\n                 raise serializers.ValidationError(\"Invalid format. Expected comma-separated integers.\")\n-        \n+\n         return super().to_internal_value(data)\n \n-class InformationWriteSerializers(serializers.ModelSerializer):\n-    \"\"\" Handles Many-to-Many fields and file/image uploads \"\"\"\n-\n-    level = IntegerListField(child=serializers.IntegerField(), required=False)\n-    sublevel = IntegerListField(child=serializers.IntegerField(), required=False)\n-    course = IntegerListField(child=serializers.IntegerField(), required=False)\n-    affiliation = IntegerListField(child=serializers.IntegerField(), required=False)\n-    district = IntegerListField(child=serializers.IntegerField(), required=False)\n-    college = IntegerListField(child=serializers.IntegerField(), required=False)\n-    faculty = IntegerListField(child=serializers.IntegerField(), required=False)\n-    information_tagging = IntegerListField(child=serializers.IntegerField(), required=False)\n-    information_category = IntegerListField(child=serializers.IntegerField(), required=False)\n-\n-    # Read-only for returned images and files\n-    information_gallery = serializers.SerializerMethodField()\n-    information_files = serializers.SerializerMethodField()\n-\n-    class Meta:\n-        model = Information\n-        fields = '__all__'\n-\n-    def get_information_gallery(self, obj):\n-        return [img.image.url for img in obj.information_gallery.all()]\n-\n-    def get_information_files(self, obj):\n-        return [file.file.url for file in obj.information_files.all()]\n-\n-    def extract_images_and_files(self):\n-        \"\"\" Extract multiple images and files from `image[0]`, `image[1]` keys in request.FILES \"\"\"\n-        images_data, files_data = [], []\n-        request = self.context.get('request')\n-\n-        if request and hasattr(request, 'FILES'):\n-            for key, file in request.FILES.items():\n-                if key.startswith('image['):  # Accept multiple images as `image[0]`, `image[1]`\n-                    images_data.append(file)\n-                elif key.startswith('file['):  # Accept multiple files as `file[0]`, `file[1]`\n-                    files_data.append(file)\n-\n-        return images_data, files_data\n-\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\" Handles Many-to-Many relationships and image/file uploads \"\"\"\n \n"
                },
                {
                    "date": 1738490430050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -219,8 +219,49 @@\n                 raise serializers.ValidationError(\"Invalid format. Expected comma-separated integers.\")\n \n         return super().to_internal_value(data)\n \n+class InformationWriteSerializers(serializers.ModelSerializer):\n+    \"\"\" Handles Many-to-Many fields and file/image uploads \"\"\"\n+\n+    level = IntegerListField(child=serializers.IntegerField(), required=False)\n+    sublevel = IntegerListField(child=serializers.IntegerField(), required=False)\n+    course = IntegerListField(child=serializers.IntegerField(), required=False)\n+    affiliation = IntegerListField(child=serializers.IntegerField(), required=False)\n+    district = IntegerListField(child=serializers.IntegerField(), required=False)\n+    college = IntegerListField(child=serializers.IntegerField(), required=False)\n+    faculty = IntegerListField(child=serializers.IntegerField(), required=False)\n+    information_tagging = IntegerListField(child=serializers.IntegerField(), required=False)\n+    information_category = IntegerListField(child=serializers.IntegerField(), required=False)\n+\n+    # Read-only for returned images and files\n+    information_gallery = serializers.SerializerMethodField()\n+    information_files = serializers.SerializerMethodField()\n+\n+    class Meta:\n+        model = Information\n+        fields = '__all__'\n+\n+    def get_information_gallery(self, obj):\n+        return [img.image.url for img in obj.information_gallery.all()]\n+\n+    def get_information_files(self, obj):\n+        return [file.file.url for file in obj.information_files.all()]\n+\n+    def extract_images_and_files(self):\n+        \"\"\" Extract multiple images and files from `image[0]`, `image[1]` keys in request.FILES \"\"\"\n+        images_data, files_data = [], []\n+        request = self.context.get('request')\n+\n+        if request and hasattr(request, 'FILES'):\n+            for key, file in request.FILES.items():\n+                if key.startswith('image['):  # Accept multiple images as `image[0]`, `image[1]`\n+                    images_data.append(file)\n+                elif key.startswith('file['):  # Accept multiple files as `file[0]`, `file[1]`\n+                    files_data.append(file)\n+\n+        return images_data, files_data\n+\n     @transaction.atomic\n     def create(self, validated_data):\n         \"\"\" Handles Many-to-Many relationships and image/file uploads \"\"\"\n \n"
                }
            ],
            "date": 1733485840683,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom .models import Information, Level, SubLevel, Course, Affiliation, District, College, Faculty, InformationTagging, InformationCategory, InformationGallery\n\nclass InformationTaggingSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InformationTagging\n        fields = '__all__'\n\n\nclass InformationCategorySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InformationCategory\n        fields = '__all__'\n\n\nclass InformationGallerySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = InformationGallery\n        fields = '__all__'\n\n\nclass InformationListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Information\n        fields = '__all__'\n\n\nclass InformationRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = Information\n        fields = '__all__'\n\n\nclass InformationWriteSerializers(serializers.ModelSerializer):\n    level = serializers.PrimaryKeyRelatedField(queryset=Level.objects.all(), many=True, required=False)\n    sublevel = serializers.PrimaryKeyRelatedField(queryset=SubLevel.objects.all(), many=True, required=False)\n    course = serializers.PrimaryKeyRelatedField(queryset=Course.objects.all(), many=True, required=False)\n    affiliation = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all(), many=True, required=False)\n    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all(), many=True, required=False)\n    college = serializers.PrimaryKeyRelatedField(queryset=College.objects.all(), many=True, required=False)\n    faculty = serializers.PrimaryKeyRelatedField(queryset=Faculty.objects.all(), many=True, required=False)\n    information_tagging = serializers.PrimaryKeyRelatedField(queryset=InformationTagging.objects.all(), many=True, required=False)\n    information_category = serializers.PrimaryKeyRelatedField(queryset=InformationCategory.objects.all(), many=True, required=False)\n    image = serializers.PrimaryKeyRelatedField(queryset=InformationGallery.objects.all(), many=True, required=False)\n\n    class Meta:\n        model = Information\n        fields = '__all__'\n\n    def create(self, validated_data):\n        \"\"\"\n        Handles creation of Information instance with related objects based on provided ids.\n        \"\"\"\n        # Extract the related fields (ManyToMany)\n        level_ids = validated_data.pop('level', [])\n        sublevel_ids = validated_data.pop('sublevel', [])\n        course_ids = validated_data.pop('course', [])\n        affiliation_ids = validated_data.pop('affiliation', [])\n        district_ids = validated_data.pop('district', [])\n        college_ids = validated_data.pop('college', [])\n        faculty_ids = validated_data.pop('faculty', [])\n        information_tagging_ids = validated_data.pop('information_tagging', [])\n        information_category_ids = validated_data.pop('information_category', [])\n        image_ids = validated_data.pop('image', [])\n\n        # Create the Information instance first\n        information = Information.objects.create(**validated_data)\n\n        # Assign ManyToMany relationships\n        if level_ids:\n            information.level.set(level_ids)\n        if sublevel_ids:\n            information.sublevel.set(sublevel_ids)\n        if course_ids:\n            information.course.set(course_ids)\n        if affiliation_ids:\n            information.affiliation.set(affiliation_ids)\n        if district_ids:\n            information.district.set(district_ids)\n        if college_ids:\n            information.college.set(college_ids)\n        if faculty_ids:\n            information.faculty.set(faculty_ids)\n        if information_tagging_ids:\n            information.information_tagging.set(information_tagging_ids)\n        if information_category_ids:\n            information.information_category.set(information_category_ids)\n        if image_ids:\n            information.image.set(image_ids)\n\n        return information\n\n    def update(self, instance, validated_data):\n        \"\"\"\n        Handles the update of Information instance with related objects based on provided ids.\n        \"\"\"\n        # Extract the related fields (ManyToMany)\n        level_ids = validated_data.pop('level', [])\n        sublevel_ids = validated_data.pop('sublevel', [])\n        course_ids = validated_data.pop('course', [])\n        affiliation_ids = validated_data.pop('affiliation', [])\n        district_ids = validated_data.pop('district', [])\n        college_ids = validated_data.pop('college', [])\n        faculty_ids = validated_data.pop('faculty', [])\n        information_tagging_ids = validated_data.pop('information_tagging', [])\n        information_category_ids = validated_data.pop('information_category', [])\n        image_ids = validated_data.pop('image', [])\n\n        # Update the fields of the Information instance\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n\n        # Update ManyToMany relationships\n        if level_ids:\n            instance.level.set(level_ids)\n        if sublevel_ids:\n            instance.sublevel.set(sublevel_ids)\n        if course_ids:\n            instance.course.set(course_ids)\n        if affiliation_ids:\n            instance.affiliation.set(affiliation_ids)\n        if district_ids:\n            instance.district.set(district_ids)\n        if college_ids:\n            instance.college.set(college_ids)\n        if faculty_ids:\n            instance.faculty.set(faculty_ids)\n        if information_tagging_ids:\n            instance.information_tagging.set(information_tagging_ids)\n        if information_category_ids:\n            instance.information_category.set(information_category_ids)\n        if image_ids:\n            instance.image.set(image_ids)\n\n        return instance\n"
        }
    ]
}