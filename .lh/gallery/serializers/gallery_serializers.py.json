{
    "sourceFile": "gallery/serializers/gallery_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1733477583982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1738831863577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,44 +26,4 @@\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n-class GalleryWriteSerializers(serializers.ModelSerializer):\n-    # The `album` field is written as an integer ID, but the details will be fetched via nested serializer\n-    album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), many=True)\n-    \n-    class Meta:\n-        model = Gallery\n-        fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n-    \n-    def validate_album(self, value):\n-        # Validation to ensure album(s) exist\n-        for album in value:\n-            if not Album.objects.filter(id=album.id).exists():\n-                raise serializers.ValidationError(f\"Album with id {album.id} does not exist.\")\n-        return value\n-    \n-    def create(self, validated_data):\n-        # Handle the creation of the Gallery instance\n-        album_data = validated_data.pop('album')\n-        gallery_instance = Gallery.objects.create(**validated_data)\n-        \n-        # Add the albums to the gallery (Many-to-Many relationship)\n-        gallery_instance.album.set(album_data)\n-        gallery_instance.save()\n-        \n-        return gallery_instance\n-    \n-    def update(self, instance, validated_data):\n-        # Handle the update of an existing Gallery instance\n-        album_data = validated_data.pop('album', None)\n-        \n-        # Update fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        \n-        # If `album` is provided, update the many-to-many relationship\n-        if album_data is not None:\n-            instance.album.set(album_data)  # Update the albums associated with the gallery\n-        \n-        instance.save()\n-        return instance\n"
                },
                {
                    "date": 1738831869192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,4 +26,36 @@\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n+class GalleryWriteSerializers(serializers.ModelSerializer):\n+    album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), required=True)\n+\n+    class Meta:\n+        model = Gallery\n+        fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n+\n+    def create(self, validated_data):\n+        # Handle creation of multiple images for the same album\n+        request = self.context.get(\"request\")\n+        album = validated_data.get(\"album\")\n+\n+        # Extract all image files using `image[X]` keys\n+        uploaded_files = [\n+            request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n+        ]\n+\n+        # Create Gallery instances for each image\n+        gallery_instances = []\n+        for image_file in uploaded_files:\n+            if isinstance(image_file, InMemoryUploadedFile):\n+                gallery_instance = Gallery.objects.create(album=album, image=image_file, **validated_data)\n+                gallery_instances.append(gallery_instance)\n+\n+        return gallery_instances\n+\n+    def update(self, instance, validated_data):\n+        # Update the fields of the existing gallery instance\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738831892981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,10 +2,11 @@\n from ..models import Gallery, Album\n from django.core.exceptions import ValidationError as DjangoValidationError\n from rest_framework.exceptions import ValidationError as DRFValidationError\n from rest_framework import serializers\n+from rest_framework import serializers\n+from django.core.files.uploadedfile import InMemoryUploadedFile\n \n-\n class AlbumSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Album\n         fields = ['id', 'name', 'featured_image', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1738832675545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,36 +27,41 @@\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n+from rest_framework import serializers\n+from django.core.files.uploadedfile import InMemoryUploadedFile\n+from .models import Gallery, Album\n+\n+\n class GalleryWriteSerializers(serializers.ModelSerializer):\n     album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), required=True)\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n     def create(self, validated_data):\n-        # Handle creation of multiple images for the same album\n+        \"\"\"Handles multiple image uploads and links them to the same album\"\"\"\n         request = self.context.get(\"request\")\n-        album = validated_data.get(\"album\")\n+        album = validated_data.pop(\"album\")  # Single album instance\n \n-        # Extract all image files using `image[X]` keys\n+        # Extract multiple images from request.FILES using keys like `image[0]`, `image[1]`\n         uploaded_files = [\n             request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n         ]\n \n-        # Create Gallery instances for each image\n         gallery_instances = []\n         for image_file in uploaded_files:\n             if isinstance(image_file, InMemoryUploadedFile):\n+                # Create a separate Gallery instance for each uploaded image\n                 gallery_instance = Gallery.objects.create(album=album, image=image_file, **validated_data)\n                 gallery_instances.append(gallery_instance)\n\\ No newline at end of file\n \n         return gallery_instances\n \n     def update(self, instance, validated_data):\n-        # Update the fields of the existing gallery instance\n+        \"\"\"Handles updating a single Gallery instance\"\"\"\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n-        return instance\n+        return instance\n"
                },
                {
                    "date": 1738833383080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,8 @@\n         fields = ['id', 'name', 'featured_image', 'created_date', 'updated_date']\n \n \n class GalleryListSerializers(serializers.ModelSerializer):\n-    album = AlbumSerializer(many=True)  # Nested Album objects for the gallery\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n@@ -27,13 +26,8 @@\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n-from rest_framework import serializers\n-from django.core.files.uploadedfile import InMemoryUploadedFile\n-from .models import Gallery, Album\n-\n-\n class GalleryWriteSerializers(serializers.ModelSerializer):\n     album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), required=True)\n \n     class Meta:\n@@ -63,5 +57,5 @@\n         \"\"\"Handles updating a single Gallery instance\"\"\"\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n-        return instance\n\\ No newline at end of file\n+        return instance\n"
                },
                {
                    "date": 1738833390112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryWriteSerializers(serializers.ModelSerializer):\n-    album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), required=True)\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n"
                },
                {
                    "date": 1738833397134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryWriteSerializers(serializers.ModelSerializer):\n+    album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), required=True)\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n"
                },
                {
                    "date": 1738833405144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,15 +13,16 @@\n \n \n class GalleryListSerializers(serializers.ModelSerializer):\n \n+\n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryRetrieveSerializers(serializers.ModelSerializer):\n-    album = AlbumSerializer(many=True)  # Nested Album objects for the gallery\n+    album = AlbumSerializer(read)  # Nested Album objects for the gallery\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n"
                },
                {
                    "date": 1738833415357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,18 @@\n         fields = ['id', 'name', 'featured_image', 'created_date', 'updated_date']\n \n \n class GalleryListSerializers(serializers.ModelSerializer):\n+    album = AlbumSerializer(read_only=True)\n \n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryRetrieveSerializers(serializers.ModelSerializer):\n-    album = AlbumSerializer(read)  # Nested Album objects for the gallery\n+    album = AlbumSerializer(read_only=True)  # Nested Album objects for the gallery\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n"
                },
                {
                    "date": 1738833424724,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,8 @@\n \n class GalleryListSerializers(serializers.ModelSerializer):\n     album = AlbumSerializer(read_only=True)\n \n-\n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n@@ -29,9 +28,9 @@\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryWriteSerializers(serializers.ModelSerializer):\n-    album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), required=True)\n+    album = album = AlbumSerializer(read_only=True)\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n"
                },
                {
                    "date": 1738836219028,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,24 +28,48 @@\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryWriteSerializers(serializers.ModelSerializer):\n-    album = album = AlbumSerializer(read_only=True)\n+    \"\"\"\n+    Serializer for handling gallery image uploads.\n+    - Accepts `album` as an ID in the request.\n+    - Accepts multiple images using `image[0]`, `image[1]`, ...\n+    \"\"\"\n \n+    album = serializers.PrimaryKeyRelatedField(\n+        queryset=Album.objects.all(),\n+        write_only=True\n+    )\n+\n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n     def create(self, validated_data):\n-        \"\"\"Handles multiple image uploads and links them to the same album\"\"\"\n+        \"\"\"\n+        Handles multiple image uploads and links them to the same album.\n+        \"\"\"\n         request = self.context.get(\"request\")\n-        album = validated_data.pop(\"album\")  # Single album instance\n \n-        # Extract multiple images from request.FILES using keys like `image[0]`, `image[1]`\n+        # Retrieve album ID from request data\n+        album_id = request.data.get(\"album\")  # Gets album ID from request\n+        if not album_id:\n+            raise serializers.ValidationError({\"album\": \"This field is required.\"})\n+\n+        # Fetch album object\n+        try:\n+            album = Album.objects.get(id=album_id)\n+        except Album.DoesNotExist:\n+            raise serializers.ValidationError({\"album\": \"Invalid album ID.\"})\n+\n+        # Extract multiple images using keys like `image[0]`, `image[1]`\n         uploaded_files = [\n             request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n         ]\n \n+        if not uploaded_files:\n+            raise serializers.ValidationError({\"images\": \"At least one image is required.\"})\n+\n         gallery_instances = []\n         for image_file in uploaded_files:\n             if isinstance(image_file, InMemoryUploadedFile):\n                 # Create a separate Gallery instance for each uploaded image\n@@ -54,9 +78,11 @@\n \n         return gallery_instances\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a single Gallery instance\"\"\"\n+        \"\"\"\n+        Handles updating a single Gallery instance.\n+        \"\"\"\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n         return instance\n"
                },
                {
                    "date": 1738836363499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,9 +31,9 @@\n class GalleryWriteSerializers(serializers.ModelSerializer):\n     \"\"\"\n     Serializer for handling gallery image uploads.\n     - Accepts `album` as an ID in the request.\n-    - Accepts multiple images using `image[0]`, `image[1]`, ...\n+    - Accepts multiple images using `image[0]`, `image[1]`, etc.\n     \"\"\"\n \n     album = serializers.PrimaryKeyRelatedField(\n         queryset=Album.objects.all(),\n@@ -72,9 +72,13 @@\n         gallery_instances = []\n         for image_file in uploaded_files:\n             if isinstance(image_file, InMemoryUploadedFile):\n                 # Create a separate Gallery instance for each uploaded image\n-                gallery_instance = Gallery.objects.create(album=album, image=image_file, **validated_data)\n+                gallery_instance = Gallery.objects.create(\n+                    album=album,  # Manually assigning album here\n+                    image=image_file,\n+                    is_cover=validated_data.get(\"is_cover\", False)\n+                )\n                 gallery_instances.append(gallery_instance)\n \n         return gallery_instances\n \n"
                },
                {
                    "date": 1740717021367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,11 +82,34 @@\n \n         return gallery_instances\n \n     def update(self, instance, validated_data):\n-        \"\"\"\n-        Handles updating a single Gallery instance.\n-        \"\"\"\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-        return instance\n+    \"\"\"\n+    Handles updating an album by adding new images if provided.\n+    \"\"\"\n+    request = self.context.get(\"request\")\n+\n+    # Check if new images are being added\n+    uploaded_files = [\n+        request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n+    ]\n+\n+    if uploaded_files:\n+        # Add new images to the album\n+        gallery_instances = []\n+        for image_file in uploaded_files:\n+            if isinstance(image_file, InMemoryUploadedFile):\n+                gallery_instance = Gallery.objects.create(\n+                    album=instance.album,  # Keep album association\n+                    image=image_file,\n+                    is_cover=validated_data.get(\"is_cover\", False)\n+                )\n+                gallery_instances.append(gallery_instance)\n+\n+        return gallery_instances\n+\n+    # If no new images, proceed with updating existing fields\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n+    return instance\n+\n"
                },
                {
                    "date": 1740717035928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -82,34 +82,34 @@\n \n         return gallery_instances\n \n     def update(self, instance, validated_data):\n-    \"\"\"\n-    Handles updating an album by adding new images if provided.\n-    \"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"\n+        Handles updating an album by adding new images if provided.\n+        \"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Check if new images are being added\n-    uploaded_files = [\n-        request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n-    ]\n+        # Check if new images are being added\n+        uploaded_files = [\n+            request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n+        ]\n \n-    if uploaded_files:\n-        # Add new images to the album\n-        gallery_instances = []\n-        for image_file in uploaded_files:\n-            if isinstance(image_file, InMemoryUploadedFile):\n-                gallery_instance = Gallery.objects.create(\n-                    album=instance.album,  # Keep album association\n-                    image=image_file,\n-                    is_cover=validated_data.get(\"is_cover\", False)\n-                )\n-                gallery_instances.append(gallery_instance)\n+        if uploaded_files:\n+            # Add new images to the album\n+            gallery_instances = []\n+            for image_file in uploaded_files:\n+                if isinstance(image_file, InMemoryUploadedFile):\n+                    gallery_instance = Gallery.objects.create(\n+                        album=instance.album,  # Keep album association\n+                        image=image_file,\n+                        is_cover=validated_data.get(\"is_cover\", False)\n+                    )\n+                    gallery_instances.append(gallery_instance)\n \n-        return gallery_instances\n+            return gallery_instances\n \n-    # If no new images, proceed with updating existing fields\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n-    return instance\n+        # If no new images, proceed with updating existing fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+        return instance\n \n"
                },
                {
                    "date": 1741236752564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n             request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n         ]\n \n         if not uploaded_files:\n-            raise serializers.ValidationError({\"images\": \"At least one image is required.\"})\n+            return\n \n         gallery_instances = []\n         for image_file in uploaded_files:\n             if isinstance(image_file, InMemoryUploadedFile):\n"
                },
                {
                    "date": 1741239079579,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,8 +42,15 @@\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n+        \n+     def get_image_url(self, obj):\n+        \"\"\" Returns the full image URL \"\"\"\n+        request = self.context.get('request')\n+        if request and obj.image:\n+            return request.build_absolute_uri(obj.image.url)\n+        return None\n \n     def create(self, validated_data):\n         \"\"\"\n         Handles multiple image uploads and links them to the same album.\n"
                },
                {
                    "date": 1741239277683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,9 @@\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryWriteSerializers(serializers.ModelSerializer):\n+     image_url = serializers.SerializerMethodField()\n     \"\"\"\n     Serializer for handling gallery image uploads.\n     - Accepts `album` as an ID in the request.\n     - Accepts multiple images using `image[0]`, `image[1]`, etc.\n@@ -43,9 +44,9 @@\n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n         \n-     def get_image_url(self, obj):\n+    def get_image_url(self, obj):\n         \"\"\" Returns the full image URL \"\"\"\n         request = self.context.get('request')\n         if request and obj.image:\n             return request.build_absolute_uri(obj.image.url)\n"
                },
                {
                    "date": 1741239282949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryWriteSerializers(serializers.ModelSerializer):\n-     image_url = serializers.SerializerMethodField()\n+    image = serializers.SerializerMethodField()\n     \"\"\"\n     Serializer for handling gallery image uploads.\n     - Accepts `album` as an ID in the request.\n     - Accepts multiple images using `image[0]`, `image[1]`, etc.\n"
                },
                {
                    "date": 1741239300750,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n \n \n class GalleryWriteSerializers(serializers.ModelSerializer):\n-    image = serializers.SerializerMethodField()\n+    \n     \"\"\"\n     Serializer for handling gallery image uploads.\n     - Accepts `album` as an ID in the request.\n     - Accepts multiple images using `image[0]`, `image[1]`, etc.\n"
                },
                {
                    "date": 1741239309874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,14 +39,15 @@\n     album = serializers.PrimaryKeyRelatedField(\n         queryset=Album.objects.all(),\n         write_only=True\n     )\n+    image = serializers.SerializerMethodField()\n \n     class Meta:\n         model = Gallery\n         fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n         \n-    def get_image_url(self, obj):\n+    def get_image(self, obj):\n         \"\"\" Returns the full image URL \"\"\"\n         request = self.context.get('request')\n         if request and obj.image:\n             return request.build_absolute_uri(obj.image.url)\n"
                },
                {
                    "date": 1741590921632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,14 +54,14 @@\n         return None\n \n     def create(self, validated_data):\n         \"\"\"\n-        Handles multiple image uploads and links them to the same album.\n+        Handles multiple image uploads and ensures the first image is the cover.\n         \"\"\"\n         request = self.context.get(\"request\")\n \n         # Retrieve album ID from request data\n-        album_id = request.data.get(\"album\")  # Gets album ID from request\n+        album_id = request.data.get(\"album\")  \n         if not album_id:\n             raise serializers.ValidationError({\"album\": \"This field is required.\"})\n \n         # Fetch album object\n@@ -75,21 +75,31 @@\n             request.FILES[key] for key in request.FILES if key.startswith(\"image[\")\n         ]\n \n         if not uploaded_files:\n-            return\n+            return []\n \n+        # Check if this album already has a cover image\n+        has_cover = Gallery.objects.filter(album=album, is_cover=True).exists()\n+\n         gallery_instances = []\n-        for image_file in uploaded_files:\n+        for index, image_file in enumerate(uploaded_files):\n             if isinstance(image_file, InMemoryUploadedFile):\n-                # Create a separate Gallery instance for each uploaded image\n+                is_first_image = index == 0 and not has_cover  # Ensure first image is cover\n                 gallery_instance = Gallery.objects.create(\n-                    album=album,  # Manually assigning album here\n+                    album=album,\n                     image=image_file,\n-                    is_cover=validated_data.get(\"is_cover\", False)\n+                    is_cover=is_first_image  # Mark first image as cover if no existing cover\n                 )\n                 gallery_instances.append(gallery_instance)\n \n+                # If the image is cover, update the album's featured image\n+                if is_first_image:\n+                    site_url = getattr(settings, \"SITE_URL\", \"https://base.collegeinfonepal.com\")\n+                    absolute_url = urljoin(site_url, gallery_instance.image.url)\n+                    album.featured_image = absolute_url\n+                    album.save(update_fields=['featured_image'])\n+\n         return gallery_instances\n \n     def update(self, instance, validated_data):\n         \"\"\"\n"
                },
                {
                    "date": 1741590931400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from rest_framework.exceptions import ValidationError as DRFValidationError\n from rest_framework import serializers\n from rest_framework import serializers\n from django.core.files.uploadedfile import InMemoryUploadedFile\n+from django\n \n class AlbumSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Album\n"
                },
                {
                    "date": 1741590936607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n from rest_framework.exceptions import ValidationError as DRFValidationError\n from rest_framework import serializers\n from rest_framework import serializers\n from django.core.files.uploadedfile import InMemoryUploadedFile\n-from django\n+from django.conf\n \n class AlbumSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Album\n"
                },
                {
                    "date": 1741590951504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,12 @@\n from rest_framework.exceptions import ValidationError as DRFValidationError\n from rest_framework import serializers\n from rest_framework import serializers\n from django.core.files.uploadedfile import InMemoryUploadedFile\n-from django.conf\n+from django.conf import settings\n+from urllib.parse import urljoin\n+from django.conf import settings\n+from rest_framework import serial\n \n class AlbumSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Album\n"
                },
                {
                    "date": 1741590957308,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,10 +6,8 @@\n from rest_framework import serializers\n from django.core.files.uploadedfile import InMemoryUploadedFile\n from django.conf import settings\n from urllib.parse import urljoin\n-from django.conf import settings\n-from rest_framework import serial\n \n class AlbumSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Album\n"
                },
                {
                    "date": 1741591256732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,12 +93,11 @@\n                     is_cover=is_first_image  # Mark first image as cover if no existing cover\n                 )\n                 gallery_instances.append(gallery_instance)\n \n-                # If the image is cover, update the album's featured image\n-                if is_first_image:\n-                    site_url = getattr(settings, \"SITE_URL\", \"https://base.collegeinfonepal.com\")\n-                    absolute_url = urljoin(site_url, gallery_instance.image.url)\n+                # If this is the cover image, update the album's featured image with absolute URL\n+                if is_first_image and request:\n+                    absolute_url = request.build_absolute_uri(gallery_instance.image.url)\n                     album.featured_image = absolute_url\n                     album.save(update_fields=['featured_image'])\n \n         return gallery_instances\n"
                },
                {
                    "date": 1741591469250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,13 +86,13 @@\n         gallery_instances = []\n         for index, image_file in enumerate(uploaded_files):\n             if isinstance(image_file, InMemoryUploadedFile):\n                 is_first_image = index == 0 and not has_cover  # Ensure first image is cover\n-                gallery_instance = Gallery.objects.create(\n-                    album=album,\n-                    image=image_file,\n-                    is_cover=is_first_image  # Mark first image as cover if no existing cover\n-                )\n+                \n+                # Create gallery instance but DO NOT generate absolute URL yet\n+                gallery_instance = Gallery(album=album, image=image_file, is_cover=is_first_image)\n+                gallery_instance.save()  # Explicitly save the instance first\n+                \n                 gallery_instances.append(gallery_instance)\n \n                 # If this is the cover image, update the album's featured image with absolute URL\n                 if is_first_image and request:\n"
                },
                {
                    "date": 1741591769343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,17 +87,20 @@\n         for index, image_file in enumerate(uploaded_files):\n             if isinstance(image_file, InMemoryUploadedFile):\n                 is_first_image = index == 0 and not has_cover  # Ensure first image is cover\n                 \n-                # Create gallery instance but DO NOT generate absolute URL yet\n+                # Create gallery instance but DO NOT access `.image.url` yet\n                 gallery_instance = Gallery(album=album, image=image_file, is_cover=is_first_image)\n                 gallery_instance.save()  # Explicitly save the instance first\n                 \n                 gallery_instances.append(gallery_instance)\n \n-                # If this is the cover image, update the album's featured image with absolute URL\n+                # Ensure the image field is saved before accessing `.url`\n                 if is_first_image and request:\n-                    absolute_url = request.build_absolute_uri(gallery_instance.image.url)\n+                    gallery_instance.refresh_from_db()  # Ensure fresh data\n+                    absolute_url = request.build_absolute_uri(gallery_instance.image.url)  # Correct absolute URL\n+                    \n+                    # Update album's featured image\n                     album.featured_image = absolute_url\n                     album.save(update_fields=['featured_image'])\n \n         return gallery_instances\n"
                }
            ],
            "date": 1733477583982,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Gallery, Album\nfrom django.core.exceptions import ValidationError as DjangoValidationError\nfrom rest_framework.exceptions import ValidationError as DRFValidationError\nfrom rest_framework import serializers\n\n\nclass AlbumSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Album\n        fields = ['id', 'name', 'featured_image', 'created_date', 'updated_date']\n\n\nclass GalleryListSerializers(serializers.ModelSerializer):\n    album = AlbumSerializer(many=True)  # Nested Album objects for the gallery\n\n    class Meta:\n        model = Gallery\n        fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n\n\nclass GalleryRetrieveSerializers(serializers.ModelSerializer):\n    album = AlbumSerializer(many=True)  # Nested Album objects for the gallery\n\n    class Meta:\n        model = Gallery\n        fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n\n\nclass GalleryWriteSerializers(serializers.ModelSerializer):\n    # The `album` field is written as an integer ID, but the details will be fetched via nested serializer\n    album = serializers.PrimaryKeyRelatedField(queryset=Album.objects.all(), many=True)\n    \n    class Meta:\n        model = Gallery\n        fields = ['id', 'image', 'album', 'is_cover', 'created_date', 'created_date_time', 'updated_date_time']\n    \n    def validate_album(self, value):\n        # Validation to ensure album(s) exist\n        for album in value:\n            if not Album.objects.filter(id=album.id).exists():\n                raise serializers.ValidationError(f\"Album with id {album.id} does not exist.\")\n        return value\n    \n    def create(self, validated_data):\n        # Handle the creation of the Gallery instance\n        album_data = validated_data.pop('album')\n        gallery_instance = Gallery.objects.create(**validated_data)\n        \n        # Add the albums to the gallery (Many-to-Many relationship)\n        gallery_instance.album.set(album_data)\n        gallery_instance.save()\n        \n        return gallery_instance\n    \n    def update(self, instance, validated_data):\n        # Handle the update of an existing Gallery instance\n        album_data = validated_data.pop('album', None)\n        \n        # Update fields\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        \n        # If `album` is provided, update the many-to-many relationship\n        if album_data is not None:\n            instance.album.set(album_data)  # Update the albums associated with the gallery\n        \n        instance.save()\n        return instance\n"
        }
    ]
}