{
    "sourceFile": "gallery/viewsets/gallery_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 18,
            "patches": [
                {
                    "date": 1733481561311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733481566481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     serializer_class = GalleryListSerializers\n     # permission_classes = [galleryPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = Gallery.objects.all().order_by\n+    queryset = Gallery.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return GalleryWriteSerializers\n"
                },
                {
                    "date": 1737963576472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class galleryViewsets(viewsets.ModelViewSet):\n     serializer_class = GalleryListSerializers\n     # permission_classes = [galleryPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = Gallery.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n"
                },
                {
                    "date": 1738748536046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n \n class galleryViewsets(viewsets.ModelViewSet):\n     serializer_class = GalleryListSerializers\n     # permission_classes = [galleryPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Gallery.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n"
                },
                {
                    "date": 1738831934239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,32 @@\n             return GalleryWriteSerializers\n         elif self.action == 'retrieve':\n             return GalleryRetrieveSerializers\n         return super().get_serializer_class()\n+    \n+    def create(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        gallery_instances = serializer.save()\n \n+        # Return all created gallery instances\n+        response_data = {\n+            \"galleries\": [\n+                {\n+                    \"id\": instance.id,\n+                    \"album\": instance.album.id,\n+                    \"image\": instance.image.url,\n+                    \"is_cover\": instance.is_cover,\n+                    \"created_date\": instance.created_date,\n+                    \"created_date_time\": instance.created_date_time,\n+                    \"updated_date_time\": instance.updated_date_time,\n+                }\n+                for instance in gallery_instances\n+            ]\n+        }\n+\n+        return Response(response_data, status=status.HTTP_201_CREATED)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738831940864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = Gallery.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n-    ordering_fields = ['id']\n+    ordering_fields = ['-id']\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1738832698864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n             \"galleries\": [\n                 {\n                     \"id\": instance.id,\n                     \"album\": instance.album.id,\n-                    \"image\": instance.image.url,\n+                    \"image\": instance.image.url if instance.image else None,\n                     \"is_cover\": instance.is_cover,\n                     \"created_date\": instance.created_date,\n                     \"created_date_time\": instance.created_date_time,\n                     \"updated_date_time\": instance.updated_date_time,\n"
                },
                {
                    "date": 1738832733183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,10 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Gallery\n from ..serializers.gallery_serializers import GalleryListSerializers, GalleryRetrieveSerializers, GalleryWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.response import Response\n+from rest_framework import status\n \n class galleryViewsets(viewsets.ModelViewSet):\n     serializer_class = GalleryListSerializers\n     # permission_classes = [galleryPermission]\n"
                },
                {
                    "date": 1738832782941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,31 +32,9 @@\n         elif self.action == 'retrieve':\n             return GalleryRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    def create(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        gallery_instances = serializer.save()\n \n-        # Return all created gallery instances\n-        response_data = {\n-            \"galleries\": [\n-                {\n-                    \"id\": instance.id,\n-                    \"album\": instance.album.id,\n-                    \"image\": instance.image.url if instance.image else None,\n-                    \"is_cover\": instance.is_cover,\n-                    \"created_date\": instance.created_date,\n-                    \"created_date_time\": instance.created_date_time,\n-                    \"updated_date_time\": instance.updated_date_time,\n-                }\n-                for instance in gallery_instances\n-            ]\n-        }\n-\n-        return Response(response_data, status=status.HTTP_201_CREATED)\n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738832814544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,31 @@\n         elif self.action == 'retrieve':\n             return GalleryRetrieveSerializers\n         return super().get_serializer_class()\n     \n+    def create(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        gallery_instances = serializer.save()\n \n+        # Return all created gallery instances\n+        response_data = {\n+            \"galleries\": [\n+                {\n+                    \"id\": instance.id,\n+                    \"album\": instance.album.id,\n+                    \"image\": instance.image.url if instance.image else None,\n+                    \"is_cover\": instance.is_cover,\n+                    \"created_date\": instance.created_date,\n+                    \"created_date_time\": instance.created_date_time,\n+                    \"updated_date_time\": instance.updated_date_time,\n+                }\n+                for instance in gallery_instances\n+            ]\n+        }\n+\n+        return Response(response_data, status=status.HTTP_201_CREATED)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738832954046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,30 +33,33 @@\n             return GalleryRetrieveSerializers\n         return super().get_serializer_class()\n     \n     def create(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)\n-        serializer.is_valid(raise_exception=True)\n-        gallery_instances = serializer.save()\n+    serializer = self.get_serializer(data=request.data)\n+    serializer.is_valid(raise_exception=True)\n+    gallery_instances = serializer.save()\n \n-        # Return all created gallery instances\n-        response_data = {\n-            \"galleries\": [\n-                {\n-                    \"id\": instance.id,\n-                    \"album\": instance.album.id,\n-                    \"image\": instance.image.url if instance.image else None,\n-                    \"is_cover\": instance.is_cover,\n-                    \"created_date\": instance.created_date,\n-                    \"created_date_time\": instance.created_date_time,\n-                    \"updated_date_time\": instance.updated_date_time,\n-                }\n-                for instance in gallery_instances\n-            ]\n-        }\n+    # Extract album details from the first instance (since there's only one album)\n+    album = gallery_instances[0].album if gallery_instances else None\n \n-        return Response(response_data, status=status.HTTP_201_CREATED)\n+    # Prepare the response in the same format as the request\n+    response_data = {\n+        \"album\": album.id if album else None,\n+        \"images\": [\n+            {\n+                \"id\": instance.id,\n+                \"image\": instance.image.url if instance.image else None,\n+                \"is_cover\": instance.is_cover,\n+                \"created_date\": instance.created_date,\n+                \"created_date_time\": instance.created_date_time,\n+                \"updated_date_time\": instance.updated_date_time,\n+            }\n+            for instance in gallery_instances\n+        ]\n+    }\n \n+    return Response(response_data, status=status.HTTP_201_CREATED)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738836241537,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,33 +33,33 @@\n             return GalleryRetrieveSerializers\n         return super().get_serializer_class()\n     \n     def create(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)\n-    serializer.is_valid(raise_exception=True)\n-    gallery_instances = serializer.save()\n+        \"\"\"\n+        Custom create method to return all uploaded images in a single response.\n+        \"\"\"\n+        serializer = self.get_serializer(data=request.data)\n+        serializer.is_valid(raise_exception=True)\n+        gallery_instances = serializer.save()\n \n-    # Extract album details from the first instance (since there's only one album)\n-    album = gallery_instances[0].album if gallery_instances else None\n+        # Format the response to return all created images\n+        response_data = {\n+            \"album\": gallery_instances[0].album.id,  # Album ID is the same for all images\n+            \"images\": [\n+                {\n+                    \"id\": instance.id,\n+                    \"image_url\": instance.image.url if instance.image else None,\n+                    \"is_cover\": instance.is_cover,\n+                    \"created_date\": instance.created_date,\n+                    \"created_date_time\": instance.created_date_time,\n+                    \"updated_date_time\": instance.updated_date_time,\n+                }\n+                for instance in gallery_instances\n+            ]\n+        }\n \n-    # Prepare the response in the same format as the request\n-    response_data = {\n-        \"album\": album.id if album else None,\n-        \"images\": [\n-            {\n-                \"id\": instance.id,\n-                \"image\": instance.image.url if instance.image else None,\n-                \"is_cover\": instance.is_cover,\n-                \"created_date\": instance.created_date,\n-                \"created_date_time\": instance.created_date_time,\n-                \"updated_date_time\": instance.updated_date_time,\n-            }\n-            for instance in gallery_instances\n-        ]\n-    }\n+        return Response(response_data, status=status.HTTP_201_CREATED)\n \n-    return Response(response_data, status=status.HTTP_201_CREATED)\n-\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1738836379085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n         elif self.action == 'retrieve':\n             return GalleryRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    def create(self, request, *args, **kwargs):\n+     def create(self, request, *args, **kwargs):\n         \"\"\"\n         Custom create method to return all uploaded images in a single response.\n         \"\"\"\n         serializer = self.get_serializer(data=request.data)\n"
                },
                {
                    "date": 1739264655957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from rest_framework import status\n \n class galleryViewsets(viewsets.ModelViewSet):\n     serializer_class = GalleryListSerializers\n-    # permission_classes = [galleryPermission]\n+    permission_classes = [galleryPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Gallery.objects.all().order_by('-id')\n \n@@ -32,9 +32,9 @@\n         elif self.action == 'retrieve':\n             return GalleryRetrieveSerializers\n         return super().get_serializer_class()\n     \n-     def create(self, request, *args, **kwargs):\n+    def create(self, request, *args, **kwargs):\n         \"\"\"\n         Custom create method to return all uploaded images in a single response.\n         \"\"\"\n         serializer = self.get_serializer(data=request.data)\n"
                },
                {
                    "date": 1739509527137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from ..serializers.gallery_serializers import GalleryListSerializers, GalleryRetrieveSerializers, GalleryWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from rest_framework import status\n+from mainproj.permissions\n \n class galleryViewsets(viewsets.ModelViewSet):\n     serializer_class = GalleryListSerializers\n     permission_classes = [galleryPermission]\n"
                },
                {
                    "date": 1740044275074,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,24 +5,24 @@\n from ..serializers.gallery_serializers import GalleryListSerializers, GalleryRetrieveSerializers, GalleryWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.response import Response\n from rest_framework import status\n-from mainproj.permissions\n+from mainproj.permissions import DynamicModelPermission\n \n class galleryViewsets(viewsets.ModelViewSet):\n     serializer_class = GalleryListSerializers\n-    permission_classes = [galleryPermission]\n+    permission_classes = [DynamicModelPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Gallery.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['-id']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1740044282440,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n     ordering_fields = ['-id']\n \n     filterset_fields = {\n         'id': ['exact'],\n+        album\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1740044289410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     ordering_fields = ['-id']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        album\n+        'album':\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1740044300595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     ordering_fields = ['-id']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'album':\n+        'album': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                }
            ],
            "date": 1733481561311,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Gallery\nfrom ..serializers.gallery_serializers import GalleryListSerializers, GalleryRetrieveSerializers, GalleryWriteSerializers\nfrom ..utilities.importbase import *\n\nclass galleryViewsets(viewsets.ModelViewSet):\n    serializer_class = GalleryListSerializers\n    # permission_classes = [galleryPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = Gallery.objects.all().order_by\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return GalleryWriteSerializers\n        elif self.action == 'retrieve':\n            return GalleryRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}