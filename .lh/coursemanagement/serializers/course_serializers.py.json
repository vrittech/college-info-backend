{
    "sourceFile": "coursemanagement/serializers/course_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 35,
            "patches": [
                {
                    "date": 1733469089488,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733469103630,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,14 +34,8 @@\n \n class CourseWriteSerializer(serializers.ModelSerializer):\n     \"\"\"Serializer for creating or updating courses.\"\"\"\n     \n-    # When writing data, use the IDs for related fields\n-    duration = serializers.PrimaryKeyRelatedField(queryset=Duration.objects.all())\n-    faculties = serializers.PrimaryKeyRelatedField(queryset=Faculty.objects.all())\n-    level = serializers.PrimaryKeyRelatedField(queryset=Level.objects.all())\n-    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n-    \n     class Meta:\n         model = Course\n         fields = [\n             'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', \n"
                },
                {
                    "date": 1733469110670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n         fields = '__all__'\n \n \n class CourseWriteSerializer(serializers.ModelSerializer):\n-    \"\"\"Serializer for creating or updating courses.\"\"\"\n     \n     class Meta:\n         model = Course\n         fields = [\n"
                },
                {
                    "date": 1733469207335,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,43 +1,26 @@\n from rest_framework import serializers\n-from ..models import Course, Duration, Faculty, Level, Discipline\n+from ..models import Duration, Faculty, Level, Discipline, Course\n \n-class CourseListSerializer(serializers.ModelSerializer):\n-    \"\"\"Serializer for listing courses with a basic representation.\"\"\"\n-    \n-    # You can choose to represent only the relevant fields for listing\n-    # For example, using string representations for related fields\n-    duration = serializers.StringRelatedField()\n-    faculties = serializers.StringRelatedField()\n-    level = serializers.StringRelatedField()\n-    discipline = serializers.StringRelatedField(many=True)\n-    \n+# Serializer for Duration model\n+class DurationSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = Course\n-        fields = [\n-            'id', 'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'course_shortdescription'\n-        ]\n+        model = Duration\n+        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n \n+# Serializer for Faculty model\n+class FacultySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Faculty\n+        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n \n-class CourseRetrieveSerializer(serializers.ModelSerializer):\n-    \"\"\"Serializer for retrieving full course details.\"\"\"\n-    \n-    # Showing full details for related fields (objects)\n-    duration = serializers.StringRelatedField()\n-    faculties = serializers.StringRelatedField()\n-    level = serializers.StringRelatedField()\n-    discipline = serializers.StringRelatedField(many=True)\n-    \n+# Serializer for Level model\n+class LevelSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = Course\n-        fields = '__all__'\n+        model = Level\n+        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n \n-\n-class CourseWriteSerializer(serializers.ModelSerializer):\n-    \n+# Serializer for Discipline model\n+class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = Course\n-        fields = [\n-            'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', \n-            'description', 'course_shortdescription', 'course_outcome', \n-            'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload'\n-        ]\n+        model = Discipline\n+        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n"
                },
                {
                    "date": 1733469220562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,4 +23,49 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = ['id', 'name', 'description']  # Adjust fields as per your model\n+\n+\n+from rest_framework import serializers\n+from ..models import Course, Duration, Faculty, Level, Discipline\n+\n+class CourseListSerializer(serializers.ModelSerializer):\n+    # Nested serializers for related fields\n+    duration = DurationSerializer()\n+    faculties = FacultySerializer()\n+    level = LevelSerializer()\n+    discipline = DisciplineSerializer(many=True)\n+\n+    class Meta:\n+        model = Course\n+        fields = [\n+            'id', 'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'course_shortdescription'\n+        ]\n+\n+\n+class CourseRetrieveSerializer(serializers.ModelSerializer):\n+    # Nested serializers for related fields\n+    duration = DurationSerializer()\n+    faculties = FacultySerializer()\n+    level = LevelSerializer()\n+    discipline = DisciplineSerializer(many=True)\n+\n+    class Meta:\n+        model = Course\n+        fields = '__all__'\n+\n+\n+class CourseWriteSerializer(serializers.ModelSerializer):\n+    # Use primary key related fields for input data (IDs)\n+    duration = serializers.PrimaryKeyRelatedField(queryset=Duration.objects.all())\n+    faculties = serializers.PrimaryKeyRelatedField(queryset=Faculty.objects.all())\n+    level = serializers.PrimaryKeyRelatedField(queryset=Level.objects.all())\n+    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n+\n+    class Meta:\n+        model = Course\n+        fields = [\n+            'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', \n+            'description', 'course_shortdescription', 'course_outcome', \n+            'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload'\n+        ]\n"
                },
                {
                    "date": 1733469227511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,13 +55,8 @@\n         fields = '__all__'\n \n \n class CourseWriteSerializer(serializers.ModelSerializer):\n-    # Use primary key related fields for input data (IDs)\n-    duration = serializers.PrimaryKeyRelatedField(queryset=Duration.objects.all())\n-    faculties = serializers.PrimaryKeyRelatedField(queryset=Faculty.objects.all())\n-    level = serializers.PrimaryKeyRelatedField(queryset=Level.objects.all())\n-    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n \n     class Meta:\n         model = Course\n         fields = [\n"
                },
                {
                    "date": 1733469232658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,8 @@\n         fields = '__all__'\n \n \n class CourseWriteSerializer(serializers.ModelSerializer):\n-\n     class Meta:\n         model = Course\n         fields = [\n             'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', \n"
                },
                {
                    "date": 1733469242026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \n \n class CourseRetrieveSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n-    duration = DurationSerializer()\n+    duration = DurationSerializer(read)\n     faculties = FacultySerializer()\n     level = LevelSerializer()\n     discipline = DisciplineSerializer(many=True)\n \n"
                },
                {
                    "date": 1733469247150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n \n \n class CourseRetrieveSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n-    duration = DurationSerializer(read)\n+    duration = DurationSerializer(read_o)\n     faculties = FacultySerializer()\n     level = LevelSerializer()\n     discipline = DisciplineSerializer(many=True)\n \n"
                },
                {
                    "date": 1733469253930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,10 +44,10 @@\n \n \n class CourseRetrieveSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n-    duration = DurationSerializer(read_o)\n-    faculties = FacultySerializer()\n+    duration = DurationSerializer(read_only=True)\n+    faculties = FacultySerializer(read_only=True))\n     level = LevelSerializer()\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1733469266244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,9 +46,9 @@\n class CourseRetrieveSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n     duration = DurationSerializer(read_only=True)\n     faculties = FacultySerializer(read_only=True))\n-    level = LevelSerializer()\n+    level = LevelSerializer(read_only=True)\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n         model = Course\n"
                },
                {
                    "date": 1733469282396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,11 @@\n from ..models import Course, Duration, Faculty, Level, Discipline\n \n class CourseListSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n-    duration = DurationSerializer()\n-    faculties = FacultySerializer()\n-    level = LevelSerializer()\n+        duration = DurationSerializer(read_only=True)\n+    faculties = FacultySerializer(read_only=True)\n+    level = LevelSerializer(read_only=True)\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n         model = Course\n@@ -45,9 +45,9 @@\n \n class CourseRetrieveSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n     duration = DurationSerializer(read_only=True)\n-    faculties = FacultySerializer(read_only=True))\n+    faculties = FacultySerializer(read_only=True)\n     level = LevelSerializer(read_only=True)\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1733469290571,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,14 +25,13 @@\n         model = Discipline\n         fields = ['id', 'name', 'description']  # Adjust fields as per your model\n \n \n-from rest_framework import serializers\n-from ..models import Course, Duration, Faculty, Level, Discipline\n \n+\n class CourseListSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n-        duration = DurationSerializer(read_only=True)\n+    duration = DurationSerializer(read_only=True)\n     faculties = FacultySerializer(read_only=True)\n     level = LevelSerializer(read_only=True)\n     discipline = DisciplineSerializer(many=True)\n \n"
                },
                {
                    "date": 1733469295739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,11 +24,8 @@\n     class Meta:\n         model = Discipline\n         fields = ['id', 'name', 'description']  # Adjust fields as per your model\n \n-\n-\n-\n class CourseListSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n     duration = DurationSerializer(read_only=True)\n     faculties = FacultySerializer(read_only=True)\n"
                },
                {
                    "date": 1733469303117,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,15 +16,15 @@\n # Serializer for Level model\n class LevelSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Level\n-        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n+        fields = ['id', 'name', 'description']  \n \n # Serializer for Discipline model\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n-        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n+        fields = ['id', 'name', 'description'] \n \n class CourseListSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n     duration = DurationSerializer(read_only=True)\n"
                },
                {
                    "date": 1733469312095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,15 +10,15 @@\n # Serializer for Faculty model\n class FacultySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Faculty\n-        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n+        fields = ['id', 'name', 'description']  \n \n # Serializer for Level model\n class LevelSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Level\n-        fields = ['id', 'name', 'description']  \n+        fields = ['id', 'name']  \n \n # Serializer for Discipline model\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1733469321122,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n # Serializer for Faculty model\n class FacultySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Faculty\n-        fields = ['id', 'name', 'description']  \n+        fields = ['id', 'name']  \n \n # Serializer for Level model\n class LevelSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -22,9 +22,9 @@\n # Serializer for Discipline model\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n-        fields = ['id', 'name', 'description'] \n+        fields = ['id', 'name'] \n \n class CourseListSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n     duration = DurationSerializer(read_only=True)\n"
                },
                {
                    "date": 1733469337888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n # Serializer for Duration model\n class DurationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Duration\n-        fields = ['id', 'name', 'description']  # Adjust fields as per your model\n+        fields = ['id', 'name']\n \n # Serializer for Faculty model\n class FacultySerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1733469512495,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,9 +34,8 @@\n \n     class Meta:\n         model = Course\n         fields = [\n-            'id', 'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'course_shortdescription'\n         ]\n \n \n class CourseRetrieveSerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1733469518487,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,10 +33,9 @@\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n         model = Course\n-        fields = [\n-        ]\n+        fields = ['__'\n \n \n class CourseRetrieveSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n"
                },
                {
                    "date": 1733469539699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n         model = Course\n-        fields = ['__'\n+        fields = ['__all__']\n \n \n class CourseRetrieveSerializer(serializers.ModelSerializer):\n     # Nested serializers for related fields\n@@ -51,9 +51,5 @@\n \n class CourseWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Course\n-        fields = [\n-            'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', \n-            'description', 'course_shortdescription', 'course_outcome', \n-            'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload'\n-        ]\n+        fields = \n"
                },
                {
                    "date": 1733469544758,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,5 +51,5 @@\n \n class CourseWriteSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Course\n-        fields = \n+        fields = '__all__'\n"
                },
                {
                    "date": 1733469644382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -48,8 +48,8 @@\n         model = Course\n         fields = '__all__'\n \n \n-class CourseWriteSerializer(serializers.ModelSerializer):\n+class CourseWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Course\n         fields = '__all__'\n"
                },
                {
                    "date": 1733469651311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n     class Meta:\n         model = Discipline\n         fields = ['id', 'name'] \n \n-class CourseListSerializer(serializers.ModelSerializer):\n+class CourseListSerializers(serializers.ModelSerializer):\n     # Nested serializers for related fields\n     duration = DurationSerializer(read_only=True)\n     faculties = FacultySerializer(read_only=True)\n     level = LevelSerializer(read_only=True)\n@@ -36,9 +36,9 @@\n         model = Course\n         fields = ['__all__']\n \n \n-class CourseRetrieveSerializer(serializers.ModelSerializer):\n+class CourseRetrieveSerializers(serializers.ModelSerializer):\n     # Nested serializers for related fields\n     duration = DurationSerializer(read_only=True)\n     faculties = FacultySerializer(read_only=True)\n     level = LevelSerializer(read_only=True)\n"
                },
                {
                    "date": 1733469699762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n         model = Course\n-        fields = ['__all__']\n+        fields = ['__all__'\n \n \n class CourseRetrieveSerializers(serializers.ModelSerializer):\n     # Nested serializers for related fields\n"
                },
                {
                    "date": 1733469704924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,9 +33,9 @@\n     discipline = DisciplineSerializer(many=True)\n \n     class Meta:\n         model = Course\n-        fields = ['__all__'\n+        fields = '__all__'\n \n \n class CourseRetrieveSerializers(serializers.ModelSerializer):\n     # Nested serializers for related fields\n"
                },
                {
                    "date": 1733469867874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,4 +52,26 @@\n class CourseWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Course\n         fields = '__all__'\n+        \n+        \n+    def create(self, validated_data):\n+        # Pop the many-to-many data\n+        disciplines = validated_data.pop('discipline', [])\n+        course = Course.objects.create(**validated_data)\n+        course.discipline.set(disciplines)\n+        return course\n+    \n+    def update(self, instance, validated_data):\n+        # Pop the many-to-many data\n+        disciplines = validated_data.pop('discipline', None)\n+        \n+        # Update instance fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+        \n+        if disciplines is not None:\n+            instance.discipline.set(disciplines)\n+        \n+        return instance\n"
                },
                {
                    "date": 1733469953872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,10 @@\n from rest_framework import serializers\n from ..models import Duration, Faculty, Level, Discipline, Course\n \n+\n+\n+\n # Serializer for Duration model\n class DurationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Duration\n"
                },
                {
                    "date": 1733469972636,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,38 @@\n from rest_framework import serializers\n from ..models import Duration, Faculty, Level, Discipline, Course\n+import ast\n \n \n+def str_to_list(data, value_to_convert):\n+    \"\"\"\n+    Converts a string representation of a list into an actual list if necessary.\n+    \"\"\"\n+    try:\n+        mutable_data = data.dict() if hasattr(data, 'dict') else data\n+        value_to_convert_data = mutable_data.get(value_to_convert, None)\n+        \n+        # Skip conversion if data is already a list or contains objects\n+        if isinstance(value_to_convert_data, list):\n+            # Check if it's a list of Tags objects; if so, skip conversion\n+            if all(isinstance(item, Tags) for item in value_to_convert_data):\n+                return mutable_data\n+            # If it's a list of IDs or similar, also skip conversion\n+            return mutable_data\n \n+        # Only parse if value is a string\n+        if isinstance(value_to_convert_data, str):\n+            try:\n+                variations = ast.literal_eval(value_to_convert_data)\n+                if isinstance(variations, list):\n+                    mutable_data[value_to_convert] = variations\n+            except (ValueError, SyntaxError) as e:\n+                raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+        return mutable_data\n+    except KeyError:\n+        # Return unchanged data if value_to_convert is not in the data\n+        return data\n+    \n \n # Serializer for Duration model\n class DurationSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1733470160962,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,34 +5,48 @@\n \n def str_to_list(data, value_to_convert):\n     \"\"\"\n     Converts a string representation of a list into an actual list if necessary.\n+    \n+    Args:\n+        data (QueryDict or dict): The incoming data from the request.\n+        value_to_convert (str): The key in the data to convert.\n+    \n+    Returns:\n+        dict: The modified data with the specified key converted to a list if necessary.\n     \"\"\"\n     try:\n-        mutable_data = data.dict() if hasattr(data, 'dict') else data\n+        # Make a mutable copy of data\n+        mutable_data = data.copy() if hasattr(data, 'copy') else dict(data)\n         value_to_convert_data = mutable_data.get(value_to_convert, None)\n         \n-        # Skip conversion if data is already a list or contains objects\n+        # Skip conversion if data is already a list or contains Discipline instances\n         if isinstance(value_to_convert_data, list):\n-            # Check if it's a list of Tags objects; if so, skip conversion\n-            if all(isinstance(item, Tags) for item in value_to_convert_data):\n+            # Check if it's a list of Discipline objects; if so, skip conversion\n+            if all(isinstance(item, Discipline) for item in value_to_convert_data):\n                 return mutable_data\n             # If it's a list of IDs or similar, also skip conversion\n             return mutable_data\n \n         # Only parse if value is a string\n         if isinstance(value_to_convert_data, str):\n             try:\n+                # Attempt to parse as JSON list\n                 variations = ast.literal_eval(value_to_convert_data)\n                 if isinstance(variations, list):\n                     mutable_data[value_to_convert] = variations\n-            except (ValueError, SyntaxError) as e:\n-                raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+                else:\n+                    raise ValidationError({\n+                        value_to_convert: \"Input string does not represent a list.\"\n+                    })\n+            except (ValueError, SyntaxError):\n+                # If not JSON, split by comma\n+                disciplines = [item.strip() for item in value_to_convert_data.split(',') if item.strip()]\n+                mutable_data[value_to_convert] = disciplines\n         return mutable_data\n     except KeyError:\n         # Return unchanged data if value_to_convert is not in the data\n         return data\n-    \n \n # Serializer for Duration model\n class DurationSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1733470172080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n from rest_framework import serializers\n from ..models import Duration, Faculty, Level, Discipline, Course\n import ast\n+from django.core.exceptions import ValidationError\n \n \n def str_to_list(data, value_to_convert):\n     \"\"\"\n@@ -45,8 +46,9 @@\n         return mutable_data\n     except KeyError:\n         # Return unchanged data if value_to_convert is not in the data\n         return data\n+    \n \n # Serializer for Duration model\n class DurationSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1733470196315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,24 +102,5 @@\n         model = Course\n         fields = '__all__'\n         \n         \n-    def create(self, validated_data):\n-        # Pop the many-to-many data\n-        disciplines = validated_data.pop('discipline', [])\n-        course = Course.objects.create(**validated_data)\n-        course.discipline.set(disciplines)\n-        return course\n-    \n-    def update(self, instance, validated_data):\n-        # Pop the many-to-many data\n-        disciplines = validated_data.pop('discipline', None)\n-        \n-        # Update instance fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-        \n-        if disciplines is not None:\n-            instance.discipline.set(disciplines)\n-        \n-        return instance\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1733470203365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,7 +100,45 @@\n class CourseWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Course\n         fields = '__all__'\n+         \n+    def to_internal_value(self, data):\n+        \"\"\"\n\\ No newline at end of file\n+        Override to handle discipline field conversion before standard validation.\n+        \"\"\"\n+        # Use the str_to_list utility function to convert 'discipline' field\n+        data = str_to_list(data, 'discipline')\n+        return super().to_internal_value(data)\n+    \n+    def create(self, validated_data):\n+        \"\"\"\n+        Override the default create method to handle Many-to-Many relationships.\n+        \"\"\"\n+        # Extract 'discipline' data from validated_data\n+        disciplines = validated_data.pop('discipline', [])\n         \n+        # Create the Course instance\n+        course = Course.objects.create(**validated_data)\n         \n-    \n+        # Set the Many-to-Many relationships\n+        course.discipline.set(disciplines)\n+        \n+        return course\n+    \n+    def update(self, instance, validated_data):\n+        \"\"\"\n+        Override the default update method to handle Many-to-Many relationships.\n+        \"\"\"\n+        # Extract 'discipline' data from validated_data, if present\n+        disciplines = validated_data.pop('discipline', None)\n+        \n+        # Update the instance fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+        \n+        if disciplines is not None:\n+            # Update the Many-to-Many relationships\n+            instance.discipline.set(disciplines)\n+        \n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1737955243929,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,45 +100,5 @@\n class CourseWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Course\n         fields = '__all__'\n-         \n-    def to_internal_value(self, data):\n-        \"\"\"\n-        Override to handle discipline field conversion before standard validation.\n-        \"\"\"\n-        # Use the str_to_list utility function to convert 'discipline' field\n-        data = str_to_list(data, 'discipline')\n-        return super().to_internal_value(data)\n-    \n-    def create(self, validated_data):\n-        \"\"\"\n-        Override the default create method to handle Many-to-Many relationships.\n-        \"\"\"\n-        # Extract 'discipline' data from validated_data\n-        disciplines = validated_data.pop('discipline', [])\n-        \n-        # Create the Course instance\n-        course = Course.objects.create(**validated_data)\n-        \n-        # Set the Many-to-Many relationships\n-        course.discipline.set(disciplines)\n-        \n-        return course\n-    \n-    def update(self, instance, validated_data):\n-        \"\"\"\n-        Override the default update method to handle Many-to-Many relationships.\n-        \"\"\"\n-        # Extract 'discipline' data from validated_data, if present\n-        disciplines = validated_data.pop('discipline', None)\n-        \n-        # Update the instance fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-        \n-        if disciplines is not None:\n-            # Update the Many-to-Many relationships\n-            instance.discipline.set(disciplines)\n-        \n-        return instance\n\\ No newline at end of file\n+         \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738141871168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,13 @@\n     class Meta:\n         model = Faculty\n         fields = ['id', 'name']  \n \n-# Serializer for Level modelhttp://0.0.0.0:8004/\n+# Serializer for Level model\n+class LevelSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Level\n+        fields = ['id', 'name']  \n \n # Serializer for Discipline model\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738478646529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,112 @@\n+from rest_framework import serializers\n+from ..models import Duration, Faculty, Level, Discipline, Course,  Affiliation\n+import ast\n+from django.core.exceptions import ValidationError\n+\n+\n+def str_to_list(data, value_to_convert):\n+    \"\"\"\n+    Converts a string representation of a list into an actual list if necessary.\n+    \n+    Args:\n+        data (QueryDict or dict): The incoming data from the request.\n+        value_to_convert (str): The key in the data to convert.\n+    \n+    Returns:\n+        dict: The modified data with the specified key converted to a list if necessary.\n+    \"\"\"\n+    try:\n+        # Make a mutable copy of data\n+        mutable_data = data.copy() if hasattr(data, 'copy') else dict(data)\n+        value_to_convert_data = mutable_data.get(value_to_convert, None)\n+        \n+        # Skip conversion if data is already a list or contains Discipline instances\n+        if isinstance(value_to_convert_data, list):\n+            # Check if it's a list of Discipline objects; if so, skip conversion\n+            if all(isinstance(item, Discipline) for item in value_to_convert_data):\n+                return mutable_data\n+            # If it's a list of IDs or similar, also skip conversion\n+            return mutable_data\n+\n+        # Only parse if value is a string\n+        if isinstance(value_to_convert_data, str):\n+            try:\n+                # Attempt to parse as JSON list\n+                variations = ast.literal_eval(value_to_convert_data)\n+                if isinstance(variations, list):\n+                    mutable_data[value_to_convert] = variations\n+                else:\n+                    raise ValidationError({\n+                        value_to_convert: \"Input string does not represent a list.\"\n+                    })\n+            except (ValueError, SyntaxError):\n+                # If not JSON, split by comma\n+                disciplines = [item.strip() for item in value_to_convert_data.split(',') if item.strip()]\n+                mutable_data[value_to_convert] = disciplines\n+        return mutable_data\n+    except KeyError:\n+        # Return unchanged data if value_to_convert is not in the data\n+        return data\n+    \n+\n+# Serializer for Duration model\n+class DurationSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Duration\n+        fields = ['id', 'name']\n+\n+# Serializer for Faculty model\n+class FacultySerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Faculty\n+        fields = ['id', 'name']  \n+\n+# Serializer for Level model\n+class LevelSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Level\n+        fields = ['id', 'name']  \n+\n+class AffiliationSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Affiliation\n+        ref_name = 'course'\n+        fields = ['id', 'name']  \n+\n+# Serializer for Discipline model\n+class DisciplineSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = Discipline\n+        fields = ['id', 'name'] \n+\n+class CourseListSerializers(serializers.ModelSerializer):\n+    # Nested serializers for related fields\n+    affiliation = AffiliationSerializer(read_only=True)\n+    duration = DurationSerializer(read_only=True)\n+    faculties = FacultySerializer(read_only=True)\n+    level = LevelSerializer(read_only=True)\n+    discipline = DisciplineSerializer(many=True)\n+\n+    class Meta:\n+        model = Course\n+        fields = '__all__'\n+\n+\n+class CourseRetrieveSerializers(serializers.ModelSerializer):\n+    # Nested serializers for related fields\n+    affiliation = AffiliationSerializer(read_only=True)\n+    duration = DurationSerializer(read_only=True)\n+    faculties = FacultySerializer(many=True, read_only=True)\n+    level = LevelSerializer(read_only=True)\n+    discipline = DisciplineSerializer(many=True)\n+\n+    class Meta:\n+        model = Course\n+        fields = '__all__'\n+\n+\n+class CourseWriteSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Course\n+        fields = '__all__'\n+         \n\\ No newline at end of file\n"
                }
            ],
            "date": 1733469089488,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import Course, Duration, Faculty, Level, Discipline\n\nclass CourseListSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for listing courses with a basic representation.\"\"\"\n    \n    # You can choose to represent only the relevant fields for listing\n    # For example, using string representations for related fields\n    duration = serializers.StringRelatedField()\n    faculties = serializers.StringRelatedField()\n    level = serializers.StringRelatedField()\n    discipline = serializers.StringRelatedField(many=True)\n    \n    class Meta:\n        model = Course\n        fields = [\n            'id', 'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'course_shortdescription'\n        ]\n\n\nclass CourseRetrieveSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for retrieving full course details.\"\"\"\n    \n    # Showing full details for related fields (objects)\n    duration = serializers.StringRelatedField()\n    faculties = serializers.StringRelatedField()\n    level = serializers.StringRelatedField()\n    discipline = serializers.StringRelatedField(many=True)\n    \n    class Meta:\n        model = Course\n        fields = '__all__'\n\n\nclass CourseWriteSerializer(serializers.ModelSerializer):\n    \"\"\"Serializer for creating or updating courses.\"\"\"\n    \n    # When writing data, use the IDs for related fields\n    duration = serializers.PrimaryKeyRelatedField(queryset=Duration.objects.all())\n    faculties = serializers.PrimaryKeyRelatedField(queryset=Faculty.objects.all())\n    level = serializers.PrimaryKeyRelatedField(queryset=Level.objects.all())\n    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n    \n    class Meta:\n        model = Course\n        fields = [\n            'name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', \n            'description', 'course_shortdescription', 'course_outcome', \n            'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload'\n        ]\n"
        }
    ]
}