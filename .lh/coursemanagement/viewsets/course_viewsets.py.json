{
    "sourceFile": "coursemanagement/viewsets/course_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 95,
            "patches": [
                {
                    "date": 1733481275577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733481281717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     serializer_class = CourseListSerializers\n     # permission_classes = [coursemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = Course.objects.all().order_by\n+    queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryse\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n"
                },
                {
                    "date": 1733637896988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        return queryse\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n"
                },
                {
                    "date": 1733718495197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,10 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    \n+    \n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718500555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n     \n-    \n+    # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718514472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', ]\n     ordering_fields = ['id']\n     \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1733718527639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,39 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Course\n+from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n+from ..utilities.importbase import *\n+\n+class courseViewsets(viewsets.ModelViewSet):\n+    serializer_class = CourseListSerializers\n+    # permission_classes = [coursemanagementPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    #pagination_class = MyPageNumberPagination\n+    queryset = Course.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date', ]\n+    ordering_fields = ['id']\n+    \n+    # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n+\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    # }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CourseWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CourseRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+\n"
                },
                {
                    "date": 1733718541706,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date', ]\n-    ordering_fields = ['id']\n+    ordering_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date', ]\n     \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n@@ -36,43 +36,4 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Course\n-from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n-from ..utilities.importbase import *\n-\n-class courseViewsets(viewsets.ModelViewSet):\n-    serializer_class = CourseListSerializers\n-    # permission_classes = [coursemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n-    queryset = Course.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', ]\n-    ordering_fields = ['id']\n-    \n-    # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n-\n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CourseWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CourseRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-\n"
                },
                {
                    "date": 1733718549749,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date', ]\n-    ordering_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date', ]\n+    search_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    ordering_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733718557572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n     ordering_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1733718571836,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,14 @@\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718577860,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,14 +19,14 @@\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'name': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718589475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,13 +20,13 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n+        'abbreviation': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718595716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,12 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n+        'duration': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718600906,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,11 +22,11 @@\n         'id': ['exact'],\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n+        'faculties': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718606662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,10 +23,10 @@\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculties': ['exact'],\n+        'level': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718618278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculties': ['exact'],\n         'level': ['exact'],\n-        'id': ['exact'],\n+        'description': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718798287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,10 @@\n         'duration': ['exact'],\n         'faculties': ['exact'],\n         'level': ['exact'],\n         'description': ['exact'],\n+        'course_shortdescription': ['exact'],\n+        'description': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718805079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         'faculties': ['exact'],\n         'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n-        'description': ['exact'],\n+        'course_outcome': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718813374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,8 +27,9 @@\n         'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n+        'course_outcome': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718822717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,11 @@\n         'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n-        'course_outcome': ['exact'],\n+        'eligibility_criteria': ['exact'],\n+        'created_date': ['exact'],\n+        'eligibility_criteria': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718828471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n         'created_date': ['exact'],\n-        'eligibility_criteria': ['exact'],\n+        'updated_date': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718842408,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n-        'created_date': ['exact'],\n+        'created_date': ['exact','get'],\n         'updated_date': ['exact'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733718848214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,9 @@\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n-        'created_date': ['exact','get'],\n+        'created_date': ['exact','gte',],\n         'updated_date': ['exact'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733718853987,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,10 +28,10 @@\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n-        'created_date': ['exact','gte',],\n-        'updated_date': ['exact'],\n+        'created_date': ['exact','gte','lte'],\n+        'updated_date': ['exact',],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733718869691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n         'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact',],\n+        'updated_date': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733729697419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    search_fields = ['id','name', 'abbreviation', , 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1733729705608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', , 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    ordering_fields = ['id','name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1733729715311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', , 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1733729729394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,8 @@\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculties': ['exact'],\n-        'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n"
                },
                {
                    "date": 1733729743404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculties': ['exact'],\n+        'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n"
                },
                {
                    "date": 1733729991005,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculties': ['exact'],\n-        'level': ['exact'],\n+        # 'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n"
                },
                {
                    "date": 1733730261642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculties': ['exact'],\n-        # 'level': ['exact'],\n+        'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n"
                },
                {
                    "date": 1737955357209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'id': ['exact'],\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n-        'faculties': ['exact'],\n+        'facul': ['exact'],\n         'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n"
                },
                {
                    "date": 1737961844224,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     # permission_classes = [coursemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n@@ -22,9 +22,9 @@\n         'id': ['exact'],\n         'name': ['exact'],\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n-        'facul': ['exact'],\n+        'faculty': ['exact'],\n         'level': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n"
                },
                {
                    "date": 1738142029621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,8 +24,9 @@\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculty': ['exact'],\n         'level': ['exact'],\n+        \n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n"
                },
                {
                    "date": 1738142037520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n         'abbreviation': ['exact'],\n         'duration': ['exact'],\n         'faculty': ['exact'],\n         'level': ['exact'],\n-        \n+        'affiliation': ['exact'],\n         'description': ['exact'],\n         'course_shortdescription': ['exact'],\n         'course_outcome': ['exact'],\n         'eligibility_criteria': ['exact'],\n"
                },
                {
                    "date": 1738211966940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     # permission_classes = [coursemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n+    lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n"
                },
                {
                    "date": 1739264400908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n-    # permission_classes = [coursemanagementPermission]\n+    permission_classes = [coursemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n"
                },
                {
                    "date": 1739267408087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,17 +7,17 @@\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [coursemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    \n+    filterclass\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1739267417973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Course\n from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n from ..utilities.importbase import *\n+from ..utilities\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [coursemanagementPermission]\n@@ -15,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    filterclass\n+    filterclass= \n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1739267424111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Course\n from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n from ..utilities.importbase import *\n-from ..utilities\n+from ..utilities.fi\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [coursemanagementPermission]\n"
                },
                {
                    "date": 1739267431276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Course\n from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n from ..utilities.importbase import *\n-from ..utilities.fi\n+from ..utilities.filter import CourseFilter\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [coursemanagementPermission]\n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    filterclass= \n+    filterclass= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n"
                },
                {
                    "date": 1739267436505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,23 +19,23 @@\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     filterclass= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n-    filterset_fields = {\n-        'id': ['exact'],\n-        'name': ['exact'],\n-        'abbreviation': ['exact'],\n-        'duration': ['exact'],\n-        'faculty': ['exact'],\n-        'level': ['exact'],\n-        'affiliation': ['exact'],\n-        'description': ['exact'],\n-        'course_shortdescription': ['exact'],\n-        'course_outcome': ['exact'],\n-        'eligibility_criteria': ['exact'],\n-        'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact','gte','lte'],\n-    }\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    #     'name': ['exact'],\n+    #     'abbreviation': ['exact'],\n+    #     'duration': ['exact'],\n+    #     'faculty': ['exact'],\n+    #     'level': ['exact'],\n+    #     'affiliation': ['exact'],\n+    #     'description': ['exact'],\n+    #     'course_shortdescription': ['exact'],\n+    #     'course_outcome': ['exact'],\n+    #     'eligibility_criteria': ['exact'],\n+    #     'created_date': ['exact','gte','lte'],\n+    #     'updated_date': ['exact','gte','lte'],\n+    # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1739267494100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    filterclass= CourseFilter\n+    filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1739267507388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    filterset_class= CourseFilter\n+    filterclass= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1739267573481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,9 +16,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    filterclass= CourseFilter\n+    filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1739509331367,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from ..utilities.filter import CourseFilter\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n-    permission_classes = [coursemanagementPermission]\n+    permission_classes = [DynamicModelPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n"
                },
                {
                    "date": 1739509342541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n from ..models import Course\n from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n from ..utilities.importbase import *\n from ..utilities.filter import CourseFilter\n+from mainproj.permissions import DynamicModelPermission\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1739702667239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,5 +50,11 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n+    def college_admins(self, request, *args, **kwargs):\n+        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n+        serializer = self.get_serializer(queryset, many=True)\n+        return Response(serializer.data)\n \n"
                },
                {
                    "date": 1739702678370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Course\n+from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n+from ..utilities.importbase import *\n+from ..utilities.filter import CourseFilter\n+from mainproj.permissions import DynamicModelPermission\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+\n+class courseViewsets(viewsets.ModelViewSet):\n+    serializer_class = CourseListSerializers\n+    permission_classes = [DynamicModelPermission]\n+    authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Course.objects.all().order_by('-id')\n+    lookup_field = \"slug\"\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    filterset_class= CourseFilter\n+    # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n+\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    #     'name': ['exact'],\n+    #     'abbreviation': ['exact'],\n+    #     'duration': ['exact'],\n+    #     'faculty': ['exact'],\n+    #     'level': ['exact'],\n+    #     'affiliation': ['exact'],\n+    #     'description': ['exact'],\n+    #     'course_shortdescription': ['exact'],\n+    #     'course_outcome': ['exact'],\n+    #     'eligibility_criteria': ['exact'],\n+    #     'created_date': ['exact','gte','lte'],\n+    #     'updated_date': ['exact','gte','lte'],\n+    # }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CourseWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CourseRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n+    def college_admins(self, request, *args, **kwargs):\n+        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n+        serializer = self.get_serializer(queryset, many=True)\n+        return Response(serializer.data)\n+\n"
                },
                {
                    "date": 1739702698866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,64 +59,4 @@\n         queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n         serializer = self.get_serializer(queryset, many=True)\n         return Response(serializer.data)\n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Course\n-from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n-from ..utilities.importbase import *\n-from ..utilities.filter import CourseFilter\n-from mainproj.permissions import DynamicModelPermission\n-\n-class courseViewsets(viewsets.ModelViewSet):\n-    serializer_class = CourseListSerializers\n-    permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Course.objects.all().order_by('-id')\n-    lookup_field = \"slug\"\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    filterset_class= CourseFilter\n-    # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n-\n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    #     'name': ['exact'],\n-    #     'abbreviation': ['exact'],\n-    #     'duration': ['exact'],\n-    #     'faculty': ['exact'],\n-    #     'level': ['exact'],\n-    #     'affiliation': ['exact'],\n-    #     'description': ['exact'],\n-    #     'course_shortdescription': ['exact'],\n-    #     'course_outcome': ['exact'],\n-    #     'eligibility_criteria': ['exact'],\n-    #     'created_date': ['exact','gte','lte'],\n-    #     'updated_date': ['exact','gte','lte'],\n-    # }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CourseWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CourseRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n-    def college_admins(self, request, *args, **kwargs):\n-        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n-        serializer = self.get_serializer(queryset, many=True)\n-        return Response(serializer.data)\n-\n"
                },
                {
                    "date": 1739702733830,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,10 +53,6 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], name=\"college_admins\", url_path=\"college-admins\")\n-    def college_admins(self, request, *args, **kwargs):\n-        queryset = self.get_queryset().filter(college__isnull=False)  # Filter users with assigned college\n-        serializer = self.get_serializer(queryset, many=True)\n-        return Response(serializer.data)\n+    \n \n"
                },
                {
                    "date": 1739702743409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,8 +51,6 @@\n         return super().get_serializer_class()\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    \n+    #     return super().list(request, *args, **kwargs)   \n \n"
                },
                {
                    "date": 1739705670913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,56 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import Course\n+from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n+from ..utilities.importbase import *\n+from ..utilities.filter import CourseFilter\n+from mainproj.permissions import DynamicModelPermission\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+\n+class courseViewsets(viewsets.ModelViewSet):\n+    serializer_class = CourseListSerializers\n+    permission_classes = [DynamicModelPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = Course.objects.all().order_by('-id')\n+    lookup_field = \"slug\"\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    filterset_class= CourseFilter\n+    # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n+\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    #     'name': ['exact'],\n+    #     'abbreviation': ['exact'],\n+    #     'duration': ['exact'],\n+    #     'faculty': ['exact'],\n+    #     'level': ['exact'],\n+    #     'affiliation': ['exact'],\n+    #     'description': ['exact'],\n+    #     'course_shortdescription': ['exact'],\n+    #     'course_outcome': ['exact'],\n+    #     'eligibility_criteria': ['exact'],\n+    #     'created_date': ['exact','gte','lte'],\n+    #     'updated_date': ['exact','gte','lte'],\n+    # }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CourseWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CourseRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)   \n+\n"
                },
                {
                    "date": 1741071764457,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,8 +37,18 @@\n     #     'eligibility_criteria': ['exact'],\n     #     'created_date': ['exact','gte','lte'],\n     #     'updated_date': ['exact','gte','lte'],\n     # }\n+    \n+        def get_object(self):\n+        \"\"\"\n+        Override get_object to allow lookup by either 'id' or 'slug'.\n+        \"\"\"\n+        queryset = self.get_queryset()\n+        lookup_value = self.kwargs.get(self.lookup_field)  # Get lookup value from URL\n+        if lookup_value.isdigit():  # Check if lookup_value is numeric (ID)\n+            return get_object_or_404(queryset, id=int(lookup_value))\n+        return get_object_or_404(queryset, slug=lookup_value)  # Otherwise, lookup by slug\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n@@ -53,60 +63,4 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)   \n \n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import Course\n-from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n-from ..utilities.importbase import *\n-from ..utilities.filter import CourseFilter\n-from mainproj.permissions import DynamicModelPermission\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-\n-class courseViewsets(viewsets.ModelViewSet):\n-    serializer_class = CourseListSerializers\n-    permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = Course.objects.all().order_by('-id')\n-    lookup_field = \"slug\"\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n-    filterset_class= CourseFilter\n-    # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n-\n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    #     'name': ['exact'],\n-    #     'abbreviation': ['exact'],\n-    #     'duration': ['exact'],\n-    #     'faculty': ['exact'],\n-    #     'level': ['exact'],\n-    #     'affiliation': ['exact'],\n-    #     'description': ['exact'],\n-    #     'course_shortdescription': ['exact'],\n-    #     'course_outcome': ['exact'],\n-    #     'eligibility_criteria': ['exact'],\n-    #     'created_date': ['exact','gte','lte'],\n-    #     'updated_date': ['exact','gte','lte'],\n-    # }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CourseWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CourseRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)   \n-\n"
                },
                {
                    "date": 1741071769966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n     #     'created_date': ['exact','gte','lte'],\n     #     'updated_date': ['exact','gte','lte'],\n     # }\n     \n-        def get_object(self):\n+    def get_object(self):\n         \"\"\"\n         Override get_object to allow lookup by either 'id' or 'slug'.\n         \"\"\"\n         queryset = self.get_queryset()\n"
                },
                {
                    "date": 1741071858551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n from ..utilities.importbase import *\n from ..utilities.filter import CourseFilter\n from mainproj.permissions import DynamicModelPermission\n from rest_framework.decorators import action\n+from django.shortcuts import get_object_or_404\n+\n from rest_framework.response import Response\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n"
                },
                {
                    "date": 1745849272658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    search_fields = ['id','name', 'abbreviation' ]\n     ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1745849283132,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation' ]\n-    ordering_fields = ['id','name', 'abbreviation', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'created_date', 'updated_date' ]\n+    ordering_fields = ['id','name', 'abbreviation',  'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1745849289907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'abbreviation' ]\n-    ordering_fields = ['id','name', 'abbreviation',  'created_date', 'updated_date' ]\n+    ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1745849308449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation' ]\n+    search_fields = ['id','name', 'abbreviation', ]\n     ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1745901967622,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation', ]\n+    search_fields = ['id','name', 'abbreviation','slug','' ]\n     ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1745901981017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation','slug','' ]\n+    search_fields = ['id','name', 'abbreviation','slug','disci' ]\n     ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1745901989642,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation','slug','disci' ]\n+    search_fields = ['id','name', 'abbreviation','slug','discipline__name', 'level__name', 'created_date', 'updated_date']\n     ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1745901995478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation','slug','discipline__name', 'level__name', 'created_date', 'updated_date']\n+    search_fields = ['id','name', 'abbreviation','slug','discipline__name', 'level__name', ]\n     ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1745902006152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     queryset = Course.objects.all().order_by('-id')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation','slug','discipline__name', 'level__name', ]\n+    search_fields = ['id','name', 'abbreviation','slug','discipline__name', 'level__name', 'affiliation']\n     ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1746096722353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,13 +15,13 @@\n     serializer_class = CourseListSerializers\n     permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    queryset = Course.objects.all().order_by('-id')\n+    queryset = Course.objects.all().order_by('-updated_date')\n     lookup_field = \"slug\"\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'abbreviation','slug','discipline__name', 'level__name', 'affiliation']\n+    search_fields = ['id','name', 'abbreviation','slug','discipline__name', 'level__name', 'affiliation__name', 'faculty__name']\n     ordering_fields = ['id','name', 'abbreviation' ,'created_date', 'updated_date' ]\n     filterset_class= CourseFilter\n     # ('name', 'abbreviation', 'duration', 'faculties', 'level', 'discipline', 'description', 'course_shortdescription', 'course_outcome', 'course_curriculum', 'eligibility_criteria', 'image', 'curriculum_file_upload', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1746427571443,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,8 +60,10 @@\n             return CourseWriteSerializers\n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n+    \n+    \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)   \n"
                },
                {
                    "date": 1746427578609,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,11 +60,13 @@\n             return CourseWriteSerializers\n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n-    \n-    \n+    @method_decorator(cache_page(cache_time,key_prefix=\"ModelName\"))\n \n+    def list(self, request, *args, **kwargs):\n+        return super().list(request, *args, **kwargs)\n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)   \n \n"
                },
                {
                    "date": 1746427585371,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,9 @@\n             return CourseWriteSerializers\n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n-    @method_decorator(cache_page(cache_time,key_prefix=\"ModelName\"))\n-\n+    @method_decorator(cache_page(cache_time,key_prefix=\"\"))\n     def list(self, request, *args, **kwargs):\n         return super().list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1746427601800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,13 @@\n from django.shortcuts import get_object_or_404\n \n from rest_framework.response import Response\n \n+from django.views.decorators.cache import cache_page\n+from django.utils.decorators import method_decorator\n+from django.core.cache import cache\n+cache_time = 900 # 300 is 5 minute\n+\n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n@@ -60,9 +65,9 @@\n             return CourseWriteSerializers\n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n-    @method_decorator(cache_page(cache_time,key_prefix=\"\"))\n+    @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n     def list(self, request, *args, **kwargs):\n         return super().list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1746427663651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n \n from django.views.decorators.cache import cache_page\n from django.utils.decorators import method_decorator\n from django.core.cache import cache\n+\n cache_time = 900 # 300 is 5 minute\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n@@ -62,8 +63,9 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n+        \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n"
                },
                {
                    "date": 1746427678432,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        \n+        if request.\n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n"
                },
                {
                    "date": 1746427688245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        if request.\n+        if request.user\n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n"
                },
                {
                    "date": 1746427710679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,10 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        if request.user\n+        if request.user.isAuthenticated:\n+            \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n"
                },
                {
                    "date": 1746427719486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        if request.user.isAuthenticated:\n+        if request.user.isAuthenticated and :\n             \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n"
                },
                {
                    "date": 1746427726167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        if request.user.isAuthenticated and :\n+        if request.user.isAuthenticated and self.act:\n             \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n"
                },
                {
                    "date": 1746427732789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,10 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        if request.user.isAuthenticated and self.act:\n+        if request.user.isAuthenticated and self.action == 'list':\n+            return CourseListAdminSerializers\n             \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n"
                },
                {
                    "date": 1746427739338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Course\n-from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\n+from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers,Cour\n from ..utilities.importbase import *\n from ..utilities.filter import CourseFilter\n from mainproj.permissions import DynamicModelPermission\n from rest_framework.decorators import action\n"
                },
                {
                    "date": 1746427750693,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import Course\n-from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers,Cour\n+from ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers,CourseListAdminSerializers\n from ..utilities.importbase import *\n from ..utilities.filter import CourseFilter\n from mainproj.permissions import DynamicModelPermission\n from rest_framework.decorators import action\n@@ -63,9 +63,9 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        if request.user.isAuthenticated and self.action == 'list':\n+        if self.request.user.isAuthenticated and self.action == 'list':\n             return CourseListAdminSerializers\n             \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n"
                },
                {
                    "date": 1746427820431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,10 +63,8 @@\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CourseWriteSerializers\n-        if self.request.user.isAuthenticated and self.action == 'list':\n-            return CourseListAdminSerializers\n             \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n"
                },
                {
                    "date": 1746428414411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,16 +62,24 @@\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n-            return CourseWriteSerializers\n-            \n+            return CourseWriteSerializers    \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n-    @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n     def list(self, request, *args, **kwargs):\n-        return super().list(request, *args, **kwargs)\n+        # Check if user is authenticated\n+        if request.user.is_authenticated:\n+            # No caching for authenticated users\n+            return super().list(request, *args, **kwargs)\n+        else:\n+            # Apply caching for unauthenticated users\n+            @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n+            def cached_list(request, *args, **kwargs):\n+                return super(courseViewsets, self).list(request, *args, **kwargs)\n+            \n+            return cached_list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)   \n"
                },
                {
                    "date": 1746428706067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,8 +66,9 @@\n             return CourseWriteSerializers    \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n+    \n     def list(self, request, *args, **kwargs):\n         # Check if user is authenticated\n         if request.user.is_authenticated:\n             # No caching for authenticated users\n@@ -75,9 +76,9 @@\n         else:\n             # Apply caching for unauthenticated users\n             @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n             def cached_list(request, *args, **kwargs):\n-                return super(courseViewsets, self).list(request, *args, **kwargs)\n+                return super().list(request, *args, **kwargs)\n             \n             return cached_list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1746428739960,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,20 +67,20 @@\n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    def list(self, request, *args, **kwargs):\n-        # Check if user is authenticated\n-        if request.user.is_authenticated:\n-            # No caching for authenticated users\n-            return super().list(request, *args, **kwargs)\n-        else:\n-            # Apply caching for unauthenticated users\n-            @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n-            def cached_list(request, *args, **kwargs):\n-                return super().list(request, *args, **kwargs)\n+    # def list(self, request, *args, **kwargs):\n+    #     # Check if user is authenticated\n+    #     if request.user.is_authenticated:\n+    #         # No caching for authenticated users\n+    #         return super().list(request, *args, **kwargs)\n+    #     else:\n+    #         # Apply caching for unauthenticated users\n+    #         @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n+    #         def cached_list(request, *args, **kwargs):\n+    #             return super().list(request, *args, **kwargs)\n             \n-            return cached_list(request, *args, **kwargs)\n+    #         return cached_list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)   \n"
                },
                {
                    "date": 1746428745091,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,21 +66,11 @@\n             return CourseWriteSerializers    \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n-    \n-    # def list(self, request, *args, **kwargs):\n-    #     # Check if user is authenticated\n-    #     if request.user.is_authenticated:\n-    #         # No caching for authenticated users\n-    #         return super().list(request, *args, **kwargs)\n-    #     else:\n-    #         # Apply caching for unauthenticated users\n-    #         @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n-    #         def cached_list(request, *args, **kwargs):\n-    #             return super().list(request, *args, **kwargs)\n-            \n-    #         return cached_list(request, *args, **kwargs)\n+    @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n+    def list(self, request, *args, **kwargs):\n+        return super().list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)   \n"
                },
                {
                    "date": 1746428759511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,8 +68,9 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n     def list(self, request, *args, **kwargs):\n+        print()\n         return super().list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1746428770315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n     def list(self, request, *args, **kwargs):\n-        print()\n+        print(\"using without cache\")\n         return super().list(request, *args, **kwargs)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1746434158963,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -16,8 +16,28 @@\n from django.core.cache import cache\n \n cache_time = 900 # 300 is 5 minute\n \n+from functools import wraps\n+from rest_framework import viewsets\n+\n+def conditional_cache(cache_time, key_prefix):\n+    \"\"\"\n+    Apply cache_page decorator only if user is not authenticated.\n+    \"\"\"\n+    def decorator(view_func):\n+        @wraps(view_func)\n+        def _wrapped_view(self, request, *args, **kwargs):\n+            if not request.user.is_authenticated:\n+                # User is not authenticated, apply caching\n+                cached_view = method_decorator(cache_page(cache_time, key_prefix=key_prefix))(type(self).list)\n+                return cached_view(self, request, *args, **kwargs)\n+            else:\n+                # User is authenticated, don't use cache\n+                return view_func(self, request, *args, **kwargs)\n+        return _wrapped_view\n+    return decorator\n+\n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n@@ -66,13 +86,18 @@\n             return CourseWriteSerializers    \n         elif self.action == 'retrieve':\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n-    @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n+    \n+    # @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n+     @method_decorator(conditional_cache(cache_time=900, key_prefix=\"Course\"))\n     def list(self, request, *args, **kwargs):\n-        print(\"using without cache\")\n+        print(\"Using without cache for authenticated users\")\n         return super().list(request, *args, **kwargs)\n+    \n \n+    \n+\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)   \n \n"
                },
                {
                    "date": 1746434167913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,13 +88,12 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     \n     # @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n-     @method_decorator(conditional_cache(cache_time=900, key_prefix=\"Course\"))\n+    @conditional_cache(cache_time=cache_time, key_prefix=\"Course\")  # Cache for 15 minutes\n     def list(self, request, *args, **kwargs):\n-        print(\"Using without cache for authenticated users\")\n+        print(\"using without cache\")\n         return super().list(request, *args, **kwargs)\n-    \n \n     \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1746434484986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,15 +88,22 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     \n     # @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n-    @conditional_cache(cache_time=cache_time, key_prefix=\"Course\")  # Cache for 15 minutes\n-    def list(self, request, *args, **kwargs):\n+        def _list(self, request, *args, **kwargs):\n+        \"\"\"Actual list implementation that gets cached or called directly\"\"\"\n         print(\"using without cache\")\n         return super().list(request, *args, **kwargs)\n \n-    \n+    @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n+    def _cached_list(self, request, *args, **kwargs):\n+        \"\"\"Cached version of list\"\"\"\n+        return self._list(request, *args, **kwargs)\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)   \n-\n+    def list(self, request, *args, **kwargs):\n+        \"\"\"\n+        Conditional caching - use cached version for anonymous users,\n+        regular version for authenticated users.\n+        \"\"\"\n+        if not request.user.is_authenticated:\n+            return self._cached_list(request, *args, **kwargs)\n+        return self._list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1746434505030,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,22 +88,15 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     \n     # @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n-        def _list(self, request, *args, **kwargs):\n-        \"\"\"Actual list implementation that gets cached or called directly\"\"\"\n+    @conditional_cache(cache_time=cache_time, key_prefix=\"Course\")  # Cache for 15 minutes\n+    def list(self, request, *args, **kwargs):\n         print(\"using without cache\")\n         return super().list(request, *args, **kwargs)\n \n-    @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n-    def _cached_list(self, request, *args, **kwargs):\n-        \"\"\"Cached version of list\"\"\"\n-        return self._list(request, *args, **kwargs)\n+    \n \n-    def list(self, request, *args, **kwargs):\n-        \"\"\"\n-        Conditional caching - use cached version for anonymous users,\n-        regular version for authenticated users.\n-        \"\"\"\n-        if not request.user.is_authenticated:\n-            return self._cached_list(request, *args, **kwargs)\n-        return self._list(request, *args, **kwargs)\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)   \n+\n"
                },
                {
                    "date": 1746434522935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,24 +19,24 @@\n \n from functools import wraps\n from rest_framework import viewsets\n \n-def conditional_cache(cache_time, key_prefix):\n-    \"\"\"\n-    Apply cache_page decorator only if user is not authenticated.\n-    \"\"\"\n-    def decorator(view_func):\n-        @wraps(view_func)\n-        def _wrapped_view(self, request, *args, **kwargs):\n-            if not request.user.is_authenticated:\n-                # User is not authenticated, apply caching\n-                cached_view = method_decorator(cache_page(cache_time, key_prefix=key_prefix))(type(self).list)\n-                return cached_view(self, request, *args, **kwargs)\n-            else:\n-                # User is authenticated, don't use cache\n-                return view_func(self, request, *args, **kwargs)\n-        return _wrapped_view\n-    return decorator\n+# def conditional_cache(cache_time, key_prefix):\n+#     \"\"\"\n+#     Apply cache_page decorator only if user is not authenticated.\n+#     \"\"\"\n+#     def decorator(view_func):\n+#         @wraps(view_func)\n+#         def _wrapped_view(self, request, *args, **kwargs):\n+#             if not request.user.is_authenticated:\n+#                 # User is not authenticated, apply caching\n+#                 cached_view = method_decorator(cache_page(cache_time, key_prefix=key_prefix))(type(self).list)\n+#                 return cached_view(self, request, *args, **kwargs)\n+#             else:\n+#                 # User is authenticated, don't use cache\n+#                 return view_func(self, request, *args, **kwargs)\n+#         return _wrapped_view\n+#     return decorator\n \n class courseViewsets(viewsets.ModelViewSet):\n     serializer_class = CourseListSerializers\n     permission_classes = [DynamicModelPermission]\n@@ -88,15 +88,22 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     \n     # @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n-    @conditional_cache(cache_time=cache_time, key_prefix=\"Course\")  # Cache for 15 minutes\n-    def list(self, request, *args, **kwargs):\n+        def _list(self, request, *args, **kwargs):\n+        \"\"\"Actual list implementation that gets cached or called directly\"\"\"\n         print(\"using without cache\")\n         return super().list(request, *args, **kwargs)\n \n-    \n+    @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n+    def _cached_list(self, request, *args, **kwargs):\n+        \"\"\"Cached version of list\"\"\"\n+        return self._list(request, *args, **kwargs)\n \n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)   \n-\n+    def list(self, request, *args, **kwargs):\n+        \"\"\"\n+        Conditional caching - use cached version for anonymous users,\n+        regular version for authenticated users.\n+        \"\"\"\n+        if not request.user.is_authenticated:\n+            return self._cached_list(request, *args, **kwargs)\n+        return self._list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1746434546690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     \n     # @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n-        def _list(self, request, *args, **kwargs):\n+    def _list(self, request, *args, **kwargs):\n         \"\"\"Actual list implementation that gets cached or called directly\"\"\"\n         print(\"using without cache\")\n         return super().list(request, *args, **kwargs)\n \n"
                },
                {
                    "date": 1746434737247,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,22 +88,35 @@\n             return CourseRetrieveSerializers\n         return super().get_serializer_class()\n     \n     # @method_decorator(cache_page(cache_time,key_prefix=\"Course\"))\n+   # List action caching\n     def _list(self, request, *args, **kwargs):\n-        \"\"\"Actual list implementation that gets cached or called directly\"\"\"\n-        print(\"using without cache\")\n+        \"\"\"Actual list implementation\"\"\"\n+        print(\"List - uncached version\")\n         return super().list(request, *args, **kwargs)\n \n-    @method_decorator(cache_page(cache_time, key_prefix=\"Course\"))\n+    @method_decorator(cache_page(cache_time, key_prefix=\"CourseList\"))\n     def _cached_list(self, request, *args, **kwargs):\n         \"\"\"Cached version of list\"\"\"\n         return self._list(request, *args, **kwargs)\n \n     def list(self, request, *args, **kwargs):\n-        \"\"\"\n-        Conditional caching - use cached version for anonymous users,\n-        regular version for authenticated users.\n-        \"\"\"\n         if not request.user.is_authenticated:\n             return self._cached_list(request, *args, **kwargs)\n         return self._list(request, *args, **kwargs)\n+\n+    # Retrieve action caching\n+    def _retrieve(self, request, *args, **kwargs):\n+        \"\"\"Actual retrieve implementation\"\"\"\n+        print(\"Retrieve - uncached version\")\n+        return super().retrieve(request, *args, **kwargs)\n+\n+    @method_decorator(cache_page(cache_time, key_prefix=\"CourseRetrieve\"))\n+    def _cached_retrieve(self, request, *args, **kwargs):\n+        \"\"\"Cached version of retrieve\"\"\"\n+        return self._retrieve(request, *args, **kwargs)\n+\n+    def retrieve(self, request, *args, **kwargs):\n+        if not request.user.is_authenticated:\n+            return self._cached_retrieve(request, *args, **kwargs)\n+        return self._retrieve(request, *args, **kwargs)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746434987524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n from django.views.decorators.cache import cache_page\n from django.utils.decorators import method_decorator\n from django.core.cache import cache\n \n-cache_time = 900 # 300 is 5 minute\n+cache_time = 1800 # 300 is 5 minute\n \n from functools import wraps\n from rest_framework import viewsets\n \n"
                }
            ],
            "date": 1733481275577,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import Course\nfrom ..serializers.course_serializers import CourseListSerializers, CourseRetrieveSerializers, CourseWriteSerializers\nfrom ..utilities.importbase import *\n\nclass courseViewsets(viewsets.ModelViewSet):\n    serializer_class = CourseListSerializers\n    # permission_classes = [coursemanagementPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = Course.objects.all().order_by\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return CourseWriteSerializers\n        elif self.action == 'retrieve':\n            return CourseRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}