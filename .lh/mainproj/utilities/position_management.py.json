{
    "sourceFile": "mainproj/utilities/position_management.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1733737084641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733737090299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n class PositionManagementViewSet(viewsets.ViewSet):\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n-        'meet-team':('components','MeetTeam'),\n+        # 'meet-team':('components','MeetTeam'),\n         # 'faqs':('components','Faqs'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n"
                },
                {
                    "date": 1733737098907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        # 'faqs':('components','Faqs'),\n+        'faqs':('components','Faqs'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1733820634289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        'faqs':('components','Faqs'),\n+        'duration':('components','Faqs'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1733820642845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        'duration':('components','Faqs'),\n+        'duration':('duration','duration'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1733820648765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        'duration':('duration','duration'),\n+        'duration':('duration','Duration'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069758301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n+        \n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069768010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n from django.apps import apps\n from django.db import transaction\n from django.db.models import F, Max,Min\n from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n+from drf_yasg import openap\n \n class PositionManagementViewSet(viewsets.ViewSet):\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n-        \n+        ''\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069774388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n from django.apps import apps\n from django.db import transaction\n from django.db.models import F, Max,Min\n from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openap\n+from drf_yasg import openapi\n \n class PositionManagementViewSet(viewsets.ViewSet):\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n-        ''\n+        'event'\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069780873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n-        'event'\n+        'event-gallery':('eventmanagement','EventGallery'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069786342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n         'event-gallery':('eventmanagement','EventGallery'),\n+        'event':('eventmanagement','Event'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                }
            ],
            "date": 1733737084641,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom django.apps import apps\nfrom django.db import transaction\nfrom django.db.models import F, Max,Min\nfrom drf_yasg.utils import swagger_auto_schema\nfrom drf_yasg import openapi\n\nclass PositionManagementViewSet(viewsets.ViewSet):\n\n    # Mapping of frontend identifiers to actual model names\n    MODEL_MAP = {\n        'meet-team':('components','MeetTeam'),\n        # 'faqs':('components','Faqs'),\n        # 'gallery': ('gallery', 'Gallery'),\n        # 'gallery-group': ('gallery', 'GalleryGroup'),\n        # 'quotation': ('quotationmanagement', 'Quotation'),\n        # 'booking': ('bookingmanagement', 'BookingService'),\n        # 'service-category': ('service_category_management', 'Category'),\n        # 'service': ('servicemanagement', 'Service'),\n        # 'blog': ('blog', 'Blog'),\n        # 'customer-inquiry': ('customerinquiries', 'CustomerInquiries'),\n        # 'branch': ('branchdetails', 'Branch'),\n        # 'review': ('review', 'Review'),\n    }\n\n    BREATH_HOLD = 10  # Maximum distance for small moves\n\n    def _get_model(self, model_key):\n        \"\"\"\n        Retrieve model class based on model key.\n        \"\"\"\n        model_info = self.MODEL_MAP.get(model_key)\n        if model_info:\n            app_label, model_name = model_info\n            try:\n                return apps.get_model(app_label, model_name)\n            except LookupError:\n                return None\n        return None\n\n    @action(detail=False, methods=['get'], url_path='drag-item')\n    def draggable(self, request, *args, **kwargs):\n        model_name = request.GET.get('model')\n        target_position = request.GET.get('target')\n        goal_position = request.GET.get('goal')\n        breath_hold = self.BREATH_HOLD\n\n        if not model_name or target_position is None or goal_position is None:\n            return Response({\"error\": \"Model name, target, or goal position not provided\"}, status=400)\n\n        # Load the model\n        Model = self._get_model(model_name)\n        if Model is None:\n            return Response({\"error\": f\"Model '{model_name}' not found\"}, status=400)\n\n        # Convert positions to integers\n        try:\n            target_position = int(target_position)\n            goal_position = int(goal_position)\n        except ValueError:\n            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n\n        # Fetch the target object\n        try:\n            target_obj = Model.objects.get(position=target_position)\n        except Model.DoesNotExist:\n            return Response({\"error\": \"Target object not found\"}, status=400)\n\n        # Validate goal position range\n        current_positions = Model.objects.values_list('position', flat=True)\n        if goal_position not in current_positions and goal_position != 0:  # Allow moving to position 0\n            return Response({\"error\": \"Goal position is out of bounds\"}, status=400)\n\n        # Calculate move distance and choose strategy\n        distance = abs(goal_position - target_position)\n\n        if distance <= breath_hold:\n            return self._small_move_strategy(Model, target_obj, target_position, goal_position)\n        elif target_position == 0:  # Already at the front\n            return self._back_move_strategy(Model, target_obj, target_position, goal_position)\n        elif target_position == max(current_positions):  # Already at the end\n            return self._front_move_strategy(Model, target_obj, target_position, goal_position)\n        else:\n            return self._big_jump_strategy(Model, target_obj, target_position, goal_position)\n\n    def _small_move_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                if target_position < goal_position:\n                    # Moving down\n                    Model.objects.filter(position__gt=target_position, position__lte=goal_position).update(position=F('position') - 1)\n                else:\n                    # Moving up\n                    Model.objects.filter(position__lt=target_position, position__gte=goal_position).update(position=F('position') + 1)\n\n                target_obj.position = goal_position\n                target_obj.save()\n\n            return Response({\"status\": \"success\", \"message\": \"Position updated successfully.\"})\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n\n    def _front_move_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                # Adjust positions of all items above the goal position\n                Model.objects.filter(position__lt=target_position).update(position=F('position') + 1)\n                \n                # Instead of setting to 0, assign the next available position\n                # Find the minimum position in the model\n                min_position = Model.objects.aggregate(min_pos=Min('position'))['min_pos'] or 0\n                \n                # Set the target object's position to one less than the current minimum\n                target_obj.position = min_position - 1 if min_position > 0 else 0\n                target_obj.save()\n\n            return Response({\"status\": \"success\", \"message\": \"Position updated successfully.\"})\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n\n\n    def _back_move_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                # Move the target object to the end (max_position + 1)\n                max_position = Model.objects.aggregate(max_pos=Max('position'))['max_pos'] or 0\n                target_obj.position = max_position + 1\n                target_obj.save()\n\n            return Response({\"status\": \"success\", \"message\": \"Position updated successfully.\"})\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n\n    def _big_jump_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                if goal_position > target_position:\n                    # Moving down (to a higher position)\n                    Model.objects.filter(position__gt=target_position, position__lt=goal_position).update(position=F('position') - 1)\n                else:\n                    # Moving up (to a lower position)\n                    Model.objects.filter(position__lt=target_position, position__gte=goal_position).update(position=F('position') + 1)\n\n                # Set the target object's position to the goal position with a decimal\n                target_obj.position = goal_position + 0.5  # Use a decimal position\n                target_obj.save()\n\n            return Response({\n                \"status\": \"success\",\n                \"message\": \"Position updated successfully.\",\n                \"new_position\": target_obj.position  # Return the decimal position\n            })\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n"
        }
    ]
}