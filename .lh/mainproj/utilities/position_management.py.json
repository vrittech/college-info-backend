{
    "sourceFile": "mainproj/utilities/position_management.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1733737084641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733737090299,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n class PositionManagementViewSet(viewsets.ViewSet):\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n-        'meet-team':('components','MeetTeam'),\n+        # 'meet-team':('components','MeetTeam'),\n         # 'faqs':('components','Faqs'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n"
                },
                {
                    "date": 1733737098907,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        # 'faqs':('components','Faqs'),\n+        'faqs':('components','Faqs'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1733820634289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        'faqs':('components','Faqs'),\n+        'duration':('components','Faqs'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1733820642845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        'duration':('components','Faqs'),\n+        'duration':('duration','duration'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1733820648765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n-        'duration':('duration','duration'),\n+        'duration':('duration','Duration'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069758301,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n+        \n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069768010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n from django.apps import apps\n from django.db import transaction\n from django.db.models import F, Max,Min\n from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openapi\n+from drf_yasg import openap\n \n class PositionManagementViewSet(viewsets.ViewSet):\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n-        \n+        ''\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069774388,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,17 +4,17 @@\n from django.apps import apps\n from django.db import transaction\n from django.db.models import F, Max,Min\n from drf_yasg.utils import swagger_auto_schema\n-from drf_yasg import openap\n+from drf_yasg import openapi\n \n class PositionManagementViewSet(viewsets.ViewSet):\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n-        ''\n+        'event'\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069780873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n-        'event'\n+        'event-gallery':('eventmanagement','EventGallery'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741069786342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n         'event-gallery':('eventmanagement','EventGallery'),\n+        'event':('eventmanagement','Event'),\n         # 'gallery': ('gallery', 'Gallery'),\n         # 'gallery-group': ('gallery', 'GalleryGroup'),\n         # 'quotation': ('quotationmanagement', 'Quotation'),\n         # 'booking': ('bookingmanagement', 'BookingService'),\n"
                },
                {
                    "date": 1741079304101,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,110 @@\n                 return apps.get_model(app_label, model_name)\n             except LookupError:\n                 return None\n         return None\n+    \n+    openapi: 3.0.0\n+info:\n+  title: Draggable Items API\n+  description: API for managing draggable items within a model.\n+  version: 1.0.0\n \n+paths:\n+  /drag-item/:\n+    get:\n+      summary: Move an item to a new position\n+      parameters:\n+        - name: model\n+          in: query\n+          required: true\n+          schema:\n+            type: string\n+        - name: target\n+          in: query\n+          required: true\n+          schema:\n+            type: integer\n+        - name: goal\n+          in: query\n+          required: true\n+          schema:\n+            type: integer\n+      responses:\n+        \"200\":\n+          description: Item moved successfully\n+        \"400\":\n+          description: Invalid request\n+        \"404\":\n+          description: Item not found\n+      tags:\n+        - Drag Item\n+\n+  /{model}/:\n+    get:\n+      summary: List all items\n+      parameters:\n+        - name: model\n+          in: path\n+          required: true\n+          schema:\n+            type: string\n+      responses:\n+        \"200\":\n+          description: List of items\n+        \"400\":\n+          description: Invalid model\n+      tags:\n+        - Items\n+\n+  /{model}/{id}/:\n+    get:\n+      summary: Retrieve an item\n+      parameters:\n+        - name: id\n+          in: path\n+          required: true\n+          schema:\n+            type: integer\n+      responses:\n+        \"200\":\n+          description: Item details\n+        \"404\":\n+          description: Item not found\n+      tags:\n+        - Items\n+\n+    put:\n+      summary: Update an item\n+      requestBody:\n+        content:\n+          application/json:\n+            schema:\n+              type: object\n+              properties:\n+                position:\n+                  type: integer\n+      responses:\n+        \"200\":\n+          description: Item updated\n+        \"400\":\n+          description: Invalid data\n+        \"404\":\n+          description: Item not found\n+      tags:\n+        - Items\n+\n+    delete:\n+      summary: Delete an item\n+      responses:\n+        \"204\":\n+          description: Item deleted\n+        \"404\":\n+          description: Item not found\n+      tags:\n+        - Items\n+\n+\n     @action(detail=False, methods=['get'], url_path='drag-item')\n     def draggable(self, request, *args, **kwargs):\n         model_name = request.GET.get('model')\n         target_position = request.GET.get('target')\n"
                },
                {
                    "date": 1741079356733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,24 @@\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n class PositionManagementViewSet(viewsets.ViewSet):\n+    \n+    @swagger_auto_schema(\n+        method='get',\n+        operation_summary=\"Move an item to a new position\",\n+        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n+        manual_parameters=[\n+            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n+            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n+            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n+        ],\n+        responses={\n+            200: openapi.Response(\"Item moved successfully\"),\n+            400: openapi.Response(\"Invalid request\"),\n+            404: openapi.Response(\"Target object not found\"),\n+        }\n+    )\n \n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n@@ -41,109 +57,10 @@\n             except LookupError:\n                 return None\n         return None\n     \n-    openapi: 3.0.0\n-info:\n-  title: Draggable Items API\n-  description: API for managing draggable items within a model.\n-  version: 1.0.0\n+    \n \n-paths:\n-  /drag-item/:\n-    get:\n-      summary: Move an item to a new position\n-      parameters:\n-        - name: model\n-          in: query\n-          required: true\n-          schema:\n-            type: string\n-        - name: target\n-          in: query\n-          required: true\n-          schema:\n-            type: integer\n-        - name: goal\n-          in: query\n-          required: true\n-          schema:\n-            type: integer\n-      responses:\n-        \"200\":\n-          description: Item moved successfully\n-        \"400\":\n-          description: Invalid request\n-        \"404\":\n-          description: Item not found\n-      tags:\n-        - Drag Item\n-\n-  /{model}/:\n-    get:\n-      summary: List all items\n-      parameters:\n-        - name: model\n-          in: path\n-          required: true\n-          schema:\n-            type: string\n-      responses:\n-        \"200\":\n-          description: List of items\n-        \"400\":\n-          description: Invalid model\n-      tags:\n-        - Items\n-\n-  /{model}/{id}/:\n-    get:\n-      summary: Retrieve an item\n-      parameters:\n-        - name: id\n-          in: path\n-          required: true\n-          schema:\n-            type: integer\n-      responses:\n-        \"200\":\n-          description: Item details\n-        \"404\":\n-          description: Item not found\n-      tags:\n-        - Items\n-\n-    put:\n-      summary: Update an item\n-      requestBody:\n-        content:\n-          application/json:\n-            schema:\n-              type: object\n-              properties:\n-                position:\n-                  type: integer\n-      responses:\n-        \"200\":\n-          description: Item updated\n-        \"400\":\n-          description: Invalid data\n-        \"404\":\n-          description: Item not found\n-      tags:\n-        - Items\n-\n-    delete:\n-      summary: Delete an item\n-      responses:\n-        \"204\":\n-          description: Item deleted\n-        \"404\":\n-          description: Item not found\n-      tags:\n-        - Items\n-\n-\n     @action(detail=False, methods=['get'], url_path='drag-item')\n     def draggable(self, request, *args, **kwargs):\n         model_name = request.GET.get('model')\n         target_position = request.GET.get('target')\n"
                },
                {
                    "date": 1741079367983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n from drf_yasg import openapi\n \n class PositionManagementViewSet(viewsets.ViewSet):\n     \n-    @swagger_auto_schema(\n+@swagger_auto_schema(\n         method='get',\n         operation_summary=\"Move an item to a new position\",\n         operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n         manual_parameters=[\n"
                },
                {
                    "date": 1741079374436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,24 +8,10 @@\n from drf_yasg import openapi\n \n class PositionManagementViewSet(viewsets.ViewSet):\n     \n-@swagger_auto_schema(\n-        method='get',\n-        operation_summary=\"Move an item to a new position\",\n-        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n-        manual_parameters=[\n-            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n-            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n-            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n-        ],\n-        responses={\n-            200: openapi.Response(\"Item moved successfully\"),\n-            400: openapi.Response(\"Invalid request\"),\n-            404: openapi.Response(\"Target object not found\"),\n-        }\n-    )\n \n+\n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n"
                },
                {
                    "date": 1741079383588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,11 +7,9 @@\n from drf_yasg.utils import swagger_auto_schema\n from drf_yasg import openapi\n \n class PositionManagementViewSet(viewsets.ViewSet):\n-    \n \n-\n     # Mapping of frontend identifiers to actual model names\n     MODEL_MAP = {\n         # 'meet-team':('components','MeetTeam'),\n         'duration':('duration','Duration'),\n@@ -29,8 +27,24 @@\n         # 'review': ('review', 'Review'),\n     }\n \n     BREATH_HOLD = 10  # Maximum distance for small moves\n+    \n+        @swagger_auto_schema(\n+        method='get',\n+        operation_summary=\"Move an item to a new position\",\n+        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n+        manual_parameters=[\n+            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n+            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n+            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n+        ],\n+        responses={\n+            200: openapi.Response(\"Item moved successfully\"),\n+            400: openapi.Response(\"Invalid request\"),\n+            404: openapi.Response(\"Target object not found\"),\n+        }\n+    )\n \n     def _get_model(self, model_key):\n         \"\"\"\n         Retrieve model class based on model key.\n"
                },
                {
                    "date": 1741079447160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,25 +27,8 @@\n         # 'review': ('review', 'Review'),\n     }\n \n     BREATH_HOLD = 10  # Maximum distance for small moves\n-    \n-        @swagger_auto_schema(\n-        method='get',\n-        operation_summary=\"Move an item to a new position\",\n-        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n-        manual_parameters=[\n-            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n-            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n-            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n-        ],\n-        responses={\n-            200: openapi.Response(\"Item moved successfully\"),\n-            400: openapi.Response(\"Invalid request\"),\n-            404: openapi.Response(\"Target object not found\"),\n-        }\n-    )\n-\n     def _get_model(self, model_key):\n         \"\"\"\n         Retrieve model class based on model key.\n         \"\"\"\n"
                },
                {
                    "date": 1741079505623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,8 +40,9 @@\n             except LookupError:\n                 return None\n         return None\n     \n+\n     \n \n     @action(detail=False, methods=['get'], url_path='drag-item')\n     def draggable(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1741079511450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,8 +44,23 @@\n \n     \n \n     @action(detail=False, methods=['get'], url_path='drag-item')\n+    @swagger_auto_schema(\n+        method='get',\n+        operation_summary=\"Move an item to a new position\",\n+        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n+        manual_parameters=[\n+            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n+            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n+            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n+        ],\n+        responses={\n+            200: openapi.Response(\"Item moved successfully\"),\n+            400: openapi.Response(\"Invalid request\"),\n+            404: openapi.Response(\"Target object not found\"),\n+        }\n+    )\n     def draggable(self, request, *args, **kwargs):\n         model_name = request.GET.get('model')\n         target_position = request.GET.get('target')\n         goal_position = request.GET.get('goal')\n"
                },
                {
                    "date": 1741079521773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,23 +44,9 @@\n \n     \n \n     @action(detail=False, methods=['get'], url_path='drag-item')\n-    @swagger_auto_schema(\n-        method='get',\n-        operation_summary=\"Move an item to a new position\",\n-        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n-        manual_parameters=[\n-            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n-            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n-            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n-        ],\n-        responses={\n-            200: openapi.Response(\"Item moved successfully\"),\n-            400: openapi.Response(\"Invalid request\"),\n-            404: openapi.Response(\"Target object not found\"),\n-        }\n-    )\n+    \n     def draggable(self, request, *args, **kwargs):\n         model_name = request.GET.get('model')\n         target_position = request.GET.get('target')\n         goal_position = request.GET.get('goal')\n"
                },
                {
                    "date": 1741079527632,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,14 +39,10 @@\n                 return apps.get_model(app_label, model_name)\n             except LookupError:\n                 return None\n         return None\n+        @action(detail=False, methods=['get'], url_path='drag-item')\n     \n-\n-    \n-\n-    @action(detail=False, methods=['get'], url_path='drag-item')\n-    \n     def draggable(self, request, *args, **kwargs):\n         model_name = request.GET.get('model')\n         target_position = request.GET.get('target')\n         goal_position = request.GET.get('goal')\n"
                },
                {
                    "date": 1741079532842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,10 +39,13 @@\n                 return apps.get_model(app_label, model_name)\n             except LookupError:\n                 return None\n         return None\n-        @action(detail=False, methods=['get'], url_path='drag-item')\n     \n+\n+    \n+\n+    @action(detail=False, methods=['get'], url_path='drag-item') \n     def draggable(self, request, *args, **kwargs):\n         model_name = request.GET.get('model')\n         target_position = request.GET.get('target')\n         goal_position = request.GET.get('goal')\n"
                },
                {
                    "date": 1741079569888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,12 +40,26 @@\n             except LookupError:\n                 return None\n         return None\n     \n-\n+    @swagger_auto_schema(\n+        method='get',\n+        operation_summary=\"Move an item to a new position\",\n+        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n+        manual_parameters=[\n+            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n+            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n+            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n+        ],\n+        responses={\n+            200: openapi.Response(\"Item moved successfully\"),\n+            400: openapi.Response(\"Invalid request\"),\n+            404: openapi.Response(\"Target object not found\"),\n+        }\n+    )\n     \n \n-    @action(detail=False, methods=['get'], url_path='drag-item') \n+    @action(detail=False, methods=['get'], url_path='drag-item')\n     def draggable(self, request, *args, **kwargs):\n         model_name = request.GET.get('model')\n         target_position = request.GET.get('target')\n         goal_position = request.GET.get('goal')\n"
                },
                {
                    "date": 1741079832109,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,23 +40,27 @@\n             except LookupError:\n                 return None\n         return None\n     \n-    @swagger_auto_schema(\n-        method='get',\n-        operation_summary=\"Move an item to a new position\",\n-        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n-        manual_parameters=[\n-            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n-            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n-            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n-        ],\n-        responses={\n-            200: openapi.Response(\"Item moved successfully\"),\n-            400: openapi.Response(\"Invalid request\"),\n-            404: openapi.Response(\"Target object not found\"),\n-        }\n-    )\n+   @swagger_auto_schema(\n+    method='get',\n+    operation_summary=\"Move an item to a new position\",\n+    operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n+    manual_parameters=[\n+        openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n+        openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n+        openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n+    ],\n+    responses={\n+        200: openapi.Response(\"Item moved successfully\"),\n+        400: openapi.Response(\"Invalid request\"),\n+        404: openapi.Response(\"Target object not found\"),\n+    },\n+    extra_fields={\n+        \"keys\": [\"model\", \"target\", \"goal\", \"200\", \"400\", \"404\"]\n+    }\n+)\n+\n     \n \n     @action(detail=False, methods=['get'], url_path='drag-item')\n     def draggable(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1741079839039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,26 +40,26 @@\n             except LookupError:\n                 return None\n         return None\n     \n-   @swagger_auto_schema(\n-    method='get',\n-    operation_summary=\"Move an item to a new position\",\n-    operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n-    manual_parameters=[\n-        openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n-        openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n-        openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n-    ],\n-    responses={\n-        200: openapi.Response(\"Item moved successfully\"),\n-        400: openapi.Response(\"Invalid request\"),\n-        404: openapi.Response(\"Target object not found\"),\n-    },\n-    extra_fields={\n-        \"keys\": [\"model\", \"target\", \"goal\", \"200\", \"400\", \"404\"]\n-    }\n-)\n+    @swagger_auto_schema(\n+        method='get',\n+        operation_summary=\"Move an item to a new position\",\n+        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n+        manual_parameters=[\n+            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n+            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n+            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n+        ],\n+        responses={\n+            200: openapi.Response(\"Item moved successfully\"),\n+            400: openapi.Response(\"Invalid request\"),\n+            404: openapi.Response(\"Target object not found\"),\n+        },\n+        extra_fields={\n+            \"keys\": [\"model\", \"target\", \"goal\", \"200\", \"400\", \"404\"]\n+        }\n+    )\n \n     \n \n     @action(detail=False, methods=['get'], url_path='drag-item')\n"
                },
                {
                    "date": 1741079854792,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             400: openapi.Response(\"Invalid request\"),\n             404: openapi.Response(\"Target object not found\"),\n         },\n         extra_fields={\n-            \"keys\": [\"model\", \"target\", \"goal\", \"200\", \"400\", \"404\"]\n+            \"keys\": [\"duration\", \"target\", \"goal\", \"200\", \"400\", \"404\"]\n         }\n     )\n \n     \n"
                },
                {
                    "date": 1741079869336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             400: openapi.Response(\"Invalid request\"),\n             404: openapi.Response(\"Target object not found\"),\n         },\n         extra_fields={\n-            \"keys\": [\"duration\", \"target\", \"goal\", \"200\", \"400\", \"404\"]\n+            \"keys\": [\"duration\", \"event-gallery\", \"goal\", \"200\", \"400\", \"404\"]\n         }\n     )\n \n     \n"
                },
                {
                    "date": 1741079876437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             400: openapi.Response(\"Invalid request\"),\n             404: openapi.Response(\"Target object not found\"),\n         },\n         extra_fields={\n-            \"keys\": [\"duration\", \"event-gallery\", \"goal\", \"200\", \"400\", \"404\"]\n+            \"keys\": [\"duration\", \"event-gallery\", \"event\", \"200\", \"400\", \"404\"]\n         }\n     )\n \n     \n"
                },
                {
                    "date": 1741079881765,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n             400: openapi.Response(\"Invalid request\"),\n             404: openapi.Response(\"Target object not found\"),\n         },\n         extra_fields={\n-            \"keys\": [\"duration\", \"event-gallery\", \"event\", \"200\", \"400\", \"404\"]\n+            \"keys\": [\"duration\", \"event-gallery\", \"event\"]\n         }\n     )\n \n     \n"
                },
                {
                    "date": 1741079990866,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,26 +41,30 @@\n                 return None\n         return None\n     \n     @swagger_auto_schema(\n-        method='get',\n-        operation_summary=\"Move an item to a new position\",\n-        operation_description=\"Moves an item from `target` position to `goal` position within the specified `model`.\",\n-        manual_parameters=[\n-            openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n-            openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n-            openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n-        ],\n-        responses={\n-            200: openapi.Response(\"Item moved successfully\"),\n-            400: openapi.Response(\"Invalid request\"),\n-            404: openapi.Response(\"Target object not found\"),\n-        },\n-        extra_fields={\n-            \"keys\": [\"duration\", \"event-gallery\", \"event\"]\n-        }\n-    )\n+    method='get',\n+    operation_summary=\"Move an item to a new position\",\n+    operation_description=(\n+        \"Moves an item from `target` position to `goal` position within the specified `model`.\\n\\n\"\n+        \"**Keys:**\\n\"\n+        \"- `duration`\\n\"\n+        \"- `event-gallery`\\n\"\n+        \"- `event`\\n\"\n+    ),\n+    manual_parameters=[\n+        openapi.Parameter('model', openapi.IN_QUERY, description=\"Name of the model\", type=openapi.TYPE_STRING, required=True),\n+        openapi.Parameter('target', openapi.IN_QUERY, description=\"Current position of the item\", type=openapi.TYPE_INTEGER, required=True),\n+        openapi.Parameter('goal', openapi.IN_QUERY, description=\"Target position for the item\", type=openapi.TYPE_INTEGER, required=True),\n+    ],\n+    responses={\n+        200: openapi.Response(\"Item moved successfully\"),\n+        400: openapi.Response(\"Invalid request\"),\n+        404: openapi.Response(\"Target object not found\"),\n+    }\n+)\n \n+\n     \n \n     @action(detail=False, methods=['get'], url_path='drag-item')\n     def draggable(self, request, *args, **kwargs):\n"
                }
            ],
            "date": 1733737084641,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.decorators import action\nfrom rest_framework.response import Response\nfrom django.apps import apps\nfrom django.db import transaction\nfrom django.db.models import F, Max,Min\nfrom drf_yasg.utils import swagger_auto_schema\nfrom drf_yasg import openapi\n\nclass PositionManagementViewSet(viewsets.ViewSet):\n\n    # Mapping of frontend identifiers to actual model names\n    MODEL_MAP = {\n        'meet-team':('components','MeetTeam'),\n        # 'faqs':('components','Faqs'),\n        # 'gallery': ('gallery', 'Gallery'),\n        # 'gallery-group': ('gallery', 'GalleryGroup'),\n        # 'quotation': ('quotationmanagement', 'Quotation'),\n        # 'booking': ('bookingmanagement', 'BookingService'),\n        # 'service-category': ('service_category_management', 'Category'),\n        # 'service': ('servicemanagement', 'Service'),\n        # 'blog': ('blog', 'Blog'),\n        # 'customer-inquiry': ('customerinquiries', 'CustomerInquiries'),\n        # 'branch': ('branchdetails', 'Branch'),\n        # 'review': ('review', 'Review'),\n    }\n\n    BREATH_HOLD = 10  # Maximum distance for small moves\n\n    def _get_model(self, model_key):\n        \"\"\"\n        Retrieve model class based on model key.\n        \"\"\"\n        model_info = self.MODEL_MAP.get(model_key)\n        if model_info:\n            app_label, model_name = model_info\n            try:\n                return apps.get_model(app_label, model_name)\n            except LookupError:\n                return None\n        return None\n\n    @action(detail=False, methods=['get'], url_path='drag-item')\n    def draggable(self, request, *args, **kwargs):\n        model_name = request.GET.get('model')\n        target_position = request.GET.get('target')\n        goal_position = request.GET.get('goal')\n        breath_hold = self.BREATH_HOLD\n\n        if not model_name or target_position is None or goal_position is None:\n            return Response({\"error\": \"Model name, target, or goal position not provided\"}, status=400)\n\n        # Load the model\n        Model = self._get_model(model_name)\n        if Model is None:\n            return Response({\"error\": f\"Model '{model_name}' not found\"}, status=400)\n\n        # Convert positions to integers\n        try:\n            target_position = int(target_position)\n            goal_position = int(goal_position)\n        except ValueError:\n            return Response({\"error\": \"Invalid target or goal position\"}, status=400)\n\n        # Fetch the target object\n        try:\n            target_obj = Model.objects.get(position=target_position)\n        except Model.DoesNotExist:\n            return Response({\"error\": \"Target object not found\"}, status=400)\n\n        # Validate goal position range\n        current_positions = Model.objects.values_list('position', flat=True)\n        if goal_position not in current_positions and goal_position != 0:  # Allow moving to position 0\n            return Response({\"error\": \"Goal position is out of bounds\"}, status=400)\n\n        # Calculate move distance and choose strategy\n        distance = abs(goal_position - target_position)\n\n        if distance <= breath_hold:\n            return self._small_move_strategy(Model, target_obj, target_position, goal_position)\n        elif target_position == 0:  # Already at the front\n            return self._back_move_strategy(Model, target_obj, target_position, goal_position)\n        elif target_position == max(current_positions):  # Already at the end\n            return self._front_move_strategy(Model, target_obj, target_position, goal_position)\n        else:\n            return self._big_jump_strategy(Model, target_obj, target_position, goal_position)\n\n    def _small_move_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                if target_position < goal_position:\n                    # Moving down\n                    Model.objects.filter(position__gt=target_position, position__lte=goal_position).update(position=F('position') - 1)\n                else:\n                    # Moving up\n                    Model.objects.filter(position__lt=target_position, position__gte=goal_position).update(position=F('position') + 1)\n\n                target_obj.position = goal_position\n                target_obj.save()\n\n            return Response({\"status\": \"success\", \"message\": \"Position updated successfully.\"})\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n\n    def _front_move_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                # Adjust positions of all items above the goal position\n                Model.objects.filter(position__lt=target_position).update(position=F('position') + 1)\n                \n                # Instead of setting to 0, assign the next available position\n                # Find the minimum position in the model\n                min_position = Model.objects.aggregate(min_pos=Min('position'))['min_pos'] or 0\n                \n                # Set the target object's position to one less than the current minimum\n                target_obj.position = min_position - 1 if min_position > 0 else 0\n                target_obj.save()\n\n            return Response({\"status\": \"success\", \"message\": \"Position updated successfully.\"})\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n\n\n    def _back_move_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                # Move the target object to the end (max_position + 1)\n                max_position = Model.objects.aggregate(max_pos=Max('position'))['max_pos'] or 0\n                target_obj.position = max_position + 1\n                target_obj.save()\n\n            return Response({\"status\": \"success\", \"message\": \"Position updated successfully.\"})\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n\n    def _big_jump_strategy(self, Model, target_obj, target_position, goal_position):\n        try:\n            with transaction.atomic():\n                if goal_position > target_position:\n                    # Moving down (to a higher position)\n                    Model.objects.filter(position__gt=target_position, position__lt=goal_position).update(position=F('position') - 1)\n                else:\n                    # Moving up (to a lower position)\n                    Model.objects.filter(position__lt=target_position, position__gte=goal_position).update(position=F('position') + 1)\n\n                # Set the target object's position to the goal position with a decimal\n                target_obj.position = goal_position + 0.5  # Use a decimal position\n                target_obj.save()\n\n            return Response({\n                \"status\": \"success\",\n                \"message\": \"Position updated successfully.\",\n                \"new_position\": target_obj.position  # Return the decimal position\n            })\n        except Exception as e:\n            return Response({\"error\": f\"Failed to update position: {str(e)}\"}, status=400)\n"
        }
    ]
}