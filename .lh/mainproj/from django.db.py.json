{
    "sourceFile": "mainproj/from django.db.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1741754444708,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1741754444708,
            "name": "Commit-0",
            "content": "# from django.db.models import Count, Q\n# from rest_framework import viewsets, status\n# from rest_framework.response import Response\n# from rest_framework.permissions import IsAuthenticated\n# from rest_framework.decorators import action\n# from .models import Notification\n# from .serializers import NotificationSerializer\n# import logging\n\n# # Set up logging for debugging errors\n# logger = logging.getLogger(__name__)\n\n# class NotificationViewSet(viewsets.ModelViewSet):\n#     \"\"\"\n#     API for managing notifications.\n#     - Users only see their own notifications.\n#     - Superusers can see all notifications.\n#     - Users can mark notifications as read.\n#     - Users can delete their own notifications.\n#     - Superusers can delete all notifications.\n#     - API to fetch the count of unread notifications.\n#     \"\"\"\n#     serializer_class = NotificationSerializer\n#     permission_classes = [IsAuthenticated]\n\n#     def get_queryset(self):\n#         \"\"\"Return notifications based on user role.\"\"\"\n#         if self.request.user.is_superuser:\n#             return Notification.objects.all().order_by(\"-timestamp\")\n#         return Notification.objects.filter(user=self.request.user).order_by(\"-timestamp\")\n\n#     @action(detail=False, methods=['get'], name=\"Notification Count\", url_path=\"notification-count\")\n#     def notification_count(self, request, *args, **kwargs):\n#         \"\"\"\n#         Get count of unread notifications.\n#         - Superusers see the total count of unread notifications.\n#         - Regular users see only their own unread notifications.\n#         \"\"\"\n#         try:\n#             if request.user.is_superuser:\n#                 unread_count = Notification.objects.exclude(read_by=request.user).count()\n#             else:\n#                 unread_count = Notification.objects.filter(user=request.user).exclude(read_by=request.user).count()\n\n#             return Response({\"unread_notification_count\": unread_count}, status=status.HTTP_200_OK)\n#         except Exception as e:\n#             logger.error(f\"Error in notification_count(): {str(e)}\", exc_info=True)\n#             return Response({\"error\": \"An error occurred while fetching the notification count.\"},\n#                             status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n#     @action(detail=False, methods=['post'], name=\"Mark All as Read\", url_path=\"mark_all_as_read\")\n#     def mark_all_as_read(self, request, *args, **kwargs):\n#         \"\"\"Mark all notifications as read for the requesting user.\"\"\"\n#         try:\n#             if not request.user.is_authenticated:\n#                 return Response({\"error\": \"Authentication required\"}, status=status.HTTP_401_UNAUTHORIZED)\n\n#             notifications = Notification.objects.filter(user=request.user).exclude(read_by=request.user)\n\n#             for notification in notifications:\n#                 notification.read_by.add(request.user)\n\n#             count = notifications.count()\n#             return Response({\"message\": f\"{count} notifications marked as read\"}, status=status.HTTP_200_OK)\n#         except Exception as e:\n#             logger.error(f\"Error in mark_all_as_read(): {str(e)}\", exc_info=True)\n#             return Response({\"error\": \"An error occurred while marking notifications as read.\"},\n#                             status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n#     @action(detail=False, methods=['delete'], name=\"Delete All Notifications\", url_path=\"delete_all\")\n#     def delete_all(self, request, *args, **kwargs):\n#         \"\"\"Delete all notifications for the requesting user.\"\"\"\n#         try:\n#             if not request.user.is_authenticated:\n#                 return Response({\"error\": \"Authentication required\"}, status=status.HTTP_401_UNAUTHORIZED)\n\n#             if request.user.is_superuser:\n#                 count, _ = Notification.objects.all().delete()\n#             else:\n#                 count, _ = Notification.objects.filter(user=request.user).delete()\n\n#             return Response({\"message\": f\"{count} notifications deleted\"}, status=status.HTTP_200_OK)\n#         except Exception as e:\n#             logger.error(f\"Error in delete_all(): {str(e)}\", exc_info=True)\n#             return Response({\"error\": \"An error occurred while deleting notifications.\"},\n#                             status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n\n#     @action(detail=True, methods=['post'], name=\"Mark as Read\", url_path=\"mark_as_read\")\n#     def mark_as_read(self, request, pk=None, *args, **kwargs):\n#         \"\"\"Mark a single notification as read for the requesting user.\"\"\"\n#         try:\n#             if not request.user.is_authenticated:\n#                 return Response({\"error\": \"Authentication required\"}, status=status.HTTP_401_UNAUTHORIZED)\n\n#             notification = self.get_object()\n\n#             if request.user != notification.user:\n#                 return Response({\"detail\": \"Not allowed\"}, status=status.HTTP_403_FORBIDDEN)\n\n#             notification.read_by.add(request.user)\n#             serializer = self.get_serializer(notification, context={'request': request})\n#             return Response(serializer.data, status=status.HTTP_200_OK)\n#         except Exception as e:\n#             logger.error(f\"Error in mark_as_read(): {str(e)}\", exc_info=True)\n#             return Response({\"error\": \"An error occurred while marking the notification as read.\"},\n#                             status=status.HTTP_500_INTERNAL_SERVER_ERROR)\n"
        }
    ]
}