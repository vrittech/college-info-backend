{
    "sourceFile": "mainproj/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1739336401943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739336413890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-\n+#\n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n"
                },
                {
                    "date": 1739336421740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-#\n+#Fetch all the Django permissions \n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n"
                },
                {
                    "date": 1739336427208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-#Fetch all the Django permissions \n+#Fetch all the Django permissions for a given model name \n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n"
                },
                {
                    "date": 1739337177713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-#Fetch all the Django permissions for a given model name \n+#Fetch all the Django permissions for a given model name and return a dictionary\n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n@@ -54,9 +54,9 @@\n         elif view.action in [\"create\"]:\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"])\n+            return request.user.has_perm(permissions[\"change\"]) or \n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n"
                },
                {
                    "date": 1739337191234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         elif view.action in [\"create\"]:\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) or \n+            return request.user.has_perm(permissions[\"change\"]) or obj.id == request.user.id\n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n"
                },
                {
                    "date": 1739337227810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         elif view.action in [\"create\"]:\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) or obj.id == request.user.id\n+            return request.user.has_perm(permissions[\"change\"]) or view.obj.id == request.user.id\n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n"
                },
                {
                    "date": 1739337236409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,21 +61,21 @@\n             return request.user.has_perm(permissions[\"delete\"])\n \n         return False  # Default deny access\n \n-    def has_object_permission(self, request, view, obj):\n-        \"\"\"\n-        Object-level permission handling.\n-        \"\"\"\n-        model_name = obj.__class__.__name__.lower()\n-        permissions = model_permissions(model_name)\n+    # def has_object_permission(self, request, view, obj):\n+    #     \"\"\"\n+    #     Object-level permission handling.\n+    #     \"\"\"\n+    #     model_name = obj.__class__.__name__.lower()\n+    #     permissions = model_permissions(model_name)\n \n-        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n-            return True\n+    #     if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n+    #         return True\n \n-        if view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n+    #     if view.action in [\"update\", \"partial_update\"]:\n+    #         return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n \n-        if view.action == \"destroy\":\n-            return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n+    #     if view.action == \"destroy\":\n+    #         return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n \n-        return False  # Default deny access\n+    #     return False  # Default deny access\n"
                },
                {
                    "date": 1739339127676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n from rest_framework.permissions import BasePermission\n \n-# Define which models are accessible for each action\n+# Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\"],  # Publicly accessible models for listing\n-    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Publicly accessible models for creation\n-    \"update\": [],  # No public update access (fully permission-based)\n-    \"partial_update\": [],\n-    \"destroy\": [],  # No public delete access (fully permission-based)\n+    \"list\": [\"blog\", \"course\"],  # Public listing\n+    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n-#Fetch all the Django permissions for a given model name and return a dictionary\n+\n+# Define models that cannot be deleted except by superusers\n+RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n+\n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n@@ -29,8 +29,11 @@\n     \"\"\"\n     A dynamic permission class that:\n     - Maps API actions to public models.\n     - Uses Django's built-in permissions for restricted models.\n+    - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n+    - Prevents users from deleting their own account.\n+    - Ensures users can only update their own profiles.\n     \"\"\"\n \n     def has_permission(self, request, view):\n         model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n@@ -39,43 +42,61 @@\n         # Allow public access if model exists in MAPPING_API for the current action\n         if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n             return True\n \n-        # Full access for superusers or users with 'all_{model}' permission\n-        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n+        # Full access for superusers or staff with 'all_{model}' permission\n+        if request.user.is_superuser or (request.user.is_staff and request.user.has_perm(permissions[\"all\"])):\n             return True\n \n+        # Prevent deletion of models in RESTRICTED_DELETE_MODELS (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser  # Only superusers can delete\n+\n+        # Prevent unauthenticated users from accessing private models\n+        if not request.user.is_authenticated and model_name not in MAPPING_API.get(view.action, []):\n+            return False\n+\n         # Standard Django permission checks\n-        if view.action in [\"list\"]:\n+        if view.action == \"list\":\n             return request.user.has_perm(permissions[\"view\"])\n \n-        elif view.action in [\"retrieve\"]:\n+        elif view.action == \"retrieve\":\n             return request.user.has_perm(permissions[\"view\"])\n \n-        elif view.action in [\"create\"]:\n+        elif view.action == \"create\":\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) or view.obj.id == request.user.id\n+            return request.user.has_perm(permissions[\"change\"])\n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n         return False  # Default deny access\n \n-    # def has_object_permission(self, request, view, obj):\n-    #     \"\"\"\n-    #     Object-level permission handling.\n-    #     \"\"\"\n-    #     model_name = obj.__class__.__name__.lower()\n-    #     permissions = model_permissions(model_name)\n+    def has_object_permission(self, request, view, obj):\n+        \"\"\"\n+        Object-level permission handling.\n+        \"\"\"\n+        model_name = obj.__class__.__name__.lower()\n+        permissions = model_permissions(model_name)\n \n-    #     if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n-    #         return True\n+        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n+            return True  # Superusers and users with 'all_{model}' permission get full access\n \n-    #     if view.action in [\"update\", \"partial_update\"]:\n-    #         return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n+        # Prevent deletion of restricted models (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser\n \n-    #     if view.action == \"destroy\":\n-    #         return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n+        # Prevent users from deleting their own account\n+        if view.action == \"destroy\" and model_name == \"customuser\" and obj.id == request.user.id:\n+            return False  # Users cannot delete themselves\n \n-    #     return False  # Default deny access\n+        # Users can only update their own profile\n+        if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n+            return obj.id == request.user.id or request.user.is_staff\n+\n+        # Ensure delete permissions are explicitly granted\n+        if view.action == \"destroy\":\n+            return request.user.has_perm(permissions[\"delete\"])\n+\n+        return False  # Default deny access\n"
                },
                {
                    "date": 1739339172790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n             return request.user.is_superuser\n \n         # Prevent users from deleting their own account\n-        if view.action == \"destroy\" and model_name == \"customuser\" and obj.id == request.user.id:\n+        if view.action == \"destroy\" and model_name == \"C\" and obj.id == request.user.id:\n             return False  # Users cannot delete themselves\n \n         # Users can only update their own profile\n         if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n"
                },
                {
                    "date": 1739339179464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,13 +87,13 @@\n         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n             return request.user.is_superuser\n \n         # Prevent users from deleting their own account\n-        if view.action == \"destroy\" and model_name == \"C\" and obj.id == request.user.id:\n+        if view.action == \"destroy\" and model_name == \"CustomUser\" and obj.id == request.user.id:\n             return False  # Users cannot delete themselves\n \n         # Users can only update their own profile\n-        if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n+        if view.action in [\"update\", \"partial_update\"] and model_name == \"CustomUser\":\n             return obj.id == request.user.id or request.user.is_staff\n \n         # Ensure delete permissions are explicitly granted\n         if view.action == \"destroy\":\n"
                },
                {
                    "date": 1739508834745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,102 +1,102 @@\n-from rest_framework.permissions import BasePermission\n+# from rest_framework.permissions import BasePermission\n \n-# Define public access models for specific actions\n-MAPPING_API = {\n-    \"list\": [\"blog\", \"course\"],  # Public listing\n-    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n-}\n+# # Define public access models for specific actions\n+# MAPPING_API = {\n+#     \"list\": [\"blog\", \"course\"],  # Public listing\n+#     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n+# }\n \n-# Define models that cannot be deleted except by superusers\n-RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n+# # Define models that cannot be deleted except by superusers\n+# RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n \n-def model_permissions(model_name):\n-    \"\"\"\n-    Fetch permissions dynamically based on model name.\n-    Standard Django permission structure is used.\n-    \"\"\"\n-    model_name = model_name.lower()\n-    return {\n-        \"add\": f\"add_{model_name}\",\n-        \"change\": f\"change_{model_name}\",\n-        \"delete\": f\"delete_{model_name}\",\n-        \"view\": f\"view_{model_name}\",\n-        \"manage\": f\"manage_{model_name}\",\n-        \"public\": f\"public_{model_name}\",\n-        \"all\": f\"all_{model_name}\",\n-    }\n+# def model_permissions(model_name):\n+#     \"\"\"\n+#     Fetch permissions dynamically based on model name.\n+#     Standard Django permission structure is used.\n+#     \"\"\"\n+#     model_name = model_name.lower()\n+#     return {\n+#         \"add\": f\"add_{model_name}\",\n+#         \"change\": f\"change_{model_name}\",\n+#         \"delete\": f\"delete_{model_name}\",\n+#         \"view\": f\"view_{model_name}\",\n+#         \"manage\": f\"manage_{model_name}\",\n+#         \"public\": f\"public_{model_name}\",\n+#         \"all\": f\"all_{model_name}\",\n+#     }\n \n-class AllPermission(BasePermission):\n-    \"\"\"\n-    A dynamic permission class that:\n-    - Maps API actions to public models.\n-    - Uses Django's built-in permissions for restricted models.\n-    - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n-    - Prevents users from deleting their own account.\n-    - Ensures users can only update their own profiles.\n-    \"\"\"\n+# class AllPermission(BasePermission):\n+#     \"\"\"\n+#     A dynamic permission class that:\n+#     - Maps API actions to public models.\n+#     - Uses Django's built-in permissions for restricted models.\n+#     - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n+#     - Prevents users from deleting their own account.\n+#     - Ensures users can only update their own profiles.\n+#     \"\"\"\n \n-    def has_permission(self, request, view):\n-        model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n-        permissions = model_permissions(model_name)\n+#     def has_permission(self, request, view):\n+#         model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n+#         permissions = model_permissions(model_name)\n \n-        # Allow public access if model exists in MAPPING_API for the current action\n-        if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n-            return True\n+#         # Allow public access if model exists in MAPPING_API for the current action\n+#         if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n+#             return True\n \n-        # Full access for superusers or staff with 'all_{model}' permission\n-        if request.user.is_superuser or (request.user.is_staff and request.user.has_perm(permissions[\"all\"])):\n-            return True\n+#         # Full access for superusers or staff with 'all_{model}' permission\n+#         if request.user.is_superuser or (request.user.is_staff and request.user.has_perm(permissions[\"all\"])):\n+#             return True\n \n-        # Prevent deletion of models in RESTRICTED_DELETE_MODELS (except for superusers)\n-        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n-            return request.user.is_superuser  # Only superusers can delete\n+#         # Prevent deletion of models in RESTRICTED_DELETE_MODELS (except for superusers)\n+#         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+#             return request.user.is_superuser  # Only superusers can delete\n \n-        # Prevent unauthenticated users from accessing private models\n-        if not request.user.is_authenticated and model_name not in MAPPING_API.get(view.action, []):\n-            return False\n+#         # Prevent unauthenticated users from accessing private models\n+#         if not request.user.is_authenticated and model_name not in MAPPING_API.get(view.action, []):\n+#             return False\n \n-        # Standard Django permission checks\n-        if view.action == \"list\":\n-            return request.user.has_perm(permissions[\"view\"])\n+#         # Standard Django permission checks\n+#         if view.action == \"list\":\n+#             return request.user.has_perm(permissions[\"view\"])\n \n-        elif view.action == \"retrieve\":\n-            return request.user.has_perm(permissions[\"view\"])\n+#         elif view.action == \"retrieve\":\n+#             return request.user.has_perm(permissions[\"view\"])\n \n-        elif view.action == \"create\":\n-            return request.user.has_perm(permissions[\"add\"])\n+#         elif view.action == \"create\":\n+#             return request.user.has_perm(permissions[\"add\"])\n \n-        elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"])\n+#         elif view.action in [\"update\", \"partial_update\"]:\n+#             return request.user.has_perm(permissions[\"change\"])\n \n-        elif view.action == \"destroy\":\n-            return request.user.has_perm(permissions[\"delete\"])\n+#         elif view.action == \"destroy\":\n+#             return request.user.has_perm(permissions[\"delete\"])\n \n-        return False  # Default deny access\n+#         return False  # Default deny access\n \n-    def has_object_permission(self, request, view, obj):\n-        \"\"\"\n-        Object-level permission handling.\n-        \"\"\"\n-        model_name = obj.__class__.__name__.lower()\n-        permissions = model_permissions(model_name)\n+#     def has_object_permission(self, request, view, obj):\n+#         \"\"\"\n+#         Object-level permission handling.\n+#         \"\"\"\n+#         model_name = obj.__class__.__name__.lower()\n+#         permissions = model_permissions(model_name)\n \n-        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n-            return True  # Superusers and users with 'all_{model}' permission get full access\n+#         if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n+#             return True  # Superusers and users with 'all_{model}' permission get full access\n \n-        # Prevent deletion of restricted models (except for superusers)\n-        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n-            return request.user.is_superuser\n+#         # Prevent deletion of restricted models (except for superusers)\n+#         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+#             return request.user.is_superuser\n \n-        # Prevent users from deleting their own account\n-        if view.action == \"destroy\" and model_name == \"CustomUser\" and obj.id == request.user.id:\n-            return False  # Users cannot delete themselves\n+#         # Prevent users from deleting their own account\n+#         if view.action == \"destroy\" and model_name == \"CustomUser\" and obj.id == request.user.id:\n+#             return False  # Users cannot delete themselves\n \n-        # Users can only update their own profile\n-        if view.action in [\"update\", \"partial_update\"] and model_name == \"CustomUser\":\n-            return obj.id == request.user.id or request.user.is_staff\n+#         # Users can only update their own profile\n+#         if view.action in [\"update\", \"partial_update\"] and model_name == \"CustomUser\":\n+#             return obj.id == request.user.id or request.user.is_staff\n \n-        # Ensure delete permissions are explicitly granted\n-        if view.action == \"destroy\":\n-            return request.user.has_perm(permissions[\"delete\"])\n+#         # Ensure delete permissions are explicitly granted\n+#         if view.action == \"destroy\":\n+#             return request.user.has_perm(permissions[\"delete\"])\n \n-        return False  # Default deny access\n+#         return False  # Default deny access\n"
                },
                {
                    "date": 1739508862020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -99,4 +99,114 @@\n #         if view.action == \"destroy\":\n #             return request.user.has_perm(permissions[\"delete\"])\n \n #         return False  # Default deny access\n+\n+\n+from rest_framework.permissions import BasePermission\n+from django.apps import apps  # To fetch all models dynamically\n+\n+# Define API action to Django permission mapping\n+ACTION_PERMISSION_MAPPING = {\n+    \"list\": \"view\",  \n+    \"retrieve\": \"view\",\n+    \"create\": \"add\",\n+    \"update\": \"change\",\n+    \"partial_update\": \"change\",\n+    \"destroy\": \"delete\",\n+}\n+\n+# Define public access models for specific actions\n+MAPPING_API = {\n+    \"list\": [\"blog\", \"course\",''],  # Public listing\n+    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n+}\n+\n+# Define models that cannot be deleted except by superusers\n+RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n+\n+# Fetch all registered models dynamically\n+ALL_MODELS = {model.__name__.lower(): model for model in apps.get_models()}\n+\n+def get_user_permissions(user):\n+    \"\"\"\n+    Fetches all permissions a user has, including group-based permissions.\n+    Returns a dictionary mapping models to their allowed actions.\n+    \"\"\"\n+    user_permissions = {}\n+\n+    for model_name in ALL_MODELS.keys():\n+        for action in [\"add\", \"change\", \"delete\", \"view\", \"manage\"]:\n+            permission_codename = f\"{action}_{model_name}\"\n+\n+            if user.has_perm(permission_codename) or any(\n+                user.has_perm(permission_codename) for group in user.groups.all()\n+            ):\n+                if model_name not in user_permissions:\n+                    user_permissions[model_name] = set()\n+                user_permissions[model_name].add(action)\n+\n+    return user_permissions\n+\n+class DynamicModelPermission(BasePermission):\n+    \"\"\"\n+    Fully dynamic permission class that:\n+    - Automatically applies to all models.\n+    - Checks user permissions dynamically, including group-based permissions.\n+    - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n+    - Prevents users from deleting their own account.\n+    - Ensures users can only update their own profiles.\n+    \"\"\"\n+\n+    def has_permission(self, request, view):\n+        model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n+        user_permissions = get_user_permissions(request.user)\n+\n+        # Allow public access if model exists in MAPPING_API for the current action\n+        if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n+            return True\n+\n+        # Superusers always have full access\n+        if request.user.is_superuser:\n+            return True\n+\n+        # Check if the user has the required permission\n+        required_permission = ACTION_PERMISSION_MAPPING.get(view.action, None)\n+        if required_permission and model_name in user_permissions:\n+            return required_permission in user_permissions[model_name]\n+\n+        # Prevent deletion of restricted models (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser\n+\n+        # Default deny access\n+        return False\n+\n+    def has_object_permission(self, request, view, obj):\n+        \"\"\"\n+        Object-level permission handling.\n+        \"\"\"\n+        model_name = obj.__class__.__name__.lower()\n+        user_permissions = get_user_permissions(request.user)\n+\n+        # Superusers always have full access\n+        if request.user.is_superuser:\n+            return True\n+\n+        # Prevent deletion of restricted models (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser\n+\n+        # Prevent users from deleting their own account\n+        if view.action == \"destroy\" and model_name == \"customuser\" and obj.id == request.user.id:\n+            return False\n+\n+        # Users can only update their own profile\n+        if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n+            return obj.id == request.user.id or request.user.is_staff\n+\n+        # Ensure delete permissions are explicitly granted\n+        required_permission = ACTION_PERMISSION_MAPPING.get(view.action, None)\n+        if required_permission and model_name in user_permissions:\n+            return required_permission in user_permissions[model_name]\n+\n+        return False  # Default deny access\n"
                },
                {
                    "date": 1739508869223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",''],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508875427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event',],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508880592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event',],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event',college'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508915040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event',college'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508922936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508930942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508936990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty''],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508942755,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty''],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508950219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees',''],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508958492,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees',''],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification',''],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508966660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification',''],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification','affiliation,'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508973551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification','affiliation,'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification','affiliation','level','sub-level'],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739508981604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n }\n \n # Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification','affiliation','level','sub-level'],  # Public listing\n+    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification','affiliation','level',],  # Public listing\n     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n \n # Define models that cannot be deleted except by superusers\n"
                },
                {
                    "date": 1739509079779,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,108 +1,4 @@\n-# from rest_framework.permissions import BasePermission\n-\n-# # Define public access models for specific actions\n-# MAPPING_API = {\n-#     \"list\": [\"blog\", \"course\"],  # Public listing\n-#     \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n-# }\n-\n-# # Define models that cannot be deleted except by superusers\n-# RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n-\n-# def model_permissions(model_name):\n-#     \"\"\"\n-#     Fetch permissions dynamically based on model name.\n-#     Standard Django permission structure is used.\n-#     \"\"\"\n-#     model_name = model_name.lower()\n-#     return {\n-#         \"add\": f\"add_{model_name}\",\n-#         \"change\": f\"change_{model_name}\",\n-#         \"delete\": f\"delete_{model_name}\",\n-#         \"view\": f\"view_{model_name}\",\n-#         \"manage\": f\"manage_{model_name}\",\n-#         \"public\": f\"public_{model_name}\",\n-#         \"all\": f\"all_{model_name}\",\n-#     }\n-\n-# class AllPermission(BasePermission):\n-#     \"\"\"\n-#     A dynamic permission class that:\n-#     - Maps API actions to public models.\n-#     - Uses Django's built-in permissions for restricted models.\n-#     - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n-#     - Prevents users from deleting their own account.\n-#     - Ensures users can only update their own profiles.\n-#     \"\"\"\n-\n-#     def has_permission(self, request, view):\n-#         model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n-#         permissions = model_permissions(model_name)\n-\n-#         # Allow public access if model exists in MAPPING_API for the current action\n-#         if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n-#             return True\n-\n-#         # Full access for superusers or staff with 'all_{model}' permission\n-#         if request.user.is_superuser or (request.user.is_staff and request.user.has_perm(permissions[\"all\"])):\n-#             return True\n-\n-#         # Prevent deletion of models in RESTRICTED_DELETE_MODELS (except for superusers)\n-#         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n-#             return request.user.is_superuser  # Only superusers can delete\n-\n-#         # Prevent unauthenticated users from accessing private models\n-#         if not request.user.is_authenticated and model_name not in MAPPING_API.get(view.action, []):\n-#             return False\n-\n-#         # Standard Django permission checks\n-#         if view.action == \"list\":\n-#             return request.user.has_perm(permissions[\"view\"])\n-\n-#         elif view.action == \"retrieve\":\n-#             return request.user.has_perm(permissions[\"view\"])\n-\n-#         elif view.action == \"create\":\n-#             return request.user.has_perm(permissions[\"add\"])\n-\n-#         elif view.action in [\"update\", \"partial_update\"]:\n-#             return request.user.has_perm(permissions[\"change\"])\n-\n-#         elif view.action == \"destroy\":\n-#             return request.user.has_perm(permissions[\"delete\"])\n-\n-#         return False  # Default deny access\n-\n-#     def has_object_permission(self, request, view, obj):\n-#         \"\"\"\n-#         Object-level permission handling.\n-#         \"\"\"\n-#         model_name = obj.__class__.__name__.lower()\n-#         permissions = model_permissions(model_name)\n-\n-#         if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n-#             return True  # Superusers and users with 'all_{model}' permission get full access\n-\n-#         # Prevent deletion of restricted models (except for superusers)\n-#         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n-#             return request.user.is_superuser\n-\n-#         # Prevent users from deleting their own account\n-#         if view.action == \"destroy\" and model_name == \"CustomUser\" and obj.id == request.user.id:\n-#             return False  # Users cannot delete themselves\n-\n-#         # Users can only update their own profile\n-#         if view.action in [\"update\", \"partial_update\"] and model_name == \"CustomUser\":\n-#             return obj.id == request.user.id or request.user.is_staff\n-\n-#         # Ensure delete permissions are explicitly granted\n-#         if view.action == \"destroy\":\n-#             return request.user.has_perm(permissions[\"delete\"])\n-\n-#         return False  # Default deny access\n-\n-\n from rest_framework.permissions import BasePermission\n from django.apps import apps  # To fetch all models dynamically\n \n # Define API action to Django permission mapping\n@@ -114,15 +10,12 @@\n     \"partial_update\": \"change\",\n     \"destroy\": \"delete\",\n }\n \n-# Define public access models for specific actions\n-MAPPING_API = {\n-    \"list\": [\"blog\", \"course\",'information','event','college','advertisement','contact','faculty','gallery','courses-and-fees','certification','affiliation','level',],  # Public listing\n-    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n-}\n+# Models that should NOT be publicly listed or retrieved\n+RESTRICTED_PUBLIC_MODELS = [\"user\", \"adminlog\", \"sessions\"]\n \n-# Define models that cannot be deleted except by superusers\n+# Models that cannot be deleted except by superusers\n RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n \n # Fetch all registered models dynamically\n ALL_MODELS = {model.__name__.lower(): model for model in apps.get_models()}\n@@ -150,9 +43,9 @@\n class DynamicModelPermission(BasePermission):\n     \"\"\"\n     Fully dynamic permission class that:\n     - Automatically applies to all models.\n-    - Checks user permissions dynamically, including group-based permissions.\n+    - Allows `list` and `retrieve` for all models, except restricted ones.\n     - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n     - Prevents users from deleting their own account.\n     - Ensures users can only update their own profiles.\n     \"\"\"\n@@ -160,10 +53,10 @@\n     def has_permission(self, request, view):\n         model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n         user_permissions = get_user_permissions(request.user)\n \n-        # Allow public access if model exists in MAPPING_API for the current action\n-        if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n+        # Allow `list` and `retrieve` for all models except restricted ones\n+        if view.action in [\"list\", \"retrieve\"] and model_name not in RESTRICTED_PUBLIC_MODELS:\n             return True\n \n         # Superusers always have full access\n         if request.user.is_superuser:\n"
                },
                {
                    "date": 1739511297275,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,87 +19,96 @@\n \n # Fetch all registered models dynamically\n ALL_MODELS = {model.__name__.lower(): model for model in apps.get_models()}\n \n-def get_user_permissions(user):\n+def get_group_permissions(user):\n     \"\"\"\n-    Fetches all permissions a user has, including group-based permissions.\n+    Fetch all permissions from user groups.\n     Returns a dictionary mapping models to their allowed actions.\n     \"\"\"\n-    user_permissions = {}\n+    group_permissions = {}\n \n-    for model_name in ALL_MODELS.keys():\n-        for action in [\"add\", \"change\", \"delete\", \"view\", \"manage\"]:\n-            permission_codename = f\"{action}_{model_name}\"\n+    # Loop through all user groups and collect permissions\n+    for group in user.groups.all():\n+        for perm in group.permissions.all():\n+            # Extract model name and action type from permission codename\n+            try:\n+                action, model_name = perm.codename.split(\"_\", 1)  # Example: \"add_socialmedia\"\n+                if model_name not in group_permissions:\n+                    group_permissions[model_name] = set()\n+                group_permissions[model_name].add(action)\n+            except ValueError:\n+                continue  # Skip invalid permissions\n \n-            if user.has_perm(permission_codename) or any(\n-                user.has_perm(permission_codename) for group in user.groups.all()\n-            ):\n-                if model_name not in user_permissions:\n-                    user_permissions[model_name] = set()\n-                user_permissions[model_name].add(action)\n+    return group_permissions\n \n-    return user_permissions\n-\n-class DynamicModelPermission(BasePermission):\n+class DynamicGroupPermission(BasePermission):\n     \"\"\"\n     Fully dynamic permission class that:\n-    - Automatically applies to all models.\n-    - Allows `list` and `retrieve` for all models, except restricted ones.\n+    - Uses only group-based permissions.\n+    - Prevents users from accessing models they don't have permission for.\n+    - Allows `list` and `retrieve` for all models except restricted ones.\n+    - Prevents unauthorized `create`, `update`, and `delete` actions.\n     - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n     - Prevents users from deleting their own account.\n-    - Ensures users can only update their own profiles.\n     \"\"\"\n \n     def has_permission(self, request, view):\n         model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n-        user_permissions = get_user_permissions(request.user)\n+        group_permissions = get_group_permissions(request.user)\n \n-        # Allow `list` and `retrieve` for all models except restricted ones\n+        # ✅ Allow `list` and `retrieve` for all models except restricted ones\n         if view.action in [\"list\", \"retrieve\"] and model_name not in RESTRICTED_PUBLIC_MODELS:\n             return True\n \n-        # Superusers always have full access\n+        # ✅ Superusers always have full access\n         if request.user.is_superuser:\n             return True\n \n-        # Check if the user has the required permission\n+        # ❌ Strictly check if the user has permission for this model from groups\n+        if model_name not in group_permissions:\n+            return False  # User's groups have NO permission for this model\n+\n+        # 🔒 Enforce permission mapping (prevent unauthorized actions)\n         required_permission = ACTION_PERMISSION_MAPPING.get(view.action, None)\n-        if required_permission and model_name in user_permissions:\n-            return required_permission in user_permissions[model_name]\n+        if required_permission and required_permission not in group_permissions[model_name]:\n+            return False  # User's group does NOT have the required permission\n \n-        # Prevent deletion of restricted models (except for superusers)\n+        # 🚫 Prevent deletion of restricted models (except for superusers)\n         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n             return request.user.is_superuser\n \n-        # Default deny access\n-        return False\n+        return True  # ✅ Allow access if all checks pass\n \n     def has_object_permission(self, request, view, obj):\n         \"\"\"\n         Object-level permission handling.\n         \"\"\"\n         model_name = obj.__class__.__name__.lower()\n-        user_permissions = get_user_permissions(request.user)\n+        group_permissions = get_group_permissions(request.user)\n \n-        # Superusers always have full access\n+        # ✅ Superusers always have full access\n         if request.user.is_superuser:\n             return True\n \n-        # Prevent deletion of restricted models (except for superusers)\n+        # 🚫 Prevent deletion of restricted models (except for superusers)\n         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n             return request.user.is_superuser\n \n-        # Prevent users from deleting their own account\n+        # 🚫 Prevent users from deleting their own account\n         if view.action == \"destroy\" and model_name == \"customuser\" and obj.id == request.user.id:\n             return False\n \n-        # Users can only update their own profile\n+        # 🔒 Users can only update their own profile\n         if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n             return obj.id == request.user.id or request.user.is_staff\n \n-        # Ensure delete permissions are explicitly granted\n+        # ❌ Strictly check if the user's groups have permission for this model\n+        if model_name not in group_permissions:\n+            return False  # User's groups have NO permission for this model\n+\n+        # 🔒 Enforce permission mapping at object level\n         required_permission = ACTION_PERMISSION_MAPPING.get(view.action, None)\n-        if required_permission and model_name in user_permissions:\n-            return required_permission in user_permissions[model_name]\n+        if required_permission and required_permission not in group_permissions[model_name]:\n+            return False  # User's groups do NOT have the required permission\n \n-        return False  # Default deny access\n+        return True  # ✅ Allow access if all checks pass\n"
                },
                {
                    "date": 1739511306952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n                 continue  # Skip invalid permissions\n \n     return group_permissions\n \n-class DynamicGroupPermission(BasePermission):\n+class DynamicModelPermission(BasePermission):\n     \"\"\"\n     Fully dynamic permission class that:\n     - Uses only group-based permissions.\n     - Prevents users from accessing models they don't have permission for.\n"
                },
                {
                    "date": 1739512545456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n # Models that should NOT be publicly listed or retrieved\n RESTRICTED_PUBLIC_MODELS = [\"user\", \"adminlog\", \"sessions\"]\n \n # Models that cannot be deleted except by superusers\n-RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n+RESTRICTED_DELETE_MODELS = [\"course\", \"user\", \"adminlog\", \"sessions\"]\n \n # Fetch all registered models dynamically\n ALL_MODELS = {model.__name__.lower(): model for model in apps.get_models()}\n \n"
                },
                {
                    "date": 1739512551774,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n # Models that should NOT be publicly listed or retrieved\n RESTRICTED_PUBLIC_MODELS = [\"user\", \"adminlog\", \"sessions\"]\n \n # Models that cannot be deleted except by superusers\n-RESTRICTED_DELETE_MODELS = [\"course\", \"user\", \"adminlog\", \"sessions\"]\n+RESTRICTED_DELETE_MODELS = [ \"user\", \"adminlog\", \"sessions\"]\n \n # Fetch all registered models dynamically\n ALL_MODELS = {model.__name__.lower(): model for model in apps.get_models()}\n \n"
                },
                {
                    "date": 1739512589684,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n # Models that should NOT be publicly listed or retrieved\n RESTRICTED_PUBLIC_MODELS = [\"user\", \"adminlog\", \"sessions\"]\n \n # Models that cannot be deleted except by superusers\n-RESTRICTED_DELETE_MODELS = [ \"user\", \"adminlog\", \"sessions\"]\n+RESTRICTED_DELETE_MODELS = [\"user\", \"adminlog\", \"sessions\"]\n \n # Fetch all registered models dynamically\n ALL_MODELS = {model.__name__.lower(): model for model in apps.get_models()}\n \n"
                },
                {
                    "date": 1739689291544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,114 @@\n+from rest_framework.permissions import BasePermission\n+from django.apps import apps  # To fetch all models dynamically\n+\n+# Define API action to Django permission mapping\n+ACTION_PERMISSION_MAPPING = {\n+    \"list\": \"view\",  \n+    \"retrieve\": \"view\",\n+    \"create\": \"add\",\n+    \"update\": \"change\",\n+    \"partial_update\": \"change\",\n+    \"destroy\": \"delete\",\n+}\n+\n+# Models that should NOT be publicly listed or retrieved\n+RESTRICTED_PUBLIC_MODELS = [\"user\", \"adminlog\", \"sessions\"]\n+\n+# Models that cannot be deleted except by superusers\n+RESTRICTED_DELETE_MODELS = [\"user\", \"adminlog\", \"sessions\"]\n+\n+# Fetch all registered models dynamically\n+ALL_MODELS = {model.__name__.lower(): model for model in apps.get_models()}\n+\n+def     get_group_permissions(user):\n+    \"\"\"\n+    Fetch all permissions from user groups.\n+    Returns a dictionary mapping models to their allowed actions.\n+    \"\"\"\n+    group_permissions = {}\n+\n+    # Loop through all user groups and collect permissions\n+    for group in user.groups.all():\n+        for perm in group.permissions.all():\n+            # Extract model name and action type from permission codename\n+            try:\n+                action, model_name = perm.codename.split(\"_\", 1)  # Example: \"add_socialmedia\"\n+                if model_name not in group_permissions:\n+                    group_permissions[model_name] = set()\n+                group_permissions[model_name].add(action)\n+            except ValueError:\n+                continue  # Skip invalid permissions\n+\n+    return group_permissions\n+\n+class DynamicModelPermission(BasePermission):\n+    \"\"\"\n+    Fully dynamic permission class that:\n+    - Uses only group-based permissions.\n+    - Prevents users from accessing models they don't have permission for.\n+    - Allows `list` and `retrieve` for all models except restricted ones.\n+    - Prevents unauthorized `create`, `update`, and `delete` actions.\n+    - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n+    - Prevents users from deleting their own account.\n+    \"\"\"\n+\n+    def has_permission(self, request, view):\n+        model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n+        group_permissions = get_group_permissions(request.user)\n+\n+        # ✅ Allow `list` and `retrieve` for all models except restricted ones\n+        if view.action in [\"list\", \"retrieve\"] and model_name not in RESTRICTED_PUBLIC_MODELS:\n+            return True\n+\n+        # ✅ Superusers always have full access\n+        if request.user.is_superuser:\n+            return True\n+\n+        # ❌ Strictly check if the user has permission for this model from groups\n+        if model_name not in group_permissions:\n+            return False  # User's groups have NO permission for this model\n+\n+        # 🔒 Enforce permission mapping (prevent unauthorized actions)\n+        required_permission = ACTION_PERMISSION_MAPPING.get(view.action, None)\n+        if required_permission and required_permission not in group_permissions[model_name]:\n+            return False  # User's group does NOT have the required permission\n+\n+        # 🚫 Prevent deletion of restricted models (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser\n+\n+        return True  # ✅ Allow access if all checks pass\n+\n+    def has_object_permission(self, request, view, obj):\n+        \"\"\"\n+        Object-level permission handling.\n+        \"\"\"\n+        model_name = obj.__class__.__name__.lower()\n+        group_permissions = get_group_permissions(request.user)\n+\n+        # ✅ Superusers always have full access\n+        if request.user.is_superuser:\n+            return True\n+\n+        # 🚫 Prevent deletion of restricted models (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser\n+\n+        # 🚫 Prevent users from deleting their own account\n+        if view.action == \"destroy\" and model_name == \"customuser\" and obj.id == request.user.id:\n+            return False\n+\n+        # 🔒 Users can only update their own profile\n+        if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n+            return obj.id == request.user.id or request.user.is_staff\n+\n+        # ❌ Strictly check if the user's groups have permission for this model\n+        if model_name not in group_permissions:\n+            return False  # User's groups have NO permission for this model\n+\n+        # 🔒 Enforce permission mapping at object level\n+        required_permission = ACTION_PERMISSION_MAPPING.get(view.action, None)\n+        if required_permission and required_permission not in group_permissions[model_name]:\n+            return False  # User's groups do NOT have the required permission\n+\n+        return True  # ✅ Allow access if all checks pass\n"
                }
            ],
            "date": 1739336401943,
            "name": "Commit-0",
            "content": "from rest_framework.permissions import BasePermission\n\n# Define which models are accessible for each action\nMAPPING_API = {\n    \"list\": [\"blog\", \"course\"],  # Publicly accessible models for listing\n    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Publicly accessible models for creation\n    \"update\": [],  # No public update access (fully permission-based)\n    \"partial_update\": [],\n    \"destroy\": [],  # No public delete access (fully permission-based)\n}\n\ndef model_permissions(model_name):\n    \"\"\"\n    Fetch permissions dynamically based on model name.\n    Standard Django permission structure is used.\n    \"\"\"\n    model_name = model_name.lower()\n    return {\n        \"add\": f\"add_{model_name}\",\n        \"change\": f\"change_{model_name}\",\n        \"delete\": f\"delete_{model_name}\",\n        \"view\": f\"view_{model_name}\",\n        \"manage\": f\"manage_{model_name}\",\n        \"public\": f\"public_{model_name}\",\n        \"all\": f\"all_{model_name}\",\n    }\n\nclass AllPermission(BasePermission):\n    \"\"\"\n    A dynamic permission class that:\n    - Maps API actions to public models.\n    - Uses Django's built-in permissions for restricted models.\n    \"\"\"\n\n    def has_permission(self, request, view):\n        model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n        permissions = model_permissions(model_name)\n\n        # Allow public access if model exists in MAPPING_API for the current action\n        if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n            return True\n\n        # Full access for superusers or users with 'all_{model}' permission\n        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n            return True\n\n        # Standard Django permission checks\n        if view.action in [\"list\"]:\n            return request.user.has_perm(permissions[\"view\"])\n\n        elif view.action in [\"retrieve\"]:\n            return request.user.has_perm(permissions[\"view\"])\n\n        elif view.action in [\"create\"]:\n            return request.user.has_perm(permissions[\"add\"])\n\n        elif view.action in [\"update\", \"partial_update\"]:\n            return request.user.has_perm(permissions[\"change\"])\n\n        elif view.action == \"destroy\":\n            return request.user.has_perm(permissions[\"delete\"])\n\n        return False  # Default deny access\n\n    def has_object_permission(self, request, view, obj):\n        \"\"\"\n        Object-level permission handling.\n        \"\"\"\n        model_name = obj.__class__.__name__.lower()\n        permissions = model_permissions(model_name)\n\n        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n            return True\n\n        if view.action in [\"update\", \"partial_update\"]:\n            return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n\n        if view.action == \"destroy\":\n            return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n\n        return False  # Default deny access\n"
        }
    ]
}