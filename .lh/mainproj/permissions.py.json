{
    "sourceFile": "mainproj/permissions.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1739336401943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739336413890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-\n+#\n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n"
                },
                {
                    "date": 1739336421740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-#\n+#Fetch all the Django permissions \n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n"
                },
                {
                    "date": 1739336427208,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-#Fetch all the Django permissions \n+#Fetch all the Django permissions for a given model name \n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n"
                },
                {
                    "date": 1739337177713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n     \"update\": [],  # No public update access (fully permission-based)\n     \"partial_update\": [],\n     \"destroy\": [],  # No public delete access (fully permission-based)\n }\n-#Fetch all the Django permissions for a given model name \n+#Fetch all the Django permissions for a given model name and return a dictionary\n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n@@ -54,9 +54,9 @@\n         elif view.action in [\"create\"]:\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"])\n+            return request.user.has_perm(permissions[\"change\"]) or \n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n"
                },
                {
                    "date": 1739337191234,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         elif view.action in [\"create\"]:\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) or \n+            return request.user.has_perm(permissions[\"change\"]) or obj.id == request.user.id\n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n"
                },
                {
                    "date": 1739337227810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,9 +54,9 @@\n         elif view.action in [\"create\"]:\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) or obj.id == request.user.id\n+            return request.user.has_perm(permissions[\"change\"]) or view.obj.id == request.user.id\n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n"
                },
                {
                    "date": 1739337236409,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,21 +61,21 @@\n             return request.user.has_perm(permissions[\"delete\"])\n \n         return False  # Default deny access\n \n-    def has_object_permission(self, request, view, obj):\n-        \"\"\"\n-        Object-level permission handling.\n-        \"\"\"\n-        model_name = obj.__class__.__name__.lower()\n-        permissions = model_permissions(model_name)\n+    # def has_object_permission(self, request, view, obj):\n+    #     \"\"\"\n+    #     Object-level permission handling.\n+    #     \"\"\"\n+    #     model_name = obj.__class__.__name__.lower()\n+    #     permissions = model_permissions(model_name)\n \n-        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n-            return True\n+    #     if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n+    #         return True\n \n-        if view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n+    #     if view.action in [\"update\", \"partial_update\"]:\n+    #         return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n \n-        if view.action == \"destroy\":\n-            return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n+    #     if view.action == \"destroy\":\n+    #         return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n \n-        return False  # Default deny access\n+    #     return False  # Default deny access\n"
                },
                {
                    "date": 1739339127676,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,15 +1,15 @@\n from rest_framework.permissions import BasePermission\n \n-# Define which models are accessible for each action\n+# Define public access models for specific actions\n MAPPING_API = {\n-    \"list\": [\"blog\", \"course\"],  # Publicly accessible models for listing\n-    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Publicly accessible models for creation\n-    \"update\": [],  # No public update access (fully permission-based)\n-    \"partial_update\": [],\n-    \"destroy\": [],  # No public delete access (fully permission-based)\n+    \"list\": [\"blog\", \"course\"],  # Public listing\n+    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Public creation\n }\n-#Fetch all the Django permissions for a given model name and return a dictionary\n+\n+# Define models that cannot be deleted except by superusers\n+RESTRICTED_DELETE_MODELS = [\"course\", \"blog\"]\n+\n def model_permissions(model_name):\n     \"\"\"\n     Fetch permissions dynamically based on model name.\n     Standard Django permission structure is used.\n@@ -29,8 +29,11 @@\n     \"\"\"\n     A dynamic permission class that:\n     - Maps API actions to public models.\n     - Uses Django's built-in permissions for restricted models.\n+    - Prevents users from deleting models in RESTRICTED_DELETE_MODELS (except superusers).\n+    - Prevents users from deleting their own account.\n+    - Ensures users can only update their own profiles.\n     \"\"\"\n \n     def has_permission(self, request, view):\n         model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n@@ -39,43 +42,61 @@\n         # Allow public access if model exists in MAPPING_API for the current action\n         if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n             return True\n \n-        # Full access for superusers or users with 'all_{model}' permission\n-        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n+        # Full access for superusers or staff with 'all_{model}' permission\n+        if request.user.is_superuser or (request.user.is_staff and request.user.has_perm(permissions[\"all\"])):\n             return True\n \n+        # Prevent deletion of models in RESTRICTED_DELETE_MODELS (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser  # Only superusers can delete\n+\n+        # Prevent unauthenticated users from accessing private models\n+        if not request.user.is_authenticated and model_name not in MAPPING_API.get(view.action, []):\n+            return False\n+\n         # Standard Django permission checks\n-        if view.action in [\"list\"]:\n+        if view.action == \"list\":\n             return request.user.has_perm(permissions[\"view\"])\n \n-        elif view.action in [\"retrieve\"]:\n+        elif view.action == \"retrieve\":\n             return request.user.has_perm(permissions[\"view\"])\n \n-        elif view.action in [\"create\"]:\n+        elif view.action == \"create\":\n             return request.user.has_perm(permissions[\"add\"])\n \n         elif view.action in [\"update\", \"partial_update\"]:\n-            return request.user.has_perm(permissions[\"change\"]) or view.obj.id == request.user.id\n+            return request.user.has_perm(permissions[\"change\"])\n \n         elif view.action == \"destroy\":\n             return request.user.has_perm(permissions[\"delete\"])\n \n         return False  # Default deny access\n \n-    # def has_object_permission(self, request, view, obj):\n-    #     \"\"\"\n-    #     Object-level permission handling.\n-    #     \"\"\"\n-    #     model_name = obj.__class__.__name__.lower()\n-    #     permissions = model_permissions(model_name)\n+    def has_object_permission(self, request, view, obj):\n+        \"\"\"\n+        Object-level permission handling.\n+        \"\"\"\n+        model_name = obj.__class__.__name__.lower()\n+        permissions = model_permissions(model_name)\n \n-    #     if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n-    #         return True\n+        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n+            return True  # Superusers and users with 'all_{model}' permission get full access\n \n-    #     if view.action in [\"update\", \"partial_update\"]:\n-    #         return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n+        # Prevent deletion of restricted models (except for superusers)\n+        if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n+            return request.user.is_superuser\n \n-    #     if view.action == \"destroy\":\n-    #         return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n+        # Prevent users from deleting their own account\n+        if view.action == \"destroy\" and model_name == \"customuser\" and obj.id == request.user.id:\n+            return False  # Users cannot delete themselves\n \n-    #     return False  # Default deny access\n+        # Users can only update their own profile\n+        if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n+            return obj.id == request.user.id or request.user.is_staff\n+\n+        # Ensure delete permissions are explicitly granted\n+        if view.action == \"destroy\":\n+            return request.user.has_perm(permissions[\"delete\"])\n+\n+        return False  # Default deny access\n"
                },
                {
                    "date": 1739339172790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n             return request.user.is_superuser\n \n         # Prevent users from deleting their own account\n-        if view.action == \"destroy\" and model_name == \"customuser\" and obj.id == request.user.id:\n+        if view.action == \"destroy\" and model_name == \"C\" and obj.id == request.user.id:\n             return False  # Users cannot delete themselves\n \n         # Users can only update their own profile\n         if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n"
                },
                {
                    "date": 1739339179464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,13 +87,13 @@\n         if view.action == \"destroy\" and model_name in RESTRICTED_DELETE_MODELS:\n             return request.user.is_superuser\n \n         # Prevent users from deleting their own account\n-        if view.action == \"destroy\" and model_name == \"C\" and obj.id == request.user.id:\n+        if view.action == \"destroy\" and model_name == \"CustomUser\" and obj.id == request.user.id:\n             return False  # Users cannot delete themselves\n \n         # Users can only update their own profile\n-        if view.action in [\"update\", \"partial_update\"] and model_name == \"customuser\":\n+        if view.action in [\"update\", \"partial_update\"] and model_name == \"CustomUser\":\n             return obj.id == request.user.id or request.user.is_staff\n \n         # Ensure delete permissions are explicitly granted\n         if view.action == \"destroy\":\n"
                }
            ],
            "date": 1739336401943,
            "name": "Commit-0",
            "content": "from rest_framework.permissions import BasePermission\n\n# Define which models are accessible for each action\nMAPPING_API = {\n    \"list\": [\"blog\", \"course\"],  # Publicly accessible models for listing\n    \"create\": [\"contact\", \"user\", \"inquiry\"],  # Publicly accessible models for creation\n    \"update\": [],  # No public update access (fully permission-based)\n    \"partial_update\": [],\n    \"destroy\": [],  # No public delete access (fully permission-based)\n}\n\ndef model_permissions(model_name):\n    \"\"\"\n    Fetch permissions dynamically based on model name.\n    Standard Django permission structure is used.\n    \"\"\"\n    model_name = model_name.lower()\n    return {\n        \"add\": f\"add_{model_name}\",\n        \"change\": f\"change_{model_name}\",\n        \"delete\": f\"delete_{model_name}\",\n        \"view\": f\"view_{model_name}\",\n        \"manage\": f\"manage_{model_name}\",\n        \"public\": f\"public_{model_name}\",\n        \"all\": f\"all_{model_name}\",\n    }\n\nclass AllPermission(BasePermission):\n    \"\"\"\n    A dynamic permission class that:\n    - Maps API actions to public models.\n    - Uses Django's built-in permissions for restricted models.\n    \"\"\"\n\n    def has_permission(self, request, view):\n        model_name = getattr(view.queryset.model, \"__name__\", \"\").lower()\n        permissions = model_permissions(model_name)\n\n        # Allow public access if model exists in MAPPING_API for the current action\n        if view.action in MAPPING_API and model_name in MAPPING_API[view.action]:\n            return True\n\n        # Full access for superusers or users with 'all_{model}' permission\n        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n            return True\n\n        # Standard Django permission checks\n        if view.action in [\"list\"]:\n            return request.user.has_perm(permissions[\"view\"])\n\n        elif view.action in [\"retrieve\"]:\n            return request.user.has_perm(permissions[\"view\"])\n\n        elif view.action in [\"create\"]:\n            return request.user.has_perm(permissions[\"add\"])\n\n        elif view.action in [\"update\", \"partial_update\"]:\n            return request.user.has_perm(permissions[\"change\"])\n\n        elif view.action == \"destroy\":\n            return request.user.has_perm(permissions[\"delete\"])\n\n        return False  # Default deny access\n\n    def has_object_permission(self, request, view, obj):\n        \"\"\"\n        Object-level permission handling.\n        \"\"\"\n        model_name = obj.__class__.__name__.lower()\n        permissions = model_permissions(model_name)\n\n        if request.user.is_superuser or request.user.has_perm(permissions[\"all\"]):\n            return True\n\n        if view.action in [\"update\", \"partial_update\"]:\n            return request.user.has_perm(permissions[\"change\"]) and (obj.id == request.user.id or request.user.is_staff)\n\n        if view.action == \"destroy\":\n            return request.user.has_perm(permissions[\"delete\"]) and request.user.is_superuser  # Only superusers can delete\n\n        return False  # Default deny access\n"
        }
    ]
}