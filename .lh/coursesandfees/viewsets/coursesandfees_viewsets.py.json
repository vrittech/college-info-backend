{
    "sourceFile": "coursesandfees/viewsets/coursesandfees_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 78,
            "patches": [
                {
                    "date": 1733481293986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733481299153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CoursesAndFeesWriteSerializers\n"
                },
                {
                    "date": 1733734508425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,22 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+     @action(detail=False, methods=['get'], url_path=\"average-fee\")\n+    def average_fee(self, request, *args, **kwargs):\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+        \n+        average_fee_data = (\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n+            .values('college__name')\n+            .annotate(average_fee=Avg('amount'))\n+        )\n+        \n+        if not average_fee_data:\n+            return Response({\"message\": \"No data available for the specified course.\"}, status=404)\n+        \n+        return Response(average_fee_data, status=200)\n \n"
                },
                {
                    "date": 1733734527168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,13 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework.viewsets import ModelViewSet\n+from django.db.models import Avg\n+from .models import CoursesAndFees\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n@@ -34,9 +39,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-     @action(detail=False, methods=['get'], url_path=\"average-fee\")\n+    @action(detail=False, methods=['get'], url_path=\"average-fee\")\n     def average_fee(self, request, *args, **kwargs):\n         course_id = request.query_params.get('course_id', None)\n         if not course_id:\n             return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n"
                },
                {
                    "date": 1733734534000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,9 @@\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from rest_framework.viewsets import ModelViewSet\n-from django.db.models import Avg\n-from .models import CoursesAndFees\n+from django.db.models import AvgCoursesAndFees\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1733734541496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from django.db.models import AvgCoursesAndFees\n+from django.db.models import Avg\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1733734778757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,21 +37,28 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"average-fee\")\n-    def average_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n+    def average_course_fee(self, request, *args, **kwargs):\n+        course_name = request.query_params.get('course_name', None)\n+        if not course_name:\n+            return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n         \n-        average_fee_data = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n-            .values('college__name')\n-            .annotate(average_fee=Avg('amount'))\n+        try:\n+            # Find the course by name\n+            course = Course.objects.get(name=course_name)\n+        except Course.DoesNotExist:\n+            return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n+        \n+        # Calculate the overall average fee for the course\n+        average_fee = (\n+            CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n+            .aggregate(overall_average_fee=Avg('amount'))\n         )\n+\n+        # Check if there is any data\n+        if average_fee['overall_average_fee'] is None:\n+            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n         \n-        if not average_fee_data:\n-            return Response({\"message\": \"No data available for the specified course.\"}, status=404)\n-        \n-        return Response(average_fee_data, status=200)\n+        return Response({\"course_name\": course_name, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n \n"
                },
                {
                    "date": 1733734786037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n             return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n         \n         try:\n             # Find the course by name\n-            course = Course.objects.get(name=course_name)\n+            course = Coursea.objects.get(name=course_name)\n         except Course.DoesNotExist:\n             return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n         \n         # Calculate the overall average fee for the course\n"
                },
                {
                    "date": 1733734808748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n+from coursemanagement\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n \n@@ -45,9 +46,9 @@\n             return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n         \n         try:\n             # Find the course by name\n-            course = Coursea.objects.get(name=course_name)\n+            course = Course.objects.get(name=course_name)\n         except Course.DoesNotExist:\n             return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n         \n         # Calculate the overall average fee for the course\n"
                },
                {
                    "date": 1733734815339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n-from coursemanagement\n+from coursemanagement.models import Course\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n \n"
                },
                {
                    "date": 1733734881051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,26 +40,19 @@\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n     def average_course_fee(self, request, *args, **kwargs):\n-        course_name = request.query_params.get('course_name', None)\n-        if not course_name:\n-            return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n         \n-        try:\n-            # Find the course by name\n-            course = Course.objects.get(name=course_name)\n-        except Course.DoesNotExist:\n-            return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n-        \n-        # Calculate the overall average fee for the course\n+        # Calculate the overall average fee for the given course\n         average_fee = (\n-            CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n             .aggregate(overall_average_fee=Avg('amount'))\n         )\n \n         # Check if there is any data\n         if average_fee['overall_average_fee'] is None:\n             return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n         \n-        return Response({\"course_name\": course_name, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n-\n+        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733734886484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n-from coursemanagement.models import Course\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n \n"
                },
                {
                    "date": 1733734913615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = CoursesAndFees.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n"
                },
                {
                    "date": 1733740520363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1733740528311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733740533534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'id': ['exact'],\n+        'is_admission': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1738748451038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = CoursesAndFees.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n"
                },
                {
                    "date": 1739264448325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.db.models import Avg\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n-    # permission_classes = [coursesandfeesPermission]\n+    permission_classes = [coursesandfeesPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = CoursesAndFees.objects.all().order_by('-id')\n \n"
                },
                {
                    "date": 1739509352092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n+from mainproj\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1739509359345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n-from mainproj\n+from mainproj.permissions import DynamicModelPermission\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1739699266152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+from rest_framework import viewsets\n+from rest_framework.permissions import AllowAny\n+\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import CoursesAndFees\n+from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from django.db.models import Avg\n+from mainproj.permissions import DynamicModelPermission\n+\n+class coursesandfeesViewsets(viewsets.ModelViewSet):\n+    serializer_class = CoursesAndFeesListSerializers\n+    permission_classes = [DynamicModelPermission]\n+    authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = CoursesAndFees.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'is_admission': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CoursesAndFeesWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CoursesAndFeesRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n+    def average_course_fee(self, request, *args, **kwargs):\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+        \n+        # Calculate the overall average fee for the given course\n+        average_fee = (\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n+            .aggregate(overall_average_fee=Avg('amount'))\n+        )\n+\n+        # Check if there is any data\n+        if average_fee['overall_average_fee'] is None:\n+            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n+        \n+        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739699281277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+from rest_framework import viewsets\n+from rest_framework.permissions import AllowAny\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import CoursesAndFees\n+from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from django.db.models import Avg\n+from mainproj.permissions import DynamicModelPermission\n+\n+class coursesandfeesViewsets(viewsets.ModelViewSet):\n+    serializer_class = CoursesAndFeesListSerializers\n+    permission_classes = [DynamicModelPermission]\n+    authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = CoursesAndFees.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'is_admission': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CoursesAndFeesWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CoursesAndFeesRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee\",permission_classes=[AllowAny])\n+    def average_course_fee(self, request, *args, **kwargs):\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+        \n+        # Calculate the overall average fee for the given course\n+        average_fee = (\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n+            .aggregate(overall_average_fee=Avg('amount'))\n+        )\n+\n+        # Check if there is any data\n+        if average_fee['overall_average_fee'] is None:\n+            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n+        \n+        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739872954312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,11 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n from mainproj.permissions import DynamicModelPermission\n+from django.shortcuts import get_object_or_404\n \n+\n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [DynamicModelPermission]\n     authentication_classes = [JWTAuthentication]\n@@ -56,125 +58,5 @@\n         # Check if there is any data\n         if average_fee['overall_average_fee'] is None:\n             return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n         \n-        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n-from rest_framework import viewsets\n-from rest_framework.permissions import AllowAny\n-\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import CoursesAndFees\n-from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from django.db.models import Avg\n-from mainproj.permissions import DynamicModelPermission\n-\n-class coursesandfeesViewsets(viewsets.ModelViewSet):\n-    serializer_class = CoursesAndFeesListSerializers\n-    permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = CoursesAndFees.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'is_admission': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CoursesAndFeesWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CoursesAndFeesRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n-    def average_course_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n-        \n-        # Calculate the overall average fee for the given course\n-        average_fee = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n-            .aggregate(overall_average_fee=Avg('amount'))\n-        )\n-\n-        # Check if there is any data\n-        if average_fee['overall_average_fee'] is None:\n-            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n-        \n-        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import CoursesAndFees\n-from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from django.db.models import Avg\n-from mainproj.permissions import DynamicModelPermission\n-\n-class coursesandfeesViewsets(viewsets.ModelViewSet):\n-    serializer_class = CoursesAndFeesListSerializers\n-    permission_classes = [coursesandfeesPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = CoursesAndFees.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'is_admission': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CoursesAndFeesWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CoursesAndFeesRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n-    def average_course_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n-        \n-        # Calculate the overall average fee for the given course\n-        average_fee = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n-            .aggregate(overall_average_fee=Avg('amount'))\n-        )\n-\n-        # Check if there is any data\n-        if average_fee['overall_average_fee'] is None:\n-            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n-        \n         return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739872970715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,21 +42,27 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee\",permission_classes=[AllowAny])\n-    def average_course_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n-        \n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\", permission_classes=[AllowAny])\n+    def average_course_fee(self, request, slug=None, *args, **kwargs):\n+        \"\"\"\n+        Fetch the average fee for a given course using its slug.\n+        \"\"\"\n+        # Fetch the course using the slug\n+        course = get_object_or_404(Course, slug=slug)\n+\n         # Calculate the overall average fee for the given course\n         average_fee = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n\\ No newline at end of file\n+            CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n             .aggregate(overall_average_fee=Avg('amount'))\n         )\n \n-        # Check if there is any data\n+        # Check if data exists\n         if average_fee['overall_average_fee'] is None:\n             return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n-        \n-        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n+\n+        return Response({\n+            \"course_slug\": slug,\n+            \"course_name\": course.name,  # Assuming `name` field exists\n+            \"overall_average_fee\": average_fee['overall_average_fee']\n+        }, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739872989154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n+f\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739872997172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n-f\n+from c\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739873003855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n-from c\n+from coursemanagement.\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739873009516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n-from coursemanagement.\n+from coursemanagement.models import Course\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739873113671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,21 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\", permission_classes=[AllowAny])\n+    from django.db.models import Avg\n+from rest_framework.response import Response\n+from rest_framework.decorators import action\n+from rest_framework.permissions import AllowAny\n+from django.shortcuts import get_object_or_404\n+from rest_framework import viewsets\n+from .models import CoursesAndFees, Course  # Assuming Course model exists\n+\n+class CourseViewSet(viewsets.ModelViewSet):  # Use ModelViewSet for full functionality\n+    queryset = Course.objects.all()\n+    permission_classes = [AllowAny]\n+\n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n@@ -65,5 +77,5 @@\n         return Response({\n             \"course_slug\": slug,\n             \"course_name\": course.name,  # Assuming `name` field exists\n             \"overall_average_fee\": average_fee['overall_average_fee']\n-        }, status=200)\n\\ No newline at end of file\n+        }, status=200)\n"
                },
                {
                    "date": 1739873122644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,17 +42,8 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-    \n-    from django.db.models import Avg\n-from rest_framework.response import Response\n-from rest_framework.decorators import action\n-from rest_framework.permissions import AllowAny\n-from django.shortcuts import get_object_or_404\n-from rest_framework import viewsets\n-from .models import CoursesAndFees, Course  # Assuming Course model exists\n-\n class CourseViewSet(viewsets.ModelViewSet):  # Use ModelViewSet for full functionality\n     queryset = Course.objects.all()\n     permission_classes = [AllowAny]\n \n"
                },
                {
                    "date": 1739873133025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,13 +42,9 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-class CourseViewSet(viewsets.ModelViewSet):  # Use ModelViewSet for full functionality\n-    queryset = Course.objects.all()\n-    permission_classes = [AllowAny]\n-\n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n+    @action(detail=False, methods=['get'], per url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n"
                },
                {
                    "date": 1739873157300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-    @action(detail=False, methods=['get'], per url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n+    @action(detail=True, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n"
                },
                {
                    "date": 1739873265993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-    @action(detail=True, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n+    @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n"
                },
                {
                    "date": 1740032672398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'is_admission': ['exact'],\n+        \n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1740032723100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,8 +26,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'is_admission': ['exact'],\n+        'college': ['exact'],\n         \n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1740032736908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,10 +26,10 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'is_admission': ['exact'],\n-        'college': ['exact'],\n-        \n+        'college__slug': ['exact'],\n+        'course': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1740032777532,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'is_admission': ['exact'],\n         'college__slug': ['exact'],\n-        'course': ['exact'],\n+        'course__slug': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1740634968090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,27 +44,41 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-    @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n+    @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n+        If no slug is provided, return the average fee for all courses.\n         \"\"\"\n-        # Fetch the course using the slug\n-        course = get_object_or_404(Course, slug=slug)\n+        if slug:\n+            # Fetch the course using the slug\n+            course = get_object_or_404(Course, slug=slug)\n \n-        # Calculate the overall average fee for the given course\n-        average_fee = (\n-            CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n-            .aggregate(overall_average_fee=Avg('amount'))\n-        )\n+            # Calculate the overall average fee for the given course\n+            average_fee = (\n+                CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n+                .aggregate(overall_average_fee=Avg('amount'))\n+            )\n \n-        # Check if data exists\n-        if average_fee['overall_average_fee'] is None:\n-            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n+            # Check if data exists\n+            if average_fee['overall_average_fee'] is None:\n+                return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n \n-        return Response({\n-            \"course_slug\": slug,\n-            \"course_name\": course.name,  # Assuming `name` field exists\n-            \"overall_average_fee\": average_fee['overall_average_fee']\n-        }, status=200)\n+            return Response({\n+                \"course_slug\": slug,\n+                \"course_name\": course.name,  # Assuming `name` field exists\n+                \"overall_average_fee\": average_fee['overall_average_fee']\n+            }, status=200)\n+        \n+        else:\n+            # Calculate the average fee for each course\n+            course_fees = (\n+                CoursesAndFees.objects.values('course__name', 'course__slug')\n+                .annotate(overall_average_fee=Avg('amount'))\n+            )\n+\n+            if not course_fees:\n+                return Response({\"message\": \"No fee data available for any course.\"}, status=404)\n+\n+            return Response({\"courses\": list(course_fees)}, status=200)\n"
                },
                {
                    "date": 1740789640266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n+    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = CoursesAndFees.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n@@ -31,17 +31,22 @@\n         'course__slug': ['exact'],\n     }\n \n     def get_queryset(self):\n-        queryset = super().get_queryset()\n+        if self.request.user.is_authenticated:\n+            queryset = super().get_queryset().filter(college = self.request.user.college)\n+        else:\n+            queryset = super().get_queryset()\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CoursesAndFeesWriteSerializers\n         elif self.action == 'retrieve':\n             return CoursesAndFeesRetrieveSerializers\n         return super().get_serializer_class()\n+    \n+    \n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1740789655957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,10 @@\n from rest_framework.response import Response\n from django.db.models import Avg\n from mainproj.permissions import DynamicModelPermission\n from django.shortcuts import get_object_or_404\n+from rest_framework.response import Response\n+from rest_framework import status\n \n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n@@ -44,9 +46,18 @@\n         elif self.action == 'retrieve':\n             return CoursesAndFeesRetrieveSerializers\n         return super().get_serializer_class()\n     \n-    \n+    def destroy(self, request, *args, **kwargs):\n+        \"\"\" Override destroy method to return 200 OK even if object does not exist \"\"\"\n+        try:\n+            instance = self.get_object()\n+            self.perform_destroy(instance)\n+            return Response({\"detail\": \"Deleted successfully\"}, status=status.HTTP_200_OK)\n+        except CoursesAndFees.DoesNotExist:\n+            return Response({\"detail\": \"No CoursesAndFees found, but returning 200 OK\"}, status=status.HTTP_200_OK)\n+        except Exception as e:\n+            return Response({\"error\": str(e)}, status=status.HTTP_400_BAD_REQUEST)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n"
                },
                {
                    "date": 1740789683818,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n             instance = self.get_object()\n             self.perform_destroy(instance)\n             return Response({\"detail\": \"Deleted successfully\"}, status=status.HTTP_200_OK)\n         except CoursesAndFees.DoesNotExist:\n-            return Response({\"detail\": \"No CoursesAndFees found, but returning 200 OK\"}, status=status.HTTP_200_OK)\n+            return Response({\"detail\": \"No CoursesAndFees found\"}, status=status.HTTP_200_OK)\n         except Exception as e:\n             return Response({\"error\": str(e)}, status=status.HTTP_400_BAD_REQUEST)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1740789698808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         except Exception as e:\n             return Response({\"error\": str(e)}, status=status.HTTP_400_BAD_REQUEST)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n+    # def action_name(self, request, *args, **kwargs):[]\n     #     return super().list(request, *args, **kwargs)\n     @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740790056287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,14 +32,14 @@\n         'college__slug': ['exact'],\n         'course__slug': ['exact'],\n     }\n \n-    def get_queryset(self):\n-        if self.request.user.is_authenticated:\n-            queryset = super().get_queryset().filter(college = self.request.user.college)\n-        else:\n-            queryset = super().get_queryset()\n-        return queryset\n+    # def get_queryset(self):\n+    #     if self.request.user.is_authenticated:\n+    #         queryset = super().get_queryset().filter(college = self.request.user.college)\n+    #     else:\n+    #         queryset = super().get_queryset()\n+    #     return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CoursesAndFeesWriteSerializers\n@@ -58,9 +58,9 @@\n         except Exception as e:\n             return Response({\"error\": str(e)}, status=status.HTTP_400_BAD_REQUEST)\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):[]\n+    # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740790106514,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,9 +39,21 @@\n     #     else:\n     #         queryset = super().get_queryset()\n     #     return queryset\n \n+    def get_queryset(self):\n+        \"\"\"Admins see all data, normal users see only their college's data\"\"\"\n+        queryset = super().get_queryset()\n+\n+        if self.request.user.is_authenticated:\n+            if self.request.user.is_superuser:\n+                return queryset  # Superusers get all records\n+            else:\n+                return queryset.filter(college=self.request.user.college)  # Normal users get their college data only\n+\n+        return queryset  # If unauthenticated (unlikely due to permissions), return all\n     def get_serializer_class(self):\n+        \n         if self.action in ['create', 'update', 'partial_update']:\n             return CoursesAndFeesWriteSerializers\n         elif self.action == 'retrieve':\n             return CoursesAndFeesRetrieveSerializers\n"
                },
                {
                    "date": 1740790112867,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,18 @@\n                 return queryset.filter(college=self.request.user.college)  # Normal users get their college data only\n \n         return queryset  # If unauthenticated (unlikely due to permissions), return all\n     def get_serializer_class(self):\n-        \n+/*************  ✨ Codeium Command ⭐  *************/\n+    \"\"\"\n+    Return the appropriate serializer class based on the action.\n+    \n+    - For 'create', 'update', and 'partial_update' actions, return CoursesAndFeesWriteSerializers.\n+    - For 'retrieve' action, return CoursesAndFeesRetrieveSerializers.\n+    - For other actions, use the default serializer class from the superclass.\n+    \"\"\"\n+\n+/******  1dad60c9-80e9-42f1-bf60-838a2ab80af4  *******/\n         if self.action in ['create', 'update', 'partial_update']:\n             return CoursesAndFeesWriteSerializers\n         elif self.action == 'retrieve':\n             return CoursesAndFeesRetrieveSerializers\n"
                },
                {
                    "date": 1740790177572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,24 +51,23 @@\n                 return queryset.filter(college=self.request.user.college)  # Normal users get their college data only\n \n         return queryset  # If unauthenticated (unlikely due to permissions), return all\n     def get_serializer_class(self):\n-/*************  ✨ Codeium Command ⭐  *************/\n-    \"\"\"\n-    Return the appropriate serializer class based on the action.\n-    \n-    - For 'create', 'update', and 'partial_update' actions, return CoursesAndFeesWriteSerializers.\n-    - For 'retrieve' action, return CoursesAndFeesRetrieveSerializers.\n-    - For other actions, use the default serializer class from the superclass.\n-    \"\"\"\n-\n-/******  1dad60c9-80e9-42f1-bf60-838a2ab80af4  *******/\n         if self.action in ['create', 'update', 'partial_update']:\n             return CoursesAndFeesWriteSerializers\n         elif self.action == 'retrieve':\n             return CoursesAndFeesRetrieveSerializers\n         return super().get_serializer_class()\n-    \n+     def create(self, request, *args, **kwargs):\n+        \"\"\" Override create method to return retrieve response format \"\"\"\n+        write_serializer = CoursesAndFeesWriteSerializers(data=request.data)\n+        write_serializer.is_valid(raise_exception=True)\n+        instance = write_serializer.save()\n+\n+        # After saving, use the retrieve serializer\n+        retrieve_serializer = CoursesAndFeesRetrieveSerializers(instance)\n+\n+        return Response(retrieve_serializer.data, status=status.HTTP_201_CREATED)\n     def destroy(self, request, *args, **kwargs):\n         \"\"\" Override destroy method to return 200 OK even if object does not exist \"\"\"\n         try:\n             instance = self.get_object()\n"
                },
                {
                    "date": 1740790182887,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,10 @@\n             return CoursesAndFeesWriteSerializers\n         elif self.action == 'retrieve':\n             return CoursesAndFeesRetrieveSerializers\n         return super().get_serializer_class()\n-     def create(self, request, *args, **kwargs):\n+    \n+    def create(self, request, *args, **kwargs):\n         \"\"\" Override create method to return retrieve response format \"\"\"\n         write_serializer = CoursesAndFeesWriteSerializers(data=request.data)\n         write_serializer.is_valid(raise_exception=True)\n         instance = write_serializer.save()\n"
                },
                {
                    "date": 1741517712199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,37 +85,44 @@\n     @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n-        If no slug is provided, return the average fee for all courses.\n+        If no slug is provided, return the average fee for all courses, including colleges without courses.\n         \"\"\"\n+\n         if slug:\n-            # Fetch the course using the slug\n+            # Fetch course by slug\n             course = get_object_or_404(Course, slug=slug)\n \n-            # Calculate the overall average fee for the given course\n+            # Calculate overall average fee for the given course\n             average_fee = (\n                 CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n                 .aggregate(overall_average_fee=Avg('amount'))\n             )\n \n-            # Check if data exists\n+            # Return null if no fee data exists\n             if average_fee['overall_average_fee'] is None:\n                 return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n \n             return Response({\n                 \"course_slug\": slug,\n-                \"course_name\": course.name,  # Assuming `name` field exists\n+                \"course_name\": course.name,\n                 \"overall_average_fee\": average_fee['overall_average_fee']\n             }, status=200)\n-        \n+\n         else:\n-            # Calculate the average fee for each course\n-            course_fees = (\n-                CoursesAndFees.objects.values('course__name', 'course__slug')\n-                .annotate(overall_average_fee=Avg('amount'))\n-            )\n+            # Fetch all colleges with or without courses\n+            colleges = College.objects.annotate(\n+                has_courses=Count('courses'),  # Count the courses in each college\n+                overall_average_fee=Avg('courses__coursesandfees__amount', filter=Q(courses__coursesandfees__amount__isnull=False))\n+            ).values('name', 'id', 'overall_average_fee')\n \n-            if not course_fees:\n-                return Response({\"message\": \"No fee data available for any course.\"}, status=404)\n+            # Convert empty values to None explicitly\n+            for college in colleges:\n+                if college[\"has_courses\"] == 0:\n+                    college[\"overall_average_fee\"] = None\n \n-            return Response({\"courses\": list(course_fees)}, status=200)\n+            # Paginate results\n+            paginator = MYPagenumberPagination()\n+            paginated_colleges = paginator.paginate_queryset(list(colleges), request)\n+            \n+            return paginator.get_paginated_response({\"colleges\": paginated_colleges})\n"
                },
                {
                    "date": 1741517733528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,8 +121,8 @@\n                 if college[\"has_courses\"] == 0:\n                     college[\"overall_average_fee\"] = None\n \n             # Paginate results\n-            paginator = MYPagenumberPagination()\n+            paginator = MyPageNumberPagination()\n             paginated_colleges = paginator.paginate_queryset(list(colleges), request)\n             \n             return paginator.get_paginated_response({\"colleges\": paginated_colleges})\n"
                },
                {
                    "date": 1741517745446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n from mainproj.permissions import DynamicModelPermission\n from django.shortcuts import get_object_or_404\n from rest_framework.response import Response\n from rest_framework import status\n+from \n \n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n"
                },
                {
                    "date": 1741517771073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n from mainproj.permissions import DynamicModelPermission\n from django.shortcuts import get_object_or_404\n from rest_framework.response import Response\n from rest_framework import status\n-from \n+from colle\n \n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n"
                },
                {
                    "date": 1741517789446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,11 +12,12 @@\n from mainproj.permissions import DynamicModelPermission\n from django.shortcuts import get_object_or_404\n from rest_framework.response import Response\n from rest_framework import status\n-from colle\n+from collegemanagement.models import College\n \n \n+\n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1741517797102,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,11 @@\n from django.shortcuts import get_object_or_404\n from rest_framework.response import Response\n from rest_framework import status\n from collegemanagement.models import College\n+from \n \n \n-\n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1741517813785,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,12 @@\n from mainproj.permissions import DynamicModelPermission\n from django.shortcuts import get_object_or_404\n from rest_framework.response import Response\n from rest_framework import status\n-from collegemanagement.models import College\n+from collegemanagement.models import Collegefrom django.db.models import Avg, Count, Q\n+from django.shortcuts import get_object_or_404\n+from rest_framework.response import Response\n+from rest_framework.decorators import action\n from \n \n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n"
                },
                {
                    "date": 1741517820228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,13 +12,10 @@\n from mainproj.permissions import DynamicModelPermission\n from django.shortcuts import get_object_or_404\n from rest_framework.response import Response\n from rest_framework import status\n-from collegemanagement.models import Collegefrom django.db.models import Avg, Count, Q\n-from django.shortcuts import get_object_or_404\n-from rest_framework.response import Response\n-from rest_framework.decorators import action\n-from \n+from collegemanagement.models import Collegefrom \n+django.db.models import Avg, Count, Q\n \n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n"
                },
                {
                    "date": 1741517825976,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n from mainproj.permissions import DynamicModelPermission\n from django.shortcuts import get_object_or_404\n from rest_framework.response import Response\n from rest_framework import status\n-from collegemanagement.models import Collegefrom \n-django.db.models import Avg, Count, Q\n+from collegemanagement.models import College\n+from django.db.models import Avg, Count, Q\n \n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n"
                },
                {
                    "date": 1741517966517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             course = get_object_or_404(Course, slug=slug)\n \n             # Calculate overall average fee for the given course\n             average_fee = (\n-                CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n+                CoursesAndFees.objects.filter(course=college_courses_and_fees, amount__isnull=False)\n                 .aggregate(overall_average_fee=Avg('amount'))\n             )\n \n             # Return null if no fee data exists\n"
                },
                {
                    "date": 1741518045222,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -96,9 +96,9 @@\n             course = get_object_or_404(Course, slug=slug)\n \n             # Calculate overall average fee for the given course\n             average_fee = (\n-                CoursesAndFees.objects.filter(course=college_courses_and_fees, amount__isnull=False)\n+                CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n                 .aggregate(overall_average_fee=Avg('amount'))\n             )\n \n             # Return null if no fee data exists\n@@ -113,18 +113,19 @@\n \n         else:\n             # Fetch all colleges with or without courses\n             colleges = College.objects.annotate(\n-                has_courses=Count('courses'),  # Count the courses in each college\n-                overall_average_fee=Avg('courses__coursesandfees__amount', filter=Q(courses__coursesandfees__amount__isnull=False))\n+                has_courses=Count('college_courses_and_fees'),  # Update related name if necessary\n+                overall_average_fee=Avg('college_courses_and_fees__amount', filter=Q(college_courses_and_fees__amount__isnull=False))\n             ).values('name', 'id', 'overall_average_fee')\n \n             # Convert empty values to None explicitly\n             for college in colleges:\n                 if college[\"has_courses\"] == 0:\n                     college[\"overall_average_fee\"] = None\n \n             # Paginate results\n-            paginator = MyPageNumberPagination()\n+            paginator = MYPagenumberPagination()\n             paginated_colleges = paginator.paginate_queryset(list(colleges), request)\n             \n             return paginator.get_paginated_response({\"colleges\": paginated_colleges})\n+\n"
                },
                {
                    "date": 1741518051436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n                 if college[\"has_courses\"] == 0:\n                     college[\"overall_average_fee\"] = None\n \n             # Paginate results\n-            paginator = MYPagenumberPagination()\n+            paginator = MyPagenumberPagination()\n             paginated_colleges = paginator.paginate_queryset(list(colleges), request)\n             \n             return paginator.get_paginated_response({\"colleges\": paginated_colleges})\n \n"
                },
                {
                    "date": 1741518232751,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,46 +86,59 @@\n     #     return super().list(request, *args, **kwargs)\n     @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n-        Fetch the average fee for a given course using its slug.\n-        If no slug is provided, return the average fee for all courses, including colleges without courses.\n+        Fetch the average fee for courses.\n+        - If a course slug is provided, return its average fee.\n+        - If no slug is provided, return the average fee for all courses.\n+        - Courses with no fee data should return `null` as their fee.\n         \"\"\"\n \n         if slug:\n             # Fetch course by slug\n             course = get_object_or_404(Course, slug=slug)\n \n-            # Calculate overall average fee for the given course\n+            # Calculate the average fee for the given course\n             average_fee = (\n-                CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n+                CoursesAndFees.objects.filter(course=course)\n                 .aggregate(overall_average_fee=Avg('amount'))\n             )\n \n-            # Return null if no fee data exists\n-            if average_fee['overall_average_fee'] is None:\n-                return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n-\n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n-                \"overall_average_fee\": average_fee['overall_average_fee']\n+                \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n         else:\n-            # Fetch all colleges with or without courses\n-            colleges = College.objects.annotate(\n-                has_courses=Count('college_courses_and_fees'),  # Update related name if necessary\n-                overall_average_fee=Avg('college_courses_and_fees__amount', filter=Q(college_courses_and_fees__amount__isnull=False))\n-            ).values('name', 'id', 'overall_average_fee')\n+            # Fetch all courses\n+            courses = Course.objects.all().values('name', 'slug')\n \n-            # Convert empty values to None explicitly\n-            for college in colleges:\n-                if college[\"has_courses\"] == 0:\n-                    college[\"overall_average_fee\"] = None\n+            # Calculate the average fee for each course\n+            course_fees = {\n+                course['slug']: {\n+                    \"course_name\": course['name'],\n+                    \"course_slug\": course['slug'],\n+                    \"overall_average_fee\": None,  # Default to null\n+                }\n+                for course in courses\n+            }\n \n-            # Paginate results\n-            paginator = MyPagenumberPagination()\n-            paginated_colleges = paginator.paginate_queryset(list(colleges), request)\n-            \n-            return paginator.get_paginated_response({\"colleges\": paginated_colleges})\n+            # Fetch courses with fee data\n+            fees = (\n+                CoursesAndFees.objects.values('course__slug')\n+                .annotate(overall_average_fee=Avg('amount'))\n+            )\n \n+            # Update the dictionary with available fee data\n+            for fee in fees:\n+                course_fees[fee['course__slug']][\"overall_average_fee\"] = fee[\"overall_average_fee\"]\n+\n+            # Convert dictionary to list\n+            course_list = list(course_fees.values())\n+\n+            # Paginate the response\n+            paginator = MYPagenumberPagination()\n+            paginated_courses = paginator.paginate_queryset(course_list, request)\n+\n+            return paginator.get_paginated_response({\"courses\": paginated_courses})\n+\n"
                },
                {
                    "date": 1741518239558,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n             # Convert dictionary to list\n             course_list = list(course_fees.values())\n \n             # Paginate the response\n-            paginator = MYPagenumberPagination()\n+            paginator = MyPageNumberPagination()\n             paginated_courses = paginator.paginate_queryset(course_list, request)\n \n             return paginator.get_paginated_response({\"courses\": paginated_courses})\n \n"
                },
                {
                    "date": 1741519006007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,18 +86,27 @@\n     #     return super().list(request, *args, **kwargs)\n     @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n-        Fetch the average fee for courses.\n+        Fetch the average fee for courses with filtering.\n         - If a course slug is provided, return its average fee.\n         - If no slug is provided, return the average fee for all courses.\n+        - Filter by affiliation if provided.\n         - Courses with no fee data should return `null` as their fee.\n         \"\"\"\n \n+        # Get optional affiliation filter from query parameters\n+        affiliation_id = request.query_params.get(\"affiliation\", None)\n+\n         if slug:\n-            # Fetch course by slug\n-            course = get_object_or_404(Course, slug=slug)\n+            # Fetch course by slug and apply affiliation filter if provided\n+            course_query = Course.objects.filter(slug=slug)\n+            if affiliation_id:\n+                course_query = course_query.filter(affiliation__id=affiliation_id)\n \n+            # Check if course exists after filtering\n+            course = get_object_or_404(course_query)\n+\n             # Calculate the average fee for the given course\n             average_fee = (\n                 CoursesAndFees.objects.filter(course=course)\n                 .aggregate(overall_average_fee=Avg('amount'))\n@@ -105,28 +114,35 @@\n \n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n+                \"affiliation\": course.affiliation.name if course.affiliation else None,  # Assuming `name` exists in Affiliation\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n         else:\n-            # Fetch all courses\n-            courses = Course.objects.all().values('name', 'slug')\n+            # Fetch all courses and apply affiliation filter if provided\n+            courses_query = Course.objects.all()\n+            if affiliation_id:\n+                courses_query = courses_query.filter(affiliation__id=affiliation_id)\n \n-            # Calculate the average fee for each course\n+            courses = courses_query.values('name', 'slug', 'affiliation__name')\n+\n+            # Build a dictionary of courses\n             course_fees = {\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n+                    \"affiliation\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n             }\n \n-            # Fetch courses with fee data\n+            # Fetch courses that have fee data\n             fees = (\n-                CoursesAndFees.objects.values('course__slug')\n+                CoursesAndFees.objects.filter(course__slug__in=course_fees.keys())\n+                .values('course__slug')\n                 .annotate(overall_average_fee=Avg('amount'))\n             )\n \n             # Update the dictionary with available fee data\n@@ -140,5 +156,4 @@\n             paginator = MyPageNumberPagination()\n             paginated_courses = paginator.paginate_queryset(course_list, request)\n \n             return paginator.get_paginated_response({\"courses\": paginated_courses})\n-\n"
                },
                {
                    "date": 1741519119992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,8 +32,9 @@\n         'id': ['exact'],\n         'is_admission': ['exact'],\n         'college__slug': ['exact'],\n         'course__slug': ['exact'],\n+        'course__affiliation__id': ['exact'],  # Filter by affiliation\n     }\n \n     # def get_queryset(self):\n     #     if self.request.user.is_authenticated:\n"
                },
                {
                    "date": 1741519134214,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,20 +87,21 @@\n     #     return super().list(request, *args, **kwargs)\n     @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n-        Fetch the average fee for courses with filtering.\n+        Fetch the average fee for courses with advanced filtering.\n         - If a course slug is provided, return its average fee.\n         - If no slug is provided, return the average fee for all courses.\n-        - Filter by affiliation if provided.\n+        - Filter by affiliation, college, or other parameters.\n         - Courses with no fee data should return `null` as their fee.\n         \"\"\"\n-\n-        # Get optional affiliation filter from query parameters\n+        \n+        # Get optional filters from query parameters\n         affiliation_id = request.query_params.get(\"affiliation\", None)\n+        college_slug = request.query_params.get(\"college\", None)\n \n         if slug:\n-            # Fetch course by slug and apply affiliation filter if provided\n+            # Fetch course by slug with optional affiliation filter\n             course_query = Course.objects.filter(slug=slug)\n             if affiliation_id:\n                 course_query = course_query.filter(affiliation__id=affiliation_id)\n \n@@ -115,17 +116,19 @@\n \n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n-                \"affiliation\": course.affiliation.name if course.affiliation else None,  # Assuming `name` exists in Affiliation\n+                \"affiliation\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n         else:\n-            # Fetch all courses and apply affiliation filter if provided\n+            # Fetch all courses and apply filters\n             courses_query = Course.objects.all()\n             if affiliation_id:\n                 courses_query = courses_query.filter(affiliation__id=affiliation_id)\n+            if college_slug:\n+                courses_query = courses_query.filter(courses_and_fees__college__slug=college_slug)\n \n             courses = courses_query.values('name', 'slug', 'affiliation__name')\n \n             # Build a dictionary of courses\n"
                },
                {
                    "date": 1741519165835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n \n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n+                \n                 \"affiliation\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n"
                },
                {
                    "date": 1741519174657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n \n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n-                \n+                \"affili\"\n                 \"affiliation\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n"
                },
                {
                    "date": 1741519193995,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n \n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n-                \"affili\"\n+                \"affiliation_id\": course.affiliation.id if course.affiliation else None,\n                 \"affiliation\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n@@ -136,8 +136,9 @@\n             course_fees = {\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n+                    \n                     \"affiliation\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n"
                },
                {
                    "date": 1741519199627,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n             course_fees = {\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n-                    \n+                    \"affiliation_id\": course['affiliation__name'],\n                     \"affiliation\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n"
                },
                {
                    "date": 1741519206298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n             course_fees = {\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n-                    \"affiliation_id\": course['affiliation__name'],\n+                    \"affiliation_id\": course['affiliation__'],\n                     \"affiliation\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n"
                },
                {
                    "date": 1741519215872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,10 @@\n             course_fees = {\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n-                    \"affiliation_id\": course['affiliation__'],\n+                    \"affiliation_id\": course['affiliation__id'],\n+                    \"affiliation_name\": course['affiliation__name'],\n                     \"affiliation\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n"
                },
                {
                    "date": 1741519224601,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,10 +137,10 @@\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n                     \"affiliation_id\": course['affiliation__id'],\n-                    \"affiliation_name\": course['affiliation__name'],\n-                    \"affiliation\": course['affiliation__name'],\n+                    \"\"\n+                    \"affiliation__name\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n             }\n"
                },
                {
                    "date": 1741519230776,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n                     \"affiliation_id\": course['affiliation__id'],\n-                    \"\"\n+                    \"affiliation\"\n                     \"affiliation__name\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n"
                },
                {
                    "date": 1741519239835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,9 +137,9 @@\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n                     \"affiliation_id\": course['affiliation__id'],\n-                    \"affiliation\"\n+                    \"affiliation__slug\": course['affiliation__slug'],\n                     \"affiliation__name\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n"
                },
                {
                    "date": 1741519248282,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n                 \"affiliation_id\": course.affiliation.id if course.affiliation else None,\n-                \"affiliation\": course.affiliation.name if course.affiliation else None,\n+                \"affiliation__name\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n         else:\n"
                },
                {
                    "date": 1741519254288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,8 +117,9 @@\n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n                 \"affiliation_id\": course.affiliation.id if course.affiliation else None,\n+                \"\"\n                 \"affiliation__name\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n"
                },
                {
                    "date": 1741519267484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n                 \"affiliation_id\": course.affiliation.id if course.affiliation else None,\n-                \"\"\n+                \"affiliation\"\n                 \"affiliation__name\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n"
                },
                {
                    "date": 1741519283007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,9 +117,9 @@\n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n                 \"affiliation_id\": course.affiliation.id if course.affiliation else None,\n-                \"affiliation\"\n+                \"affiliation__slug\": course.affiliation.slug if course.affiliation else None,\n                 \"affiliation__name\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n@@ -137,9 +137,9 @@\n             course_fees = {\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n-                    \"affiliation_id\": course['affiliation__id'],\n+                    \"affiliation__id\": course['affiliation__id'],\n                     \"affiliation__slug\": course['affiliation__slug'],\n                     \"affiliation__name\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n"
                },
                {
                    "date": 1741519356175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n     #     return super().list(request, *args, **kwargs)\n     @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee(?:/(?P<slug>[^/.]+))?\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n-        Fetch the average fee for courses with advanced filtering.\n+        Fetch the average fee for courses with filtering.\n         - If a course slug is provided, return its average fee.\n         - If no slug is provided, return the average fee for all courses.\n         - Filter by affiliation, college, or other parameters.\n         - Courses with no fee data should return `null` as their fee.\n@@ -100,9 +100,9 @@\n         college_slug = request.query_params.get(\"college\", None)\n \n         if slug:\n             # Fetch course by slug with optional affiliation filter\n-            course_query = Course.objects.filter(slug=slug)\n+            course_query = Course.objects.filter(slug=slug).select_related(\"affiliation\")\n             if affiliation_id:\n                 course_query = course_query.filter(affiliation__id=affiliation_id)\n \n             # Check if course exists after filtering\n@@ -117,31 +117,35 @@\n             return Response({\n                 \"course_slug\": slug,\n                 \"course_name\": course.name,\n                 \"affiliation_id\": course.affiliation.id if course.affiliation else None,\n-                \"affiliation__slug\": course.affiliation.slug if course.affiliation else None,\n-                \"affiliation__name\": course.affiliation.name if course.affiliation else None,\n+                \"affiliation_slug\": course.affiliation.slug if course.affiliation else None,\n+                \"affiliation_name\": course.affiliation.name if course.affiliation else None,\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n         else:\n             # Fetch all courses and apply filters\n-            courses_query = Course.objects.all()\n+            courses_query = Course.objects.select_related(\"affiliation\")\n             if affiliation_id:\n                 courses_query = courses_query.filter(affiliation__id=affiliation_id)\n             if college_slug:\n                 courses_query = courses_query.filter(courses_and_fees__college__slug=college_slug)\n \n-            courses = courses_query.values('name', 'slug', 'affiliation__name')\n+            # Fetch course details\n+            courses = courses_query.values(\n+                'name', 'slug',\n+                'affiliation__id', 'affiliation__slug', 'affiliation__name'\n+            )\n \n             # Build a dictionary of courses\n             course_fees = {\n                 course['slug']: {\n                     \"course_name\": course['name'],\n                     \"course_slug\": course['slug'],\n-                    \"affiliation__id\": course['affiliation__id'],\n-                    \"affiliation__slug\": course['affiliation__slug'],\n-                    \"affiliation__name\": course['affiliation__name'],\n+                    \"affiliation_id\": course['affiliation__id'],\n+                    \"affiliation_slug\": course['affiliation__slug'],\n+                    \"affiliation_name\": course['affiliation__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n             }\n"
                },
                {
                    "date": 1741519492081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,18 +91,19 @@\n         Fetch the average fee for courses with filtering.\n         - If a course slug is provided, return its average fee.\n         - If no slug is provided, return the average fee for all courses.\n         - Filter by affiliation, college, or other parameters.\n+        - Include duration.\n         - Courses with no fee data should return `null` as their fee.\n         \"\"\"\n-        \n+\n         # Get optional filters from query parameters\n         affiliation_id = request.query_params.get(\"affiliation\", None)\n         college_slug = request.query_params.get(\"college\", None)\n \n         if slug:\n             # Fetch course by slug with optional affiliation filter\n-            course_query = Course.objects.filter(slug=slug).select_related(\"affiliation\")\n+            course_query = Course.objects.filter(slug=slug).select_related(\"affiliation\", \"duration\")\n             if affiliation_id:\n                 course_query = course_query.filter(affiliation__id=affiliation_id)\n \n             # Check if course exists after filtering\n@@ -119,23 +120,26 @@\n                 \"course_name\": course.name,\n                 \"affiliation_id\": course.affiliation.id if course.affiliation else None,\n                 \"affiliation_slug\": course.affiliation.slug if course.affiliation else None,\n                 \"affiliation_name\": course.affiliation.name if course.affiliation else None,\n+                \"duration_id\": course.duration.id if course.duration else None,\n+                \"duration_name\": course.duration.name if course.duration else None,  # Assuming `name` exists in Duration\n                 \"overall_average_fee\": average_fee['overall_average_fee'],  # Will be `None` if no fees exist\n             }, status=200)\n \n         else:\n             # Fetch all courses and apply filters\n-            courses_query = Course.objects.select_related(\"affiliation\")\n+            courses_query = Course.objects.select_related(\"affiliation\", \"duration\")\n             if affiliation_id:\n                 courses_query = courses_query.filter(affiliation__id=affiliation_id)\n             if college_slug:\n                 courses_query = courses_query.filter(courses_and_fees__college__slug=college_slug)\n \n             # Fetch course details\n             courses = courses_query.values(\n                 'name', 'slug',\n-                'affiliation__id', 'affiliation__slug', 'affiliation__name'\n+                'affiliation__id', 'affiliation__slug', 'affiliation__name',\n+                'duration__id', 'duration__name'\n             )\n \n             # Build a dictionary of courses\n             course_fees = {\n@@ -144,8 +148,10 @@\n                     \"course_slug\": course['slug'],\n                     \"affiliation_id\": course['affiliation__id'],\n                     \"affiliation_slug\": course['affiliation__slug'],\n                     \"affiliation_name\": course['affiliation__name'],\n+                    \"duration_id\": course['duration__id'],\n+                    \"duration_name\": course['duration__name'],\n                     \"overall_average_fee\": None,  # Default to null\n                 }\n                 for course in courses\n             }\n@@ -167,5 +173,5 @@\n             # Paginate the response\n             paginator = MyPageNumberPagination()\n             paginated_courses = paginator.paginate_queryset(course_list, request)\n \n-            return paginator.get_paginated_response({\"courses\": paginated_courses})\n+            return paginator.get_paginated_response({\"courses\": paginated_courses})\n\\ No newline at end of file\n"
                }
            ],
            "date": 1733481293986,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import CoursesAndFees\nfrom ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\nfrom ..utilities.importbase import *\n\nclass coursesandfeesViewsets(viewsets.ModelViewSet):\n    serializer_class = CoursesAndFeesListSerializers\n    # permission_classes = [coursesandfeesPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = CoursesAndFees.objects.all().order_by('-id')\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return CoursesAndFeesWriteSerializers\n        elif self.action == 'retrieve':\n            return CoursesAndFeesRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}