{
    "sourceFile": "coursesandfees/viewsets/coursesandfees_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 32,
            "patches": [
                {
                    "date": 1733481293986,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733481299153,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CoursesAndFeesWriteSerializers\n"
                },
                {
                    "date": 1733734508425,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -33,5 +33,22 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+     @action(detail=False, methods=['get'], url_path=\"average-fee\")\n+    def average_fee(self, request, *args, **kwargs):\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+        \n+        average_fee_data = (\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n+            .values('college__name')\n+            .annotate(average_fee=Avg('amount'))\n+        )\n+        \n+        if not average_fee_data:\n+            return Response({\"message\": \"No data available for the specified course.\"}, status=404)\n+        \n+        return Response(average_fee_data, status=200)\n \n"
                },
                {
                    "date": 1733734527168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,13 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework.viewsets import ModelViewSet\n+from django.db.models import Avg\n+from .models import CoursesAndFees\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n@@ -34,9 +39,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-     @action(detail=False, methods=['get'], url_path=\"average-fee\")\n+    @action(detail=False, methods=['get'], url_path=\"average-fee\")\n     def average_fee(self, request, *args, **kwargs):\n         course_id = request.query_params.get('course_id', None)\n         if not course_id:\n             return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n"
                },
                {
                    "date": 1733734534000,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,11 +5,9 @@\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from rest_framework.viewsets import ModelViewSet\n-from django.db.models import Avg\n-from .models import CoursesAndFees\n+from django.db.models import AvgCoursesAndFees\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1733734541496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from django.db.models import AvgCoursesAndFees\n+from django.db.models import Avg\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1733734778757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,21 +37,28 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"average-fee\")\n-    def average_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n+    def average_course_fee(self, request, *args, **kwargs):\n+        course_name = request.query_params.get('course_name', None)\n+        if not course_name:\n+            return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n         \n-        average_fee_data = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n-            .values('college__name')\n-            .annotate(average_fee=Avg('amount'))\n+        try:\n+            # Find the course by name\n+            course = Course.objects.get(name=course_name)\n+        except Course.DoesNotExist:\n+            return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n+        \n+        # Calculate the overall average fee for the course\n+        average_fee = (\n+            CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n+            .aggregate(overall_average_fee=Avg('amount'))\n         )\n+\n+        # Check if there is any data\n+        if average_fee['overall_average_fee'] is None:\n+            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n         \n-        if not average_fee_data:\n-            return Response({\"message\": \"No data available for the specified course.\"}, status=404)\n-        \n-        return Response(average_fee_data, status=200)\n+        return Response({\"course_name\": course_name, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n \n"
                },
                {
                    "date": 1733734786037,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n             return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n         \n         try:\n             # Find the course by name\n-            course = Course.objects.get(name=course_name)\n+            course = Coursea.objects.get(name=course_name)\n         except Course.DoesNotExist:\n             return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n         \n         # Calculate the overall average fee for the course\n"
                },
                {
                    "date": 1733734808748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n+from coursemanagement\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n \n@@ -45,9 +46,9 @@\n             return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n         \n         try:\n             # Find the course by name\n-            course = Coursea.objects.get(name=course_name)\n+            course = Course.objects.get(name=course_name)\n         except Course.DoesNotExist:\n             return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n         \n         # Calculate the overall average fee for the course\n"
                },
                {
                    "date": 1733734815339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n-from coursemanagement\n+from coursemanagement.models import Course\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n \n"
                },
                {
                    "date": 1733734881051,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,26 +40,19 @@\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n     def average_course_fee(self, request, *args, **kwargs):\n-        course_name = request.query_params.get('course_name', None)\n-        if not course_name:\n-            return Response({\"error\": \"course_name parameter is required.\"}, status=400)\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n         \n-        try:\n-            # Find the course by name\n-            course = Course.objects.get(name=course_name)\n-        except Course.DoesNotExist:\n-            return Response({\"error\": f\"Course with name '{course_name}' does not exist.\"}, status=404)\n-        \n-        # Calculate the overall average fee for the course\n+        # Calculate the overall average fee for the given course\n         average_fee = (\n-            CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n             .aggregate(overall_average_fee=Avg('amount'))\n         )\n \n         # Check if there is any data\n         if average_fee['overall_average_fee'] is None:\n             return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n         \n-        return Response({\"course_name\": course_name, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n-\n+        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1733734886484,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,8 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n-from coursemanagement.models import Course\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n \n"
                },
                {
                    "date": 1733734913615,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = CoursesAndFees.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n"
                },
                {
                    "date": 1733740520363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,11 +18,11 @@\n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         return queryset\n"
                },
                {
                    "date": 1733740528311,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733740533534,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n     ordering_fields = ['id']\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'id': ['exact'],\n+        'is_admission': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1738748451038,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     # permission_classes = [coursesandfeesPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = CoursesAndFees.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n"
                },
                {
                    "date": 1739264448325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n from django.db.models import Avg\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n-    # permission_classes = [coursesandfeesPermission]\n+    permission_classes = [coursesandfeesPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = CoursesAndFees.objects.all().order_by('-id')\n \n"
                },
                {
                    "date": 1739509352092,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n+from mainproj\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1739509359345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n-from mainproj\n+from mainproj.permissions import DynamicModelPermission\n \n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [coursesandfeesPermission]\n"
                },
                {
                    "date": 1739699266152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,61 @@\n+from rest_framework import viewsets\n+from rest_framework.permissions import AllowAny\n+\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import CoursesAndFees\n+from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from django.db.models import Avg\n+from mainproj.permissions import DynamicModelPermission\n+\n+class coursesandfeesViewsets(viewsets.ModelViewSet):\n+    serializer_class = CoursesAndFeesListSerializers\n+    permission_classes = [DynamicModelPermission]\n+    authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = CoursesAndFees.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'is_admission': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CoursesAndFeesWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CoursesAndFeesRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n+    def average_course_fee(self, request, *args, **kwargs):\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+        \n+        # Calculate the overall average fee for the given course\n+        average_fee = (\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n+            .aggregate(overall_average_fee=Avg('amount'))\n+        )\n+\n+        # Check if there is any data\n+        if average_fee['overall_average_fee'] is None:\n+            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n+        \n+        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739699281277,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,60 @@\n+from rest_framework import viewsets\n+from rest_framework.permissions import AllowAny\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import CoursesAndFees\n+from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from django.db.models import Avg\n+from mainproj.permissions import DynamicModelPermission\n+\n+class coursesandfeesViewsets(viewsets.ModelViewSet):\n+    serializer_class = CoursesAndFeesListSerializers\n+    permission_classes = [DynamicModelPermission]\n+    authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = CoursesAndFees.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id']\n+    ordering_fields = ['id']\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'is_admission': ['exact'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CoursesAndFeesWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CoursesAndFeesRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee\",permission_classes=[AllowAny])\n+    def average_course_fee(self, request, *args, **kwargs):\n+        course_id = request.query_params.get('course_id', None)\n+        if not course_id:\n+            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n+        \n+        # Calculate the overall average fee for the given course\n+        average_fee = (\n+            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n+            .aggregate(overall_average_fee=Avg('amount'))\n+        )\n+\n+        # Check if there is any data\n+        if average_fee['overall_average_fee'] is None:\n+            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n+        \n+        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739872954312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,11 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from django.db.models import Avg\n from mainproj.permissions import DynamicModelPermission\n+from django.shortcuts import get_object_or_404\n \n+\n class coursesandfeesViewsets(viewsets.ModelViewSet):\n     serializer_class = CoursesAndFeesListSerializers\n     permission_classes = [DynamicModelPermission]\n     authentication_classes = [JWTAuthentication]\n@@ -56,125 +58,5 @@\n         # Check if there is any data\n         if average_fee['overall_average_fee'] is None:\n             return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n         \n-        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n-from rest_framework import viewsets\n-from rest_framework.permissions import AllowAny\n-\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import CoursesAndFees\n-from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from django.db.models import Avg\n-from mainproj.permissions import DynamicModelPermission\n-\n-class coursesandfeesViewsets(viewsets.ModelViewSet):\n-    serializer_class = CoursesAndFeesListSerializers\n-    permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = CoursesAndFees.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'is_admission': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CoursesAndFeesWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CoursesAndFeesRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n-    def average_course_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n-        \n-        # Calculate the overall average fee for the given course\n-        average_fee = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n-            .aggregate(overall_average_fee=Avg('amount'))\n-        )\n-\n-        # Check if there is any data\n-        if average_fee['overall_average_fee'] is None:\n-            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n-        \n-        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import CoursesAndFees\n-from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from django.db.models import Avg\n-from mainproj.permissions import DynamicModelPermission\n-\n-class coursesandfeesViewsets(viewsets.ModelViewSet):\n-    serializer_class = CoursesAndFeesListSerializers\n-    permission_classes = [coursesandfeesPermission]\n-    authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = CoursesAndFees.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n-    ordering_fields = ['id']\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'is_admission': ['exact'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CoursesAndFeesWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CoursesAndFeesRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n-    \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee\")\n-    def average_course_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n-        \n-        # Calculate the overall average fee for the given course\n-        average_fee = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n-            .aggregate(overall_average_fee=Avg('amount'))\n-        )\n-\n-        # Check if there is any data\n-        if average_fee['overall_average_fee'] is None:\n-            return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n-        \n         return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739872970715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,21 +42,27 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee\",permission_classes=[AllowAny])\n-    def average_course_fee(self, request, *args, **kwargs):\n-        course_id = request.query_params.get('course_id', None)\n-        if not course_id:\n-            return Response({\"error\": \"course_id parameter is required.\"}, status=400)\n-        \n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\", permission_classes=[AllowAny])\n+    def average_course_fee(self, request, slug=None, *args, **kwargs):\n+        \"\"\"\n+        Fetch the average fee for a given course using its slug.\n+        \"\"\"\n+        # Fetch the course using the slug\n+        course = get_object_or_404(Course, slug=slug)\n+\n         # Calculate the overall average fee for the given course\n         average_fee = (\n-            CoursesAndFees.objects.filter(course_id=course_id, amount__isnull=False)\n\\ No newline at end of file\n+            CoursesAndFees.objects.filter(course=course, amount__isnull=False)\n             .aggregate(overall_average_fee=Avg('amount'))\n         )\n \n-        # Check if there is any data\n+        # Check if data exists\n         if average_fee['overall_average_fee'] is None:\n             return Response({\"message\": \"No fee data available for the specified course.\"}, status=404)\n-        \n-        return Response({\"course_id\": course_id, \"overall_average_fee\": average_fee['overall_average_fee']}, status=200)\n+\n+        return Response({\n+            \"course_slug\": slug,\n+            \"course_name\": course.name,  # Assuming `name` field exists\n+            \"overall_average_fee\": average_fee['overall_average_fee']\n+        }, status=200)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1739872989154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n+f\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739872997172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n-f\n+from c\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739873003855,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n-from c\n+from coursemanagement.\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739873009516,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n from rest_framework.permissions import AllowAny\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import CoursesAndFees\n-from coursemanagement.\n+from coursemanagement.models import Course\n from ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n"
                },
                {
                    "date": 1739873113671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,21 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\", permission_classes=[AllowAny])\n+    from django.db.models import Avg\n+from rest_framework.response import Response\n+from rest_framework.decorators import action\n+from rest_framework.permissions import AllowAny\n+from django.shortcuts import get_object_or_404\n+from rest_framework import viewsets\n+from .models import CoursesAndFees, Course  # Assuming Course model exists\n+\n+class CourseViewSet(viewsets.ModelViewSet):  # Use ModelViewSet for full functionality\n+    queryset = Course.objects.all()\n+    permission_classes = [AllowAny]\n+\n+    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n@@ -65,5 +77,5 @@\n         return Response({\n             \"course_slug\": slug,\n             \"course_name\": course.name,  # Assuming `name` field exists\n             \"overall_average_fee\": average_fee['overall_average_fee']\n-        }, status=200)\n\\ No newline at end of file\n+        }, status=200)\n"
                },
                {
                    "date": 1739873122644,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,17 +42,8 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-    \n-    from django.db.models import Avg\n-from rest_framework.response import Response\n-from rest_framework.decorators import action\n-from rest_framework.permissions import AllowAny\n-from django.shortcuts import get_object_or_404\n-from rest_framework import viewsets\n-from .models import CoursesAndFees, Course  # Assuming Course model exists\n-\n class CourseViewSet(viewsets.ModelViewSet):  # Use ModelViewSet for full functionality\n     queryset = Course.objects.all()\n     permission_classes = [AllowAny]\n \n"
                },
                {
                    "date": 1739873133025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,13 +42,9 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-class CourseViewSet(viewsets.ModelViewSet):  # Use ModelViewSet for full functionality\n-    queryset = Course.objects.all()\n-    permission_classes = [AllowAny]\n-\n-    @action(detail=False, methods=['get'], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n+    @action(detail=False, methods=['get'], per url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n"
                },
                {
                    "date": 1739873157300,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-    @action(detail=False, methods=['get'], per url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n+    @action(detail=True, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n"
                },
                {
                    "date": 1739873265993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n-    @action(detail=True, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n+    @action(detail=False, methods=['get'], permission_classes=[AllowAny], url_path=\"average-course-fee/(?P<slug>[^/.]+)\")\n     def average_course_fee(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n         Fetch the average fee for a given course using its slug.\n         \"\"\"\n"
                }
            ],
            "date": 1733481293986,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import CoursesAndFees\nfrom ..serializers.coursesandfees_serializers import CoursesAndFeesListSerializers, CoursesAndFeesRetrieveSerializers, CoursesAndFeesWriteSerializers\nfrom ..utilities.importbase import *\n\nclass coursesandfeesViewsets(viewsets.ModelViewSet):\n    serializer_class = CoursesAndFeesListSerializers\n    # permission_classes = [coursesandfeesPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = CoursesAndFees.objects.all().order_by('-id')\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return CoursesAndFeesWriteSerializers\n        elif self.action == 'retrieve':\n            return CoursesAndFeesRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}