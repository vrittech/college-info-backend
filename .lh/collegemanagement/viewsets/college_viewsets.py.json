{
    "sourceFile": "collegemanagement/viewsets/college_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 67,
            "patches": [
                {
                    "date": 1733718920520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733718926585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,15 @@\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = College.objects.all().order_by\n+    queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    \n+    \n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718940407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,12 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n     \n-    \n+    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718947788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n-    ordering_fields = ['id']\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733718971196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733718979511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated__name', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733719001770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated__name', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733719011950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n     ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         #return queryset.filter(user_id=self.request.user.id)\n"
                },
                {
                    "date": 1733719018685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,14 @@\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719024113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,20 +13,20 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'name', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'name': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719032235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,20 +13,20 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'name', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n+        'established_date': ['exact'],\n+        'website_link': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719044059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,8 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n         'established_date': ['exact'],\n-        'website_link': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719084811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'name': ['exact'],\n+        'college_type': ['exact'],\n         'established_date': ['exact'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733719105874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n-        'established_date': ['exact'],\n+        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719113592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,11 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n+        'established_date': ['exact'],\n+        'affiliated': ['exact'],\n+        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719120355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n+        'created_date': ['exact'],\n         'affiliated': ['exact'],\n-        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719125764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n         'created_date': ['exact'],\n-        'affiliated': ['exact'],\n+        'updated_date': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719131253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n         'created_date': ['exact'],\n-        'updated_date': ['exact'],\n+        'updated_date': ['exact',],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719137363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n-        'created_date': ['exact'],\n-        'updated_date': ['exact',],\n+        'created_date': ['exact',],\n+        'updated_date': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719143465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n-        'created_date': ['exact',],\n+        'created_date': ['exact','gte','lte'],\n         'updated_date': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733719148638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n-        'established_date': ['exact'],\n+        'established_date': ['exact','gte','lte'],\n         'created_date': ['exact','gte','lte'],\n         'updated_date': ['exact','gte','lte'],\n     }\n \n"
                },
                {
                    "date": 1733735549748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,5 +40,22 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=True, methods=['get'], url_path=\"dp-image\")\n+    def get_dp_image(self, request, pk=None):\n+        try:\n+            # Fetch the college by primary key\n+            college = self.get_object()\n+        except College.DoesNotExist:\n+            return Response({\"error\": \"College not found.\"}, status=404)\n \n+        # Check if dp_image exists\n+        if not college.dp_image:\n+            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+\n+        # Construct the absolute URL for the dp_image\n+        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+\n+        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+\n"
                },
                {
                    "date": 1733735563239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import College\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n-\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1733735574433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"dp-image\")\n+    @action(detail=True, methods=['get'], url_path=\"college-\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n"
                },
                {
                    "date": 1733735626352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-\")\n+    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n"
                },
                {
                    "date": 1733735640941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1733736397753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1733736439980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import College\n+from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+class collegeViewsets(viewsets.ModelViewSet):\n+    serializer_class = CollegeListSerializers\n+    # permission_classes = [collegemanagementPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = College.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    \n+    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'college_type': ['exact'],\n+        'affiliated': ['exact'],\n+        'established_date': ['exact','gte','lte'],\n+        'created_date': ['exact','gte','lte'],\n+        'updated_date': ['exact','gte','lte'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CollegeWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CollegeRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n+    def get_dp_image(self, request, pk=None):\n+        try:\n+            # Fetch the college by primary key\n+            college = self.get_object()\n+        except College.DoesNotExist:\n+            return Response({\"error\": \"College not found.\"}, status=404)\n+\n+        # Check if dp_image exists\n+        if not college.dp_image:\n+            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+\n+        # Construct the absolute URL for the dp_image\n+        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+\n+        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+\n"
                },
                {
                    "date": 1733813051433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,67 +58,33 @@\n         # Construct the absolute URL for the dp_image\n         dp_image_url = request.build_absolute_uri(college.dp_image.url)\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import College\n-from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-class collegeViewsets(viewsets.ModelViewSet):\n-    serializer_class = CollegeListSerializers\n-    # permission_classes = [collegemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = College.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n-    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'college_type': ['exact'],\n-        'affiliated': ['exact'],\n-        'established_date': ['exact','gte','lte'],\n-        'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact','gte','lte'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CollegeWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CollegeRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n+    @action(detail=True, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    def calculate_completion_percentage(self, request, pk=None):\n         try:\n-            # Fetch the college by primary key\n-            college = self.get_object()\n+            college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n-            return Response({\"error\": \"College not found.\"}, status=404)\n+            return Response({\"error\": \"College not found\"}, status=404)\n \n-        # Check if dp_image exists\n-        if not college.dp_image:\n-            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+        # Calculate the completion percentage\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n \n-        # Construct the absolute URL for the dp_image\n-        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+        completed_fields_count = 0\n+        for field_name in required_fields:\n+            value = getattr(college_instance, field_name, None)\n+            if value:  # Field is considered filled if it's not None or empty\n+                completed_fields_count += 1\n \n-        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+        total_required_fields = len(required_fields)\n+        if total_required_fields == 0:  # Avoid division by zero\n+            completion_percentage = 100\n+        else:\n+            completion_percentage = (completed_fields_count / total_required_fields) * 100\n \n+        return Response({\"completion_percentage\": round(completion_percentage, 2)})\n+\n"
                },
                {
                    "date": 1733813511654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=True, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=Fas, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, pk=None):\n         try:\n             college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813520519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n@@ -60,9 +60,9 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=Fas, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, pk=None):\n         try:\n             college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813575315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,31 +60,26 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    def calculate_completion_percentage(self, request, pk=None):\n-        try:\n-            college_instance = self.get_object()  # Get the College instance by primary key\n-        except College.DoesNotExist:\n-            return Response({\"error\": \"College not found\"}, status=404)\n+    AssertionError at /api/college/completion-percentage/\n+Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n+Request Method:\tGET\n+Request URL:\thttp://127.0.0.1:8000/api/college/completion-percentage/\n+Django Version:\t4.2.15\n+Exception Type:\tAssertionError\n+Exception Value:\t\n+Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n+Exception Location:\t/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/rest_framework/generics.py, line 92, in get_object\n+Raised during:\tcollegemanagement.viewsets.college_viewsets.collegeViewsets\n+Python Executable:\t/Users/vrit-prashant/Documents/college-info-backend/venv/bin/python\n+Python Version:\t3.13.1\n+Python Path:\t\n+['/Users/vrit-prashant/Documents/college-info-backend',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python313.zip',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload',\n+ '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages',\n+ '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/setuptools/_vendor']\n+Server time:\tTue, 10 Dec 2024 12:37:09 +0545\n \n-        # Calculate the completion percentage\n-        required_fields = [\n-            field.name for field in College._meta.get_fields()\n-            if isinstance(field, Field) and not field.blank and not field.null\n-        ]\n \n-        completed_fields_count = 0\n-        for field_name in required_fields:\n-            value = getattr(college_instance, field_name, None)\n-            if value:  # Field is considered filled if it's not None or empty\n-                completed_fields_count += 1\n-\n-        total_required_fields = len(required_fields)\n-        if total_required_fields == 0:  # Avoid division by zero\n-            completion_percentage = 100\n-        else:\n-            completion_percentage = (completed_fields_count / total_required_fields) * 100\n-\n-        return Response({\"completion_percentage\": round(completion_percentage, 2)})\n-\n"
                },
                {
                    "date": 1733813585099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,26 +60,28 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    AssertionError at /api/college/completion-percentage/\n-Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n-Request Method:\tGET\n-Request URL:\thttp://127.0.0.1:8000/api/college/completion-percentage/\n-Django Version:\t4.2.15\n-Exception Type:\tAssertionError\n-Exception Value:\t\n-Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n-Exception Location:\t/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/rest_framework/generics.py, line 92, in get_object\n-Raised during:\tcollegemanagement.viewsets.college_viewsets.collegeViewsets\n-Python Executable:\t/Users/vrit-prashant/Documents/college-info-backend/venv/bin/python\n-Python Version:\t3.13.1\n-Python Path:\t\n-['/Users/vrit-prashant/Documents/college-info-backend',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python313.zip',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload',\n- '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages',\n- '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/setuptools/_vendor']\n-Server time:\tTue, 10 Dec 2024 12:37:09 +0545\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+def calculate_completion_percentage(self, request, *args, **kwargs):\n+    queryset = self.get_queryset()\n+    total_colleges = queryset.count()\n+    completion_data = []\n \n+    for college in queryset:\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n \n+        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+        total_required_fields = len(required_fields)\n+        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+\n+        completion_data.append({\n+            \"college_id\": college.id,\n+            \"college_name\": college.name,\n+            \"completion_percentage\": round(completion_percentage, 2),\n+        })\n+\n+    return Response(completion_data)\n+\n"
                },
                {
                    "date": 1733813592745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,27 +61,27 @@\n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-def calculate_completion_percentage(self, request, *args, **kwargs):\n-    queryset = self.get_queryset()\n-    total_colleges = queryset.count()\n-    completion_data = []\n+    def calculate_completion_percentage(self, request, *args, **kwargs):\n+        queryset = self.get_queryset()\n+        total_colleges = queryset.count()\n+        completion_data = []\n \n-    for college in queryset:\n-        required_fields = [\n-            field.name for field in College._meta.get_fields()\n-            if isinstance(field, Field) and not field.blank and not field.null\n-        ]\n+        for college in queryset:\n+            required_fields = [\n+                field.name for field in College._meta.get_fields()\n+                if isinstance(field, Field) and not field.blank and not field.null\n+            ]\n \n-        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-        total_required_fields = len(required_fields)\n-        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+            completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+            total_required_fields = len(required_fields)\n+            completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n-        completion_data.append({\n-            \"college_id\": college.id,\n-            \"college_name\": college.name,\n-            \"completion_percentage\": round(completion_percentage, 2),\n-        })\n+            completion_data.append({\n+                \"college_id\": college.id,\n+                \"college_name\": college.name,\n+                \"completion_percentage\": round(completion_percentage, 2),\n+            })\n \n-    return Response(completion_data)\n+        return Response(completion_data)\n \n"
                },
                {
                    "date": 1733813624331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n+    def get_dp_image((self, request, *args, **kwargs):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813634057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image((self, request, *args, **kwargs):\n+    def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813684374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,24 +42,25 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n-        try:\n-            # Fetch the college by primary key\n-            college = self.get_object()\n-        except College.DoesNotExist:\n-            return Response({\"error\": \"College not found.\"}, status=404)\n+@action(detail=False, methods=['get'], url_path=\"college-logo\")\n+def get_dp_image(self, request, pk=None):\n+    colleges = College.objects.all()  # Fetch all colleges\n+    if not colleges.exists():\n+        return Response({\"error\": \"No colleges available.\"}, status=404)\n \n-        # Check if dp_image exists\n-        if not college.dp_image:\n-            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+    logos = []\n+    for college in colleges:\n+        if college.dp_image:\n+            dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+            logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n-        # Construct the absolute URL for the dp_image\n-        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+    if not logos:\n+        return Response({\"message\": \"No display images available.\"}, status=404)\n \n-        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+    return Response(logos, status=200)\n+\n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1733813689969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,24 +42,24 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-@action(detail=False, methods=['get'], url_path=\"college-logo\")\n-def get_dp_image(self, request, pk=None):\n-    colleges = College.objects.all()  # Fetch all colleges\n-    if not colleges.exists():\n-        return Response({\"error\": \"No colleges available.\"}, status=404)\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n+    def get_dp_image(self, request, pk=None):\n+        colleges = College.objects.all()  # Fetch all colleges\n+        if not colleges.exists():\n+            return Response({\"error\": \"No colleges available.\"}, status=404)\n \n-    logos = []\n-    for college in colleges:\n-        if college.dp_image:\n-            dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-            logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n+        logos = []\n+        for college in colleges:\n+            if college.dp_image:\n+                dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+                logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n-    if not logos:\n-        return Response({\"message\": \"No display images available.\"}, status=404)\n+        if not logos:\n+            return Response({\"message\": \"No display images available.\"}, status=404)\n \n-    return Response(logos, status=200)\n+        return Response(logos, status=200)\n \n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n"
                },
                {
                    "date": 1738211869612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n+    lookup_field\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1738748429280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    lookup_field\n+    lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1739264329036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n-    # permission_classes = [collegemanagementPermission]\n+    permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1739423667786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug'name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1739423679400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug'name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug;'name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739423685928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug;'name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug''name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739509253770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n+from \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n@@ -15,9 +16,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug''name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739509266238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from \n+from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1739509275263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n+    permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1739680903748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n-    permission_classes = [collegemanagementPermission]\n-    permission_classes = [collegemanagementPermission]\n+    # permission_classes = [collegemanagementPermission]\n+    permission_classes = [DynamicModelPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n@@ -32,8 +32,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n+        re\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739680910739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,11 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        re\n+        request = self.request\n+        if request.user.is_superuser:\n+            \n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739680916548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,10 @@\n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n+            return queryset\n+        else:\n             \n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682111415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            \n+            return queryset.filter(=request.user.college)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682116846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            return queryset.filter(=request.user.college)\n+            return queryset.filter(user=request.user.college)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682123181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            return queryset.filter(user=request.user.college)\n+            return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682131741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        else:\n+        elif:\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682139671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif:\n+        elif request.user.is_\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682147389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.is_\n+        elif request.user.\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682202094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.\n+        elif request.user.ha\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682210065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.ha\n+        elif request.user.has_perm('collegemanagement.change_college'):\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739940098626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,16 +21,16 @@\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n-    filterset_fields = {\n-        'id': ['exact'],\n-        'college_type': ['exact'],\n-        'affiliated': ['exact'],\n-        'established_date': ['exact','gte','lte'],\n-        'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact','gte','lte'],\n-    }\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    #     'college_type': ['exact'],\n+    #     'affiliated': ['exact'],\n+    #     'established_date': ['exact','gte','lte'],\n+    #     'created_date': ['exact','gte','lte'],\n+    #     'updated_date': ['exact','gte','lte'],\n+    # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n"
                },
                {
                    "date": 1739940104952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    \n+    filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1739940111149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n+from utilities\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1739940536528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n-from utilities\n+from ..utilities.filter import CollegeFilter\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740045725585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,20 +7,21 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n from ..utilities.filter import CollegeFilter\n+from ..utilities.pagination import MyPageNumberPagination\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n+    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', '', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n@@ -32,8 +33,9 @@\n     #     'updated_date': ['exact','gte','lte'],\n     # }\n \n     def get_queryset(self):\n+        # print(self.action)\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n@@ -70,28 +72,28 @@\n         return Response(logos, status=200)\n \n     \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    def calculate_completion_percentage(self, request, *args, **kwargs):\n-        queryset = self.get_queryset()\n-        total_colleges = queryset.count()\n-        completion_data = []\n+    # @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    # def calculate_completion_percentage(self, request, *args, **kwargs):\n+    #     queryset = self.get_queryset()\n+    #     total_colleges = queryset.count()\n+    #     completion_data = []\n \n-        for college in queryset:\n-            required_fields = [\n-                field.name for field in College._meta.get_fields()\n-                if isinstance(field, Field) and not field.blank and not field.null\n-            ]\n+    #     for college in queryset:\n+    #         required_fields = [\n+    #             field.name for field in College._meta.get_fields()\n+    #             if isinstance(field, Field) and not field.blank and not field.null\n+    #         ]\n \n-            completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-            total_required_fields = len(required_fields)\n-            completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+    #         completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+    #         total_required_fields = len(required_fields)\n+    #         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n-            completion_data.append({\n-                \"college_id\": college.id,\n-                \"college_name\": college.name,\n-                \"completion_percentage\": round(completion_percentage, 2),\n-            })\n+    #         completion_data.append({\n+    #             \"college_id\": college.id,\n+    #             \"college_name\": college.name,\n+    #             \"completion_percentage\": round(completion_percentage, 2),\n+    #         })\n \n-        return Response(completion_data)\n+    #     return Response(completion_data)\n \n"
                },
                {
                    "date": 1740045744851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', '', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1740045751546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045761152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045772134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter',  'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045779704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter',  'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                }
            ],
            "date": 1733718920520,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import College\nfrom ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\nfrom ..utilities.importbase import *\n\nclass collegeViewsets(viewsets.ModelViewSet):\n    serializer_class = CollegeListSerializers\n    # permission_classes = [collegemanagementPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = College.objects.all().order_by\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return CollegeWriteSerializers\n        elif self.action == 'retrieve':\n            return CollegeRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}