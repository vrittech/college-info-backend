{
    "sourceFile": "collegemanagement/viewsets/college_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 184,
            "patches": [
                {
                    "date": 1733718920520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733718926585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,15 @@\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = College.objects.all().order_by\n+    queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    \n+    \n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718940407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,12 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n     \n-    \n+    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718947788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n-    ordering_fields = ['id']\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733718971196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733718979511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated__name', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733719001770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated__name', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733719011950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n     ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         #return queryset.filter(user_id=self.request.user.id)\n"
                },
                {
                    "date": 1733719018685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,14 @@\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719024113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,20 +13,20 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'name', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'name': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719032235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,20 +13,20 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'name', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n+        'established_date': ['exact'],\n+        'website_link': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719044059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,8 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n         'established_date': ['exact'],\n-        'website_link': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719084811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'name': ['exact'],\n+        'college_type': ['exact'],\n         'established_date': ['exact'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733719105874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n-        'established_date': ['exact'],\n+        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719113592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,11 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n+        'established_date': ['exact'],\n+        'affiliated': ['exact'],\n+        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719120355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n+        'created_date': ['exact'],\n         'affiliated': ['exact'],\n-        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719125764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n         'created_date': ['exact'],\n-        'affiliated': ['exact'],\n+        'updated_date': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719131253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n         'created_date': ['exact'],\n-        'updated_date': ['exact'],\n+        'updated_date': ['exact',],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719137363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n-        'created_date': ['exact'],\n-        'updated_date': ['exact',],\n+        'created_date': ['exact',],\n+        'updated_date': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719143465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n-        'created_date': ['exact',],\n+        'created_date': ['exact','gte','lte'],\n         'updated_date': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733719148638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n-        'established_date': ['exact'],\n+        'established_date': ['exact','gte','lte'],\n         'created_date': ['exact','gte','lte'],\n         'updated_date': ['exact','gte','lte'],\n     }\n \n"
                },
                {
                    "date": 1733735549748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,5 +40,22 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=True, methods=['get'], url_path=\"dp-image\")\n+    def get_dp_image(self, request, pk=None):\n+        try:\n+            # Fetch the college by primary key\n+            college = self.get_object()\n+        except College.DoesNotExist:\n+            return Response({\"error\": \"College not found.\"}, status=404)\n \n+        # Check if dp_image exists\n+        if not college.dp_image:\n+            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+\n+        # Construct the absolute URL for the dp_image\n+        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+\n+        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+\n"
                },
                {
                    "date": 1733735563239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import College\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n-\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1733735574433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"dp-image\")\n+    @action(detail=True, methods=['get'], url_path=\"college-\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n"
                },
                {
                    "date": 1733735626352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-\")\n+    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n"
                },
                {
                    "date": 1733735640941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1733736397753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1733736439980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import College\n+from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+class collegeViewsets(viewsets.ModelViewSet):\n+    serializer_class = CollegeListSerializers\n+    # permission_classes = [collegemanagementPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = College.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    \n+    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'college_type': ['exact'],\n+        'affiliated': ['exact'],\n+        'established_date': ['exact','gte','lte'],\n+        'created_date': ['exact','gte','lte'],\n+        'updated_date': ['exact','gte','lte'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CollegeWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CollegeRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n+    def get_dp_image(self, request, pk=None):\n+        try:\n+            # Fetch the college by primary key\n+            college = self.get_object()\n+        except College.DoesNotExist:\n+            return Response({\"error\": \"College not found.\"}, status=404)\n+\n+        # Check if dp_image exists\n+        if not college.dp_image:\n+            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+\n+        # Construct the absolute URL for the dp_image\n+        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+\n+        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+\n"
                },
                {
                    "date": 1733813051433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,67 +58,33 @@\n         # Construct the absolute URL for the dp_image\n         dp_image_url = request.build_absolute_uri(college.dp_image.url)\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import College\n-from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-class collegeViewsets(viewsets.ModelViewSet):\n-    serializer_class = CollegeListSerializers\n-    # permission_classes = [collegemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = College.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n-    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'college_type': ['exact'],\n-        'affiliated': ['exact'],\n-        'established_date': ['exact','gte','lte'],\n-        'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact','gte','lte'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CollegeWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CollegeRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n+    @action(detail=True, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    def calculate_completion_percentage(self, request, pk=None):\n         try:\n-            # Fetch the college by primary key\n-            college = self.get_object()\n+            college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n-            return Response({\"error\": \"College not found.\"}, status=404)\n+            return Response({\"error\": \"College not found\"}, status=404)\n \n-        # Check if dp_image exists\n-        if not college.dp_image:\n-            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+        # Calculate the completion percentage\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n \n-        # Construct the absolute URL for the dp_image\n-        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+        completed_fields_count = 0\n+        for field_name in required_fields:\n+            value = getattr(college_instance, field_name, None)\n+            if value:  # Field is considered filled if it's not None or empty\n+                completed_fields_count += 1\n \n-        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+        total_required_fields = len(required_fields)\n+        if total_required_fields == 0:  # Avoid division by zero\n+            completion_percentage = 100\n+        else:\n+            completion_percentage = (completed_fields_count / total_required_fields) * 100\n \n+        return Response({\"completion_percentage\": round(completion_percentage, 2)})\n+\n"
                },
                {
                    "date": 1733813511654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=True, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=Fas, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, pk=None):\n         try:\n             college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813520519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n@@ -60,9 +60,9 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=Fas, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, pk=None):\n         try:\n             college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813575315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,31 +60,26 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    def calculate_completion_percentage(self, request, pk=None):\n-        try:\n-            college_instance = self.get_object()  # Get the College instance by primary key\n-        except College.DoesNotExist:\n-            return Response({\"error\": \"College not found\"}, status=404)\n+    AssertionError at /api/college/completion-percentage/\n+Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n+Request Method:\tGET\n+Request URL:\thttp://127.0.0.1:8000/api/college/completion-percentage/\n+Django Version:\t4.2.15\n+Exception Type:\tAssertionError\n+Exception Value:\t\n+Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n+Exception Location:\t/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/rest_framework/generics.py, line 92, in get_object\n+Raised during:\tcollegemanagement.viewsets.college_viewsets.collegeViewsets\n+Python Executable:\t/Users/vrit-prashant/Documents/college-info-backend/venv/bin/python\n+Python Version:\t3.13.1\n+Python Path:\t\n+['/Users/vrit-prashant/Documents/college-info-backend',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python313.zip',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload',\n+ '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages',\n+ '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/setuptools/_vendor']\n+Server time:\tTue, 10 Dec 2024 12:37:09 +0545\n \n-        # Calculate the completion percentage\n-        required_fields = [\n-            field.name for field in College._meta.get_fields()\n-            if isinstance(field, Field) and not field.blank and not field.null\n-        ]\n \n-        completed_fields_count = 0\n-        for field_name in required_fields:\n-            value = getattr(college_instance, field_name, None)\n-            if value:  # Field is considered filled if it's not None or empty\n-                completed_fields_count += 1\n-\n-        total_required_fields = len(required_fields)\n-        if total_required_fields == 0:  # Avoid division by zero\n-            completion_percentage = 100\n-        else:\n-            completion_percentage = (completed_fields_count / total_required_fields) * 100\n-\n-        return Response({\"completion_percentage\": round(completion_percentage, 2)})\n-\n"
                },
                {
                    "date": 1733813585099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,26 +60,28 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    AssertionError at /api/college/completion-percentage/\n-Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n-Request Method:\tGET\n-Request URL:\thttp://127.0.0.1:8000/api/college/completion-percentage/\n-Django Version:\t4.2.15\n-Exception Type:\tAssertionError\n-Exception Value:\t\n-Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n-Exception Location:\t/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/rest_framework/generics.py, line 92, in get_object\n-Raised during:\tcollegemanagement.viewsets.college_viewsets.collegeViewsets\n-Python Executable:\t/Users/vrit-prashant/Documents/college-info-backend/venv/bin/python\n-Python Version:\t3.13.1\n-Python Path:\t\n-['/Users/vrit-prashant/Documents/college-info-backend',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python313.zip',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload',\n- '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages',\n- '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/setuptools/_vendor']\n-Server time:\tTue, 10 Dec 2024 12:37:09 +0545\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+def calculate_completion_percentage(self, request, *args, **kwargs):\n+    queryset = self.get_queryset()\n+    total_colleges = queryset.count()\n+    completion_data = []\n \n+    for college in queryset:\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n \n+        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+        total_required_fields = len(required_fields)\n+        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+\n+        completion_data.append({\n+            \"college_id\": college.id,\n+            \"college_name\": college.name,\n+            \"completion_percentage\": round(completion_percentage, 2),\n+        })\n+\n+    return Response(completion_data)\n+\n"
                },
                {
                    "date": 1733813592745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,27 +61,27 @@\n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-def calculate_completion_percentage(self, request, *args, **kwargs):\n-    queryset = self.get_queryset()\n-    total_colleges = queryset.count()\n-    completion_data = []\n+    def calculate_completion_percentage(self, request, *args, **kwargs):\n+        queryset = self.get_queryset()\n+        total_colleges = queryset.count()\n+        completion_data = []\n \n-    for college in queryset:\n-        required_fields = [\n-            field.name for field in College._meta.get_fields()\n-            if isinstance(field, Field) and not field.blank and not field.null\n-        ]\n+        for college in queryset:\n+            required_fields = [\n+                field.name for field in College._meta.get_fields()\n+                if isinstance(field, Field) and not field.blank and not field.null\n+            ]\n \n-        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-        total_required_fields = len(required_fields)\n-        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+            completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+            total_required_fields = len(required_fields)\n+            completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n-        completion_data.append({\n-            \"college_id\": college.id,\n-            \"college_name\": college.name,\n-            \"completion_percentage\": round(completion_percentage, 2),\n-        })\n+            completion_data.append({\n+                \"college_id\": college.id,\n+                \"college_name\": college.name,\n+                \"completion_percentage\": round(completion_percentage, 2),\n+            })\n \n-    return Response(completion_data)\n+        return Response(completion_data)\n \n"
                },
                {
                    "date": 1733813624331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n+    def get_dp_image((self, request, *args, **kwargs):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813634057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image((self, request, *args, **kwargs):\n+    def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813684374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,24 +42,25 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n-        try:\n-            # Fetch the college by primary key\n-            college = self.get_object()\n-        except College.DoesNotExist:\n-            return Response({\"error\": \"College not found.\"}, status=404)\n+@action(detail=False, methods=['get'], url_path=\"college-logo\")\n+def get_dp_image(self, request, pk=None):\n+    colleges = College.objects.all()  # Fetch all colleges\n+    if not colleges.exists():\n+        return Response({\"error\": \"No colleges available.\"}, status=404)\n \n-        # Check if dp_image exists\n-        if not college.dp_image:\n-            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+    logos = []\n+    for college in colleges:\n+        if college.dp_image:\n+            dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+            logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n-        # Construct the absolute URL for the dp_image\n-        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+    if not logos:\n+        return Response({\"message\": \"No display images available.\"}, status=404)\n \n-        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+    return Response(logos, status=200)\n+\n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1733813689969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,24 +42,24 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-@action(detail=False, methods=['get'], url_path=\"college-logo\")\n-def get_dp_image(self, request, pk=None):\n-    colleges = College.objects.all()  # Fetch all colleges\n-    if not colleges.exists():\n-        return Response({\"error\": \"No colleges available.\"}, status=404)\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n+    def get_dp_image(self, request, pk=None):\n+        colleges = College.objects.all()  # Fetch all colleges\n+        if not colleges.exists():\n+            return Response({\"error\": \"No colleges available.\"}, status=404)\n \n-    logos = []\n-    for college in colleges:\n-        if college.dp_image:\n-            dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-            logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n+        logos = []\n+        for college in colleges:\n+            if college.dp_image:\n+                dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+                logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n-    if not logos:\n-        return Response({\"message\": \"No display images available.\"}, status=404)\n+        if not logos:\n+            return Response({\"message\": \"No display images available.\"}, status=404)\n \n-    return Response(logos, status=200)\n+        return Response(logos, status=200)\n \n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n"
                },
                {
                    "date": 1738211869612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n+    lookup_field\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1738748429280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    lookup_field\n+    lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1739264329036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n-    # permission_classes = [collegemanagementPermission]\n+    permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1739423667786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug'name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1739423679400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug'name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug;'name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739423685928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug;'name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug''name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739509253770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n+from \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n@@ -15,9 +16,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug''name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739509266238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from \n+from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1739509275263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n+    permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1739680903748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n-    permission_classes = [collegemanagementPermission]\n-    permission_classes = [collegemanagementPermission]\n+    # permission_classes = [collegemanagementPermission]\n+    permission_classes = [DynamicModelPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n@@ -32,8 +32,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n+        re\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739680910739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,11 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        re\n+        request = self.request\n+        if request.user.is_superuser:\n+            \n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739680916548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,10 @@\n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n+            return queryset\n+        else:\n             \n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682111415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            \n+            return queryset.filter(=request.user.college)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682116846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            return queryset.filter(=request.user.college)\n+            return queryset.filter(user=request.user.college)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682123181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            return queryset.filter(user=request.user.college)\n+            return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682131741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        else:\n+        elif:\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682139671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif:\n+        elif request.user.is_\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682147389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.is_\n+        elif request.user.\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682202094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.\n+        elif request.user.ha\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682210065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.ha\n+        elif request.user.has_perm('collegemanagement.change_college'):\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739940098626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,16 +21,16 @@\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n-    filterset_fields = {\n-        'id': ['exact'],\n-        'college_type': ['exact'],\n-        'affiliated': ['exact'],\n-        'established_date': ['exact','gte','lte'],\n-        'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact','gte','lte'],\n-    }\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    #     'college_type': ['exact'],\n+    #     'affiliated': ['exact'],\n+    #     'established_date': ['exact','gte','lte'],\n+    #     'created_date': ['exact','gte','lte'],\n+    #     'updated_date': ['exact','gte','lte'],\n+    # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n"
                },
                {
                    "date": 1739940104952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    \n+    filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1739940111149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n+from utilities\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1739940536528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n-from utilities\n+from ..utilities.filter import CollegeFilter\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740045725585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,20 +7,21 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n from ..utilities.filter import CollegeFilter\n+from ..utilities.pagination import MyPageNumberPagination\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n+    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', '', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n@@ -32,8 +33,9 @@\n     #     'updated_date': ['exact','gte','lte'],\n     # }\n \n     def get_queryset(self):\n+        # print(self.action)\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n@@ -70,28 +72,28 @@\n         return Response(logos, status=200)\n \n     \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    def calculate_completion_percentage(self, request, *args, **kwargs):\n-        queryset = self.get_queryset()\n-        total_colleges = queryset.count()\n-        completion_data = []\n+    # @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    # def calculate_completion_percentage(self, request, *args, **kwargs):\n+    #     queryset = self.get_queryset()\n+    #     total_colleges = queryset.count()\n+    #     completion_data = []\n \n-        for college in queryset:\n-            required_fields = [\n-                field.name for field in College._meta.get_fields()\n-                if isinstance(field, Field) and not field.blank and not field.null\n-            ]\n+    #     for college in queryset:\n+    #         required_fields = [\n+    #             field.name for field in College._meta.get_fields()\n+    #             if isinstance(field, Field) and not field.blank and not field.null\n+    #         ]\n \n-            completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-            total_required_fields = len(required_fields)\n-            completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+    #         completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+    #         total_required_fields = len(required_fields)\n+    #         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n-            completion_data.append({\n-                \"college_id\": college.id,\n-                \"college_name\": college.name,\n-                \"completion_percentage\": round(completion_percentage, 2),\n-            })\n+    #         completion_data.append({\n+    #             \"college_id\": college.id,\n+    #             \"college_name\": college.name,\n+    #             \"completion_percentage\": round(completion_percentage, 2),\n+    #         })\n \n-        return Response(completion_data)\n+    #     return Response(completion_data)\n \n"
                },
                {
                    "date": 1740045744851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', '', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1740045751546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045761152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045772134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter',  'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045779704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter',  'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740121813269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,22 @@\n         if not logos:\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n+    \n+    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    def signup_college_admin(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response(\n+                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n     \n     \n     # @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     # def calculate_completion_percentage(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1740121822591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    @action(detail=False, methods=['post'], name=\"college_\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740121856961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_\", url_path=\"signup-college-admin\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740121873699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,16 +70,16 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n-                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data},\n+                {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n                 status=status.HTTP_201_CREATED\n             )\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1740121888739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-    def signup_college_admin(self, request, *args, **kwargs):\n+    def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n             serializer.save()\n"
                },
                {
                    "date": 1740121929097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,10 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n         elif self.action == 'retrieve':\n             return CollegeRetrieveSerializers\n+        elif self.action in ['signup_college_admin']:\n+            return CustomUserWriteSerializersCollegeAdmin\n         return super().get_serializer_class()\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1740121937180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import College\n-from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n+from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers, nC\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n"
                },
                {
                    "date": 1740121946210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import College\n-from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers, nC\n+from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers, CollegeAdminWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n@@ -48,9 +48,9 @@\n             return CollegeWriteSerializers\n         elif self.action == 'retrieve':\n             return CollegeRetrieveSerializers\n         elif self.action in ['signup_college_admin']:\n-            return CustomUserWriteSerializersCollegeAdmin\n+            return CollegeAdminWriteSerializers\n         return super().get_serializer_class()\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1740121971328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n     def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740121977065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes=[DynamicModelPermission])\n     def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740122054903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n         elif self.action == 'retrieve':\n             return CollegeRetrieveSerializers\n-        elif self.action in ['signup_college_admin']:\n+        elif self.action in ['college_creation']:\n             return CollegeAdminWriteSerializers\n         return super().get_serializer_class()\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1740128308343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740129422258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,28 +87,49 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n     \n     \n-    # @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    # def calculate_completion_percentage(self, request, *args, **kwargs):\n-    #     queryset = self.get_queryset()\n-    #     total_colleges = queryset.count()\n-    #     completion_data = []\n+   from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework.permissions import IsAuthenticated\n+from django.db.models import Field\n+from rest_framework import status\n \n-    #     for college in queryset:\n-    #         required_fields = [\n-    #             field.name for field in College._meta.get_fields()\n-    #             if isinstance(field, Field) and not field.blank and not field.null\n-    #         ]\n+class CollegeViewSet(viewsets.ModelViewSet):\n+    queryset = College.objects.all()\n+    serializer_class = CollegeAdminWriteSerializers\n+    permission_classes = [IsAuthenticated]  # Ensure user is authenticated\n \n-    #         completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-    #         total_required_fields = len(required_fields)\n-    #         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    def calculate_completion_percentage(self, request, *args, **kwargs):\n+        \"\"\"\n+        Calculate the profile completion percentage, but restrict access only to assigned college admins.\n+        \"\"\"\n+        user = request.user\n \n-    #         completion_data.append({\n-    #             \"college_id\": college.id,\n-    #             \"college_name\": college.name,\n-    #             \"completion_percentage\": round(completion_percentage, 2),\n-    #         })\n+        # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n+        if not hasattr(user, \"college\") or not user.college:\n+            return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n \n-    #     return Response(completion_data)\n+        # Get the user's assigned college\n+        college = user.college\n \n+        # Identify required fields dynamically\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n+\n+        # Count filled fields\n+        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+        total_required_fields = len(required_fields)\n+\n+        # Calculate completion percentage\n+        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+\n+        completion_data = {\n+            \"college_id\": college.id,\n+            \"college_name\": college.name,\n+            \"completion_percentage\": round(completion_percentage, 2),\n+        }\n+\n+        return Response(completion_data)\n"
                },
                {
                    "date": 1740129427773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,20 +86,8 @@\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n     \n-    \n-   from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework.permissions import IsAuthenticated\n-from django.db.models import Field\n-from rest_framework import status\n-\n-class CollegeViewSet(viewsets.ModelViewSet):\n-    queryset = College.objects.all()\n-    serializer_class = CollegeAdminWriteSerializers\n-    permission_classes = [IsAuthenticated]  # Ensure user is authenticated\n-\n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n"
                },
                {
                    "date": 1740129439112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n from ..utilities.filter import CollegeFilter\n from ..utilities.pagination import MyPageNumberPagination\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129446116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n from ..utilities.filter import CollegeFilter\n from ..utilities.pagination import MyPageNumberPagination\n from rest_framework.decorators import action\n from rest_framework.response import Response\n+from \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129451312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from ..utilities.filter import CollegeFilter\n from ..utilities.pagination import MyPageNumberPagination\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from \n+from rest_framework import status\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129467797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,10 @@\n from ..utilities.pagination import MyPageNumberPagination\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n+from django.db.models import Field\n+\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129481660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n \n+\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129520187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes=[DynamicModelPermission])\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740129612669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         logos = []\n         for college in colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-                logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n+                logos.append({\"slugcollege_name\": college.name, \"dp_image_url\": dp_image_url})\n \n         if not logos:\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n"
                },
                {
                    "date": 1740129623210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         logos = []\n         for college in colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-                logos.append({\"slugcollege_name\": college.name, \"dp_image_url\": dp_image_url})\n+                logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n         if not logos:\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n"
                },
                {
                    "date": 1740377874287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,20 +79,25 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-    def college_creation(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n+def college_creation(self, request, *args, **kwargs):\n+    serializer = self.get_serializer(data=request.data)\n \n-        if serializer.is_valid():\n-            serializer.save()\n-            return Response(\n-                {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n-                status=status.HTTP_201_CREATED\n-            )\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+    if serializer.is_valid():\n+        college = serializer.save()  # Create the college instance\n+        # Assign the created college to the user\n+        request.user.college = college\n+        request.user.save()\n+        \n+        return Response(\n+            {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n+            status=status.HTTP_201_CREATED\n+        )\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n+\n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740390371307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,25 +79,51 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-def college_creation(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)\n+    def college_creation(self, request, *args, **kwargs):\n+        \"\"\"\n+        Authenticate user from access token in payload,\n+        then create a college and assign it to the authenticated user.\n+        \"\"\"\n+        # Extract access token from the payload\n+        access_token = request.data.get(\"access\")\n \n-    if serializer.is_valid():\n-        college = serializer.save()  # Create the college instance\n-        # Assign the created college to the user\n-        request.user.college = college\n-        request.user.save()\n-        \n-        return Response(\n-            {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n-            status=status.HTTP_201_CREATED\n-        )\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+        if not access_token:\n+            return Response({\"error\": \"Access token is required!\"}, status=status.HTTP_401_UNAUTHORIZED)\n \n+        # Authenticate user from the token\n+        jwt_authenticator = JWTAuthentication()\n+        try:\n+            validated_token = jwt_authenticator.get_validated_token(access_token)\n+            user = jwt_authenticator.get_user(validated_token)\n+        except Exception as e:\n+            return Response({\"error\": \"Invalid or expired access token!\"}, status=status.HTTP_401_UNAUTHORIZED)\n \n+        # Ensure user is authenticated\n+        if not user:\n+            return Response({\"error\": \"User authentication failed!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+\n+        # Attach authenticated user to request\n+        request.user = user\n+\n+        # Now process the college creation\n+        serializer = self.get_serializer(data=request.data)\n+\n+        if serializer.is_valid():\n+            college = serializer.save()  # Create the college instance\n+            # Assign the created college to the authenticated user\n+            user.college = college\n+            user.save()\n+\n+            return Response(\n+                {\"message\": \"College created successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+\n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740390482248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         Authenticate user from access token in payload,\n         then create a college and assign it to the authenticated user.\n         \"\"\"\n         # Extract access token from the payload\n-        access_token = request.data.get(\"access\")\n+        access_token = request.data.get(\"accessToken\")\n \n         if not access_token:\n             return Response({\"error\": \"Access token is required!\"}, status=status.HTTP_401_UNAUTHORIZED)\n \n"
                },
                {
                    "date": 1740390661131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,40 +81,43 @@\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n-        Authenticate user from access token in payload,\n-        then create a college and assign it to the authenticated user.\n+        Manually authenticate user from access token in payload if not provided in headers.\n         \"\"\"\n-        # Extract access token from the payload\n-        access_token = request.data.get(\"accessToken\")\n+        # Check if the user is already authenticated (JWT in headers)\n+        if not request.user.is_authenticated:\n+            # Extract access token from the request payload\n+            access_token = request.data.get(\"access\")\n \n-        if not access_token:\n-            return Response({\"error\": \"Access token is required!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+            if not access_token:\n+                return Response(\n+                    {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Authenticate user from the token\n-        jwt_authenticator = JWTAuthentication()\n-        try:\n-            validated_token = jwt_authenticator.get_validated_token(access_token)\n-            user = jwt_authenticator.get_user(validated_token)\n-        except Exception as e:\n-            return Response({\"error\": \"Invalid or expired access token!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+            # Authenticate user using the token\n+            jwt_authenticator = JWTAuthentication()\n+            try:\n+                validated_token = jwt_authenticator.get_validated_token(access_token)\n+                user = jwt_authenticator.get_user(validated_token)\n+            except Exception:\n+                return Response(\n+                    {\"error\": \"Invalid or expired access token!\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Ensure user is authenticated\n-        if not user:\n-            return Response({\"error\": \"User authentication failed!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+            # Set authenticated user to request\n+            request.user = user\n \n-        # Attach authenticated user to request\n-        request.user = user\n-\n         # Now process the college creation\n         serializer = self.get_serializer(data=request.data)\n \n         if serializer.is_valid():\n             college = serializer.save()  # Create the college instance\n             # Assign the created college to the authenticated user\n-            user.college = college\n-            user.save()\n+            request.user.college = college\n+            request.user.save()\n \n             return Response(\n                 {\"message\": \"College created successfully!\", \"data\": serializer.data},\n                 status=status.HTTP_201_CREATED\n"
                },
                {
                    "date": 1740390667271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         \"\"\"\n         # Check if the user is already authenticated (JWT in headers)\n         if not request.user.is_authenticated:\n             # Extract access token from the request payload\n-            access_token = request.data.get(\"access\")\n+            access_token = request.data.get(\"accessToken\")\n \n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n"
                },
                {
                    "date": 1740390953732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,22 +81,22 @@\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n-        Manually authenticate user from access token in payload if not provided in headers.\n+        Authenticate user from access token in payload if not in headers.\n+        Ensure the user has permission to add a college.\n         \"\"\"\n-        # Check if the user is already authenticated (JWT in headers)\n+        # If the user is not already authenticated via headers, check token in payload\n         if not request.user.is_authenticated:\n-            # Extract access token from the request payload\n-            access_token = request.data.get(\"accessToken\")\n+            access_token = request.data.get(\"access\")\n \n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n \n-            # Authenticate user using the token\n+            # Authenticate user using JWT\n             jwt_authenticator = JWTAuthentication()\n             try:\n                 validated_token = jwt_authenticator.get_validated_token(access_token)\n                 user = jwt_authenticator.get_user(validated_token)\n@@ -105,16 +105,23 @@\n                     {\"error\": \"Invalid or expired access token!\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n \n-            # Set authenticated user to request\n+            # Assign the authenticated user to request\n             request.user = user\n \n-        # Now process the college creation\n+        # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n+        if not request.user.has_perm(\"app_name.add_college\"):  # Replace 'app_name' with the correct Django app\n+            return Response(\n+                {\"error\": \"You do not have permission to add a college.\"},\n+                status=status.HTTP_403_FORBIDDEN\n+            )\n+\n+        # ✅ **Now create the college since the user is authenticated and has permission**\n         serializer = self.get_serializer(data=request.data)\n-\n         if serializer.is_valid():\n             college = serializer.save()  # Create the college instance\n+            \n             # Assign the created college to the authenticated user\n             request.user.college = college\n             request.user.save()\n \n"
                },
                {
                    "date": 1740390961220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         Ensure the user has permission to add a college.\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload\n         if not request.user.is_authenticated:\n-            access_token = request.data.get(\"access\")\n+            access_token = request.data.get(\"accessToken\")\n \n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n"
                },
                {
                    "date": 1740390969700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n             # Assign the authenticated user to request\n             request.user = user\n \n         # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n-        if not request.user.has_perm(\"app_name.add_college\"):  # Replace 'app_name' with the correct Django app\n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  # Replace 'app_name' with the correct Django app\n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740390974947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n             # Assign the authenticated user to request\n             request.user = user\n \n         # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  # Replace 'app_name' with the correct Django app\n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740391371257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,61 +79,64 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-    def college_creation(self, request, *args, **kwargs):\n-        \"\"\"\n-        Authenticate user from access token in payload if not in headers.\n-        Ensure the user has permission to add a college.\n-        \"\"\"\n-        # If the user is not already authenticated via headers, check token in payload\n-        if not request.user.is_authenticated:\n-            access_token = request.data.get(\"accessToken\")\n+def college_creation(self, request, *args, **kwargs):\n+    \"\"\"\n+    Authenticate user from access token in payload if not in headers.\n+    Ensure the user has permission to add a college.\n+    \"\"\"\n+    # If the user is not already authenticated via headers, check token in payload\n+    if not request.user.is_authenticated:\n+        access_token = request.data.get(\"accessToken\")\n \n-            if not access_token:\n-                return Response(\n-                    {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n-                    status=status.HTTP_401_UNAUTHORIZED\n-                )\n-\n-            # Authenticate user using JWT\n-            jwt_authenticator = JWTAuthentication()\n-            try:\n-                validated_token = jwt_authenticator.get_validated_token(access_token)\n-                user = jwt_authenticator.get_user(validated_token)\n-            except Exception:\n-                return Response(\n-                    {\"error\": \"Invalid or expired access token!\"},\n-                    status=status.HTTP_401_UNAUTHORIZED\n-                )\n-\n-            # Assign the authenticated user to request\n-            request.user = user\n-\n-        # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        if not access_token:\n             return Response(\n-                {\"error\": \"You do not have permission to add a college.\"},\n-                status=status.HTTP_403_FORBIDDEN\n+                {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n+                status=status.HTTP_401_UNAUTHORIZED\n             )\n \n-        # ✅ **Now create the college since the user is authenticated and has permission**\n-        serializer = self.get_serializer(data=request.data)\n-        if serializer.is_valid():\n-            college = serializer.save()  # Create the college instance\n-            \n-            # Assign the created college to the authenticated user\n-            request.user.college = college\n-            request.user.save()\n-\n+        # Authenticate user using JWT\n+        jwt_authenticator = JWTAuthentication()\n+        try:\n+            validated_token = jwt_authenticator.get_validated_token(access_token)\n+            user = jwt_authenticator.get_user(validated_token)\n+        except Exception:\n             return Response(\n-                {\"message\": \"College created successfully!\", \"data\": serializer.data},\n-                status=status.HTTP_201_CREATED\n+                {\"error\": \"Invalid or expired access token!\"},\n+                status=status.HTTP_401_UNAUTHORIZED\n             )\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n+        # Assign the authenticated user to request\n+        request.user = user\n \n+    # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n+    request.user = User.objects.get(id=request.user.id)\n+\n+    # ✅ **Check if user has 'add_college' permission**\n+    if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        return Response(\n+            {\"error\": \"You do not have permission to add a college.\"},\n+            status=status.HTTP_403_FORBIDDEN\n+        )\n+\n+    # ✅ **Now create the college since the user is authenticated and has permission**\n+    serializer = self.get_serializer(data=request.data)\n+    if serializer.is_valid():\n+        college = serializer.save()  # Create the college instance\n+        \n+        # Assign the created college to the authenticated user\n+        request.user.college = college\n+        request.user.save()\n+\n+        return Response(\n+            {\"message\": \"College created successfully!\", \"data\": serializer.data},\n+            status=status.HTTP_201_CREATED\n+        )\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+\n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740391391094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n+from cus\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n@@ -79,62 +80,62 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-def college_creation(self, request, *args, **kwargs):\n-    \"\"\"\n-    Authenticate user from access token in payload if not in headers.\n-    Ensure the user has permission to add a college.\n-    \"\"\"\n-    # If the user is not already authenticated via headers, check token in payload\n-    if not request.user.is_authenticated:\n-        access_token = request.data.get(\"accessToken\")\n+    def college_creation(self, request, *args, **kwargs):\n+        \"\"\"\n+        Authenticate user from access token in payload if not in headers.\n+        Ensure the user has permission to add a college.\n+        \"\"\"\n+        # If the user is not already authenticated via headers, check token in payload\n+        if not request.user.is_authenticated:\n+            access_token = request.data.get(\"accessToken\")\n \n-        if not access_token:\n-            return Response(\n-                {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n-                status=status.HTTP_401_UNAUTHORIZED\n-            )\n+            if not access_token:\n+                return Response(\n+                    {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Authenticate user using JWT\n-        jwt_authenticator = JWTAuthentication()\n-        try:\n-            validated_token = jwt_authenticator.get_validated_token(access_token)\n-            user = jwt_authenticator.get_user(validated_token)\n-        except Exception:\n-            return Response(\n-                {\"error\": \"Invalid or expired access token!\"},\n-                status=status.HTTP_401_UNAUTHORIZED\n-            )\n+            # Authenticate user using JWT\n+            jwt_authenticator = JWTAuthentication()\n+            try:\n+                validated_token = jwt_authenticator.get_validated_token(access_token)\n+                user = jwt_authenticator.get_user(validated_token)\n+            except Exception:\n+                return Response(\n+                    {\"error\": \"Invalid or expired access token!\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Assign the authenticated user to request\n-        request.user = user\n+            # Assign the authenticated user to request\n+            request.user = user\n \n-    # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n-    request.user = User.objects.get(id=request.user.id)\n+        # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n+        request.user = User.objects.get(id=request.user.id)\n \n-    # ✅ **Check if user has 'add_college' permission**\n-    if not request.user.has_perm(\"collegemanagement.add_college\"):  \n-        return Response(\n-            {\"error\": \"You do not have permission to add a college.\"},\n-            status=status.HTTP_403_FORBIDDEN\n-        )\n+        # ✅ **Check if user has 'add_college' permission**\n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+            return Response(\n+                {\"error\": \"You do not have permission to add a college.\"},\n+                status=status.HTTP_403_FORBIDDEN\n+            )\n \n-    # ✅ **Now create the college since the user is authenticated and has permission**\n-    serializer = self.get_serializer(data=request.data)\n-    if serializer.is_valid():\n-        college = serializer.save()  # Create the college instance\n-        \n-        # Assign the created college to the authenticated user\n-        request.user.college = college\n-        request.user.save()\n+        # ✅ **Now create the college since the user is authenticated and has permission**\n+        serializer = self.get_serializer(data=request.data)\n+        if serializer.is_valid():\n+            college = serializer.save()  # Create the college instance\n+            \n+            # Assign the created college to the authenticated user\n+            request.user.college = college\n+            request.user.save()\n \n-        return Response(\n-            {\"message\": \"College created successfully!\", \"data\": serializer.data},\n-            status=status.HTTP_201_CREATED\n-        )\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+            return Response(\n+                {\"message\": \"College created successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n"
                },
                {
                    "date": 1740391397473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n-from cus\n+from accounts\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n"
                },
                {
                    "date": 1740391410177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n-from accounts\n+from accounts.models import CustomUser as User\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n"
                },
                {
                    "date": 1740392202077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n-    permission_classes = [DynamicModelPermission]\n+    # permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1740393577799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n         # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n         request.user = User.objects.get(id=request.user.id)\n \n         # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        if not request.user.has_perm(\"college.add_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740393846548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n         # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n         request.user = User.objects.get(id=request.user.id)\n \n         # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"college.add_college\"):  \n+        if not request.user.has_perm(\"collegemanagement.change_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740394138883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n-    # permission_classes = [DynamicModelPermission]\n+    permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n@@ -113,9 +113,9 @@\n         # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n         request.user = User.objects.get(id=request.user.id)\n \n         # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"collegemanagement.change_college\"):  \n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740394288712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n         Ensure the user has permission to add a college.\n"
                },
                {
                    "date": 1740458103662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,25 +79,30 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n+    @action(\n+        detail=False,\n+        methods=['post'],\n+        name=\"college_creation\",\n+        url_path=\"college-creation\",\n+        permission_classes=[DynamicModelPermission]  # This ensures DRF calls your custom permission before entering the method\n+    )\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n-        Ensure the user has permission to add a college.\n+        Ensure the user is either in the \"College Admin\" group or has the\n+        'collegemanagement.add_college' permission.\n         \"\"\"\n-        # If the user is not already authenticated via headers, check token in payload\n+        # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n \n-            # Authenticate user using JWT\n             jwt_authenticator = JWTAuthentication()\n             try:\n                 validated_token = jwt_authenticator.get_validated_token(access_token)\n                 user = jwt_authenticator.get_user(validated_token)\n@@ -105,28 +110,29 @@\n                 return Response(\n                     {\"error\": \"Invalid or expired access token!\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n-\n-            # Assign the authenticated user to request\n+            # Assign the authenticated user to the request.\n             request.user = user\n \n-        # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n+        # Force-refresh user instance to update permissions (fix permission cache issues).\n         request.user = User.objects.get(id=request.user.id)\n \n-        # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        # Manual check: Allow the action if the user is in the \"College Admin\" group\n+        # or if they have the \"collegemanagement.add_college\" permission.\n+        if not (request.user.groups.filter(name=\"College Admin\").exists() or \n+                request.user.has_perm(\"collegemanagement.add_college\")):\n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n \n-        # ✅ **Now create the college since the user is authenticated and has permission**\n+        # Proceed to create the college.\n         serializer = self.get_serializer(data=request.data)\n         if serializer.is_valid():\n-            college = serializer.save()  # Create the college instance\n+            college = serializer.save()  # Create the college instance.\n             \n-            # Assign the created college to the authenticated user\n+            # Optionally assign the created college to the authenticated user.\n             request.user.college = college\n             request.user.save()\n \n             return Response(\n"
                },
                {
                    "date": 1740458112238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n         detail=False,\n         methods=['post'],\n         name=\"college_creation\",\n         url_path=\"college-creation\",\n-        permission_classes=[DynamicModelPermission]  # This ensures DRF calls your custom permission before entering the method\n+        permission_classes=[DynamicModelPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n"
                },
                {
                    "date": 1740458442549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n         detail=False,\n         methods=['post'],\n         name=\"college_creation\",\n         url_path=\"college-creation\",\n-        permission_classes=[DynamicModelPermission] \n+        permission_classes=[collegemanagementPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n"
                },
                {
                    "date": 1740459932381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n+            print\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740459937926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-            print\n+            print(access_token,\"\")\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740459943951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-            print(access_token,\"\")\n+            print(access_token,\"qqqqqqqqqqqqqqqqq\")\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740460184791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,8 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-            print(access_token,\"qqqqqqqqqqqqqqqqq\")\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740460216505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,9 @@\n         url_path=\"college-creation\",\n         permission_classes=[collegemanagementPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n+        print()\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n         Ensure the user is either in the \"College Admin\" group or has the\n         'collegemanagement.add_college' permission.\n"
                },
                {
                    "date": 1740460224401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         url_path=\"college-creation\",\n         permission_classes=[collegemanagementPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n-        print()\n+        print(request.data.get(\"accessToken\"),\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n         Ensure the user is either in the \"College Admin\" group or has the\n         'collegemanagement.add_college' permission.\n"
                },
                {
                    "date": 1740464341110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,8 +173,9 @@\n         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n         completion_data = {\n             \"college_id\": college.id,\n+            \"co\"\n             \"college_name\": college.name,\n             \"completion_percentage\": round(completion_percentage, 2),\n         }\n \n"
                },
                {
                    "date": 1740464498098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,9 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n+        print\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n@@ -173,9 +174,9 @@\n         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n         completion_data = {\n             \"college_id\": college.id,\n-            \"co\"\n+            \"slug\": college.slug,\n             \"college_name\": college.name,\n             \"completion_percentage\": round(completion_percentage, 2),\n         }\n \n"
                },
                {
                    "date": 1740464516022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n-        print\n+        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 \")\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n"
                },
                {
                    "date": 1740464658683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,16 +150,17 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n-        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 \")\n+        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 in colleghe viewsets\")\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n \n         # Get the user's assigned college\n         college = user.college\n+        print\n \n         # Identify required fields dynamically\n         required_fields = [\n             field.name for field in College._meta.get_fields()\n"
                },
                {
                    "date": 1740464797588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",pe)\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n@@ -158,9 +158,9 @@\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n \n         # Get the user's assigned college\n         college = user.college\n-        print\n+        print(college,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 162 in colleghe viewsets\")\n \n         # Identify required fields dynamically\n         required_fields = [\n             field.name for field in College._meta.get_fields()\n"
                },
                {
                    "date": 1740464807543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n from django.db.models import Field\n from accounts.models import CustomUser as User\n \n \n+\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n@@ -144,9 +145,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",pe)\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n"
                },
                {
                    "date": 1740464814342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,11 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n from accounts.models import CustomUser as User\n+from rest\n \n \n-\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740464820400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n from accounts.models import CustomUser as User\n-from rest\n+from rest_framework.\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n"
                },
                {
                    "date": 1740464883490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n from accounts.models import CustomUser as User\n-from rest_framework.\n+from rest_framework.permissions import AllowAny\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n@@ -145,9 +145,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[D])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n"
                },
                {
                    "date": 1740464897834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[D])\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n"
                },
                {
                    "date": 1740464905759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n-    \n+    #TODO \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n"
                },
                {
                    "date": 1740464922840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n-    #TODO \n+    #TODO add a permission according to the permission of college!!!!\n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n"
                },
                {
                    "date": 1740464949097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,8 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n-        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 in colleghe viewsets\")\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n"
                },
                {
                    "date": 1740635769614,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,41 +144,59 @@\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n-    #TODO add a permission according to the permission of college!!!!\n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n-    def calculate_completion_percentage(self, request, *args, **kwargs):\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage/(?P<slug>[^/.]+)\", permission_classes=[AllowAny])\n+    def calculate_completion_percentage(self, request, slug=None, *args, **kwargs):\n         \"\"\"\n-        Calculate the profile completion percentage, but restrict access only to assigned college admins.\n+        Calculate the profile completion percentage for a specific college by slug.\n+        This API does NOT return completion percentage unless a slug is provided.\n         \"\"\"\n-        user = request.user\n+        if not slug:\n+            return Response({\"error\": \"A college slug is required.\"}, status=status.HTTP_400_BAD_REQUEST)\n \n-        # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n-        if not hasattr(user, \"college\") or not user.college:\n-            return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n+        # Fetch the college using slug\n+        college = College.objects.filter(slug=slug).first()\n+        if not college:\n+            return Response({\"error\": \"College not found.\"}, status=status.HTTP_404_NOT_FOUND)\n \n-        # Get the user's assigned college\n-        college = user.college\n-        print(college,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 162 in colleghe viewsets\")\n+        # Serialize the college data\n+        college_data = CollegeRetrieveSerializers(college).data\n \n-        # Identify required fields dynamically\n+        ### 🔹 REQUIRED FIELDS (Must be filled)\n         required_fields = [\n             field.name for field in College._meta.get_fields()\n-            if isinstance(field, Field) and not field.blank and not field.null\n+            if hasattr(field, 'blank') and not field.blank and hasattr(field, 'null') and not field.null\n         ]\n \n-        # Count filled fields\n-        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+        completed_required_fields = sum(1 for field in required_fields if getattr(college, field, None))\n         total_required_fields = len(required_fields)\n \n-        # Calculate completion percentage\n-        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+        ### 🔹 NON-REQUIRED FIELDS (Optional but contribute)\n+        non_required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if hasattr(field, 'blank') and field.blank and hasattr(field, 'null') and field.null\n+        ]\n \n+        completed_non_required_fields = sum(1 for field in non_required_fields if getattr(college, field, None))\n+        total_non_required_fields = len(non_required_fields)\n+\n+        ### 🔹 RELATED FIELDS (Many-to-Many or ForeignKey relationships)\n+        related_fields = [\"district\", \"affiliated\", \"college_type\", \"discipline\", \"social_media\", \"facilities\"]\n+        completed_related_fields = sum(1 for field in related_fields if college_data.get(field))\n+        total_related_fields = len(related_fields)\n+\n+        ### ✅ WEIGHTED COMPLETION CALCULATION:\n+        required_percentage = (completed_required_fields / total_required_fields * 60) if total_required_fields else 60\n+        related_percentage = (completed_related_fields / total_related_fields * 30) if total_related_fields else 30\n+        non_required_percentage = (completed_non_required_fields / total_non_required_fields * 10) if total_non_required_fields else 10\n+\n+        completion_percentage = required_percentage + related_percentage + non_required_percentage\n+\n         completion_data = {\n             \"college_id\": college.id,\n             \"slug\": college.slug,\n             \"college_name\": college.name,\n-            \"completion_percentage\": round(completion_percentage, 2),\n+            \"completion_percentage\": round(completion_percentage, 2)\n         }\n \n-        return Response(completion_data)\n+        return Response(completion_data, status=200)\n"
                },
                {
                    "date": 1740722622712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,9 @@\n         url_path=\"college-creation\",\n         permission_classes=[collegemanagementPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n-        print(request.data.get(\"accessToken\"),\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")\n+        # print(request.data.get(\"accessToken\"),\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n         Ensure the user is either in the \"College Admin\" group or has the\n         'collegemanagement.add_college' permission.\n"
                },
                {
                    "date": 1740907352908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\",permission_classes)\n     def get_dp_image(self, request, pk=None):\n         colleges = College.objects.all()  # Fetch all colleges\n         if not colleges.exists():\n             return Response({\"error\": \"No colleges available.\"}, status=404)\n"
                },
                {
                    "date": 1741071742883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n from rest_framework import status\n from django.db.models import Field\n from accounts.models import CustomUser as User\n from rest_framework.permissions import AllowAny\n+from django.shortcuts import get_object_or_404\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n@@ -40,8 +41,22 @@\n     #     'created_date': ['exact','gte','lte'],\n     #     'updated_date': ['exact','gte','lte'],\n     # }\n \n+    # def get_lookup_field(self):\n+    #     return super.get_lookup_field()\n+    \n+    def get_object(self):\n+        \"\"\"\n+        Override get_object to allow lookup by either 'id' or 'slug'.\n+        \"\"\"\n+        queryset = self.get_queryset()\n+        lookup_value = self.kwargs.get(self.lookup_field)  # Get lookup value from URL\n+        if lookup_value.isdigit():  # Check if lookup_value is numeric (ID)\n+            return get_object_or_404(queryset, id=int(lookup_value))\n+        return get_object_or_404(queryset, slug=lookup_value)  # Otherwise, lookup by slug\n+\n+    \n     def get_queryset(self):\n         # print(self.action)\n         queryset = super().get_queryset()\n         request = self.request\n@@ -63,9 +78,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"college-logo\",permission_classes)\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\",permission_classes=[AllowAny])\n     def get_dp_image(self, request, pk=None):\n         colleges = College.objects.all()  # Fetch all colleges\n         if not colleges.exists():\n             return Response({\"error\": \"No colleges available.\"}, status=404)\n"
                },
                {
                    "date": 1741160746071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,8 +85,9 @@\n         if not colleges.exists():\n             return Response({\"error\": \"No colleges available.\"}, status=404)\n \n         logos = []\n+        paginator \n         for college in colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n                 logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n"
                },
                {
                    "date": 1741160770361,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,10 @@\n         if not colleges.exists():\n             return Response({\"error\": \"No colleges available.\"}, status=404)\n \n         logos = []\n-        paginator \n+        paginator = MyPageNumberPagination()\n+        paginated_colleges = paginator.paginate_queryset(colleges, request)\n         for college in colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n                 logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n"
                },
                {
                    "date": 1741160788519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n \n         logos = []\n         paginator = MyPageNumberPagination()\n         paginated_colleges = paginator.paginate_queryset(colleges, request)\n-        for college in colleges:\n+        for college in  paginated_colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n                 logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n"
                },
                {
                    "date": 1741160858067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n \n         logos = []\n         paginator = MyPageNumberPagination()\n         paginated_colleges = paginator.paginate_queryset(colleges, request)\n-        for college in  paginated_colleges:\n+        for college in colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n                 logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n"
                },
                {
                    "date": 1741160977073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,26 +78,29 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"college-logo\",permission_classes=[AllowAny])\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\", permission_classes=[AllowAny])\n     def get_dp_image(self, request, pk=None):\n         colleges = College.objects.all()  # Fetch all colleges\n         if not colleges.exists():\n             return Response({\"error\": \"No colleges available.\"}, status=404)\n \n+        # Use your custom pagination class\n+        paginator = MyPageNumberPagination()\n+        paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n+\n         logos = []\n-        paginator = MyPageNumberPagination()\n-        paginated_colleges = paginator.paginate_queryset(colleges, request)\n-        for college in colleges:\n+        for college in paginated_colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n                 logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n         if not logos:\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n-        return Response(logos, status=200)\n+        # Return paginated response\n+        return paginator.get_paginated_response(logos)\n     \n     @action(\n         detail=False,\n         methods=['post'],\n"
                },
                {
                    "date": 1741161078144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,26 +80,24 @@\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"college-logo\", permission_classes=[AllowAny])\n     def get_dp_image(self, request, pk=None):\n-        colleges = College.objects.all()  # Fetch all colleges\n+        # Filter out colleges that have a dp_image before paginating\n+        colleges = College.objects.exclude(dp_image__isnull=True).exclude(dp_image=\"\")  \n+\n         if not colleges.exists():\n-            return Response({\"error\": \"No colleges available.\"}, status=404)\n+            return Response({\"error\": \"No colleges with display images available.\"}, status=404)\n \n         # Use your custom pagination class\n         paginator = MyPageNumberPagination()\n         paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n-        logos = []\n-        for college in paginated_colleges:\n-            if college.dp_image:\n-                dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-                logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n+        # Construct response\n+        logos = [\n+            {\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": request.build_absolute_uri(college.dp_image.url)}\n+            for college in paginated_colleges\n+        ]\n \n-        if not logos:\n-            return Response({\"message\": \"No display images available.\"}, status=404)\n-\n-        # Return paginated response\n         return paginator.get_paginated_response(logos)\n     \n     @action(\n         detail=False,\n"
                },
                {
                    "date": 1741243194164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,4 +217,6 @@\n             \"completion_percentage\": round(completion_percentage, 2)\n         }\n \n         return Response(completion_data, status=200)\n+    \n+    \n"
                },
                {
                    "date": 1741243205876,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,5 +218,36 @@\n         }\n \n         return Response(completion_data, status=200)\n     \n-    \n+    @action(detail=False, methods=['get'], name=\"latest_college_images\", url_path=\"college-lists\",permission_classes=[AllowAny])\n+    def latest_college_images(self, request):\n+        \"\"\"\n+        Returns paginated colleges with their details and a single array of latest 3 image URLs.\n+        \"\"\"\n+        colleges = College.objects.all().order_by('-created_date')  # Order by latest\n+\n+        # **Apply Pagination**\n+        paginator = MyPageNumberPagination()  \n+        paginated_colleges = self.paginator.paginate_queryset(colleges, request)\n+        response_data = []\n+\n+        for college in paginated_colleges:\n+            latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n+\n+            # Convert images into an array of full URLs\n+            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+\n+            if latest_images:\n+                response_data.append({\n+                    \"college\": {\n+                        \"id\": college.id,\n+                        \"slug\": college.slug,\n+                        \"name\": college.name,\n+                        \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                        \"address\": college.address,\n+                        \"swiper-images\": images_array  # Full URLs of latest images\n+                    }\n+                })\n+\n+        # **Return Paginated Response**\n+        return self.paginator.get_paginated_response(response_data)\n"
                },
                {
                    "date": 1741243352954,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import College\n+from ..models import College,CollegeGallery\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers, CollegeAdminWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n@@ -218,9 +218,9 @@\n         }\n \n         return Response(completion_data, status=200)\n     \n-    @action(detail=False, methods=['get'], name=\"latest_college_images\", url_path=\"college-lists\",permission_classes=[AllowAny])\n+    @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\",permission_classes=[AllowAny])\n     def latest_college_images(self, request):\n         \"\"\"\n         Returns paginated colleges with their details and a single array of latest 3 image URLs.\n         \"\"\"\n"
                },
                {
                    "date": 1741243500725,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,36 +218,41 @@\n         }\n \n         return Response(completion_data, status=200)\n     \n-    @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\",permission_classes=[AllowAny])\n+    @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n     def latest_college_images(self, request):\n-        \"\"\"\n-        Returns paginated colleges with their details and a single array of latest 3 image URLs.\n-        \"\"\"\n-        colleges = College.objects.all().order_by('-created_date')  # Order by latest\n+        colleges = College.objects.all()\n \n-        # **Apply Pagination**\n-        paginator = MyPageNumberPagination()  \n-        paginated_colleges = self.paginator.paginate_queryset(colleges, request)\n+        # Apply search filtering\n+        search_query = request.GET.get('search', None)\n+        if search_query:\n+            colleges = colleges.filter(\n+                Q(name__icontains=search_query) |\n+                Q(address__icontains=search_query) |\n+                Q(email__icontains=search_query)\n+            )\n+\n+        # Apply ordering (default: `-created_date`)\n+        ordering_field = request.GET.get('ordering', '-created_date')\n+        colleges = colleges.order_by(ordering_field)\n+\n+        paginator = MyPageNumberPagination()\n+        paginated_colleges = paginator.paginate_queryset(colleges, request)\n         response_data = []\n \n         for college in paginated_colleges:\n             latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-\n-            # Convert images into an array of full URLs\n             images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n-            if latest_images:\n-                response_data.append({\n-                    \"college\": {\n-                        \"id\": college.id,\n-                        \"slug\": college.slug,\n-                        \"name\": college.name,\n-                        \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n-                        \"address\": college.address,\n-                        \"swiper-images\": images_array  # Full URLs of latest images\n-                    }\n-                })\n+            response_data.append({\n+                \"college\": {\n+                    \"id\": college.id,\n+                    \"slug\": college.slug,\n+                    \"name\": college.name,\n+                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                    \"address\": college.address,\n+                    \"swiper-images\": images_array\n+                }\n+            })\n \n-        # **Return Paginated Response**\n-        return self.paginator.get_paginated_response(response_data)\n+        return paginator.get_paginated_response(response_data)\n"
                },
                {
                    "date": 1741243513747,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,10 @@\n from django.db.models import Field\n from accounts.models import CustomUser as User\n from rest_framework.permissions import AllowAny\n from django.shortcuts import get_object_or_404\n+from django.shortcuts import get_object_or_404\n+from django.db.models import Q\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n"
                },
                {
                    "date": 1741243601650,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -234,9 +234,9 @@\n                 Q(email__icontains=search_query)\n             )\n \n         # Apply ordering (default: `-created_date`)\n-        ordering_field = request.GET.get('ordering', '-created_date')\n+        ordering_field = request.GET.get('ordering', '-created_date','name')\n         colleges = colleges.order_by(ordering_field)\n \n         paginator = MyPageNumberPagination()\n         paginated_colleges = paginator.paginate_queryset(colleges, request)\n"
                },
                {
                    "date": 1741243803219,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,40 +221,39 @@\n \n         return Response(completion_data, status=200)\n     \n     @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n-    def latest_college_images(self, request):\n-        colleges = College.objects.all()\n+def latest_college_images(self, request):\n+    \"\"\"\n+    Fetch paginated college data with applied filtering, searching, sorting.\n+    Includes latest 3 images from CollegeGallery.\n+    \"\"\"\n \n-        # Apply search filtering\n-        search_query = request.GET.get('search', None)\n-        if search_query:\n-            colleges = colleges.filter(\n-                Q(name__icontains=search_query) |\n-                Q(address__icontains=search_query) |\n-                Q(email__icontains=search_query)\n-            )\n+    # Get full queryset\n+    colleges = self.get_queryset()  # ✅ Uses the existing filtered queryset\n \n-        # Apply ordering (default: `-created_date`)\n-        ordering_field = request.GET.get('ordering', '-created_date','name')\n-        colleges = colleges.order_by(ordering_field)\n+    # **Manually Apply Filters**\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    for backend in filter_backends:\n+        colleges = backend().filter_queryset(request, colleges, self)\n \n-        paginator = MyPageNumberPagination()\n-        paginated_colleges = paginator.paginate_queryset(colleges, request)\n-        response_data = []\n+    # **Paginate Results**\n+    paginator = MyPageNumberPagination()\n+    paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n-        for college in paginated_colleges:\n-            latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+    response_data = []\n+    for college in paginated_colleges:\n+        latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n+        images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n-            response_data.append({\n-                \"college\": {\n-                    \"id\": college.id,\n-                    \"slug\": college.slug,\n-                    \"name\": college.name,\n-                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n-                    \"address\": college.address,\n-                    \"swiper-images\": images_array\n-                }\n-            })\n+        response_data.append({\n+            \"college\": {\n+                \"id\": college.id,\n+                \"slug\": college.slug,\n+                \"name\": college.name,\n+                \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                \"address\": college.address,\n+                \"swiper-images\": images_array\n+            }\n+        })\n \n-        return paginator.get_paginated_response(response_data)\n+    return paginator.get_paginated_response(response_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741243809298,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,39 +221,39 @@\n \n         return Response(completion_data, status=200)\n     \n     @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n-def latest_college_images(self, request):\n-    \"\"\"\n-    Fetch paginated college data with applied filtering, searching, sorting.\n-    Includes latest 3 images from CollegeGallery.\n-    \"\"\"\n+    def latest_college_images(self, request):\n+        \"\"\"\n+        Fetch paginated college data with applied filtering, searching, sorting.\n+        Includes latest 3 images from CollegeGallery.\n+        \"\"\"\n \n-    # Get full queryset\n-    colleges = self.get_queryset()  # ✅ Uses the existing filtered queryset\n+        # Get full queryset\n+        colleges = self.get_queryset()  # ✅ Uses the existing filtered queryset\n \n-    # **Manually Apply Filters**\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    for backend in filter_backends:\n-        colleges = backend().filter_queryset(request, colleges, self)\n+        # **Manually Apply Filters**\n+        filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+        for backend in filter_backends:\n+            colleges = backend().filter_queryset(request, colleges, self)\n \n-    # **Paginate Results**\n-    paginator = MyPageNumberPagination()\n-    paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n+        # **Paginate Results**\n+        paginator = MyPageNumberPagination()\n+        paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n-    response_data = []\n-    for college in paginated_colleges:\n-        latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n\\ No newline at end of file\n-        images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+        response_data = []\n+        for college in paginated_colleges:\n+            latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n+            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n-        response_data.append({\n-            \"college\": {\n-                \"id\": college.id,\n-                \"slug\": college.slug,\n-                \"name\": college.name,\n-                \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n-                \"address\": college.address,\n-                \"swiper-images\": images_array\n-            }\n-        })\n+            response_data.append({\n+                \"college\": {\n+                    \"id\": college.id,\n+                    \"slug\": college.slug,\n+                    \"name\": college.name,\n+                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                    \"address\": college.address,\n+                    \"swiper-images\": images_array\n+                }\n+            })\n \n-    return paginator.get_paginated_response(response_data)\n+        return paginator.get_paginated_response(response_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741250976072,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,39 +221,45 @@\n \n         return Response(completion_data, status=200)\n     \n     @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n-    def latest_college_images(self, request):\n-        \"\"\"\n-        Fetch paginated college data with applied filtering, searching, sorting.\n-        Includes latest 3 images from CollegeGallery.\n-        \"\"\"\n+def latest_college_images(self, request):\n+    \"\"\"\n+    Fetch college data with full dataset ordering (before pagination),\n+    ensuring results are ordered across all pages.\n+    Includes latest 3 images from CollegeGallery.\n+    \"\"\"\n \n-        # Get full queryset\n-        colleges = self.get_queryset()  # ✅ Uses the existing filtered queryset\n+    # **Get the full queryset**\n+    colleges = self.get_queryset()  # ✅ Uses existing queryset with filters\n \n-        # **Manually Apply Filters**\n-        filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-        for backend in filter_backends:\n-            colleges = backend().filter_queryset(request, colleges, self)\n+    # **Manually Apply Filters**\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    for backend in filter_backends:\n+        colleges = backend().filter_queryset(request, colleges, self)\n \n-        # **Paginate Results**\n-        paginator = MyPageNumberPagination()\n-        paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n+    # **Apply Ordering Before Pagination**\n+    ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n+    colleges = colleges.order_by(ordering_field)\n \n-        response_data = []\n-        for college in paginated_colleges:\n\\ No newline at end of file\n-            latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+    # **Convert Full QuerySet to List (to preserve ordering across pages)**\n+    colleges_list = list(colleges)\n \n-            response_data.append({\n-                \"college\": {\n-                    \"id\": college.id,\n-                    \"slug\": college.slug,\n-                    \"name\": college.name,\n-                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n-                    \"address\": college.address,\n-                    \"swiper-images\": images_array\n-                }\n-            })\n+    response_data = []\n+    for college in colleges_list:  # ✅ Iterate over the fully sorted list\n+        latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n+        images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n-        return paginator.get_paginated_response(response_data)\n+        response_data.append({\n+            \"college\": {\n+                \"id\": college.id,\n+                \"slug\": college.slug,\n+                \"name\": college.name,\n+                \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                \"address\": college.address,\n+                \"swiper-images\": images_array\n+            }\n+        })\n+\n+    # **Paginate the Fully Ordered List**\n+    paginator = MyPageNumberPagination()\n+    return paginator.get_paginated_response(response_data)\n"
                },
                {
                    "date": 1741251160923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,12 +220,12 @@\n         }\n \n         return Response(completion_data, status=200)\n     \n-    @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n+   @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n def latest_college_images(self, request):\n     \"\"\"\n-    Fetch college data with full dataset ordering (before pagination),\n+    Fetch college data with full dataset ordering before pagination,\n     ensuring results are ordered across all pages.\n     Includes latest 3 images from CollegeGallery.\n     \"\"\"\n \n@@ -240,13 +240,17 @@\n     # **Apply Ordering Before Pagination**\n     ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n     colleges = colleges.order_by(ordering_field)\n \n-    # **Convert Full QuerySet to List (to preserve ordering across pages)**\n-    colleges_list = list(colleges)\n+    # **Paginate the Fully Ordered List**\n+    paginator = MyPageNumberPagination()\n+    paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n+    if paginated_colleges is None:  # If pagination fails, return all results\n+        paginated_colleges = colleges\n+\n     response_data = []\n-    for college in colleges_list:  # ✅ Iterate over the fully sorted list\n+    for college in paginated_colleges:\n         latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n         images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n         response_data.append({\n@@ -259,7 +263,6 @@\n                 \"swiper-images\": images_array\n             }\n         })\n \n-    # **Paginate the Fully Ordered List**\n-    paginator = MyPageNumberPagination()\n-    return paginator.get_paginated_response(response_data)\n+    return paginator.get_paginated_response(response_data)  # ✅ Uses fixed pagination response\n+\n"
                },
                {
                    "date": 1741251179926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -220,49 +220,49 @@\n         }\n \n         return Response(completion_data, status=200)\n     \n-   @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n-def latest_college_images(self, request):\n-    \"\"\"\n-    Fetch college data with full dataset ordering before pagination,\n-    ensuring results are ordered across all pages.\n-    Includes latest 3 images from CollegeGallery.\n-    \"\"\"\n+    @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n+    def latest_college_images(self, request):\n+        \"\"\"\n+        Fetch college data with full dataset ordering before pagination,\n+        ensuring results are ordered across all pages.\n+        Includes latest 3 images from CollegeGallery.\n+        \"\"\"\n \n-    # **Get the full queryset**\n-    colleges = self.get_queryset()  # ✅ Uses existing queryset with filters\n+        # **Get the full queryset**\n+        colleges = self.get_queryset()  # ✅ Uses existing queryset with filters\n \n-    # **Manually Apply Filters**\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    for backend in filter_backends:\n-        colleges = backend().filter_queryset(request, colleges, self)\n+        # **Manually Apply Filters**\n+        filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+        for backend in filter_backends:\n+            colleges = backend().filter_queryset(request, colleges, self)\n \n-    # **Apply Ordering Before Pagination**\n-    ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n-    colleges = colleges.order_by(ordering_field)\n+        # **Apply Ordering Before Pagination**\n+        ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n+        colleges = colleges.order_by(ordering_field)\n \n-    # **Paginate the Fully Ordered List**\n-    paginator = MyPageNumberPagination()\n-    paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n+        # **Paginate the Fully Ordered List**\n+        paginator = MyPageNumberPagination()\n+        paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n-    if paginated_colleges is None:  # If pagination fails, return all results\n-        paginated_colleges = colleges\n+        if paginated_colleges is None:  # If pagination fails, return all results\n+            paginated_colleges = colleges\n \n-    response_data = []\n-    for college in paginated_colleges:\n-        latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-        images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+        response_data = []\n+        for college in paginated_colleges:\n+            latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n+            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n-        response_data.append({\n-            \"college\": {\n-                \"id\": college.id,\n-                \"slug\": college.slug,\n-                \"name\": college.name,\n-                \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n-                \"address\": college.address,\n-                \"swiper-images\": images_array\n-            }\n-        })\n+            response_data.append({\n+                \"college\": {\n+                    \"id\": college.id,\n+                    \"slug\": college.slug,\n+                    \"name\": college.name,\n+                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                    \"address\": college.address,\n+                    \"swiper-images\": images_array\n+                }\n+            })\n \n-    return paginator.get_paginated_response(response_data)  # ✅ Uses fixed pagination response\n+        return paginator.get_paginated_response(response_data)  # ✅ Uses fixed pagination response\n \n"
                },
                {
                    "date": 1741270250250,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,48 +221,55 @@\n \n         return Response(completion_data, status=200)\n     \n     @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n-    def latest_college_images(self, request):\n-        \"\"\"\n-        Fetch college data with full dataset ordering before pagination,\n-        ensuring results are ordered across all pages.\n-        Includes latest 3 images from CollegeGallery.\n-        \"\"\"\n+def latest_college_images(self, request):\n+    \"\"\"\n+    Fetch unique college data with full dataset ordering before pagination,\n+    ensuring results are ordered across all pages.\n+    Includes latest 3 images from CollegeGallery.\n+    \"\"\"\n \n-        # **Get the full queryset**\n-        colleges = self.get_queryset()  # ✅ Uses existing queryset with filters\n+    # **Get the base queryset without duplicates**\n+    colleges = self.get_queryset().distinct()  # ✅ Ensure no duplicate data\n \n-        # **Manually Apply Filters**\n-        filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-        for backend in filter_backends:\n-            colleges = backend().filter_queryset(request, colleges, self)\n+    # **Apply Filtering Once**\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    for backend in filter_backends:\n+        colleges = backend().filter_queryset(request, colleges, self)\n \n-        # **Apply Ordering Before Pagination**\n-        ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n-        colleges = colleges.order_by(ordering_field)\n+    # **Apply Ordering Before Pagination**\n+    ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n+    colleges = colleges.order_by(ordering_field).distinct()  # ✅ Prevent duplicate ordering\n \n-        # **Paginate the Fully Ordered List**\n-        paginator = MyPageNumberPagination()\n-        paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n+    # **Apply Pagination**\n+    paginator = MyPageNumberPagination()\n+    paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n-        if paginated_colleges is None:  # If pagination fails, return all results\n-            paginated_colleges = colleges\n+    if paginated_colleges is None:  # If pagination fails, return all results\n+        paginated_colleges = colleges\n \n-        response_data = []\n-        for college in paginated_colleges:\n-            latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+    # **Construct Response Data Without Duplication**\n+    response_data = []\n+    seen_colleges = set()  # ✅ Use a set to track unique colleges\n \n-            response_data.append({\n-                \"college\": {\n-                    \"id\": college.id,\n-                    \"slug\": college.slug,\n-                    \"name\": college.name,\n-                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n-                    \"address\": college.address,\n-                    \"swiper-images\": images_array\n-                }\n-            })\n+    for college in paginated_colleges:\n+        if college.id in seen_colleges:  # Avoid duplicate entries\n+            continue\n+        seen_colleges.add(college.id)\n \n-        return paginator.get_paginated_response(response_data)  # ✅ Uses fixed pagination response\n+        latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n+        images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n+        response_data.append({\n+            \"college\": {\n+                \"id\": college.id,\n+                \"slug\": college.slug,\n+                \"name\": college.name,\n+                \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                \"address\": college.address,\n+                \"swiper-images\": images_array\n+            }\n+        })\n+\n+    return paginator.get_paginated_response(response_data) \n+\n"
                },
                {
                    "date": 1741270255555,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,55 +221,55 @@\n \n         return Response(completion_data, status=200)\n     \n     @action(detail=False, methods=['get'], name=\"college-lists\", url_path=\"college-lists\", permission_classes=[AllowAny])\n-def latest_college_images(self, request):\n-    \"\"\"\n-    Fetch unique college data with full dataset ordering before pagination,\n-    ensuring results are ordered across all pages.\n-    Includes latest 3 images from CollegeGallery.\n-    \"\"\"\n+    def latest_college_images(self, request):\n+        \"\"\"\n+        Fetch unique college data with full dataset ordering before pagination,\n+        ensuring results are ordered across all pages.\n+        Includes latest 3 images from CollegeGallery.\n+        \"\"\"\n \n-    # **Get the base queryset without duplicates**\n-    colleges = self.get_queryset().distinct()  # ✅ Ensure no duplicate data\n+        # **Get the base queryset without duplicates**\n+        colleges = self.get_queryset().distinct()  # ✅ Ensure no duplicate data\n \n-    # **Apply Filtering Once**\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    for backend in filter_backends:\n-        colleges = backend().filter_queryset(request, colleges, self)\n+        # **Apply Filtering Once**\n+        filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+        for backend in filter_backends:\n+            colleges = backend().filter_queryset(request, colleges, self)\n \n-    # **Apply Ordering Before Pagination**\n-    ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n-    colleges = colleges.order_by(ordering_field).distinct()  # ✅ Prevent duplicate ordering\n+        # **Apply Ordering Before Pagination**\n+        ordering_field = request.GET.get(\"ordering\", \"-created_date\")  # Default: latest first\n+        colleges = colleges.order_by(ordering_field).distinct()  # ✅ Prevent duplicate ordering\n \n-    # **Apply Pagination**\n-    paginator = MyPageNumberPagination()\n-    paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n+        # **Apply Pagination**\n+        paginator = MyPageNumberPagination()\n+        paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n-    if paginated_colleges is None:  # If pagination fails, return all results\n-        paginated_colleges = colleges\n+        if paginated_colleges is None:  # If pagination fails, return all results\n+            paginated_colleges = colleges\n \n-    # **Construct Response Data Without Duplication**\n-    response_data = []\n-    seen_colleges = set()  # ✅ Use a set to track unique colleges\n+        # **Construct Response Data Without Duplication**\n+        response_data = []\n+        seen_colleges = set()  # ✅ Use a set to track unique colleges\n \n-    for college in paginated_colleges:\n-        if college.id in seen_colleges:  # Avoid duplicate entries\n-            continue\n-        seen_colleges.add(college.id)\n+        for college in paginated_colleges:\n+            if college.id in seen_colleges:  # Avoid duplicate entries\n+                continue\n+            seen_colleges.add(college.id)\n \n-        latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-        images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+            latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n+            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n \n-        response_data.append({\n-            \"college\": {\n-                \"id\": college.id,\n-                \"slug\": college.slug,\n-                \"name\": college.name,\n-                \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n-                \"address\": college.address,\n-                \"swiper-images\": images_array\n-            }\n-        })\n+            response_data.append({\n+                \"college\": {\n+                    \"id\": college.id,\n+                    \"slug\": college.slug,\n+                    \"name\": college.name,\n+                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                    \"address\": college.address,\n+                    \"swiper-images\": images_array\n+                }\n+            })\n \n-    return paginator.get_paginated_response(response_data) \n+        return paginator.get_paginated_response(response_data) \n \n"
                },
                {
                    "date": 1741493852626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -266,9 +266,9 @@\n                     \"slug\": college.slug,\n                     \"name\": college.name,\n                     \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n                     \"address\": college.address,\n-                    \"swiper-images\": images_array\n+                    \"swiper_images\": images_array\n                 }\n             })\n \n         return paginator.get_paginated_response(response_data) \n"
                },
                {
                    "date": 1741493861460,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,8 +264,9 @@\n                 \"college\": {\n                     \"id\": college.id,\n                     \"slug\": college.slug,\n                     \"name\": college.name,\n+                    \"address\"\n                     \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n                     \"address\": college.address,\n                     \"swiper_images\": images_array\n                 }\n"
                },
                {
                    "date": 1741493886624,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,8 @@\n                 \"college\": {\n                     \"id\": college.id,\n                     \"slug\": college.slug,\n                     \"name\": college.name,\n-                    \"address\"\n                     \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n                     \"address\": college.address,\n                     \"swiper_images\": images_array\n                 }\n"
                },
                {
                    "date": 1741493895638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,8 +264,9 @@\n                 \"college\": {\n                     \"id\": college.id,\n                     \"slug\": college.slug,\n                     \"name\": college.name,\n+                    \"district\":\n                     \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n                     \"address\": college.address,\n                     \"swiper_images\": images_array\n                 }\n"
                },
                {
                    "date": 1741494057218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,9 +264,9 @@\n                 \"college\": {\n                     \"id\": college.id,\n                     \"slug\": college.slug,\n                     \"name\": college.name,\n-                    \"district\":\n+                    \"district\": college.district.name ,\n                     \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n                     \"address\": college.address,\n                     \"swiper_images\": images_array\n                 }\n"
                },
                {
                    "date": 1741684555540,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -264,10 +264,10 @@\n                 \"college\": {\n                     \"id\": college.id,\n                     \"slug\": college.slug,\n                     \"name\": college.name,\n-                    \"district\": college.district.name ,\n-                    \"dp_image\": request.build_absolute_uri(college.dp_image.url) if college.dp_image else None,\n+                    \"district\": college.district.name if college.district else None,\n+                    \"dp_image\": college.dp_image.url) if college.dp_image else None,\n                     \"address\": college.address,\n                     \"swiper_images\": images_array\n                 }\n             })\n"
                },
                {
                    "date": 1741684568212,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -257,17 +257,17 @@\n                 continue\n             seen_colleges.add(college.id)\n \n             latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-            images_array = [request.build_absolute_uri(image.image.url) for image in latest_images]\n+            images_array = [image.image.url) for image in latest_images]\n \n             response_data.append({\n                 \"college\": {\n                     \"id\": college.id,\n                     \"slug\": college.slug,\n                     \"name\": college.name,\n                     \"district\": college.district.name if college.district else None,\n-                    \"dp_image\": college.dp_image.url) if college.dp_image else None,\n+                    \"dp_image\": college.dp_image.url if college.dp_image else None,\n                     \"address\": college.address,\n                     \"swiper_images\": images_array\n                 }\n             })\n"
                },
                {
                    "date": 1741684594454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n         paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n         # Construct response\n         logos = [\n-            {\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": request.build_absolute_uri(college.dp_image.url)}\n+            {\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": college.dp_image.url)}\n             for college in paginated_colleges\n         ]\n \n         return paginator.get_paginated_response(logos)\n@@ -257,9 +257,9 @@\n                 continue\n             seen_colleges.add(college.id)\n \n             latest_images = CollegeGallery.objects.filter(college=college).order_by('-created_date')[:3]\n-            images_array = [image.image.url) for image in latest_images]\n+            images_array = [image.image.url for image in latest_images]\n \n             response_data.append({\n                 \"college\": {\n                     \"id\": college.id,\n"
                },
                {
                    "date": 1743921147518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,16 +58,22 @@\n         return get_object_or_404(queryset, slug=lookup_value)  # Otherwise, lookup by slug\n \n     \n     def get_queryset(self):\n-        # print(self.action)\n-        queryset = super().get_queryset()\n-        request = self.request\n-        if request.user.is_superuser:\n-            return queryset\n-        elif request.user.has_perm('collegemanagement.change_college'):\n-            return queryset.filter(user=request.user)\n+    queryset = super().get_queryset()\n+    request = self.request\n+    \n+    # Apply visibility filter for non-admin users in list/retrieve actions\n+    if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n+        queryset = queryset.filter(is_show=True)\n+    \n+    # Apply permission-based filtering\n+    if request.user.is_superuser:\n         return queryset\n+    elif request.user.has_perm('collegemanagement.change_college'):\n+        return queryset.filter(user=request.user)\n+    \n+    return queryset.filter(is_show=True)  # Default case for unprivileged users\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n@@ -94,9 +100,9 @@\n         paginated_colleges = paginator.paginate_queryset(colleges, request, view=self)\n \n         # Construct response\n         logos = [\n-            {\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": college.dp_image.url)}\n+            {\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": college.dp_image.url}\n             for college in paginated_colleges\n         ]\n \n         return paginator.get_paginated_response(logos)\n"
                },
                {
                    "date": 1743921256162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,23 +58,26 @@\n         return get_object_or_404(queryset, slug=lookup_value)  # Otherwise, lookup by slug\n \n     \n     def get_queryset(self):\n-    queryset = super().get_queryset()\n-    request = self.request\n-    \n-    # Apply visibility filter for non-admin users in list/retrieve actions\n-    if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n-        queryset = queryset.filter(is_show=True)\n-    \n-    # Apply permission-based filtering\n-    if request.user.is_superuser:\n-        return queryset\n-    elif request.user.has_perm('collegemanagement.change_college'):\n-        return queryset.filter(user=request.user)\n-    \n-    return queryset.filter(is_show=True)  # Default case for unprivileged users\n+        queryset = super().get_queryset()\n+        request = self.request\n+         request = self.request\n+    user = request.user\n \n+        \n+        # Apply visibility filter for non-admin users in list/retrieve actions\n+        if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n+            queryset = queryset.filter(is_show=True)\n+        \n+        # Apply permission-based filtering\n+        if request.user.is_superuser:\n+            return queryset\n+        elif request.user.has_perm('collegemanagement.change_college'):\n+            return queryset.filter(user=request.user)\n+        \n+        return queryset.filter(is_show=True)  # Default case for unprivileged users\n+\n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n         elif self.action == 'retrieve':\n"
                },
                {
                    "date": 1743921263938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,10 +60,10 @@\n     \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n-         request = self.request\n-    user = request.user\n+        \n+        user = request.user\n \n         \n         # Apply visibility filter for non-admin users in list/retrieve actions\n         if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n"
                },
                {
                    "date": 1743921272164,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,18 +60,17 @@\n     \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n-        \n         user = request.user\n \n         \n         # Apply visibility filter for non-admin users in list/retrieve actions\n         if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n             queryset = queryset.filter(is_show=True)\n         \n         # Apply permission-based filtering\n-        if request.user.is_superuser:\n+        if user.is_superuser:\n             return queryset\n         elif request.user.has_perm('collegemanagement.change_college'):\n             return queryset.filter(user=request.user)\n         \n"
                },
                {
                    "date": 1743921280417,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,9 +68,9 @@\n         if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n             queryset = queryset.filter(is_show=True)\n         \n         # Apply permission-based filtering\n-        if user.is_superuser:\n+        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n             return queryset\n         elif request.user.has_perm('collegemanagement.change_college'):\n             return queryset.filter(user=request.user)\n         \n"
                },
                {
                    "date": 1744786199640,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -280,5 +280,8 @@\n                 }\n             })\n \n         return paginator.get_paginated_response(response_data) \n+    \n+    \n+    \n \n"
                },
                {
                    "date": 1744786208405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,6 +282,65 @@\n \n         return paginator.get_paginated_response(response_data) \n     \n     \n-    \n+    @action(detail=False, methods=['patch'], url_path='update-priorities')\n+    def update_priorities(self, request, *args, **kwargs):\n+        \"\"\"\n+        Update college priorities (only for colleges sent in request)\n+        Payload: [{'id': 1, 'priority': 5}, {'id': 2, 'priority': 3}, ...]\n+        - Will only update these specific colleges\n+        - Other colleges remain unchanged (priority stays as is, even if null)\n+        \"\"\"\n+        updates = request.data\n+        \n+        if not isinstance(updates, list):\n+            return Response(\n+                {'error': 'Expected a list of college updates'},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n \n+        # Validate all updates have IDs and priority\n+        for item in updates:\n+            if 'id' not in item or 'priority' not in item:\n+                return Response(\n+                    {'error': 'Each item must contain both \"id\" and \"priority\"'},\n+                    status=status.HTTP_400_BAD_REQUEST\n+                )\n+\n+        college_ids = [item['id'] for item in updates]\n+        \n+        # Get existing colleges (only those we need to update)\n+        colleges = College.objects.filter(id__in=college_ids)\n+        college_map = {college.id: college for college in colleges}\n+\n+        # Check for invalid IDs\n+        invalid_ids = set(college_ids) - set(college_map.keys())\n+        if invalid_ids:\n+            return Response(\n+                {'error': f'Invalid college IDs: {invalid_ids}'},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+\n+        # Apply updates\n+        updated_colleges = []\n+        for update in updates:\n+            college = college_map[update['id']]\n+            college.priority = update['priority']\n+            updated_colleges.append(college)\n+\n+        # Bulk update only the priority field\n+        College.objects.bulk_update(updated_colleges, ['priority'])\n+\n+        # Return the updated colleges\n+        result = [\n+            {\n+                'id': college.id,\n+                'name': college.name,\n+                'slug': college.slug,\n+                'priority': college.priority\n+            }\n+            for college in updated_colleges\n+        ]\n+\n+        return Response(result, status=status.HTTP_200_OK)\n+\n"
                },
                {
                    "date": 1744786349159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -282,16 +282,18 @@\n \n         return paginator.get_paginated_response(response_data) \n     \n     \n-    @action(detail=False, methods=['patch'], url_path='update-priorities')\n-    def update_priorities(self, request, *args, **kwargs):\n-        \"\"\"\n-        Update college priorities (only for colleges sent in request)\n-        Payload: [{'id': 1, 'priority': 5}, {'id': 2, 'priority': 3}, ...]\n-        - Will only update these specific colleges\n-        - Other colleges remain unchanged (priority stays as is, even if null)\n-        \"\"\"\n+    @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n+def update_riorities(self, request, *args, **kwargs):\n+    if request.method == 'GET':\n+        # GET method - Return college details\n+        queryset = self.filter_queryset(self.get_queryset())\n+        colleges = queryset.values('id', 'slug', 'name', 'priority')\n+        return Response(colleges, status=status.HTTP_200_OK)\n+    \n+    elif request.method == 'PATCH':\n+        # PATCH method - Update priorities (your existing code)\n         updates = request.data\n         \n         if not isinstance(updates, list):\n             return Response(\n"
                },
                {
                    "date": 1744786538252,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -283,66 +283,69 @@\n         return paginator.get_paginated_response(response_data) \n     \n     \n     @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n-def update_riorities(self, request, *args, **kwargs):\n-    if request.method == 'GET':\n-        # GET method - Return college details\n-        queryset = self.filter_queryset(self.get_queryset())\n-        colleges = queryset.values('id', 'slug', 'name', 'priority')\n-        return Response(colleges, status=status.HTTP_200_OK)\n-    \n-    elif request.method == 'PATCH':\n-        # PATCH method - Update priorities (your existing code)\n-        updates = request.data\n+    def update_riorities(self, request, *args, **kwargs):\n+        if request.method == 'GET':\n+             queryset = self.filter_queryset(self.get_queryset())\n+            page = self.paginate_queryset(queryset)\n+            if page is not None:\n+                serializer = self.get_serializer(page, many=True)\n+                return self.get_paginated_response(serializer.data)\n+            serializer = self.get_serializer(queryset, many=True)\n+            return Response(serializer.data)\n         \n-        if not isinstance(updates, list):\n-            return Response(\n-                {'error': 'Expected a list of college updates'},\n-                status=status.HTTP_400_BAD_REQUEST\n-            )\n-\n-        # Validate all updates have IDs and priority\n-        for item in updates:\n-            if 'id' not in item or 'priority' not in item:\n+        elif request.method == 'PATCH':\n+            # PATCH method - Update priorities (your existing code)\n+            updates = request.data\n+            \n+            if not isinstance(updates, list):\n                 return Response(\n-                    {'error': 'Each item must contain both \"id\" and \"priority\"'},\n+                    {'error': 'Expected a list of college updates'},\n                     status=status.HTTP_400_BAD_REQUEST\n                 )\n \n-        college_ids = [item['id'] for item in updates]\n-        \n-        # Get existing colleges (only those we need to update)\n-        colleges = College.objects.filter(id__in=college_ids)\n-        college_map = {college.id: college for college in colleges}\n+            # Validate all updates have IDs and priority\n+            for item in updates:\n+                if 'id' not in item or 'priority' not in item:\n+                    return Response(\n+                        {'error': 'Each item must contain both \"id\" and \"priority\"'},\n+                        status=status.HTTP_400_BAD_REQUEST\n+                    )\n \n-        # Check for invalid IDs\n-        invalid_ids = set(college_ids) - set(college_map.keys())\n-        if invalid_ids:\n-            return Response(\n-                {'error': f'Invalid college IDs: {invalid_ids}'},\n-                status=status.HTTP_400_BAD_REQUEST\n-            )\n+            college_ids = [item['id'] for item in updates]\n+            \n+            # Get existing colleges (only those we need to update)\n+            colleges = College.objects.filter(id__in=college_ids)\n+            college_map = {college.id: college for college in colleges}\n \n-        # Apply updates\n-        updated_colleges = []\n-        for update in updates:\n-            college = college_map[update['id']]\n-            college.priority = update['priority']\n-            updated_colleges.append(college)\n+            # Check for invalid IDs\n+            invalid_ids = set(college_ids) - set(college_map.keys())\n+            if invalid_ids:\n+                return Response(\n+                    {'error': f'Invalid college IDs: {invalid_ids}'},\n+                    status=status.HTTP_400_BAD_REQUEST\n+                )\n \n-        # Bulk update only the priority field\n-        College.objects.bulk_update(updated_colleges, ['priority'])\n+            # Apply updates\n+            updated_colleges = []\n+            for update in updates:\n+                college = college_map[update['id']]\n+                college.priority = update['priority']\n+                updated_colleges.append(college)\n \n-        # Return the updated colleges\n-        result = [\n-            {\n-                'id': college.id,\n-                'name': college.name,\n-                'slug': college.slug,\n-                'priority': college.priority\n-            }\n-            for college in updated_colleges\n-        ]\n+            # Bulk update only the priority field\n+            College.objects.bulk_update(updated_colleges, ['priority'])\n \n-        return Response(result, status=status.HTTP_200_OK)\n+            # Return the updated colleges\n+            result = [\n+                {\n+                    'id': college.id,\n+                    'name': college.name,\n+                    'slug': college.slug,\n+                    'priority': college.priority\n+                }\n+                for college in updated_colleges\n+            ]\n \n+            return Response(result, status=status.HTTP_200_OK)\n+\n"
                },
                {
                    "date": 1744786545503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -285,15 +285,15 @@\n     \n     @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n     def update_riorities(self, request, *args, **kwargs):\n         if request.method == 'GET':\n-             queryset = self.filter_queryset(self.get_queryset())\n-            page = self.paginate_queryset(queryset)\n-            if page is not None:\n-                serializer = self.get_serializer(page, many=True)\n-                return self.get_paginated_response(serializer.data)\n-            serializer = self.get_serializer(queryset, many=True)\n-            return Response(serializer.data)\n+                queryset = self.filter_queryset(self.get_queryset())\n+                page = self.paginate_queryset(queryset)\n+                if page is not None:\n+                    serializer = self.get_serializer(page, many=True)\n+                    return self.get_paginated_response(serializer.data)\n+                serializer = self.get_serializer(queryset, many=True)\n+                return Response(serializer.data)\n         \n         elif request.method == 'PATCH':\n             # PATCH method - Update priorities (your existing code)\n             updates = request.data\n"
                },
                {
                    "date": 1744786591768,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,25 +57,25 @@\n             return get_object_or_404(queryset, id=int(lookup_value))\n         return get_object_or_404(queryset, slug=lookup_value)  # Otherwise, lookup by slug\n \n     \n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        request = self.request\n-        user = request.user\n+    # def get_queryset(self):\n+    #     queryset = super().get_queryset()\n+    #     request = self.request\n+    #     user = request.user\n \n         \n-        # Apply visibility filter for non-admin users in list/retrieve actions\n-        if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n-            queryset = queryset.filter(is_show=True)\n+    #     # Apply visibility filter for non-admin users in list/retrieve actions\n+    #     if self.action in ['list', 'retrieve'] and not request.user.is_superuser:\n+    #         queryset = queryset.filter(is_show=True)\n         \n-        # Apply permission-based filtering\n-        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n-            return queryset\n-        elif request.user.has_perm('collegemanagement.change_college'):\n-            return queryset.filter(user=request.user)\n+    #     # Apply permission-based filtering\n+    #     if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+    #         return queryset\n+    #     elif request.user.has_perm('collegemanagement.change_college'):\n+    #         return queryset.filter(user=request.user)\n         \n-        return queryset.filter(is_show=True)  # Default case for unprivileged users\n+    #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744786752541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,12 @@\n from rest_framework.permissions import AllowAny\n from django.shortcuts import get_object_or_404\n from django.shortcuts import get_object_or_404\n from django.db.models import Q\n+from django.db.models import Case, When, IntegerField\n \n \n+\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n@@ -74,8 +76,43 @@\n     #     elif request.user.has_perm('collegemanagement.change_college'):\n     #         return queryset.filter(user=request.user)\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n+    \n+    def get_queryset(self):\n+        # Start with base queryset\n+        queryset = College.objects.all()\n+        request = self.request\n+        user = request.user\n+        \n+        # Apply visibility filter for non-admin users in list/retrieve actions\n+        if self.action in ['list', 'retrieve'] and not user.is_superuser:\n+            queryset = queryset.filter(is_show=True)\n+        \n+        # Apply permission-based filtering\n+        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+            pass  # No additional filtering for superusers/managers\n+        elif user.has_perm('collegemanagement.change_college'):\n+            queryset = queryset.filter(user=user)\n+        else:\n+            queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n+        \n+        # Custom ordering - priority colleges first, then by created_date\n+        if self.action == 'list':\n+            queryset = queryset.order_by(\n+                '-priority',  # Colleges with priority set come first (highest priority first)\n+                '-created_date'  # Then by newest created date\n+            )\n+            # This ensures NULL priorities come after non-NULL ones\n+            queryset = queryset.annotate(\n+                priority_null=Case(\n+                    When(priority__isnull=True, then=1),\n+                    default=0,\n+                    output_field=IntegerField()\n+                )\n+            ).order_by('priority_null', '-priority', '-created_date')\n+        \n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744793538093,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,41 +78,40 @@\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n     \n     def get_queryset(self):\n-        # Start with base queryset\n-        queryset = College.objects.all()\n-        request = self.request\n-        user = request.user\n-        \n-        # Apply visibility filter for non-admin users in list/retrieve actions\n-        if self.action in ['list', 'retrieve'] and not user.is_superuser:\n-            queryset = queryset.filter(is_show=True)\n-        \n-        # Apply permission-based filtering\n-        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n-            pass  # No additional filtering for superusers/managers\n-        elif user.has_perm('collegemanagement.change_college'):\n-            queryset = queryset.filter(user=user)\n-        else:\n-            queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n-        \n-        # Custom ordering - priority colleges first, then by created_date\n-        if self.action == 'list':\n-            queryset = queryset.order_by(\n-                '-priority',  # Colleges with priority set come first (highest priority first)\n-                '-created_date'  # Then by newest created date\n+    # Start with base queryset\n+    queryset = College.objects.all()\n+    request = self.request\n+    user = request.user\n+    \n+    # Apply visibility filter for non-admin users in list/retrieve actions\n+    if self.action in ['list', 'retrieve'] and not user.is_superuser:\n+        queryset = queryset.filter(is_show=True)\n+    \n+    # Apply permission-based filtering\n+    if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+        pass  # No additional filtering for superusers/managers\n+    elif user.has_perm('collegemanagement.change_college'):\n+        queryset = queryset.filter(user=user)\n+    else:\n+        queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n+    \n+    # Custom ordering - first by priority, then by verified status, and lastly by created_date\n+    if self.action == 'list':\n+        queryset = queryset.annotate(\n+            priority_null=Case(\n+                When(priority__isnull=True, then=1),  # Handle NULL priority values\n+                default=0,\n+                output_field=IntegerField()\n             )\n-            # This ensures NULL priorities come after non-NULL ones\n-            queryset = queryset.annotate(\n-                priority_null=Case(\n-                    When(priority__isnull=True, then=1),\n-                    default=0,\n-                    output_field=IntegerField()\n-                )\n-            ).order_by('priority_null', '-priority', '-created_date')\n+        ).order_by(\n+            '-priority',           # First, colleges with the highest priority first\n+            '-is_verified',        # Then, sort by verification status (true/false)\n+            '-created_date'        # Finally, by the newest created date (latest first)\n+        )\n         \n-        return queryset\n+    return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744793544419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,40 +78,40 @@\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n     \n     def get_queryset(self):\n-    # Start with base queryset\n-    queryset = College.objects.all()\n-    request = self.request\n-    user = request.user\n-    \n-    # Apply visibility filter for non-admin users in list/retrieve actions\n-    if self.action in ['list', 'retrieve'] and not user.is_superuser:\n-        queryset = queryset.filter(is_show=True)\n-    \n-    # Apply permission-based filtering\n-    if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n-        pass  # No additional filtering for superusers/managers\n-    elif user.has_perm('collegemanagement.change_college'):\n-        queryset = queryset.filter(user=user)\n-    else:\n-        queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n-    \n-    # Custom ordering - first by priority, then by verified status, and lastly by created_date\n-    if self.action == 'list':\n-        queryset = queryset.annotate(\n-            priority_null=Case(\n-                When(priority__isnull=True, then=1),  # Handle NULL priority values\n-                default=0,\n-                output_field=IntegerField()\n+        # Start with base queryset\n+        queryset = College.objects.all()\n+        request = self.request\n+        user = request.user\n+        \n+        # Apply visibility filter for non-admin users in list/retrieve actions\n+        if self.action in ['list', 'retrieve'] and not user.is_superuser:\n+            queryset = queryset.filter(is_show=True)\n+        \n+        # Apply permission-based filtering\n+        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+            pass  # No additional filtering for superusers/managers\n+        elif user.has_perm('collegemanagement.change_college'):\n+            queryset = queryset.filter(user=user)\n+        else:\n+            queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n+        \n+        # Custom ordering - first by priority, then by verified status, and lastly by created_date\n+        if self.action == 'list':\n+            queryset = queryset.annotate(\n+                priority_null=Case(\n+                    When(priority__isnull=True, then=1),  # Handle NULL priority values\n+                    default=0,\n+                    output_field=IntegerField()\n+                )\n+            ).order_by(\n+                '-priority',           # First, colleges with the highest priority first\n+                '-is_verified',        # Then, sort by verification status (true/false)\n+                '-created_date'        # Finally, by the newest created date (latest first)\n             )\n-        ).order_by(\n-            '-priority',           # First, colleges with the highest priority first\n-            '-is_verified',        # Then, sort by verification status (true/false)\n-            '-created_date'        # Finally, by the newest created date (latest first)\n-        )\n-        \n-    return queryset\n+            \n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744793694994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -330,9 +330,9 @@\n                 serializer = self.get_serializer(queryset, many=True)\n                 return Response(serializer.data)\n         \n         elif request.method == 'PATCH':\n-            # PATCH method - Update priorities (your existing code)\n+            # PATCH method - Update priorities \n             updates = request.data\n             \n             if not isinstance(updates, list):\n                 return Response(\n"
                },
                {
                    "date": 1744794650554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,70 +318,70 @@\n \n         return paginator.get_paginated_response(response_data) \n     \n     \n-    @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n-    def update_riorities(self, request, *args, **kwargs):\n-        if request.method == 'GET':\n-                queryset = self.filter_queryset(self.get_queryset())\n-                page = self.paginate_queryset(queryset)\n-                if page is not None:\n-                    serializer = self.get_serializer(page, many=True)\n-                    return self.get_paginated_response(serializer.data)\n-                serializer = self.get_serializer(queryset, many=True)\n-                return Response(serializer.data)\n+    # @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n+    # def update_riorities(self, request, *args, **kwargs):\n+    #     if request.method == 'GET':\n+    #             queryset = self.filter_queryset(self.get_queryset())\n+    #             page = self.paginate_queryset(queryset)\n+    #             if page is not None:\n+    #                 serializer = self.get_serializer(page, many=True)\n+    #                 return self.get_paginated_response(serializer.data)\n+    #             serializer = self.get_serializer(queryset, many=True)\n+    #             return Response(serializer.data)\n         \n-        elif request.method == 'PATCH':\n-            # PATCH method - Update priorities \n-            updates = request.data\n+    #     elif request.method == 'PATCH':\n+    #         # PATCH method - Update priorities \n+    #         updates = request.data\n             \n-            if not isinstance(updates, list):\n-                return Response(\n-                    {'error': 'Expected a list of college updates'},\n-                    status=status.HTTP_400_BAD_REQUEST\n-                )\n+    #         if not isinstance(updates, list):\n+    #             return Response(\n+    #                 {'error': 'Expected a list of college updates'},\n+    #                 status=status.HTTP_400_BAD_REQUEST\n+    #             )\n \n-            # Validate all updates have IDs and priority\n-            for item in updates:\n-                if 'id' not in item or 'priority' not in item:\n-                    return Response(\n-                        {'error': 'Each item must contain both \"id\" and \"priority\"'},\n-                        status=status.HTTP_400_BAD_REQUEST\n-                    )\n+    #         # Validate all updates have IDs and priority\n+    #         for item in updates:\n+    #             if 'id' not in item or 'priority' not in item:\n+    #                 return Response(\n+    #                     {'error': 'Each item must contain both \"id\" and \"priority\"'},\n+    #                     status=status.HTTP_400_BAD_REQUEST\n+    #                 )\n \n-            college_ids = [item['id'] for item in updates]\n+    #         college_ids = [item['id'] for item in updates]\n             \n-            # Get existing colleges (only those we need to update)\n-            colleges = College.objects.filter(id__in=college_ids)\n-            college_map = {college.id: college for college in colleges}\n+    #         # Get existing colleges (only those we need to update)\n+    #         colleges = College.objects.filter(id__in=college_ids)\n+    #         college_map = {college.id: college for college in colleges}\n \n-            # Check for invalid IDs\n-            invalid_ids = set(college_ids) - set(college_map.keys())\n-            if invalid_ids:\n-                return Response(\n-                    {'error': f'Invalid college IDs: {invalid_ids}'},\n-                    status=status.HTTP_400_BAD_REQUEST\n-                )\n+    #         # Check for invalid IDs\n+    #         invalid_ids = set(college_ids) - set(college_map.keys())\n+    #         if invalid_ids:\n+    #             return Response(\n+    #                 {'error': f'Invalid college IDs: {invalid_ids}'},\n+    #                 status=status.HTTP_400_BAD_REQUEST\n+    #             )\n \n-            # Apply updates\n-            updated_colleges = []\n-            for update in updates:\n-                college = college_map[update['id']]\n-                college.priority = update['priority']\n-                updated_colleges.append(college)\n+    #         # Apply updates\n+    #         updated_colleges = []\n+    #         for update in updates:\n+    #             college = college_map[update['id']]\n+    #             college.priority = update['priority']\n+    #             updated_colleges.append(college)\n \n-            # Bulk update only the priority field\n-            College.objects.bulk_update(updated_colleges, ['priority'])\n+    #         # Bulk update only the priority field\n+    #         College.objects.bulk_update(updated_colleges, ['priority'])\n \n-            # Return the updated colleges\n-            result = [\n-                {\n-                    'id': college.id,\n-                    'name': college.name,\n-                    'slug': college.slug,\n-                    'priority': college.priority\n-                }\n-                for college in updated_colleges\n-            ]\n+    #         # Return the updated colleges\n+    #         result = [\n+    #             {\n+    #                 'id': college.id,\n+    #                 'name': college.name,\n+    #                 'slug': college.slug,\n+    #                 'priority': college.priority\n+    #             }\n+    #             for college in updated_colleges\n+    #         ]\n \n-            return Response(result, status=status.HTTP_200_OK)\n+    #         return Response(result, status=status.HTTP_200_OK)\n \n"
                },
                {
                    "date": 1744794672943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,9 +317,65 @@\n             })\n \n         return paginator.get_paginated_response(response_data) \n     \n+    from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework import status\n+\n+@action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n+def update_priorities(self, request, *args, **kwargs):\n+    if request.method == 'GET':\n+        # Handle GET request - fetching data\n+        queryset = self.filter_queryset(self.get_queryset())\n+        page = self.paginate_queryset(queryset)\n+        if page is not None:\n+            serializer = self.get_serializer(page, many=True)\n+            return self.get_paginated_response(serializer.data)\n+        serializer = self.get_serializer(queryset, many=True)\n+        return Response(serializer.data)\n     \n+    elif request.method == 'PATCH':\n+        # PATCH method - Update a single college's priority\n+        update = request.data  # Expecting a single update object, not a list\n+\n+        if not isinstance(update, dict):\n+            return Response(\n+                {'error': 'Expected an object for college update'},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+\n+        # Validate that the update contains both 'id' and 'priority'\n+        if 'id' not in update or 'priority' not in update:\n+            return Response(\n+                {'error': 'Both \"id\" and \"priority\" must be provided'},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+\n+        # Get the college to be updated\n+        try:\n+            college = College.objects.get(id=update['id'])\n+        except College.DoesNotExist:\n+            return Response(\n+                {'error': f'College with ID {update[\"id\"]} not found'},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+\n+        # Update the college's priority\n+        college.priority = update['priority']\n+        college.save()  # Save the updated college\n+\n+        # Return the updated college data\n+        result = {\n+            'id': college.id,\n+            'name': college.name,\n+            'slug': college.slug,\n+            'priority': college.priority\n+        }\n+\n+        return Response(result, status=status.HTTP_200_OK)\n+\n+    #TODO Bulk updates of priorities\n     # @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n     # def update_riorities(self, request, *args, **kwargs):\n     #     if request.method == 'GET':\n     #             queryset = self.filter_queryset(self.get_queryset())\n"
                },
                {
                    "date": 1744794682557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -317,11 +317,8 @@\n             })\n \n         return paginator.get_paginated_response(response_data) \n     \n-    from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework import status\n \n @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n def update_priorities(self, request, *args, **kwargs):\n     if request.method == 'GET':\n"
                },
                {
                    "date": 1744794689698,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,59 +318,59 @@\n \n         return paginator.get_paginated_response(response_data) \n     \n \n-@action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n-def update_priorities(self, request, *args, **kwargs):\n-    if request.method == 'GET':\n-        # Handle GET request - fetching data\n-        queryset = self.filter_queryset(self.get_queryset())\n-        page = self.paginate_queryset(queryset)\n-        if page is not None:\n-            serializer = self.get_serializer(page, many=True)\n-            return self.get_paginated_response(serializer.data)\n-        serializer = self.get_serializer(queryset, many=True)\n-        return Response(serializer.data)\n-    \n-    elif request.method == 'PATCH':\n-        # PATCH method - Update a single college's priority\n-        update = request.data  # Expecting a single update object, not a list\n+    @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n+    def update_priorities(self, request, *args, **kwargs):\n+        if request.method == 'GET':\n+            # Handle GET request - fetching data\n+            queryset = self.filter_queryset(self.get_queryset())\n+            page = self.paginate_queryset(queryset)\n+            if page is not None:\n+                serializer = self.get_serializer(page, many=True)\n+                return self.get_paginated_response(serializer.data)\n+            serializer = self.get_serializer(queryset, many=True)\n+            return Response(serializer.data)\n+        \n+        elif request.method == 'PATCH':\n+            # PATCH method - Update a single college's priority\n+            update = request.data  # Expecting a single update object, not a list\n \n-        if not isinstance(update, dict):\n-            return Response(\n-                {'error': 'Expected an object for college update'},\n-                status=status.HTTP_400_BAD_REQUEST\n-            )\n+            if not isinstance(update, dict):\n+                return Response(\n+                    {'error': 'Expected an object for college update'},\n+                    status=status.HTTP_400_BAD_REQUEST\n+                )\n \n-        # Validate that the update contains both 'id' and 'priority'\n-        if 'id' not in update or 'priority' not in update:\n-            return Response(\n-                {'error': 'Both \"id\" and \"priority\" must be provided'},\n-                status=status.HTTP_400_BAD_REQUEST\n-            )\n+            # Validate that the update contains both 'id' and 'priority'\n+            if 'id' not in update or 'priority' not in update:\n+                return Response(\n+                    {'error': 'Both \"id\" and \"priority\" must be provided'},\n+                    status=status.HTTP_400_BAD_REQUEST\n+                )\n \n-        # Get the college to be updated\n-        try:\n-            college = College.objects.get(id=update['id'])\n-        except College.DoesNotExist:\n-            return Response(\n-                {'error': f'College with ID {update[\"id\"]} not found'},\n-                status=status.HTTP_400_BAD_REQUEST\n-            )\n+            # Get the college to be updated\n+            try:\n+                college = College.objects.get(id=update['id'])\n+            except College.DoesNotExist:\n+                return Response(\n+                    {'error': f'College with ID {update[\"id\"]} not found'},\n+                    status=status.HTTP_400_BAD_REQUEST\n+                )\n \n-        # Update the college's priority\n-        college.priority = update['priority']\n-        college.save()  # Save the updated college\n+            # Update the college's priority\n+            college.priority = update['priority']\n+            college.save()  # Save the updated college\n \n-        # Return the updated college data\n-        result = {\n-            'id': college.id,\n-            'name': college.name,\n-            'slug': college.slug,\n-            'priority': college.priority\n-        }\n+            # Return the updated college data\n+            result = {\n+                'id': college.id,\n+                'name': college.name,\n+                'slug': college.slug,\n+                'priority': college.priority\n+            }\n \n-        return Response(result, status=status.HTTP_200_OK)\n+            return Response(result, status=status.HTTP_200_OK)\n \n     #TODO Bulk updates of priorities\n     # @action(detail=False, methods=['get', 'patch'], url_path='update-priorities')\n     # def update_riorities(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1744795391470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,40 +78,41 @@\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n     \n     def get_queryset(self):\n-        # Start with base queryset\n-        queryset = College.objects.all()\n-        request = self.request\n-        user = request.user\n+    # Start with base queryset\n+    queryset = College.objects.all()\n+    request = self.request\n+    user = request.user\n+    \n+    # Apply visibility filter for non-admin users in list/retrieve actions\n+    if self.action in ['list', 'retrieve'] and not user.is_superuser:\n+        queryset = queryset.filter(is_show=True)\n+    \n+    # Apply permission-based filtering\n+    if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+        pass  # No additional filtering for superusers/managers\n+    elif user.has_perm('collegemanagement.change_college'):\n+        queryset = queryset.filter(user=user)\n+    else:\n+        queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n+    \n+    # Custom ordering - first by priority (lowest is best), then by verified status, and lastly by created_date\n+    if self.action == 'list':\n+        queryset = queryset.annotate(\n+            priority_null=Case(\n+                When(priority__isnull=True, then=999999),  # Set a large value for NULL priorities\n+                default=0,  # Normal priorities will be 0\n+                output_field=IntegerField()\n+            )\n+        ).order_by(\n+            'priority_null',      # First, NULL priorities come after non-NULL ones\n+            'priority',           # Then, colleges with the lowest priority value first (highest priority)\n+            '-is_verified',       # Then, sort by verification status (verified first)\n+            '-created_date'       # Finally, by the newest created date (latest first)\n+        )\n         \n-        # Apply visibility filter for non-admin users in list/retrieve actions\n-        if self.action in ['list', 'retrieve'] and not user.is_superuser:\n-            queryset = queryset.filter(is_show=True)\n-        \n-        # Apply permission-based filtering\n-        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n-            pass  # No additional filtering for superusers/managers\n-        elif user.has_perm('collegemanagement.change_college'):\n-            queryset = queryset.filter(user=user)\n-        else:\n-            queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n-        \n-        # Custom ordering - first by priority, then by verified status, and lastly by created_date\n-        if self.action == 'list':\n-            queryset = queryset.annotate(\n-                priority_null=Case(\n-                    When(priority__isnull=True, then=1),  # Handle NULL priority values\n-                    default=0,\n-                    output_field=IntegerField()\n-                )\n-            ).order_by(\n-                '-priority',           # First, colleges with the highest priority first\n-                '-is_verified',        # Then, sort by verification status (true/false)\n-                '-created_date'        # Finally, by the newest created date (latest first)\n-            )\n-            \n-        return queryset\n+    return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744795396719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,41 +78,41 @@\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n     \n     def get_queryset(self):\n-    # Start with base queryset\n-    queryset = College.objects.all()\n-    request = self.request\n-    user = request.user\n-    \n-    # Apply visibility filter for non-admin users in list/retrieve actions\n-    if self.action in ['list', 'retrieve'] and not user.is_superuser:\n-        queryset = queryset.filter(is_show=True)\n-    \n-    # Apply permission-based filtering\n-    if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n-        pass  # No additional filtering for superusers/managers\n-    elif user.has_perm('collegemanagement.change_college'):\n-        queryset = queryset.filter(user=user)\n-    else:\n-        queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n-    \n-    # Custom ordering - first by priority (lowest is best), then by verified status, and lastly by created_date\n-    if self.action == 'list':\n-        queryset = queryset.annotate(\n-            priority_null=Case(\n-                When(priority__isnull=True, then=999999),  # Set a large value for NULL priorities\n-                default=0,  # Normal priorities will be 0\n-                output_field=IntegerField()\n+        # Start with base queryset\n+        queryset = College.objects.all()\n+        request = self.request\n+        user = request.user\n+        \n+        # Apply visibility filter for non-admin users in list/retrieve actions\n+        if self.action in ['list', 'retrieve'] and not user.is_superuser:\n+            queryset = queryset.filter(is_show=True)\n+        \n+        # Apply permission-based filtering\n+        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+            pass  # No additional filtering for superusers/managers\n+        elif user.has_perm('collegemanagement.change_college'):\n+            queryset = queryset.filter(user=user)\n+        else:\n+            queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n+        \n+        # Custom ordering - first by priority (lowest is best), then by verified status, and lastly by created_date\n+        if self.action == 'list':\n+            queryset = queryset.annotate(\n+                priority_null=Case(\n+                    When(priority__isnull=True, then=999999),  # Set a large value for NULL priorities\n+                    default=0,  # Normal priorities will be 0\n+                    output_field=IntegerField()\n+                )\n+            ).order_by(\n+                'priority_null',      # First, NULL priorities come after non-NULL ones\n+                'priority',           # Then, colleges with the lowest priority value first (highest priority)\n+                '-is_verified',       # Then, sort by verification status (verified first)\n+                '-created_date'       # Finally, by the newest created date (latest first)\n             )\n-        ).order_by(\n-            'priority_null',      # First, NULL priorities come after non-NULL ones\n-            'priority',           # Then, colleges with the lowest priority value first (highest priority)\n-            '-is_verified',       # Then, sort by verification status (verified first)\n-            '-created_date'       # Finally, by the newest created date (latest first)\n-        )\n-        \n-    return queryset\n+            \n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744795520287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,41 +78,44 @@\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n     \n     def get_queryset(self):\n-        # Start with base queryset\n-        queryset = College.objects.all()\n-        request = self.request\n-        user = request.user\n+    # Start with base queryset\n+    queryset = College.objects.all()\n+    request = self.request\n+    user = request.user\n+    \n+    # Apply visibility filter for non-admin users in list/retrieve actions\n+    if self.action in ['list', 'retrieve'] and not user.is_superuser:\n+        queryset = queryset.filter(is_show=True)\n+    \n+    # Apply permission-based filtering\n+    if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+        pass  # No additional filtering for superusers/managers\n+    elif user.has_perm('collegemanagement.change_college'):\n+        queryset = queryset.filter(user=user)\n+    else:\n+        queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n+    \n+    # Get the highest priority in the database\n+    max_priority = queryset.aggregate(Max('priority'))['priority__max'] or 0\n+\n+    # Custom ordering - first by priority, then by verified status, and lastly by created_date\n+    if self.action == 'list':\n+        queryset = queryset.annotate(\n+            priority_null=Case(\n+                When(priority__isnull=True, then=max_priority + 1),  # Assign a priority that is higher than any existing priority\n+                default=0,  # Normal priorities will be 0\n+                output_field=IntegerField()\n+            )\n+        ).order_by(\n+            'priority_null',      # First, NULL priorities come after non-NULL ones\n+            'priority',           # Then, colleges with the lowest priority first (highest priority)\n+            '-is_verified',       # Then, sort by verification status (verified first)\n+            '-created_date'       # Finally, by the newest created date (latest first)\n+        )\n         \n-        # Apply visibility filter for non-admin users in list/retrieve actions\n-        if self.action in ['list', 'retrieve'] and not user.is_superuser:\n-            queryset = queryset.filter(is_show=True)\n-        \n-        # Apply permission-based filtering\n-        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n-            pass  # No additional filtering for superusers/managers\n-        elif user.has_perm('collegemanagement.change_college'):\n-            queryset = queryset.filter(user=user)\n-        else:\n-            queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n-        \n-        # Custom ordering - first by priority (lowest is best), then by verified status, and lastly by created_date\n-        if self.action == 'list':\n-            queryset = queryset.annotate(\n-                priority_null=Case(\n-                    When(priority__isnull=True, then=999999),  # Set a large value for NULL priorities\n-                    default=0,  # Normal priorities will be 0\n-                    output_field=IntegerField()\n-                )\n-            ).order_by(\n-                'priority_null',      # First, NULL priorities come after non-NULL ones\n-                'priority',           # Then, colleges with the lowest priority value first (highest priority)\n-                '-is_verified',       # Then, sort by verification status (verified first)\n-                '-created_date'       # Finally, by the newest created date (latest first)\n-            )\n-            \n-        return queryset\n+    return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744795533338,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,44 +78,44 @@\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n     \n     def get_queryset(self):\n-    # Start with base queryset\n-    queryset = College.objects.all()\n-    request = self.request\n-    user = request.user\n-    \n-    # Apply visibility filter for non-admin users in list/retrieve actions\n-    if self.action in ['list', 'retrieve'] and not user.is_superuser:\n-        queryset = queryset.filter(is_show=True)\n-    \n-    # Apply permission-based filtering\n-    if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n-        pass  # No additional filtering for superusers/managers\n-    elif user.has_perm('collegemanagement.change_college'):\n-        queryset = queryset.filter(user=user)\n-    else:\n-        queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n-    \n-    # Get the highest priority in the database\n-    max_priority = queryset.aggregate(Max('priority'))['priority__max'] or 0\n+        # Start with base querysetrity \n+        queryset = College.objects.all()\n+        request = self.request\n+        user = request.user\n+        \n+        # Apply visibility filter for non-admin users in list/retrieve actions\n+        if self.action in ['list', 'retrieve'] and not user.is_superuser:\n+            queryset = queryset.filter(is_show=True)\n+        \n+        # Apply permission-based filtering\n+        if user.is_superuser or user.has_perm('collegemanagement.manage_college'):\n+            pass  # No additional filtering for superusers/managers\n+        elif user.has_perm('collegemanagement.change_college'):\n+            queryset = queryset.filter(user=user)\n+        else:\n+            queryset = queryset.filter(is_show=True)  # Default case for unprivileged users\n+        \n+        # Get the highest priority in the database\n+        max_priority = queryset.aggregate(Max('priority'))['priority__max'] or 0\n \n-    # Custom ordering - first by priority, then by verified status, and lastly by created_date\n-    if self.action == 'list':\n-        queryset = queryset.annotate(\n-            priority_null=Case(\n-                When(priority__isnull=True, then=max_priority + 1),  # Assign a priority that is higher than any existing priority\n-                default=0,  # Normal priorities will be 0\n-                output_field=IntegerField()\n+        # Custom ordering - first by priority, then by verified status, and lastly by created_date\n+        if self.action == 'list':\n+            queryset = queryset.annotate(\n+                priority_null=Case(\n+                    When(priority__isnull=True, then=max_priority + 1),  # Assign a priority that is higher than any existing priority\n+                    default=0,  # Normal priorities will be 0\n+                    output_field=IntegerField()\n+                )\n+            ).order_by(\n+                'priority_null',      # First, NULL priorities come after non-NULL ones\n+                'priority',           # Then, colleges with the lowest priority first (highest priority)\n+                '-is_verified',       # Then, sort by verification status (verified first)\n+                '-created_date'       # Finally, by the newest created date (latest first)\n             )\n-        ).order_by(\n-            'priority_null',      # First, NULL priorities come after non-NULL ones\n-            'priority',           # Then, colleges with the lowest priority first (highest priority)\n-            '-is_verified',       # Then, sort by verification status (verified first)\n-            '-created_date'       # Finally, by the newest created date (latest first)\n-        )\n-        \n-    return queryset\n+            \n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1744795649643,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,9 +17,9 @@\n from rest_framework.permissions import AllowAny\n from django.shortcuts import get_object_or_404\n from django.shortcuts import get_object_or_404\n from django.db.models import Q\n-from django.db.models import Case, When, IntegerField\n+from django.db.models import Case, When, IntegerField, Max\n \n \n \n class collegeViewsets(viewsets.ModelViewSet):\n@@ -78,9 +78,9 @@\n         \n     #     return queryset.filter(is_show=True)  # Default case for unprivileged users\n     \n     def get_queryset(self):\n-        # Start with base querysetrity \n+        # Start with base querys\n         queryset = College.objects.all()\n         request = self.request\n         user = request.user\n         \n"
                }
            ],
            "date": 1733718920520,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import College\nfrom ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\nfrom ..utilities.importbase import *\n\nclass collegeViewsets(viewsets.ModelViewSet):\n    serializer_class = CollegeListSerializers\n    # permission_classes = [collegemanagementPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = College.objects.all().order_by\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return CollegeWriteSerializers\n        elif self.action == 'retrieve':\n            return CollegeRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}