{
    "sourceFile": "collegemanagement/viewsets/college_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 129,
            "patches": [
                {
                    "date": 1733718920520,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733718926585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,13 +9,15 @@\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = College.objects.all().order_by\n+    queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n+    \n+    \n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718940407,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,12 +12,12 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id']\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n     ordering_fields = ['id']\n     \n-    \n+    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n     # }\n"
                },
                {
                    "date": 1733718947788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,10 +12,10 @@\n     #pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n-    ordering_fields = ['id']\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733718971196,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date',]\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733718979511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated__name', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733719001770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'affiliated__name', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1733719011950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n     ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n-    # filterset_fields = {\n-    #     'id': ['exact'],\n-    # }\n+    filterset_fields = {\n+        'id': ['exact'],\n+    }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         #return queryset.filter(user_id=self.request.user.id)\n"
                },
                {
                    "date": 1733719018685,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,14 @@\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n+        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719024113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,20 +13,20 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'name', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n+        'name': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719032235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,20 +13,20 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'name', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n+        'established_date': ['exact'],\n+        'website_link': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n         'id': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719044059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,12 +21,8 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'name': ['exact'],\n         'established_date': ['exact'],\n-        'website_link': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n-        'id': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719084811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n         'id': ['exact'],\n-        'name': ['exact'],\n+        'college_type': ['exact'],\n         'established_date': ['exact'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733719105874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n \n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n-        'established_date': ['exact'],\n+        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719113592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,11 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n+        'established_date': ['exact'],\n+        'affiliated': ['exact'],\n+        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719120355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n+        'created_date': ['exact'],\n         'affiliated': ['exact'],\n-        'affiliated': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719125764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n         'created_date': ['exact'],\n-        'affiliated': ['exact'],\n+        'updated_date': ['exact'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719131253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n         'created_date': ['exact'],\n-        'updated_date': ['exact'],\n+        'updated_date': ['exact',],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719137363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,10 +22,10 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n-        'created_date': ['exact'],\n-        'updated_date': ['exact',],\n+        'created_date': ['exact',],\n+        'updated_date': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n"
                },
                {
                    "date": 1733719143465,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n         'established_date': ['exact'],\n-        'created_date': ['exact',],\n+        'created_date': ['exact','gte','lte'],\n         'updated_date': ['exact','gte','lte'],\n     }\n \n     def get_queryset(self):\n"
                },
                {
                    "date": 1733719148638,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n     filterset_fields = {\n         'id': ['exact'],\n         'college_type': ['exact'],\n         'affiliated': ['exact'],\n-        'established_date': ['exact'],\n+        'established_date': ['exact','gte','lte'],\n         'created_date': ['exact','gte','lte'],\n         'updated_date': ['exact','gte','lte'],\n     }\n \n"
                },
                {
                    "date": 1733735549748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,5 +40,22 @@\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=True, methods=['get'], url_path=\"dp-image\")\n+    def get_dp_image(self, request, pk=None):\n+        try:\n+            # Fetch the college by primary key\n+            college = self.get_object()\n+        except College.DoesNotExist:\n+            return Response({\"error\": \"College not found.\"}, status=404)\n \n+        # Check if dp_image exists\n+        if not college.dp_image:\n+            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+\n+        # Construct the absolute URL for the dp_image\n+        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+\n+        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+\n"
                },
                {
                    "date": 1733735563239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import College\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n-\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1733735574433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"dp-image\")\n+    @action(detail=True, methods=['get'], url_path=\"college-\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n"
                },
                {
                    "date": 1733735626352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-\")\n+    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n"
                },
                {
                    "date": 1733735640941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset.filter(user_id=self.request.user.id)\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n"
                },
                {
                    "date": 1733736397753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n+    pagination_class = MyPageNumberPagination\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1733736439980,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,62 @@\n+from rest_framework import viewsets\n+from rest_framework.filters import SearchFilter, OrderingFilter\n+from django_filters.rest_framework import DjangoFilterBackend\n+from ..models import College\n+from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n+from ..utilities.importbase import *\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n+class collegeViewsets(viewsets.ModelViewSet):\n+    serializer_class = CollegeListSerializers\n+    # permission_classes = [collegemanagementPermission]\n+    # authentication_classes = [JWTAuthentication]\n+    pagination_class = MyPageNumberPagination\n+    queryset = College.objects.all().order_by('-id')\n+\n+    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n+    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    \n+    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n+\n+    filterset_fields = {\n+        'id': ['exact'],\n+        'college_type': ['exact'],\n+        'affiliated': ['exact'],\n+        'established_date': ['exact','gte','lte'],\n+        'created_date': ['exact','gte','lte'],\n+        'updated_date': ['exact','gte','lte'],\n+    }\n+\n+    def get_queryset(self):\n+        queryset = super().get_queryset()\n+        return queryset\n+\n+    def get_serializer_class(self):\n+        if self.action in ['create', 'update', 'partial_update']:\n+            return CollegeWriteSerializers\n+        elif self.action == 'retrieve':\n+            return CollegeRetrieveSerializers\n+        return super().get_serializer_class()\n+\n+    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n+    # def action_name(self, request, *args, **kwargs):\n+    #     return super().list(request, *args, **kwargs)\n+    \n+    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n+    def get_dp_image(self, request, pk=None):\n+        try:\n+            # Fetch the college by primary key\n+            college = self.get_object()\n+        except College.DoesNotExist:\n+            return Response({\"error\": \"College not found.\"}, status=404)\n+\n+        # Check if dp_image exists\n+        if not college.dp_image:\n+            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+\n+        # Construct the absolute URL for the dp_image\n+        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+\n+        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+\n"
                },
                {
                    "date": 1733813051433,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,67 +58,33 @@\n         # Construct the absolute URL for the dp_image\n         dp_image_url = request.build_absolute_uri(college.dp_image.url)\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n-\n-from rest_framework import viewsets\n-from rest_framework.filters import SearchFilter, OrderingFilter\n-from django_filters.rest_framework import DjangoFilterBackend\n-from ..models import College\n-from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n-from ..utilities.importbase import *\n-from rest_framework.decorators import action\n-from rest_framework.response import Response\n-class collegeViewsets(viewsets.ModelViewSet):\n-    serializer_class = CollegeListSerializers\n-    # permission_classes = [collegemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n-    pagination_class = MyPageNumberPagination\n-    queryset = College.objects.all().order_by('-id')\n-\n-    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n-    # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n-\n-    filterset_fields = {\n-        'id': ['exact'],\n-        'college_type': ['exact'],\n-        'affiliated': ['exact'],\n-        'established_date': ['exact','gte','lte'],\n-        'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact','gte','lte'],\n-    }\n-\n-    def get_queryset(self):\n-        queryset = super().get_queryset()\n-        return queryset\n-\n-    def get_serializer_class(self):\n-        if self.action in ['create', 'update', 'partial_update']:\n-            return CollegeWriteSerializers\n-        elif self.action == 'retrieve':\n-            return CollegeRetrieveSerializers\n-        return super().get_serializer_class()\n-\n-    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n-    # def action_name(self, request, *args, **kwargs):\n-    #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n+    @action(detail=True, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    def calculate_completion_percentage(self, request, pk=None):\n         try:\n-            # Fetch the college by primary key\n-            college = self.get_object()\n+            college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n-            return Response({\"error\": \"College not found.\"}, status=404)\n+            return Response({\"error\": \"College not found\"}, status=404)\n \n-        # Check if dp_image exists\n-        if not college.dp_image:\n-            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+        # Calculate the completion percentage\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n \n-        # Construct the absolute URL for the dp_image\n-        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+        completed_fields_count = 0\n+        for field_name in required_fields:\n+            value = getattr(college_instance, field_name, None)\n+            if value:  # Field is considered filled if it's not None or empty\n+                completed_fields_count += 1\n \n-        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+        total_required_fields = len(required_fields)\n+        if total_required_fields == 0:  # Avoid division by zero\n+            completion_percentage = 100\n+        else:\n+            completion_percentage = (completed_fields_count / total_required_fields) * 100\n \n+        return Response({\"completion_percentage\": round(completion_percentage, 2)})\n+\n"
                },
                {
                    "date": 1733813511654,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=True, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=Fas, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, pk=None):\n         try:\n             college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813520519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=True, methods=['get'], url_path=\"college-logo\")\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n     def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n@@ -60,9 +60,9 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=Fas, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, pk=None):\n         try:\n             college_instance = self.get_object()  # Get the College instance by primary key\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813575315,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,31 +60,26 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    def calculate_completion_percentage(self, request, pk=None):\n-        try:\n-            college_instance = self.get_object()  # Get the College instance by primary key\n-        except College.DoesNotExist:\n-            return Response({\"error\": \"College not found\"}, status=404)\n+    AssertionError at /api/college/completion-percentage/\n+Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n+Request Method:\tGET\n+Request URL:\thttp://127.0.0.1:8000/api/college/completion-percentage/\n+Django Version:\t4.2.15\n+Exception Type:\tAssertionError\n+Exception Value:\t\n+Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n+Exception Location:\t/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/rest_framework/generics.py, line 92, in get_object\n+Raised during:\tcollegemanagement.viewsets.college_viewsets.collegeViewsets\n+Python Executable:\t/Users/vrit-prashant/Documents/college-info-backend/venv/bin/python\n+Python Version:\t3.13.1\n+Python Path:\t\n+['/Users/vrit-prashant/Documents/college-info-backend',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python313.zip',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13',\n+ '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload',\n+ '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages',\n+ '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/setuptools/_vendor']\n+Server time:\tTue, 10 Dec 2024 12:37:09 +0545\n \n-        # Calculate the completion percentage\n-        required_fields = [\n-            field.name for field in College._meta.get_fields()\n-            if isinstance(field, Field) and not field.blank and not field.null\n-        ]\n \n-        completed_fields_count = 0\n-        for field_name in required_fields:\n-            value = getattr(college_instance, field_name, None)\n-            if value:  # Field is considered filled if it's not None or empty\n-                completed_fields_count += 1\n-\n-        total_required_fields = len(required_fields)\n-        if total_required_fields == 0:  # Avoid division by zero\n-            completion_percentage = 100\n-        else:\n-            completion_percentage = (completed_fields_count / total_required_fields) * 100\n-\n-        return Response({\"completion_percentage\": round(completion_percentage, 2)})\n-\n"
                },
                {
                    "date": 1733813585099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,26 +60,28 @@\n \n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n-    AssertionError at /api/college/completion-percentage/\n-Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n-Request Method:\tGET\n-Request URL:\thttp://127.0.0.1:8000/api/college/completion-percentage/\n-Django Version:\t4.2.15\n-Exception Type:\tAssertionError\n-Exception Value:\t\n-Expected view collegeViewsets to be called with a URL keyword argument named \"pk\". Fix your URL conf, or set the `.lookup_field` attribute on the view correctly.\n-Exception Location:\t/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/rest_framework/generics.py, line 92, in get_object\n-Raised during:\tcollegemanagement.viewsets.college_viewsets.collegeViewsets\n-Python Executable:\t/Users/vrit-prashant/Documents/college-info-backend/venv/bin/python\n-Python Version:\t3.13.1\n-Python Path:\t\n-['/Users/vrit-prashant/Documents/college-info-backend',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python313.zip',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13',\n- '/opt/homebrew/Cellar/python@3.13/3.13.1/Frameworks/Python.framework/Versions/3.13/lib/python3.13/lib-dynload',\n- '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages',\n- '/Users/vrit-prashant/Documents/college-info-backend/venv/lib/python3.13/site-packages/setuptools/_vendor']\n-Server time:\tTue, 10 Dec 2024 12:37:09 +0545\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+def calculate_completion_percentage(self, request, *args, **kwargs):\n+    queryset = self.get_queryset()\n+    total_colleges = queryset.count()\n+    completion_data = []\n \n+    for college in queryset:\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n \n+        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+        total_required_fields = len(required_fields)\n+        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+\n+        completion_data.append({\n+            \"college_id\": college.id,\n+            \"college_name\": college.name,\n+            \"completion_percentage\": round(completion_percentage, 2),\n+        })\n+\n+    return Response(completion_data)\n+\n"
                },
                {
                    "date": 1733813592745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,27 +61,27 @@\n         return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-def calculate_completion_percentage(self, request, *args, **kwargs):\n-    queryset = self.get_queryset()\n-    total_colleges = queryset.count()\n-    completion_data = []\n+    def calculate_completion_percentage(self, request, *args, **kwargs):\n+        queryset = self.get_queryset()\n+        total_colleges = queryset.count()\n+        completion_data = []\n \n-    for college in queryset:\n-        required_fields = [\n-            field.name for field in College._meta.get_fields()\n-            if isinstance(field, Field) and not field.blank and not field.null\n-        ]\n+        for college in queryset:\n+            required_fields = [\n+                field.name for field in College._meta.get_fields()\n+                if isinstance(field, Field) and not field.blank and not field.null\n+            ]\n \n-        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-        total_required_fields = len(required_fields)\n-        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+            completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+            total_required_fields = len(required_fields)\n+            completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n-        completion_data.append({\n-            \"college_id\": college.id,\n-            \"college_name\": college.name,\n-            \"completion_percentage\": round(completion_percentage, 2),\n-        })\n+            completion_data.append({\n+                \"college_id\": college.id,\n+                \"college_name\": college.name,\n+                \"completion_percentage\": round(completion_percentage, 2),\n+            })\n \n-    return Response(completion_data)\n+        return Response(completion_data)\n \n"
                },
                {
                    "date": 1733813624331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n+    def get_dp_image((self, request, *args, **kwargs):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813634057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n     @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image((self, request, *args, **kwargs):\n+    def get_dp_image(self, request, pk=None):\n         try:\n             # Fetch the college by primary key\n             college = self.get_object()\n         except College.DoesNotExist:\n"
                },
                {
                    "date": 1733813684374,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,24 +42,25 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n-    def get_dp_image(self, request, pk=None):\n-        try:\n-            # Fetch the college by primary key\n-            college = self.get_object()\n-        except College.DoesNotExist:\n-            return Response({\"error\": \"College not found.\"}, status=404)\n+@action(detail=False, methods=['get'], url_path=\"college-logo\")\n+def get_dp_image(self, request, pk=None):\n+    colleges = College.objects.all()  # Fetch all colleges\n+    if not colleges.exists():\n+        return Response({\"error\": \"No colleges available.\"}, status=404)\n \n-        # Check if dp_image exists\n-        if not college.dp_image:\n-            return Response({\"message\": \"No display image available for this college.\"}, status=404)\n+    logos = []\n+    for college in colleges:\n+        if college.dp_image:\n+            dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+            logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n-        # Construct the absolute URL for the dp_image\n-        dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+    if not logos:\n+        return Response({\"message\": \"No display images available.\"}, status=404)\n \n-        return Response({\"college_name\": college.name, \"dp_image_url\": dp_image_url}, status=200)\n+    return Response(logos, status=200)\n+\n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1733813689969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,24 +42,24 @@\n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n     #     return super().list(request, *args, **kwargs)\n     \n-@action(detail=False, methods=['get'], url_path=\"college-logo\")\n-def get_dp_image(self, request, pk=None):\n-    colleges = College.objects.all()  # Fetch all colleges\n-    if not colleges.exists():\n-        return Response({\"error\": \"No colleges available.\"}, status=404)\n+    @action(detail=False, methods=['get'], url_path=\"college-logo\")\n+    def get_dp_image(self, request, pk=None):\n+        colleges = College.objects.all()  # Fetch all colleges\n+        if not colleges.exists():\n+            return Response({\"error\": \"No colleges available.\"}, status=404)\n \n-    logos = []\n-    for college in colleges:\n-        if college.dp_image:\n-            dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-            logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n+        logos = []\n+        for college in colleges:\n+            if college.dp_image:\n+                dp_image_url = request.build_absolute_uri(college.dp_image.url)\n+                logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n-    if not logos:\n-        return Response({\"message\": \"No display images available.\"}, status=404)\n+        if not logos:\n+            return Response({\"message\": \"No display images available.\"}, status=404)\n \n-    return Response(logos, status=200)\n+        return Response(logos, status=200)\n \n     \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n"
                },
                {
                    "date": 1738211869612,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n+    lookup_field\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1738748429280,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,11 +8,11 @@\n from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n-    # authentication_classes = [JWTAuthentication]\n+    authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n-    lookup_field\n+    lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n"
                },
                {
                    "date": 1739264329036,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n-    # permission_classes = [collegemanagementPermission]\n+    permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1739423667786,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug'name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1739423679400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,10 +14,10 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug'name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug;'name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739423685928,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug;'name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug''name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739509253770,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n+from \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n@@ -15,9 +16,9 @@\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug''name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     filterset_fields = {\n"
                },
                {
                    "date": 1739509266238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from \n+from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1739509275263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     permission_classes = [collegemanagementPermission]\n+    permission_classes = [collegemanagementPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1739680903748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n-    permission_classes = [collegemanagementPermission]\n-    permission_classes = [collegemanagementPermission]\n+    # permission_classes = [collegemanagementPermission]\n+    permission_classes = [DynamicModelPermission]\n     authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n@@ -32,8 +32,9 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n+        re\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739680910739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,11 @@\n     }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        re\n+        request = self.request\n+        if request.user.is_superuser:\n+            \n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739680916548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,10 @@\n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n+            return queryset\n+        else:\n             \n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682111415,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            \n+            return queryset.filter(=request.user.college)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682116846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            return queryset.filter(=request.user.college)\n+            return queryset.filter(user=request.user.college)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682123181,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,9 +36,9 @@\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n         else:\n-            return queryset.filter(user=request.user.college)\n+            return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n"
                },
                {
                    "date": 1739682131741,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        else:\n+        elif:\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682139671,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif:\n+        elif request.user.is_\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682147389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.is_\n+        elif request.user.\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682202094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.\n+        elif request.user.ha\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739682210065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n-        elif request.user.ha\n+        elif request.user.has_perm('collegemanagement.change_college'):\n             return queryset.filter(user=request.user)\n         return queryset\n \n     def get_serializer_class(self):\n"
                },
                {
                    "date": 1739940098626,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,16 +21,16 @@\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     \n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n-    filterset_fields = {\n-        'id': ['exact'],\n-        'college_type': ['exact'],\n-        'affiliated': ['exact'],\n-        'established_date': ['exact','gte','lte'],\n-        'created_date': ['exact','gte','lte'],\n-        'updated_date': ['exact','gte','lte'],\n-    }\n+    # filterset_fields = {\n+    #     'id': ['exact'],\n+    #     'college_type': ['exact'],\n+    #     'affiliated': ['exact'],\n+    #     'established_date': ['exact','gte','lte'],\n+    #     'created_date': ['exact','gte','lte'],\n+    #     'updated_date': ['exact','gte','lte'],\n+    # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n         request = self.request\n"
                },
                {
                    "date": 1739940104952,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    \n+    filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n     #     'id': ['exact'],\n"
                },
                {
                    "date": 1739940111149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n+from utilities\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1739940536528,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n-from utilities\n+from ..utilities.filter import CollegeFilter\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740045725585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,20 +7,21 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n from ..utilities.filter import CollegeFilter\n+from ..utilities.pagination import MyPageNumberPagination\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n-    authentication_classes = [JWTAuthentication]\n+    # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', '', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n@@ -32,8 +33,9 @@\n     #     'updated_date': ['exact','gte','lte'],\n     # }\n \n     def get_queryset(self):\n+        # print(self.action)\n         queryset = super().get_queryset()\n         request = self.request\n         if request.user.is_superuser:\n             return queryset\n@@ -70,28 +72,28 @@\n         return Response(logos, status=200)\n \n     \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    def calculate_completion_percentage(self, request, *args, **kwargs):\n-        queryset = self.get_queryset()\n-        total_colleges = queryset.count()\n-        completion_data = []\n+    # @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    # def calculate_completion_percentage(self, request, *args, **kwargs):\n+    #     queryset = self.get_queryset()\n+    #     total_colleges = queryset.count()\n+    #     completion_data = []\n \n-        for college in queryset:\n-            required_fields = [\n-                field.name for field in College._meta.get_fields()\n-                if isinstance(field, Field) and not field.blank and not field.null\n-            ]\n+    #     for college in queryset:\n+    #         required_fields = [\n+    #             field.name for field in College._meta.get_fields()\n+    #             if isinstance(field, Field) and not field.blank and not field.null\n+    #         ]\n \n-            completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-            total_required_fields = len(required_fields)\n-            completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+    #         completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+    #         total_required_fields = len(required_fields)\n+    #         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n-            completion_data.append({\n-                \"college_id\": college.id,\n-                \"college_name\": college.name,\n-                \"completion_percentage\": round(completion_percentage, 2),\n-            })\n+    #         completion_data.append({\n+    #             \"college_id\": college.id,\n+    #             \"college_name\": college.name,\n+    #             \"completion_percentage\": round(completion_percentage, 2),\n+    #         })\n \n-        return Response(completion_data)\n+    #     return Response(completion_data)\n \n"
                },
                {
                    "date": 1740045744851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,10 +18,10 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n-    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', '', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n     # filterset_fields = {\n"
                },
                {
                    "date": 1740045751546,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045761152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045772134,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter',  'placement', 'scholarship', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740045779704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter',  'placement', 'scholarship', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740121813269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,22 @@\n         if not logos:\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n+    \n+    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    def signup_college_admin(self, request, *args, **kwargs):\n+        serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n+        if serializer.is_valid():\n+            serializer.save()\n+            return Response(\n+                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n     \n     \n     # @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     # def calculate_completion_percentage(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1740121822591,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"signup_college_admin\", url_path=\"signup-college-admin\")\n+    @action(detail=False, methods=['post'], name=\"college_\", url_path=\"signup-college-admin\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740121856961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_\", url_path=\"signup-college-admin\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740121873699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,16 +70,16 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def signup_college_admin(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n             serializer.save()\n             return Response(\n-                {\"message\": \"College Admin signed up successfully!\", \"data\": serializer.data},\n+                {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n                 status=status.HTTP_201_CREATED\n             )\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n"
                },
                {
                    "date": 1740121888739,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-    def signup_college_admin(self, request, *args, **kwargs):\n+    def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n             serializer.save()\n"
                },
                {
                    "date": 1740121929097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,8 +47,10 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n         elif self.action == 'retrieve':\n             return CollegeRetrieveSerializers\n+        elif self.action in ['signup_college_admin']:\n+            return CustomUserWriteSerializersCollegeAdmin\n         return super().get_serializer_class()\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1740121937180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import College\n-from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\n+from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers, nC\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n"
                },
                {
                    "date": 1740121946210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import viewsets\n from rest_framework.filters import SearchFilter, OrderingFilter\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import College\n-from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers, nC\n+from ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers, CollegeAdminWriteSerializers\n from ..utilities.importbase import *\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n@@ -48,9 +48,9 @@\n             return CollegeWriteSerializers\n         elif self.action == 'retrieve':\n             return CollegeRetrieveSerializers\n         elif self.action in ['signup_college_admin']:\n-            return CustomUserWriteSerializersCollegeAdmin\n+            return CollegeAdminWriteSerializers\n         return super().get_serializer_class()\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n     # def action_name(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1740121971328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n     def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740121977065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes=[DynamicModelPermission])\n     def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740122054903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         if self.action in ['create', 'update', 'partial_update']:\n             return CollegeWriteSerializers\n         elif self.action == 'retrieve':\n             return CollegeRetrieveSerializers\n-        elif self.action in ['signup_college_admin']:\n+        elif self.action in ['college_creation']:\n             return CollegeAdminWriteSerializers\n         return super().get_serializer_class()\n \n     # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n"
                },
                {
                    "date": 1740128308343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n-    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'created_date', 'updated_date']\n+    search_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'phone_number', 'email','google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'created_date', 'updated_date']\n     ordering_fields = ['id','slug','name', 'established_date', 'website_link', 'address', 'district__name', 'phone_number', 'email', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'placement', 'scholarship', 'created_date', 'updated_date']\n     filterset_class= CollegeFilter\n     # ('name', 'established_date', 'website_link', 'address', 'district', 'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media', 'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities', 'placement', 'scholarship', 'created_date', 'updated_date', )\n \n"
                },
                {
                    "date": 1740129422258,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,28 +87,49 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n     \n     \n-    # @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n-    # def calculate_completion_percentage(self, request, *args, **kwargs):\n-    #     queryset = self.get_queryset()\n-    #     total_colleges = queryset.count()\n-    #     completion_data = []\n+   from rest_framework.decorators import action\n+from rest_framework.response import Response\n+from rest_framework.permissions import IsAuthenticated\n+from django.db.models import Field\n+from rest_framework import status\n \n-    #     for college in queryset:\n-    #         required_fields = [\n-    #             field.name for field in College._meta.get_fields()\n-    #             if isinstance(field, Field) and not field.blank and not field.null\n-    #         ]\n+class CollegeViewSet(viewsets.ModelViewSet):\n+    queryset = College.objects.all()\n+    serializer_class = CollegeAdminWriteSerializers\n+    permission_classes = [IsAuthenticated]  # Ensure user is authenticated\n \n-    #         completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n-    #         total_required_fields = len(required_fields)\n-    #         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    def calculate_completion_percentage(self, request, *args, **kwargs):\n+        \"\"\"\n+        Calculate the profile completion percentage, but restrict access only to assigned college admins.\n+        \"\"\"\n+        user = request.user\n \n-    #         completion_data.append({\n-    #             \"college_id\": college.id,\n-    #             \"college_name\": college.name,\n-    #             \"completion_percentage\": round(completion_percentage, 2),\n-    #         })\n+        # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n+        if not hasattr(user, \"college\") or not user.college:\n+            return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n \n-    #     return Response(completion_data)\n+        # Get the user's assigned college\n+        college = user.college\n \n+        # Identify required fields dynamically\n+        required_fields = [\n+            field.name for field in College._meta.get_fields()\n+            if isinstance(field, Field) and not field.blank and not field.null\n+        ]\n+\n+        # Count filled fields\n+        completed_fields_count = sum(1 for field in required_fields if getattr(college, field, None))\n+        total_required_fields = len(required_fields)\n+\n+        # Calculate completion percentage\n+        completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n+\n+        completion_data = {\n+            \"college_id\": college.id,\n+            \"college_name\": college.name,\n+            \"completion_percentage\": round(completion_percentage, 2),\n+        }\n+\n+        return Response(completion_data)\n"
                },
                {
                    "date": 1740129427773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,20 +86,8 @@\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n     \n-    \n-   from rest_framework.decorators import action\n-from rest_framework.response import Response\n-from rest_framework.permissions import IsAuthenticated\n-from django.db.models import Field\n-from rest_framework import status\n-\n-class CollegeViewSet(viewsets.ModelViewSet):\n-    queryset = College.objects.all()\n-    serializer_class = CollegeAdminWriteSerializers\n-    permission_classes = [IsAuthenticated]  # Ensure user is authenticated\n-\n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n"
                },
                {
                    "date": 1740129439112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,10 @@\n from rest_framework.response import Response\n from mainproj.permissions import DynamicModelPermission\n from ..utilities.filter import CollegeFilter\n from ..utilities.pagination import MyPageNumberPagination\n+from rest_framework.decorators import action\n+from rest_framework.response import Response\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129446116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n from ..utilities.filter import CollegeFilter\n from ..utilities.pagination import MyPageNumberPagination\n from rest_framework.decorators import action\n from rest_framework.response import Response\n+from \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129451312,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n from ..utilities.filter import CollegeFilter\n from ..utilities.pagination import MyPageNumberPagination\n from rest_framework.decorators import action\n from rest_framework.response import Response\n-from \n+from rest_framework import status\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129467797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,10 @@\n from ..utilities.pagination import MyPageNumberPagination\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n+from django.db.models import Field\n+\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129481660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n \n+\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740129520187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes=[DynamicModelPermission])\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def college_creation(self, request, *args, **kwargs):\n         serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n \n         if serializer.is_valid():\n"
                },
                {
                    "date": 1740129612669,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         logos = []\n         for college in colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-                logos.append({\"college_name\": college.name, \"dp_image_url\": dp_image_url})\n+                logos.append({\"slugcollege_name\": college.name, \"dp_image_url\": dp_image_url})\n \n         if not logos:\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n"
                },
                {
                    "date": 1740129623210,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -71,9 +71,9 @@\n         logos = []\n         for college in colleges:\n             if college.dp_image:\n                 dp_image_url = request.build_absolute_uri(college.dp_image.url)\n-                logos.append({\"slugcollege_name\": college.name, \"dp_image_url\": dp_image_url})\n+                logos.append({\"slug\": college.slug, \"college_name\": college.name, \"dp_image_url\": dp_image_url})\n \n         if not logos:\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n"
                },
                {
                    "date": 1740377874287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,20 +79,25 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-    def college_creation(self, request, *args, **kwargs):\n-        serializer = self.get_serializer(data=request.data)  # ✅ FIX: Pass `data=request.data`\n+def college_creation(self, request, *args, **kwargs):\n+    serializer = self.get_serializer(data=request.data)\n \n-        if serializer.is_valid():\n-            serializer.save()\n-            return Response(\n-                {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n-                status=status.HTTP_201_CREATED\n-            )\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+    if serializer.is_valid():\n+        college = serializer.save()  # Create the college instance\n+        # Assign the created college to the user\n+        request.user.college = college\n+        request.user.save()\n+        \n+        return Response(\n+            {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n+            status=status.HTTP_201_CREATED\n+        )\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n+\n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740390371307,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,25 +79,51 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-def college_creation(self, request, *args, **kwargs):\n-    serializer = self.get_serializer(data=request.data)\n+    def college_creation(self, request, *args, **kwargs):\n+        \"\"\"\n+        Authenticate user from access token in payload,\n+        then create a college and assign it to the authenticated user.\n+        \"\"\"\n+        # Extract access token from the payload\n+        access_token = request.data.get(\"access\")\n \n-    if serializer.is_valid():\n-        college = serializer.save()  # Create the college instance\n-        # Assign the created college to the user\n-        request.user.college = college\n-        request.user.save()\n-        \n-        return Response(\n-            {\"message\": \"College Created successfully!\", \"data\": serializer.data},\n-            status=status.HTTP_201_CREATED\n-        )\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+        if not access_token:\n+            return Response({\"error\": \"Access token is required!\"}, status=status.HTTP_401_UNAUTHORIZED)\n \n+        # Authenticate user from the token\n+        jwt_authenticator = JWTAuthentication()\n+        try:\n+            validated_token = jwt_authenticator.get_validated_token(access_token)\n+            user = jwt_authenticator.get_user(validated_token)\n+        except Exception as e:\n+            return Response({\"error\": \"Invalid or expired access token!\"}, status=status.HTTP_401_UNAUTHORIZED)\n \n+        # Ensure user is authenticated\n+        if not user:\n+            return Response({\"error\": \"User authentication failed!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+\n+        # Attach authenticated user to request\n+        request.user = user\n+\n+        # Now process the college creation\n+        serializer = self.get_serializer(data=request.data)\n+\n+        if serializer.is_valid():\n+            college = serializer.save()  # Create the college instance\n+            # Assign the created college to the authenticated user\n+            user.college = college\n+            user.save()\n+\n+            return Response(\n+                {\"message\": \"College created successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+\n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740390482248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -85,9 +85,9 @@\n         Authenticate user from access token in payload,\n         then create a college and assign it to the authenticated user.\n         \"\"\"\n         # Extract access token from the payload\n-        access_token = request.data.get(\"access\")\n+        access_token = request.data.get(\"accessToken\")\n \n         if not access_token:\n             return Response({\"error\": \"Access token is required!\"}, status=status.HTTP_401_UNAUTHORIZED)\n \n"
                },
                {
                    "date": 1740390661131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,40 +81,43 @@\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n-        Authenticate user from access token in payload,\n-        then create a college and assign it to the authenticated user.\n+        Manually authenticate user from access token in payload if not provided in headers.\n         \"\"\"\n-        # Extract access token from the payload\n-        access_token = request.data.get(\"accessToken\")\n+        # Check if the user is already authenticated (JWT in headers)\n+        if not request.user.is_authenticated:\n+            # Extract access token from the request payload\n+            access_token = request.data.get(\"access\")\n \n-        if not access_token:\n-            return Response({\"error\": \"Access token is required!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+            if not access_token:\n+                return Response(\n+                    {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Authenticate user from the token\n-        jwt_authenticator = JWTAuthentication()\n-        try:\n-            validated_token = jwt_authenticator.get_validated_token(access_token)\n-            user = jwt_authenticator.get_user(validated_token)\n-        except Exception as e:\n-            return Response({\"error\": \"Invalid or expired access token!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+            # Authenticate user using the token\n+            jwt_authenticator = JWTAuthentication()\n+            try:\n+                validated_token = jwt_authenticator.get_validated_token(access_token)\n+                user = jwt_authenticator.get_user(validated_token)\n+            except Exception:\n+                return Response(\n+                    {\"error\": \"Invalid or expired access token!\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Ensure user is authenticated\n-        if not user:\n-            return Response({\"error\": \"User authentication failed!\"}, status=status.HTTP_401_UNAUTHORIZED)\n+            # Set authenticated user to request\n+            request.user = user\n \n-        # Attach authenticated user to request\n-        request.user = user\n-\n         # Now process the college creation\n         serializer = self.get_serializer(data=request.data)\n \n         if serializer.is_valid():\n             college = serializer.save()  # Create the college instance\n             # Assign the created college to the authenticated user\n-            user.college = college\n-            user.save()\n+            request.user.college = college\n+            request.user.save()\n \n             return Response(\n                 {\"message\": \"College created successfully!\", \"data\": serializer.data},\n                 status=status.HTTP_201_CREATED\n"
                },
                {
                    "date": 1740390667271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         \"\"\"\n         # Check if the user is already authenticated (JWT in headers)\n         if not request.user.is_authenticated:\n             # Extract access token from the request payload\n-            access_token = request.data.get(\"access\")\n+            access_token = request.data.get(\"accessToken\")\n \n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n"
                },
                {
                    "date": 1740390953732,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,22 +81,22 @@\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n-        Manually authenticate user from access token in payload if not provided in headers.\n+        Authenticate user from access token in payload if not in headers.\n+        Ensure the user has permission to add a college.\n         \"\"\"\n-        # Check if the user is already authenticated (JWT in headers)\n+        # If the user is not already authenticated via headers, check token in payload\n         if not request.user.is_authenticated:\n-            # Extract access token from the request payload\n-            access_token = request.data.get(\"accessToken\")\n+            access_token = request.data.get(\"access\")\n \n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n \n-            # Authenticate user using the token\n+            # Authenticate user using JWT\n             jwt_authenticator = JWTAuthentication()\n             try:\n                 validated_token = jwt_authenticator.get_validated_token(access_token)\n                 user = jwt_authenticator.get_user(validated_token)\n@@ -105,16 +105,23 @@\n                     {\"error\": \"Invalid or expired access token!\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n \n-            # Set authenticated user to request\n+            # Assign the authenticated user to request\n             request.user = user\n \n-        # Now process the college creation\n+        # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n+        if not request.user.has_perm(\"app_name.add_college\"):  # Replace 'app_name' with the correct Django app\n+            return Response(\n+                {\"error\": \"You do not have permission to add a college.\"},\n+                status=status.HTTP_403_FORBIDDEN\n+            )\n+\n+        # ✅ **Now create the college since the user is authenticated and has permission**\n         serializer = self.get_serializer(data=request.data)\n-\n         if serializer.is_valid():\n             college = serializer.save()  # Create the college instance\n+            \n             # Assign the created college to the authenticated user\n             request.user.college = college\n             request.user.save()\n \n"
                },
                {
                    "date": 1740390961220,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,9 +86,9 @@\n         Ensure the user has permission to add a college.\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload\n         if not request.user.is_authenticated:\n-            access_token = request.data.get(\"access\")\n+            access_token = request.data.get(\"accessToken\")\n \n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n"
                },
                {
                    "date": 1740390969700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n             # Assign the authenticated user to request\n             request.user = user\n \n         # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n-        if not request.user.has_perm(\"app_name.add_college\"):  # Replace 'app_name' with the correct Django app\n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  # Replace 'app_name' with the correct Django app\n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740390974947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -109,9 +109,9 @@\n             # Assign the authenticated user to request\n             request.user = user\n \n         # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  # Replace 'app_name' with the correct Django app\n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740391371257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,61 +79,64 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-    def college_creation(self, request, *args, **kwargs):\n-        \"\"\"\n-        Authenticate user from access token in payload if not in headers.\n-        Ensure the user has permission to add a college.\n-        \"\"\"\n-        # If the user is not already authenticated via headers, check token in payload\n-        if not request.user.is_authenticated:\n-            access_token = request.data.get(\"accessToken\")\n+def college_creation(self, request, *args, **kwargs):\n+    \"\"\"\n+    Authenticate user from access token in payload if not in headers.\n+    Ensure the user has permission to add a college.\n+    \"\"\"\n+    # If the user is not already authenticated via headers, check token in payload\n+    if not request.user.is_authenticated:\n+        access_token = request.data.get(\"accessToken\")\n \n-            if not access_token:\n-                return Response(\n-                    {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n-                    status=status.HTTP_401_UNAUTHORIZED\n-                )\n-\n-            # Authenticate user using JWT\n-            jwt_authenticator = JWTAuthentication()\n-            try:\n-                validated_token = jwt_authenticator.get_validated_token(access_token)\n-                user = jwt_authenticator.get_user(validated_token)\n-            except Exception:\n-                return Response(\n-                    {\"error\": \"Invalid or expired access token!\"},\n-                    status=status.HTTP_401_UNAUTHORIZED\n-                )\n-\n-            # Assign the authenticated user to request\n-            request.user = user\n-\n-        # ✅ **Permission Check: Does the user have the 'add_college' permission?**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        if not access_token:\n             return Response(\n-                {\"error\": \"You do not have permission to add a college.\"},\n-                status=status.HTTP_403_FORBIDDEN\n+                {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n+                status=status.HTTP_401_UNAUTHORIZED\n             )\n \n-        # ✅ **Now create the college since the user is authenticated and has permission**\n-        serializer = self.get_serializer(data=request.data)\n-        if serializer.is_valid():\n-            college = serializer.save()  # Create the college instance\n-            \n-            # Assign the created college to the authenticated user\n-            request.user.college = college\n-            request.user.save()\n-\n+        # Authenticate user using JWT\n+        jwt_authenticator = JWTAuthentication()\n+        try:\n+            validated_token = jwt_authenticator.get_validated_token(access_token)\n+            user = jwt_authenticator.get_user(validated_token)\n+        except Exception:\n             return Response(\n-                {\"message\": \"College created successfully!\", \"data\": serializer.data},\n-                status=status.HTTP_201_CREATED\n+                {\"error\": \"Invalid or expired access token!\"},\n+                status=status.HTTP_401_UNAUTHORIZED\n             )\n-        else:\n-            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n+        # Assign the authenticated user to request\n+        request.user = user\n \n+    # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n+    request.user = User.objects.get(id=request.user.id)\n+\n+    # ✅ **Check if user has 'add_college' permission**\n+    if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        return Response(\n+            {\"error\": \"You do not have permission to add a college.\"},\n+            status=status.HTTP_403_FORBIDDEN\n+        )\n+\n+    # ✅ **Now create the college since the user is authenticated and has permission**\n+    serializer = self.get_serializer(data=request.data)\n+    if serializer.is_valid():\n+        college = serializer.save()  # Create the college instance\n+        \n+        # Assign the created college to the authenticated user\n+        request.user.college = college\n+        request.user.save()\n+\n+        return Response(\n+            {\"message\": \"College created successfully!\", \"data\": serializer.data},\n+            status=status.HTTP_201_CREATED\n+        )\n+    else:\n+        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+\n+\n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n"
                },
                {
                    "date": 1740391391094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n+from cus\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n@@ -79,62 +80,62 @@\n \n         return Response(logos, status=200)\n     \n     @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n-def college_creation(self, request, *args, **kwargs):\n-    \"\"\"\n-    Authenticate user from access token in payload if not in headers.\n-    Ensure the user has permission to add a college.\n-    \"\"\"\n-    # If the user is not already authenticated via headers, check token in payload\n-    if not request.user.is_authenticated:\n-        access_token = request.data.get(\"accessToken\")\n+    def college_creation(self, request, *args, **kwargs):\n+        \"\"\"\n+        Authenticate user from access token in payload if not in headers.\n+        Ensure the user has permission to add a college.\n+        \"\"\"\n+        # If the user is not already authenticated via headers, check token in payload\n+        if not request.user.is_authenticated:\n+            access_token = request.data.get(\"accessToken\")\n \n-        if not access_token:\n-            return Response(\n-                {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n-                status=status.HTTP_401_UNAUTHORIZED\n-            )\n+            if not access_token:\n+                return Response(\n+                    {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Authenticate user using JWT\n-        jwt_authenticator = JWTAuthentication()\n-        try:\n-            validated_token = jwt_authenticator.get_validated_token(access_token)\n-            user = jwt_authenticator.get_user(validated_token)\n-        except Exception:\n-            return Response(\n-                {\"error\": \"Invalid or expired access token!\"},\n-                status=status.HTTP_401_UNAUTHORIZED\n-            )\n+            # Authenticate user using JWT\n+            jwt_authenticator = JWTAuthentication()\n+            try:\n+                validated_token = jwt_authenticator.get_validated_token(access_token)\n+                user = jwt_authenticator.get_user(validated_token)\n+            except Exception:\n+                return Response(\n+                    {\"error\": \"Invalid or expired access token!\"},\n+                    status=status.HTTP_401_UNAUTHORIZED\n+                )\n \n-        # Assign the authenticated user to request\n-        request.user = user\n+            # Assign the authenticated user to request\n+            request.user = user\n \n-    # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n-    request.user = User.objects.get(id=request.user.id)\n+        # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n+        request.user = User.objects.get(id=request.user.id)\n \n-    # ✅ **Check if user has 'add_college' permission**\n-    if not request.user.has_perm(\"collegemanagement.add_college\"):  \n-        return Response(\n-            {\"error\": \"You do not have permission to add a college.\"},\n-            status=status.HTTP_403_FORBIDDEN\n-        )\n+        # ✅ **Check if user has 'add_college' permission**\n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+            return Response(\n+                {\"error\": \"You do not have permission to add a college.\"},\n+                status=status.HTTP_403_FORBIDDEN\n+            )\n \n-    # ✅ **Now create the college since the user is authenticated and has permission**\n-    serializer = self.get_serializer(data=request.data)\n-    if serializer.is_valid():\n-        college = serializer.save()  # Create the college instance\n-        \n-        # Assign the created college to the authenticated user\n-        request.user.college = college\n-        request.user.save()\n+        # ✅ **Now create the college since the user is authenticated and has permission**\n+        serializer = self.get_serializer(data=request.data)\n+        if serializer.is_valid():\n+            college = serializer.save()  # Create the college instance\n+            \n+            # Assign the created college to the authenticated user\n+            request.user.college = college\n+            request.user.save()\n \n-        return Response(\n-            {\"message\": \"College created successfully!\", \"data\": serializer.data},\n-            status=status.HTTP_201_CREATED\n-        )\n-    else:\n-        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n+            return Response(\n+                {\"message\": \"College created successfully!\", \"data\": serializer.data},\n+                status=status.HTTP_201_CREATED\n+            )\n+        else:\n+            return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n"
                },
                {
                    "date": 1740391397473,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n-from cus\n+from accounts\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n"
                },
                {
                    "date": 1740391410177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n from rest_framework.decorators import action\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n-from accounts\n+from accounts.models import CustomUser as User\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n"
                },
                {
                    "date": 1740392202077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n-    permission_classes = [DynamicModelPermission]\n+    # permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n"
                },
                {
                    "date": 1740393577799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n         # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n         request.user = User.objects.get(id=request.user.id)\n \n         # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        if not request.user.has_perm(\"college.add_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740393846548,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n         # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n         request.user = User.objects.get(id=request.user.id)\n \n         # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"college.add_college\"):  \n+        if not request.user.has_perm(\"collegemanagement.change_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740394138883,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -18,9 +18,9 @@\n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n-    # permission_classes = [DynamicModelPermission]\n+    permission_classes = [DynamicModelPermission]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     lookup_field = \"slug\"\n     queryset = College.objects.all().order_by('-id')\n@@ -113,9 +113,9 @@\n         # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n         request.user = User.objects.get(id=request.user.id)\n \n         # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"collegemanagement.change_college\"):  \n+        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n"
                },
                {
                    "date": 1740394288712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\")\n+    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n         Ensure the user has permission to add a college.\n"
                },
                {
                    "date": 1740458103662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,25 +79,30 @@\n             return Response({\"message\": \"No display images available.\"}, status=404)\n \n         return Response(logos, status=200)\n     \n-    @action(detail=False, methods=['post'], name=\"college_creation\", url_path=\"college-creation\",permission_classes)\n+    @action(\n+        detail=False,\n+        methods=['post'],\n+        name=\"college_creation\",\n+        url_path=\"college-creation\",\n+        permission_classes=[DynamicModelPermission]  # This ensures DRF calls your custom permission before entering the method\n+    )\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n-        Ensure the user has permission to add a college.\n+        Ensure the user is either in the \"College Admin\" group or has the\n+        'collegemanagement.add_college' permission.\n         \"\"\"\n-        # If the user is not already authenticated via headers, check token in payload\n+        # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n \n-            # Authenticate user using JWT\n             jwt_authenticator = JWTAuthentication()\n             try:\n                 validated_token = jwt_authenticator.get_validated_token(access_token)\n                 user = jwt_authenticator.get_user(validated_token)\n@@ -105,28 +110,29 @@\n                 return Response(\n                     {\"error\": \"Invalid or expired access token!\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n                 )\n-\n-            # Assign the authenticated user to request\n+            # Assign the authenticated user to the request.\n             request.user = user\n \n-        # ✅ **Force Refresh User Permissions (Fixes Permission Cache Issue)**\n+        # Force-refresh user instance to update permissions (fix permission cache issues).\n         request.user = User.objects.get(id=request.user.id)\n \n-        # ✅ **Check if user has 'add_college' permission**\n-        if not request.user.has_perm(\"collegemanagement.add_college\"):  \n+        # Manual check: Allow the action if the user is in the \"College Admin\" group\n+        # or if they have the \"collegemanagement.add_college\" permission.\n+        if not (request.user.groups.filter(name=\"College Admin\").exists() or \n+                request.user.has_perm(\"collegemanagement.add_college\")):\n             return Response(\n                 {\"error\": \"You do not have permission to add a college.\"},\n                 status=status.HTTP_403_FORBIDDEN\n             )\n \n-        # ✅ **Now create the college since the user is authenticated and has permission**\n+        # Proceed to create the college.\n         serializer = self.get_serializer(data=request.data)\n         if serializer.is_valid():\n-            college = serializer.save()  # Create the college instance\n+            college = serializer.save()  # Create the college instance.\n             \n-            # Assign the created college to the authenticated user\n+            # Optionally assign the created college to the authenticated user.\n             request.user.college = college\n             request.user.save()\n \n             return Response(\n"
                },
                {
                    "date": 1740458112238,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n         detail=False,\n         methods=['post'],\n         name=\"college_creation\",\n         url_path=\"college-creation\",\n-        permission_classes=[DynamicModelPermission]  # This ensures DRF calls your custom permission before entering the method\n+        permission_classes=[DynamicModelPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n"
                },
                {
                    "date": 1740458442549,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,9 +84,9 @@\n         detail=False,\n         methods=['post'],\n         name=\"college_creation\",\n         url_path=\"college-creation\",\n-        permission_classes=[DynamicModelPermission] \n+        permission_classes=[collegemanagementPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n"
                },
                {
                    "date": 1740459932381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n+            print\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740459937926,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-            print\n+            print(access_token,\"\")\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740459943951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,9 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-            print(access_token,\"\")\n+            print(access_token,\"qqqqqqqqqqqqqqqqq\")\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740460184791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,9 +95,8 @@\n         \"\"\"\n         # If the user is not already authenticated via headers, check token in payload.\n         if not request.user.is_authenticated:\n             access_token = request.data.get(\"accessToken\")\n-            print(access_token,\"qqqqqqqqqqqqqqqqq\")\n             if not access_token:\n                 return Response(\n                     {\"error\": \"Authentication credentials were not provided! Access token required in payload.\"},\n                     status=status.HTTP_401_UNAUTHORIZED\n"
                },
                {
                    "date": 1740460216505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,9 @@\n         url_path=\"college-creation\",\n         permission_classes=[collegemanagementPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n+        print()\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n         Ensure the user is either in the \"College Admin\" group or has the\n         'collegemanagement.add_college' permission.\n"
                },
                {
                    "date": 1740460224401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,9 +87,9 @@\n         url_path=\"college-creation\",\n         permission_classes=[collegemanagementPermission] \n     )\n     def college_creation(self, request, *args, **kwargs):\n-        print()\n+        print(request.data.get(\"accessToken\"),\"@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\")\n         \"\"\"\n         Authenticate user from access token in payload if not in headers.\n         Ensure the user is either in the \"College Admin\" group or has the\n         'collegemanagement.add_college' permission.\n"
                },
                {
                    "date": 1740464341110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -173,8 +173,9 @@\n         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n         completion_data = {\n             \"college_id\": college.id,\n+            \"co\"\n             \"college_name\": college.name,\n             \"completion_percentage\": round(completion_percentage, 2),\n         }\n \n"
                },
                {
                    "date": 1740464498098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,8 +150,9 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n+        print\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n@@ -173,9 +174,9 @@\n         completion_percentage = (completed_fields_count / total_required_fields * 100) if total_required_fields else 100\n \n         completion_data = {\n             \"college_id\": college.id,\n-            \"co\"\n+            \"slug\": college.slug,\n             \"college_name\": college.name,\n             \"completion_percentage\": round(completion_percentage, 2),\n         }\n \n"
                },
                {
                    "date": 1740464516022,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,9 +150,9 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n-        print\n+        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 \")\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n"
                },
                {
                    "date": 1740464658683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,16 +150,17 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n-        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 \")\n+        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 in colleghe viewsets\")\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n \n         # Get the user's assigned college\n         college = user.college\n+        print\n \n         # Identify required fields dynamically\n         required_fields = [\n             field.name for field in College._meta.get_fields()\n"
                },
                {
                    "date": 1740464797588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\")\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",pe)\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n@@ -158,9 +158,9 @@\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n \n         # Get the user's assigned college\n         college = user.college\n-        print\n+        print(college,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 162 in colleghe viewsets\")\n \n         # Identify required fields dynamically\n         required_fields = [\n             field.name for field in College._meta.get_fields()\n"
                },
                {
                    "date": 1740464807543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n from django.db.models import Field\n from accounts.models import CustomUser as User\n \n \n+\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n@@ -144,9 +145,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",pe)\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n"
                },
                {
                    "date": 1740464814342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,11 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n from accounts.models import CustomUser as User\n+from rest\n \n \n-\n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n     # permission_classes = [collegemanagementPermission]\n     permission_classes = [DynamicModelPermission]\n"
                },
                {
                    "date": 1740464820400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n from accounts.models import CustomUser as User\n-from rest\n+from rest_framework.\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n"
                },
                {
                    "date": 1740464883490,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n from rest_framework.response import Response\n from rest_framework import status\n from django.db.models import Field\n from accounts.models import CustomUser as User\n-from rest_framework.\n+from rest_framework.permissions import AllowAny\n \n \n class collegeViewsets(viewsets.ModelViewSet):\n     serializer_class = CollegeListSerializers\n@@ -145,9 +145,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[D])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n"
                },
                {
                    "date": 1740464897834,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,9 @@\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n     \n-    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[D])\n+    @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n"
                },
                {
                    "date": 1740464905759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n-    \n+    #TODO \n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n"
                },
                {
                    "date": 1740464922840,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n         else:\n             return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)\n \n \n-    #TODO \n+    #TODO add a permission according to the permission of college!!!!\n     @action(detail=False, methods=['get'], name=\"calculate_completion_percentage\", url_path=\"completion-percentage\",permission_classes=[AllowAny])\n     def calculate_completion_percentage(self, request, *args, **kwargs):\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n"
                },
                {
                    "date": 1740464949097,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,9 +151,8 @@\n         \"\"\"\n         Calculate the profile completion percentage, but restrict access only to assigned college admins.\n         \"\"\"\n         user = request.user\n-        print(user,\"@@@@@@@@!!!!!!!!!!!!!@@@@@@@line 154 in colleghe viewsets\")\n \n         # Check if user has a related college (assuming a OneToOne or ForeignKey relationship)\n         if not hasattr(user, \"college\") or not user.college:\n             return Response({\"error\": \"You do not have permission to view this data.\"}, status=status.HTTP_403_FORBIDDEN)\n"
                }
            ],
            "date": 1733718920520,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import College\nfrom ..serializers.college_serializers import CollegeListSerializers, CollegeRetrieveSerializers, CollegeWriteSerializers\nfrom ..utilities.importbase import *\n\nclass collegeViewsets(viewsets.ModelViewSet):\n    serializer_class = CollegeListSerializers\n    # permission_classes = [collegemanagementPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = College.objects.all().order_by\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset.filter(user_id=self.request.user.id)\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return CollegeWriteSerializers\n        elif self.action == 'retrieve':\n            return CollegeRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}