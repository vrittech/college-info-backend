{
    "sourceFile": "collegemanagement/serializers/college_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1733477116456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733477131218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,49 +112,80 @@\n         return college\n \n     # Custom method to handle updating of College instances\n     def update(self, instance, validated_data):\n-        district_data = validated_data.pop('district', None)\n-        affiliated_data = validated_data.pop('affiliated', None)\n-        college_type_data = validated_data.pop('college_type', None)\n-        discipline_data = validated_data.pop('discipline', None)\n-        social_media_data = validated_data.pop('social_media', None)\n-        facilities_data = validated_data.pop('facilities', None)\n+    district_data = validated_data.pop('district', None)\n+    affiliated_data = validated_data.pop('affiliated', None)\n+    college_type_data = validated_data.pop('college_type', None)\n+    discipline_data = validated_data.pop('discipline', None)\n+    social_media_data = validated_data.pop('social_media', None)\n+    facilities_data = validated_data.pop('facilities', None)\n \n-        # Update related fields\n-        if district_data:\n-            for attr, value in district_data.items():\n-                setattr(instance.district, attr, value)\n-            instance.district.save()\n+    # Update ForeignKey fields if new data is provided\n+    if district_data:\n+        for attr, value in district_data.items():\n+            setattr(instance.district, attr, value)\n+        instance.district.save()\n \n-        if affiliated_data:\n-            for attr, value in affiliated_data.items():\n-                setattr(instance.affiliated, attr, value)\n-            instance.affiliated.save()\n+    if affiliated_data:\n+        for attr, value in affiliated_data.items():\n+            setattr(instance.affiliated, attr, value)\n+        instance.affiliated.save()\n \n-        if college_type_data:\n-            for attr, value in college_type_data.items():\n-                setattr(instance.college_type, attr, value)\n-            instance.college_type.save()\n+    if college_type_data:\n+        for attr, value in college_type_data.items():\n+            setattr(instance.college_type, attr, value)\n+        instance.college_type.save()\n \n-        # Handle ManyToMany relationships\n-        if discipline_data:\n-            instance.discipline.clear()  # Clear existing ManyToMany relationships\n-            for discipline in discipline_data:\n-                instance.discipline.add(Discipline.objects.create(**discipline))\n+    # Add new ManyToMany relationships and remove items marked for deletion\n+    if discipline_data:\n+        # Adding new disciplines (if provided)\n+        current_discipline_ids = {d.id for d in instance.discipline.all()}\n+        new_discipline_ids = {d['id'] for d in discipline_data}\n \n-        if social_media_data:\n-            instance.social_media.clear()  # Clear existing ManyToMany relationships\n-            for social in social_media_data:\n-                instance.social_media.add(SocialMedia.objects.create(**social))\n+        # Add new disciplines (without duplicates)\n+        for discipline in discipline_data:\n+            if discipline['id'] not in current_discipline_ids:\n+                instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n \n-        if facilities_data:\n-            instance.facilities.clear()  # Clear existing ManyToMany relationships\n-            for facility in facilities_data:\n-                instance.facilities.add(Facility.objects.create(**facility))\n+        # Remove disciplines that are no longer part of the request (if any)\n+        for discipline in instance.discipline.all():\n+            if discipline.id not in new_discipline_ids:\n+                instance.discipline.remove(discipline)\n \n-        # Update the other fields in the College model\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    if social_media_data:\n+        # Adding new social media links (if provided)\n+        current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n+        new_social_media_ids = {sm['id'] for sm in social_media_data}\n \n-        return instance\n+        # Add new social media (without duplicates)\n+        for social_media in social_media_data:\n+            if social_media['id'] not in current_social_media_ids:\n+                instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n+\n+        # Remove social media that are no longer part of the request (if any)\n+        for social_media in instance.social_media.all():\n+            if social_media.id not in new_social_media_ids:\n+                instance.social_media.remove(social_media)\n+\n+    if facilities_data:\n+        # Adding new facilities (if provided)\n+        current_facilities_ids = {f.id for f in instance.facilities.all()}\n+        new_facilities_ids = {f['id'] for f in facilities_data}\n+\n+        # Add new facilities (without duplicates)\n+        for facility in facilities_data:\n+            if facility['id'] not in current_facilities_ids:\n+                instance.facilities.add(Facility.objects.get(id=facility['id']))\n+\n+        # Remove facilities that are no longer part of the request (if any)\n+        for facility in instance.facilities.all():\n+            if facility.id not in new_facilities_ids:\n+                instance.facilities.remove(facility)\n+\n+    # Update the other fields in the College model\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n+\n+    return instance\n+\n"
                },
                {
                    "date": 1733477136389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,80 +112,80 @@\n         return college\n \n     # Custom method to handle updating of College instances\n     def update(self, instance, validated_data):\n-    district_data = validated_data.pop('district', None)\n-    affiliated_data = validated_data.pop('affiliated', None)\n-    college_type_data = validated_data.pop('college_type', None)\n-    discipline_data = validated_data.pop('discipline', None)\n-    social_media_data = validated_data.pop('social_media', None)\n-    facilities_data = validated_data.pop('facilities', None)\n+        district_data = validated_data.pop('district', None)\n+        affiliated_data = validated_data.pop('affiliated', None)\n+        college_type_data = validated_data.pop('college_type', None)\n+        discipline_data = validated_data.pop('discipline', None)\n+        social_media_data = validated_data.pop('social_media', None)\n+        facilities_data = validated_data.pop('facilities', None)\n \n-    # Update ForeignKey fields if new data is provided\n-    if district_data:\n-        for attr, value in district_data.items():\n-            setattr(instance.district, attr, value)\n-        instance.district.save()\n+        # Update ForeignKey fields if new data is provided\n+        if district_data:\n+            for attr, value in district_data.items():\n+                setattr(instance.district, attr, value)\n+            instance.district.save()\n \n-    if affiliated_data:\n-        for attr, value in affiliated_data.items():\n-            setattr(instance.affiliated, attr, value)\n-        instance.affiliated.save()\n+        if affiliated_data:\n+            for attr, value in affiliated_data.items():\n+                setattr(instance.affiliated, attr, value)\n+            instance.affiliated.save()\n \n-    if college_type_data:\n-        for attr, value in college_type_data.items():\n-            setattr(instance.college_type, attr, value)\n-        instance.college_type.save()\n+        if college_type_data:\n+            for attr, value in college_type_data.items():\n+                setattr(instance.college_type, attr, value)\n+            instance.college_type.save()\n \n-    # Add new ManyToMany relationships and remove items marked for deletion\n-    if discipline_data:\n-        # Adding new disciplines (if provided)\n-        current_discipline_ids = {d.id for d in instance.discipline.all()}\n-        new_discipline_ids = {d['id'] for d in discipline_data}\n+        # Add new ManyToMany relationships and remove items marked for deletion\n+        if discipline_data:\n+            # Adding new disciplines (if provided)\n+            current_discipline_ids = {d.id for d in instance.discipline.all()}\n+            new_discipline_ids = {d['id'] for d in discipline_data}\n \n-        # Add new disciplines (without duplicates)\n-        for discipline in discipline_data:\n-            if discipline['id'] not in current_discipline_ids:\n-                instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n+            # Add new disciplines (without duplicates)\n+            for discipline in discipline_data:\n+                if discipline['id'] not in current_discipline_ids:\n+                    instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n \n-        # Remove disciplines that are no longer part of the request (if any)\n-        for discipline in instance.discipline.all():\n-            if discipline.id not in new_discipline_ids:\n-                instance.discipline.remove(discipline)\n+            # Remove disciplines that are no longer part of the request (if any)\n+            for discipline in instance.discipline.all():\n+                if discipline.id not in new_discipline_ids:\n+                    instance.discipline.remove(discipline)\n \n-    if social_media_data:\n-        # Adding new social media links (if provided)\n-        current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n-        new_social_media_ids = {sm['id'] for sm in social_media_data}\n+        if social_media_data:\n+            # Adding new social media links (if provided)\n+            current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n+            new_social_media_ids = {sm['id'] for sm in social_media_data}\n \n-        # Add new social media (without duplicates)\n-        for social_media in social_media_data:\n-            if social_media['id'] not in current_social_media_ids:\n-                instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n+            # Add new social media (without duplicates)\n+            for social_media in social_media_data:\n+                if social_media['id'] not in current_social_media_ids:\n+                    instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n \n-        # Remove social media that are no longer part of the request (if any)\n-        for social_media in instance.social_media.all():\n-            if social_media.id not in new_social_media_ids:\n-                instance.social_media.remove(social_media)\n+            # Remove social media that are no longer part of the request (if any)\n+            for social_media in instance.social_media.all():\n+                if social_media.id not in new_social_media_ids:\n+                    instance.social_media.remove(social_media)\n \n-    if facilities_data:\n-        # Adding new facilities (if provided)\n-        current_facilities_ids = {f.id for f in instance.facilities.all()}\n-        new_facilities_ids = {f['id'] for f in facilities_data}\n+        if facilities_data:\n+            # Adding new facilities (if provided)\n+            current_facilities_ids = {f.id for f in instance.facilities.all()}\n+            new_facilities_ids = {f['id'] for f in facilities_data}\n \n-        # Add new facilities (without duplicates)\n-        for facility in facilities_data:\n-            if facility['id'] not in current_facilities_ids:\n-                instance.facilities.add(Facility.objects.get(id=facility['id']))\n+            # Add new facilities (without duplicates)\n+            for facility in facilities_data:\n+                if facility['id'] not in current_facilities_ids:\n+                    instance.facilities.add(Facility.objects.get(id=facility['id']))\n \n-        # Remove facilities that are no longer part of the request (if any)\n-        for facility in instance.facilities.all():\n-            if facility.id not in new_facilities_ids:\n-                instance.facilities.remove(facility)\n+            # Remove facilities that are no longer part of the request (if any)\n+            for facility in instance.facilities.all():\n+                if facility.id not in new_facilities_ids:\n+                    instance.facilities.remove(facility)\n \n-    # Update the other fields in the College model\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update the other fields in the College model\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    return instance\n+        return instance\n \n"
                },
                {
                    "date": 1733477147416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,14 +72,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = [\n-            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n-            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n-            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n-            'placement', 'scholarship', 'created_date', 'updated_date'\n-        ]\n+        \n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733477152573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,14 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        \n+        fields = [\n+            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n+            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n+            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n+            'placement', 'scholarship', 'created_date', 'updated_date'\n+        ]\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733477158118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,14 +72,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = [\n-            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n-            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n-            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n-            'placement', 'scholarship', 'created_date', 'updated_date'\n-        ]\n+        fields = '__'\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                }
            ],
            "date": 1733477116456,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n\n# Nested serializer for District\nclass DistrictSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = District\n        fields = '__all__'\n\n# Nested serializer for Affiliation\nclass AffiliationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Affiliation\n        fields = '__all__'\n\n# Nested serializer for CollegeType\nclass CollegeTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeType\n        fields = '__all__'\n\n# Nested serializer for Discipline\nclass DisciplineSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Discipline\n        fields = '__all__'\n\n# Nested serializer for SocialMedia\nclass SocialMediaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SocialMedia\n        fields = '__all__'\n\n# Nested serializer for Facility\nclass FacilitySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Facility\n        fields = '__all__'\n\n\n# Serializer for listing college details (basic view)\nclass CollegeListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = College\n        fields = '__all__'\n\n\n# Serializer for retrieving complete college details (detailed view)\nclass CollegeRetrieveSerializers(serializers.ModelSerializer):\n    district = DistrictSerializer()  # Nested object for related model\n    affiliated = AffiliationSerializer()  # Nested object for related model\n    college_type = CollegeTypeSerializer()  # Nested object for related model\n    discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n    social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n    facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n\n    class Meta:\n        model = College\n        fields = '__all__'\n\n\n# Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\nclass CollegeWriteSerializers(serializers.ModelSerializer):\n    # Nested serializers for ForeignKey fields\n    district = DistrictSerializer()  # Include full object instead of just ID\n    affiliated = AffiliationSerializer()  # Include full object instead of just ID\n    college_type = CollegeTypeSerializer()  # Include full object instead of just ID\n\n    # Nested serializers for ManyToMany fields\n    discipline = DisciplineSerializer(many=True)  # Include full objects for many-to-many relationships\n    social_media = SocialMediaSerializer(many=True)  # Include full objects for many-to-many relationships\n    facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n\n    class Meta:\n        model = College\n        fields = [\n            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n            'placement', 'scholarship', 'created_date', 'updated_date'\n        ]\n\n    # Custom method to handle creation of College instances\n    def create(self, validated_data):\n        district_data = validated_data.pop('district')\n        affiliated_data = validated_data.pop('affiliated')\n        college_type_data = validated_data.pop('college_type')\n        discipline_data = validated_data.pop('discipline')\n        social_media_data = validated_data.pop('social_media')\n        facilities_data = validated_data.pop('facilities')\n\n        # Create related objects first\n        district = District.objects.create(**district_data)\n        affiliated = Affiliation.objects.create(**affiliated_data)\n        college_type = CollegeType.objects.create(**college_type_data)\n\n        # Create College instance\n        college = College.objects.create(\n            district=district, affiliated=affiliated, college_type=college_type, **validated_data\n        )\n\n        # Handle ManyToMany relationships by adding related objects\n        for discipline in discipline_data:\n            college.discipline.add(Discipline.objects.create(**discipline))\n\n        for social in social_media_data:\n            college.social_media.add(SocialMedia.objects.create(**social))\n\n        for facility in facilities_data:\n            college.facilities.add(Facility.objects.create(**facility))\n\n        return college\n\n    # Custom method to handle updating of College instances\n    def update(self, instance, validated_data):\n        district_data = validated_data.pop('district', None)\n        affiliated_data = validated_data.pop('affiliated', None)\n        college_type_data = validated_data.pop('college_type', None)\n        discipline_data = validated_data.pop('discipline', None)\n        social_media_data = validated_data.pop('social_media', None)\n        facilities_data = validated_data.pop('facilities', None)\n\n        # Update related fields\n        if district_data:\n            for attr, value in district_data.items():\n                setattr(instance.district, attr, value)\n            instance.district.save()\n\n        if affiliated_data:\n            for attr, value in affiliated_data.items():\n                setattr(instance.affiliated, attr, value)\n            instance.affiliated.save()\n\n        if college_type_data:\n            for attr, value in college_type_data.items():\n                setattr(instance.college_type, attr, value)\n            instance.college_type.save()\n\n        # Handle ManyToMany relationships\n        if discipline_data:\n            instance.discipline.clear()  # Clear existing ManyToMany relationships\n            for discipline in discipline_data:\n                instance.discipline.add(Discipline.objects.create(**discipline))\n\n        if social_media_data:\n            instance.social_media.clear()  # Clear existing ManyToMany relationships\n            for social in social_media_data:\n                instance.social_media.add(SocialMedia.objects.create(**social))\n\n        if facilities_data:\n            instance.facilities.clear()  # Clear existing ManyToMany relationships\n            for facility in facilities_data:\n                instance.facilities.add(Facility.objects.create(**facility))\n\n        # Update the other fields in the College model\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n\n        return instance\n"
        }
    ]
}