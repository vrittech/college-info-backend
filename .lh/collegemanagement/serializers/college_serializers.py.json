{
    "sourceFile": "collegemanagement/serializers/college_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 163,
            "patches": [
                {
                    "date": 1733477116456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733477131218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,49 +112,80 @@\n         return college\n \n     # Custom method to handle updating of College instances\n     def update(self, instance, validated_data):\n-        district_data = validated_data.pop('district', None)\n-        affiliated_data = validated_data.pop('affiliated', None)\n-        college_type_data = validated_data.pop('college_type', None)\n-        discipline_data = validated_data.pop('discipline', None)\n-        social_media_data = validated_data.pop('social_media', None)\n-        facilities_data = validated_data.pop('facilities', None)\n+    district_data = validated_data.pop('district', None)\n+    affiliated_data = validated_data.pop('affiliated', None)\n+    college_type_data = validated_data.pop('college_type', None)\n+    discipline_data = validated_data.pop('discipline', None)\n+    social_media_data = validated_data.pop('social_media', None)\n+    facilities_data = validated_data.pop('facilities', None)\n \n-        # Update related fields\n-        if district_data:\n-            for attr, value in district_data.items():\n-                setattr(instance.district, attr, value)\n-            instance.district.save()\n+    # Update ForeignKey fields if new data is provided\n+    if district_data:\n+        for attr, value in district_data.items():\n+            setattr(instance.district, attr, value)\n+        instance.district.save()\n \n-        if affiliated_data:\n-            for attr, value in affiliated_data.items():\n-                setattr(instance.affiliated, attr, value)\n-            instance.affiliated.save()\n+    if affiliated_data:\n+        for attr, value in affiliated_data.items():\n+            setattr(instance.affiliated, attr, value)\n+        instance.affiliated.save()\n \n-        if college_type_data:\n-            for attr, value in college_type_data.items():\n-                setattr(instance.college_type, attr, value)\n-            instance.college_type.save()\n+    if college_type_data:\n+        for attr, value in college_type_data.items():\n+            setattr(instance.college_type, attr, value)\n+        instance.college_type.save()\n \n-        # Handle ManyToMany relationships\n-        if discipline_data:\n-            instance.discipline.clear()  # Clear existing ManyToMany relationships\n-            for discipline in discipline_data:\n-                instance.discipline.add(Discipline.objects.create(**discipline))\n+    # Add new ManyToMany relationships and remove items marked for deletion\n+    if discipline_data:\n+        # Adding new disciplines (if provided)\n+        current_discipline_ids = {d.id for d in instance.discipline.all()}\n+        new_discipline_ids = {d['id'] for d in discipline_data}\n \n-        if social_media_data:\n-            instance.social_media.clear()  # Clear existing ManyToMany relationships\n-            for social in social_media_data:\n-                instance.social_media.add(SocialMedia.objects.create(**social))\n+        # Add new disciplines (without duplicates)\n+        for discipline in discipline_data:\n+            if discipline['id'] not in current_discipline_ids:\n+                instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n \n-        if facilities_data:\n-            instance.facilities.clear()  # Clear existing ManyToMany relationships\n-            for facility in facilities_data:\n-                instance.facilities.add(Facility.objects.create(**facility))\n+        # Remove disciplines that are no longer part of the request (if any)\n+        for discipline in instance.discipline.all():\n+            if discipline.id not in new_discipline_ids:\n+                instance.discipline.remove(discipline)\n \n-        # Update the other fields in the College model\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    if social_media_data:\n+        # Adding new social media links (if provided)\n+        current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n+        new_social_media_ids = {sm['id'] for sm in social_media_data}\n \n-        return instance\n+        # Add new social media (without duplicates)\n+        for social_media in social_media_data:\n+            if social_media['id'] not in current_social_media_ids:\n+                instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n+\n+        # Remove social media that are no longer part of the request (if any)\n+        for social_media in instance.social_media.all():\n+            if social_media.id not in new_social_media_ids:\n+                instance.social_media.remove(social_media)\n+\n+    if facilities_data:\n+        # Adding new facilities (if provided)\n+        current_facilities_ids = {f.id for f in instance.facilities.all()}\n+        new_facilities_ids = {f['id'] for f in facilities_data}\n+\n+        # Add new facilities (without duplicates)\n+        for facility in facilities_data:\n+            if facility['id'] not in current_facilities_ids:\n+                instance.facilities.add(Facility.objects.get(id=facility['id']))\n+\n+        # Remove facilities that are no longer part of the request (if any)\n+        for facility in instance.facilities.all():\n+            if facility.id not in new_facilities_ids:\n+                instance.facilities.remove(facility)\n+\n+    # Update the other fields in the College model\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n+\n+    return instance\n+\n"
                },
                {
                    "date": 1733477136389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,80 +112,80 @@\n         return college\n \n     # Custom method to handle updating of College instances\n     def update(self, instance, validated_data):\n-    district_data = validated_data.pop('district', None)\n-    affiliated_data = validated_data.pop('affiliated', None)\n-    college_type_data = validated_data.pop('college_type', None)\n-    discipline_data = validated_data.pop('discipline', None)\n-    social_media_data = validated_data.pop('social_media', None)\n-    facilities_data = validated_data.pop('facilities', None)\n+        district_data = validated_data.pop('district', None)\n+        affiliated_data = validated_data.pop('affiliated', None)\n+        college_type_data = validated_data.pop('college_type', None)\n+        discipline_data = validated_data.pop('discipline', None)\n+        social_media_data = validated_data.pop('social_media', None)\n+        facilities_data = validated_data.pop('facilities', None)\n \n-    # Update ForeignKey fields if new data is provided\n-    if district_data:\n-        for attr, value in district_data.items():\n-            setattr(instance.district, attr, value)\n-        instance.district.save()\n+        # Update ForeignKey fields if new data is provided\n+        if district_data:\n+            for attr, value in district_data.items():\n+                setattr(instance.district, attr, value)\n+            instance.district.save()\n \n-    if affiliated_data:\n-        for attr, value in affiliated_data.items():\n-            setattr(instance.affiliated, attr, value)\n-        instance.affiliated.save()\n+        if affiliated_data:\n+            for attr, value in affiliated_data.items():\n+                setattr(instance.affiliated, attr, value)\n+            instance.affiliated.save()\n \n-    if college_type_data:\n-        for attr, value in college_type_data.items():\n-            setattr(instance.college_type, attr, value)\n-        instance.college_type.save()\n+        if college_type_data:\n+            for attr, value in college_type_data.items():\n+                setattr(instance.college_type, attr, value)\n+            instance.college_type.save()\n \n-    # Add new ManyToMany relationships and remove items marked for deletion\n-    if discipline_data:\n-        # Adding new disciplines (if provided)\n-        current_discipline_ids = {d.id for d in instance.discipline.all()}\n-        new_discipline_ids = {d['id'] for d in discipline_data}\n+        # Add new ManyToMany relationships and remove items marked for deletion\n+        if discipline_data:\n+            # Adding new disciplines (if provided)\n+            current_discipline_ids = {d.id for d in instance.discipline.all()}\n+            new_discipline_ids = {d['id'] for d in discipline_data}\n \n-        # Add new disciplines (without duplicates)\n-        for discipline in discipline_data:\n-            if discipline['id'] not in current_discipline_ids:\n-                instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n+            # Add new disciplines (without duplicates)\n+            for discipline in discipline_data:\n+                if discipline['id'] not in current_discipline_ids:\n+                    instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n \n-        # Remove disciplines that are no longer part of the request (if any)\n-        for discipline in instance.discipline.all():\n-            if discipline.id not in new_discipline_ids:\n-                instance.discipline.remove(discipline)\n+            # Remove disciplines that are no longer part of the request (if any)\n+            for discipline in instance.discipline.all():\n+                if discipline.id not in new_discipline_ids:\n+                    instance.discipline.remove(discipline)\n \n-    if social_media_data:\n-        # Adding new social media links (if provided)\n-        current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n-        new_social_media_ids = {sm['id'] for sm in social_media_data}\n+        if social_media_data:\n+            # Adding new social media links (if provided)\n+            current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n+            new_social_media_ids = {sm['id'] for sm in social_media_data}\n \n-        # Add new social media (without duplicates)\n-        for social_media in social_media_data:\n-            if social_media['id'] not in current_social_media_ids:\n-                instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n+            # Add new social media (without duplicates)\n+            for social_media in social_media_data:\n+                if social_media['id'] not in current_social_media_ids:\n+                    instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n \n-        # Remove social media that are no longer part of the request (if any)\n-        for social_media in instance.social_media.all():\n-            if social_media.id not in new_social_media_ids:\n-                instance.social_media.remove(social_media)\n+            # Remove social media that are no longer part of the request (if any)\n+            for social_media in instance.social_media.all():\n+                if social_media.id not in new_social_media_ids:\n+                    instance.social_media.remove(social_media)\n \n-    if facilities_data:\n-        # Adding new facilities (if provided)\n-        current_facilities_ids = {f.id for f in instance.facilities.all()}\n-        new_facilities_ids = {f['id'] for f in facilities_data}\n+        if facilities_data:\n+            # Adding new facilities (if provided)\n+            current_facilities_ids = {f.id for f in instance.facilities.all()}\n+            new_facilities_ids = {f['id'] for f in facilities_data}\n \n-        # Add new facilities (without duplicates)\n-        for facility in facilities_data:\n-            if facility['id'] not in current_facilities_ids:\n-                instance.facilities.add(Facility.objects.get(id=facility['id']))\n+            # Add new facilities (without duplicates)\n+            for facility in facilities_data:\n+                if facility['id'] not in current_facilities_ids:\n+                    instance.facilities.add(Facility.objects.get(id=facility['id']))\n \n-        # Remove facilities that are no longer part of the request (if any)\n-        for facility in instance.facilities.all():\n-            if facility.id not in new_facilities_ids:\n-                instance.facilities.remove(facility)\n+            # Remove facilities that are no longer part of the request (if any)\n+            for facility in instance.facilities.all():\n+                if facility.id not in new_facilities_ids:\n+                    instance.facilities.remove(facility)\n \n-    # Update the other fields in the College model\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update the other fields in the College model\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    return instance\n+        return instance\n \n"
                },
                {
                    "date": 1733477147416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,14 +72,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = [\n-            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n-            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n-            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n-            'placement', 'scholarship', 'created_date', 'updated_date'\n-        ]\n+        \n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733477152573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,14 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        \n+        fields = [\n+            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n+            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n+            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n+            'placement', 'scholarship', 'created_date', 'updated_date'\n+        ]\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733477158118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,14 +72,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = [\n-            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n-            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n-            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n-            'placement', 'scholarship', 'created_date', 'updated_date'\n-        ]\n+        fields = '__'\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733638798475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n+        \n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -72,9 +73,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = '__'\n+        fields = '__all__'\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733638803711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n-        \n+        ref\n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1733638810251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n-        ref\n+        ref_name\n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738651400595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n-        ref_name\n+        ref_name = 'Disciplines'\n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -184,4 +184,5 @@\n         instance.save()\n \n         return instance\n \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738651530722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,115 +74,5 @@\n \n     class Meta:\n         model = College\n         fields = '__all__'\n-\n-    # Custom method to handle creation of College instances\n-    def create(self, validated_data):\n-        district_data = validated_data.pop('district')\n-        affiliated_data = validated_data.pop('affiliated')\n-        college_type_data = validated_data.pop('college_type')\n-        discipline_data = validated_data.pop('discipline')\n-        social_media_data = validated_data.pop('social_media')\n-        facilities_data = validated_data.pop('facilities')\n-\n-        # Create related objects first\n-        district = District.objects.create(**district_data)\n-        affiliated = Affiliation.objects.create(**affiliated_data)\n-        college_type = CollegeType.objects.create(**college_type_data)\n-\n-        # Create College instance\n-        college = College.objects.create(\n-            district=district, affiliated=affiliated, college_type=college_type, **validated_data\n-        )\n-\n-        # Handle ManyToMany relationships by adding related objects\n-        for discipline in discipline_data:\n-            college.discipline.add(Discipline.objects.create(**discipline))\n-\n-        for social in social_media_data:\n-            college.social_media.add(SocialMedia.objects.create(**social))\n-\n-        for facility in facilities_data:\n-            college.facilities.add(Facility.objects.create(**facility))\n-\n-        return college\n-\n-    # Custom method to handle updating of College instances\n-    def update(self, instance, validated_data):\n-        district_data = validated_data.pop('district', None)\n-        affiliated_data = validated_data.pop('affiliated', None)\n-        college_type_data = validated_data.pop('college_type', None)\n-        discipline_data = validated_data.pop('discipline', None)\n-        social_media_data = validated_data.pop('social_media', None)\n-        facilities_data = validated_data.pop('facilities', None)\n-\n-        # Update ForeignKey fields if new data is provided\n-        if district_data:\n-            for attr, value in district_data.items():\n-                setattr(instance.district, attr, value)\n-            instance.district.save()\n-\n-        if affiliated_data:\n-            for attr, value in affiliated_data.items():\n-                setattr(instance.affiliated, attr, value)\n-            instance.affiliated.save()\n-\n-        if college_type_data:\n-            for attr, value in college_type_data.items():\n-                setattr(instance.college_type, attr, value)\n-            instance.college_type.save()\n-\n-        # Add new ManyToMany relationships and remove items marked for deletion\n-        if discipline_data:\n-            # Adding new disciplines (if provided)\n-            current_discipline_ids = {d.id for d in instance.discipline.all()}\n-            new_discipline_ids = {d['id'] for d in discipline_data}\n-\n-            # Add new disciplines (without duplicates)\n-            for discipline in discipline_data:\n-                if discipline['id'] not in current_discipline_ids:\n-                    instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n-\n-            # Remove disciplines that are no longer part of the request (if any)\n-            for discipline in instance.discipline.all():\n-                if discipline.id not in new_discipline_ids:\n-                    instance.discipline.remove(discipline)\n-\n-        if social_media_data:\n-            # Adding new social media links (if provided)\n-            current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n-            new_social_media_ids = {sm['id'] for sm in social_media_data}\n-\n-            # Add new social media (without duplicates)\n-            for social_media in social_media_data:\n-                if social_media['id'] not in current_social_media_ids:\n-                    instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n-\n-            # Remove social media that are no longer part of the request (if any)\n-            for social_media in instance.social_media.all():\n-                if social_media.id not in new_social_media_ids:\n-                    instance.social_media.remove(social_media)\n-\n-        if facilities_data:\n-            # Adding new facilities (if provided)\n-            current_facilities_ids = {f.id for f in instance.facilities.all()}\n-            new_facilities_ids = {f['id'] for f in facilities_data}\n-\n-            # Add new facilities (without duplicates)\n-            for facility in facilities_data:\n-                if facility['id'] not in current_facilities_ids:\n-                    instance.facilities.add(Facility.objects.get(id=facility['id']))\n-\n-            # Remove facilities that are no longer part of the request (if any)\n-            for facility in instance.facilities.all():\n-                if facility.id not in new_facilities_ids:\n-                    instance.facilities.remove(facility)\n-\n-        # Update the other fields in the College model\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-\n-        return instance\n-\n-    \n\\ No newline at end of file\n+=\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738651541393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,18 +61,9 @@\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-    # Nested serializers for ForeignKey fields\n-    district = DistrictSerializer()  # Include full object instead of just ID\n-    affiliated = AffiliationSerializer()  # Include full object instead of just ID\n-    college_type = CollegeTypeSerializer()  # Include full object instead of just ID\n \n-    # Nested serializers for ManyToMany fields\n-    discipline = DisciplineSerializer(many=True)  # Include full objects for many-to-many relationships\n-    social_media = SocialMediaSerializer(many=True)  # Include full objects for many-to-many relationships\n-    facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n         fields = '__all__'\n-=\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738651547095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-\n-\n+    \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738652200366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,24 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n \n+\n+\n+def str_to_list(data,value_to_convert):\n+    try:\n+        mutable_data = data.dict()\n+    except Exception:\n+        mutable_data = data\n+    value_to_convert_data = mutable_data[value_to_convert]\n+    if isinstance(value_to_convert_data,list):# type(value_to_convert_data) == list:\n+\n+        return mutable_data\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n"
                },
                {
                    "date": 1738652205839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n+import ast\n \n \n-\n def str_to_list(data,value_to_convert):\n     try:\n         mutable_data = data.dict()\n     except Exception:\n"
                },
                {
                    "date": 1738652211829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n         mutable_data[value_to_convert] = variations\n         return mutable_data\n     except ValueError as e:\n         raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+    \n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n"
                },
                {
                    "date": 1738652278939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,7 +80,13 @@\n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     \n+    def to_internal_value(self, data):\n+        if data.get('packages'):\n+            data = str_to_list(data,'packages')\n+            return super().to_internal_value(data)\n+        return super().to_internal_value(data)\n+    \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738652308103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     \n     def to_internal_value(self, data):\n+        \n         if data.get('packages'):\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1738652392524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,19 @@\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n+    # Use PrimaryKeyRelatedField to accept only IDs\n+    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n+    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n+    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n+\n+    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n+    social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n+    facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n+\n     \n     def to_internal_value(self, data):\n-        \n         if data.get('packages'):\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1738652398942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,13 +89,9 @@\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n \n     \n-    def to_internal_value(self, data):\n-        if data.get('packages'):\n-            data = str_to_list(data,'packages')\n-            return super().to_internal_value(data)\n-        return super().to_internal_value(data)\n     \n+    \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738652404621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,13 @@\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n+    def to_internal_value(self, data):\n+        if data.get('packages'):\n+            data = str_to_list(data,'packages')\n+            return super().to_internal_value(data)\n+        return super().to_internal_value(data)\n \n     \n     \n     \n"
                },
                {
                    "date": 1738652413450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,10 +93,9 @@\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n \n-    \n-    \n-    \n     class Meta:\n         model = College\n         fields = '__all__'\n+        \n+    \n"
                },
                {
                    "date": 1738652422067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,5 +97,38 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n         \n-    \n+    def create(self, validated_data):\n+        discipline_ids = validated_data.pop('discipline', [])\n+        social_media_ids = validated_data.pop('social_media', [])\n+        facilities_ids = validated_data.pop('facilities', [])\n+\n+        # Create College instance with ForeignKey relationships\n+        college = College.objects.create(**validated_data)\n+\n+        # Add ManyToMany relationships using IDs\n+        college.discipline.set(discipline_ids)\n+        college.social_media.set(social_media_ids)\n+        college.facilities.set(facilities_ids)\n+\n+        return college\n+\n+    def update(self, instance, validated_data):\n+        discipline_ids = validated_data.pop('discipline', None)\n+        social_media_ids = validated_data.pop('social_media', None)\n+        facilities_ids = validated_data.pop('facilities', None)\n+\n+        # Update ForeignKey relationships\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+\n+        # Update ManyToMany relationships if provided\n+        if discipline_ids is not None:\n+            instance.discipline.set(discipline_ids)\n+        if social_media_ids is not None:\n+            instance.social_media.set(social_media_ids)\n+        if facilities_ids is not None:\n+            instance.facilities.set(facilities_ids)\n+\n+        return instance\n"
                },
                {
                    "date": 1738664038981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,15 @@\n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n \n-# Nested serializer for CollegeType\n-class CollegeTypeSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeType\n         fields = '__all__'\n \n-# Nested serializer for Discipline\n+# Nested serializer for Disc\n+# Nested serializer for CollegeType\n+class CollegeTypeSerializer(serializers.ModelSerializer):ipline\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n"
                },
                {
                    "date": 1738666239911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,15 @@\n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n \n+# Nested serializer for CollegeType\n+class CollegeTypeSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeType\n         fields = '__all__'\n \n-# Nested serializer for Disc\n-# Nested serializer for CollegeType\n-class CollegeTypeSerializer(serializers.ModelSerializer):ipline\n+# Nested serializer for Discipline\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n@@ -65,9 +65,9 @@\n \n \n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n-    district = DistrictSerializer()  # Nested object for related model\n+    district = DistrictSerializer(read)  # Nested object for related model\n     affiliated = AffiliationSerializer()  # Nested object for related model\n     college_type = CollegeTypeSerializer()  # Nested object for related model\n     discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n"
                },
                {
                    "date": 1738666246756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \n \n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n-    district = DistrictSerializer(read)  # Nested object for related model\n+    district = DistrictSerializer(read_only=True)  # Nested object for related model\n     affiliated = AffiliationSerializer()  # Nested object for related model\n     college_type = CollegeTypeSerializer()  # Nested object for related model\n     discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n"
                },
                {
                    "date": 1738666260647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n \n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n     district = DistrictSerializer(read_only=True)  # Nested object for related model\n-    affiliated = AffiliationSerializer()  # Nested object for related model\n+    affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n     college_type = CollegeTypeSerializer()  # Nested object for related model\n     discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n     facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n"
                },
                {
                    "date": 1738666269162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,10 +67,10 @@\n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n     district = DistrictSerializer(read_only=True)  # Nested object for related model\n     affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n-    college_type = CollegeTypeSerializer()  # Nested object for related model\n-    discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n+    college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n+    discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n     facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n \n     class Meta:\n"
                },
                {
                    "date": 1738666275254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n     district = DistrictSerializer(read_only=True)  # Nested object for related model\n     affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n     college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n     discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n-    social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n-    facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n+    social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738666282322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,15 @@\n \n \n # Serializer for listing college details (basic view)\n class CollegeListSerializers(serializers.ModelSerializer):\n+    district = DistrictSerializer(read_only=True)  # Nested object for related model\n+    affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n+    college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n+    discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+\n     class Meta:\n         model = College\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1738903736413,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n \n-    class Meta:\n+    class Meta:'''''[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'''\n         model = College\n         fields = '__all__'\n         \n     def create(self, validated_data):\n"
                },
                {
                    "date": 1738903741885,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n \n-    class Meta:'''''[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'''\n+    class Meta:'''''[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[] ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'''\n         model = College\n         fields = '__all__'\n         \n     def create(self, validated_data):\n"
                },
                {
                    "date": 1738903993169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n \n-    class Meta:'''''[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[] ]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'''\n+    class Meta:'''''[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'''\n         model = College\n         fields = '__all__'\n         \n     def create(self, validated_data):\n"
                },
                {
                    "date": 1738903999499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n \n-    class Meta:'''''[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]'''\n+    class Meta:\n         model = College\n         fields = '__all__'\n         \n     def create(self, validated_data):\n"
                },
                {
                    "date": 1738905367908,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,8 +89,9 @@\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     # Use PrimaryKeyRelatedField to accept only IDs\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n     affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n+    \n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n"
                },
                {
                    "date": 1738905386966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,11 @@\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     # Use PrimaryKeyRelatedField to accept only IDs\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n     affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n-    \n+     affiliation = serializers.PrimaryKeyRelatedField(\n+        queryset=Affiliation.objects.all(), required=False, write_only=True\n+    )\n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n"
                },
                {
                    "date": 1738905393068,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,9 @@\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     # Use PrimaryKeyRelatedField to accept only IDs\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n     affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n-     affiliation = serializers.PrimaryKeyRelatedField(\n+    affiliated = serializers.PrimaryKeyRelatedField(\n         queryset=Affiliation.objects.all(), required=False, write_only=True\n     )\n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n"
                },
                {
                    "date": 1738905403661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,9 +88,8 @@\n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     # Use PrimaryKeyRelatedField to accept only IDs\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n-    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n     affiliated = serializers.PrimaryKeyRelatedField(\n         queryset=Affiliation.objects.all(), required=False, write_only=True\n     )\n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n"
                },
                {
                    "date": 1738905506850,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,11 @@\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n     affiliated = serializers.PrimaryKeyRelatedField(\n         queryset=Affiliation.objects.all(), required=False, write_only=True\n     )\n+    affiliated = serializers.PrimaryKeyRelatedField(\n+        queryset=Affiliation.objects.all(), required=False, write_only=True\n+    )\n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n"
                },
                {
                    "date": 1738905512606,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,9 +91,9 @@\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n     affiliated = serializers.PrimaryKeyRelatedField(\n         queryset=Affiliation.objects.all(), required=False, write_only=True\n     )\n-    affiliated = serializers.PrimaryKeyRelatedField(\n+    college_type = serializers.PrimaryKeyRelatedField(\n         queryset=Affiliation.objects.all(), required=False, write_only=True\n     )\n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n"
                },
                {
                    "date": 1738905518358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,9 +92,9 @@\n     affiliated = serializers.PrimaryKeyRelatedField(\n         queryset=Affiliation.objects.all(), required=False, write_only=True\n     )\n     college_type = serializers.PrimaryKeyRelatedField(\n-        queryset=Affiliation.objects.all(), required=False, write_only=True\n+        queryset=CollegeType.objects.all(), required=False, write_only=True\n     )\n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n"
                },
                {
                    "date": 1738905527395,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,8 @@\n     )\n     college_type = serializers.PrimaryKeyRelatedField(\n         queryset=CollegeType.objects.all(), required=False, write_only=True\n     )\n-    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n"
                },
                {
                    "date": 1738905539727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -88,14 +88,10 @@\n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     # Use PrimaryKeyRelatedField to accept only IDs\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n-    affiliated = serializers.PrimaryKeyRelatedField(\n-        queryset=Affiliation.objects.all(), required=False, write_only=True\n-    )\n-    college_type = serializers.PrimaryKeyRelatedField(\n-        queryset=CollegeType.objects.all(), required=False, write_only=True\n-    )\n+    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n+    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n"
                },
                {
                    "date": 1738905947236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,45 +86,60 @@\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-    # Use PrimaryKeyRelatedField to accept only IDs\n-    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n-    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n-    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n+    # Accept ForeignKey and ManyToMany as IDs in requests (write-only)\n+    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all(), write_only=True)\n+    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all(), write_only=True)\n+    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all(), write_only=True)\n+    step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True, write_only=True)\n \n-    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n-    social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n-    facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n-    def to_internal_value(self, data):\n-        if data.get('packages'):\n-            data = str_to_list(data,'packages')\n-            return super().to_internal_value(data)\n-        return super().to_internal_value(data)\n+    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True, write_only=True)\n+    social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True, write_only=True)\n+    facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, write_only=True)\n \n+    # Read-only: Replace ForeignKey and ManyToMany fields with full objects in response\n+    def to_representation(self, instance):\n+        response = super().to_representation(instance)\n+        \n+        # Replace ID fields with their full objects\n+        response[\"district\"] = DistrictSerializer(instance.district).data\n+        response[\"affiliated\"] = AffiliationSerializer(instance.affiliated).data\n+        response[\"college_type\"] = CollegeTypeSerializer(instance.college_type).data\n+        response[\"step_counter\"] = FormStepProgressSerializer(instance.step_counter).data if instance.step_counter else None\n+\n+        response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n+        response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n+        response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n+\n+        return response\n+\n     class Meta:\n         model = College\n         fields = '__all__'\n-        \n+\n     def create(self, validated_data):\n-        discipline_ids = validated_data.pop('discipline', [])\n-        social_media_ids = validated_data.pop('social_media', [])\n-        facilities_ids = validated_data.pop('facilities', [])\n+        \"\"\"Handles creating a college and ensures response has full objects.\"\"\"\n+        # Extract ManyToMany relationships\n+        discipline_ids = validated_data.pop(\"discipline\", [])\n+        social_media_ids = validated_data.pop(\"social_media\", [])\n+        facilities_ids = validated_data.pop(\"facilities\", [])\n \n         # Create College instance with ForeignKey relationships\n         college = College.objects.create(**validated_data)\n \n-        # Add ManyToMany relationships using IDs\n+        # Add ManyToMany relationships\n         college.discipline.set(discipline_ids)\n         college.social_media.set(social_media_ids)\n         college.facilities.set(facilities_ids)\n \n-        return college\n+        return college  # DRF will automatically apply `to_representation()`\n \n     def update(self, instance, validated_data):\n-        discipline_ids = validated_data.pop('discipline', None)\n-        social_media_ids = validated_data.pop('social_media', None)\n-        facilities_ids = validated_data.pop('facilities', None)\n+        \"\"\"Handles updating a college with the same response format.\"\"\"\n+        discipline_ids = validated_data.pop(\"discipline\", None)\n+        social_media_ids = validated_data.pop(\"social_media\", None)\n+        facilities_ids = validated_data.pop(\"facilities\", None)\n \n         # Update ForeignKey relationships\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n@@ -137,5 +152,5 @@\n             instance.social_media.set(social_media_ids)\n         if facilities_ids is not None:\n             instance.facilities.set(facilities_ids)\n \n-        return instance\n+        return instance  # DRF will automatically apply `to_representation()`\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738905965126,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n+from \n import ast\n \n \n def str_to_list(data,value_to_convert):\n@@ -152,5 +153,5 @@\n             instance.social_media.set(social_media_ids)\n         if facilities_ids is not None:\n             instance.facilities.set(facilities_ids)\n \n-        return instance  # DRF will automatically apply `to_representation()`\n\\ No newline at end of file\n+        return instance  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738905975019,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n-from \n+from form\n import ast\n \n \n def str_to_list(data,value_to_convert):\n"
                },
                {
                    "date": 1738905990343,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n-from form\n+from formprogress.models import FormStepProgress\n import ast\n \n \n def str_to_list(data,value_to_convert):\n@@ -36,8 +36,12 @@\n class CollegeTypeSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeType\n         fields = '__all__'\n+class CollegeTypeSerializer(serializers.ModelSerializer):\n+    class Meta:\n+        model = CollegeType\n+        fields = '__all__'\n \n # Nested serializer for Discipline\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738905999858,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,12 +32,13 @@\n         model = Affiliation\n         fields = '__all__'\n \n # Nested serializer for CollegeType\n-class CollegeTypeSerializer(serializers.ModelSerializer):\n+classFormStepProgressSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeType\n         fields = '__all__'\n+        \n class CollegeTypeSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeType\n         fields = '__all__'\n"
                },
                {
                    "date": 1738906261656,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,11 +32,11 @@\n         model = Affiliation\n         fields = '__all__'\n \n # Nested serializer for CollegeType\n-classFormStepProgressSerializer(serializers.ModelSerializer):\n+class FormStepProgressSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = CollegeType\n+        model = FormStepProgress\n         fields = '__all__'\n         \n class CollegeTypeSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738907157998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,9 @@\n         fields = '__all__'\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n+# Serializer for College model\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     # Accept ForeignKey and ManyToMany as IDs in requests (write-only)\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all(), write_only=True)\n     affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all(), write_only=True)\n@@ -124,39 +125,44 @@\n         fields = '__all__'\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and ensures response has full objects.\"\"\"\n-        # Extract ManyToMany relationships\n-        discipline_ids = validated_data.pop(\"discipline\", [])\n-        social_media_ids = validated_data.pop(\"social_media\", [])\n-        facilities_ids = validated_data.pop(\"facilities\", [])\n+        request = self.context.get(\"request\")\n \n+        # Extract IDs from request data\n+        discipline_ids = request.data.get(\"discipline\", [])\n+        social_media_ids = request.data.get(\"social_media\", [])\n+        facilities_ids = request.data.get(\"facilities\", [])\n+\n         # Create College instance with ForeignKey relationships\n         college = College.objects.create(**validated_data)\n \n-        # Add ManyToMany relationships\n-        college.discipline.set(discipline_ids)\n-        college.social_media.set(social_media_ids)\n-        college.facilities.set(facilities_ids)\n+        # Set ManyToMany relationships\n+        college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+        college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n         return college  # DRF will automatically apply `to_representation()`\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college with the same response format.\"\"\"\n-        discipline_ids = validated_data.pop(\"discipline\", None)\n-        social_media_ids = validated_data.pop(\"social_media\", None)\n-        facilities_ids = validated_data.pop(\"facilities\", None)\n+        \"\"\"Handles updating a college while taking data from `request`.\"\"\"\n+        request = self.context.get(\"request\")\n \n+        # Extract IDs from request data\n+        discipline_ids = request.data.get(\"discipline\", None)\n\\ No newline at end of file\n+        social_media_ids = request.data.get(\"social_media\", None)\n+        facilities_ids = request.data.get(\"facilities\", None)\n+\n         # Update ForeignKey relationships\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n \n         # Update ManyToMany relationships if provided\n         if discipline_ids is not None:\n-            instance.discipline.set(discipline_ids)\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n         if social_media_ids is not None:\n-            instance.social_media.set(social_media_ids)\n+            instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n         if facilities_ids is not None:\n-            instance.facilities.set(facilities_ids)\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return instance  \n+        return instance  # DRF will automatically apply `to_representation()`\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738907163216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -164,5 +164,5 @@\n             instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n         if facilities_ids is not None:\n             instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return instance  # DRF will automatically apply `to_representation()`\n\\ No newline at end of file\n+        return instance  \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738907725340,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,46 +123,46 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n \n-    def create(self, validated_data):\n-        \"\"\"Handles creating a college and ensures response has full objects.\"\"\"\n-        request = self.context.get(\"request\")\n+   def create(self, validated_data):\n+    \"\"\"Handles creating a college with correct ManyToMany assignment.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract IDs from request data\n-        discipline_ids = request.data.get(\"discipline\", [])\n-        social_media_ids = request.data.get(\"social_media\", [])\n-        facilities_ids = request.data.get(\"facilities\", [])\n+    # Extract IDs from request data\n+    discipline_ids = request.data.get(\"discipline\", [])\n+    social_media_ids = request.data.get(\"social_media\", [])\n+    facilities_ids = request.data.get(\"facilities\", [])\n \n-        # Create College instance with ForeignKey relationships\n-        college = College.objects.create(**validated_data)\n+    # Create College instance with ForeignKey relationships\n+    college = College.objects.create(**validated_data)\n \n-        # Set ManyToMany relationships\n-        college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-        college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-        college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    # Properly set ManyToMany relationships using `.set()`\n+    college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+    college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return college  # DRF will automatically apply `to_representation()`\n+    return college\n \n-    def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college while taking data from `request`.\"\"\"\n-        request = self.context.get(\"request\")\n+def update(self, instance, validated_data):\n+    \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract IDs from request data\n-        discipline_ids = request.data.get(\"discipline\", None)\n\\ No newline at end of file\n-        social_media_ids = request.data.get(\"social_media\", None)\n-        facilities_ids = request.data.get(\"facilities\", None)\n+    # Extract IDs from request data\n+    discipline_ids = request.data.get(\"discipline\", None)\n+    social_media_ids = request.data.get(\"social_media\", None)\n+    facilities_ids = request.data.get(\"facilities\", None)\n \n-        # Update ForeignKey relationships\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    # Update ForeignKey fields\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n \n-        # Update ManyToMany relationships if provided\n-        if discipline_ids is not None:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-        if social_media_ids is not None:\n-            instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-        if facilities_ids is not None:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    # Properly update ManyToMany relationships using `.set()`\n+    if discipline_ids is not None:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    if social_media_ids is not None:\n+        instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+    if facilities_ids is not None:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return instance  \n+    return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738907730736,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,45 +124,45 @@\n         model = College\n         fields = '__all__'\n \n    def create(self, validated_data):\n-    \"\"\"Handles creating a college with correct ManyToMany assignment.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles creating a college with correct ManyToMany assignment.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract IDs from request data\n-    discipline_ids = request.data.get(\"discipline\", [])\n-    social_media_ids = request.data.get(\"social_media\", [])\n-    facilities_ids = request.data.get(\"facilities\", [])\n+        # Extract IDs from request data\n+        discipline_ids = request.data.get(\"discipline\", [])\n+        social_media_ids = request.data.get(\"social_media\", [])\n+        facilities_ids = request.data.get(\"facilities\", [])\n \n-    # Create College instance with ForeignKey relationships\n-    college = College.objects.create(**validated_data)\n+        # Create College instance with ForeignKey relationships\n+        college = College.objects.create(**validated_data)\n \n-    # Properly set ManyToMany relationships using `.set()`\n-    college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-    college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-    college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        # Properly set ManyToMany relationships using `.set()`\n+        college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+        college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return college\n+        return college\n \n-def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n-    request = self.context.get(\"request\")\n+    def update(self, instance, validated_data):\n+        \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract IDs from request data\n-    discipline_ids = request.data.get(\"discipline\", None)\n-    social_media_ids = request.data.get(\"social_media\", None)\n\\ No newline at end of file\n-    facilities_ids = request.data.get(\"facilities\", None)\n+        # Extract IDs from request data\n+        discipline_ids = request.data.get(\"discipline\", None)\n+        social_media_ids = request.data.get(\"social_media\", None)\n+        facilities_ids = request.data.get(\"facilities\", None)\n \n-    # Update ForeignKey fields\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update ForeignKey fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    # Properly update ManyToMany relationships using `.set()`\n-    if discipline_ids is not None:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-    if social_media_ids is not None:\n-        instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-    if facilities_ids is not None:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        # Properly update ManyToMany relationships using `.set()`\n+        if discipline_ids is not None:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        if social_media_ids is not None:\n+            instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+        if facilities_ids is not None:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n+        return instance\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738908081670,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,46 +123,49 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n \n-   def create(self, validated_data):\n-        \"\"\"Handles creating a college with correct ManyToMany assignment.\"\"\"\n-        request = self.context.get(\"request\")\n+    def create(self, validated_data):\n+    \"\"\"Handles creating a college and ensures ManyToMany relationships are properly set.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract IDs from request data\n-        discipline_ids = request.data.get(\"discipline\", [])\n-        social_media_ids = request.data.get(\"social_media\", [])\n-        facilities_ids = request.data.get(\"facilities\", [])\n+    # Extract IDs from request data (raw input)\n+    discipline_ids = request.data.get(\"discipline\", [])\n+    social_media_ids = request.data.get(\"social_media\", [])\n+    facilities_ids = request.data.get(\"facilities\", [])\n \n-        # Create College instance with ForeignKey relationships\n-        college = College.objects.create(**validated_data)\n+    # Create College instance with ForeignKey fields first (WITHOUT ManyToMany fields)\n+    college = College.objects.create(**validated_data)\n \n-        # Properly set ManyToMany relationships using `.set()`\n+    # Ensure ManyToMany relationships are set AFTER instance creation\n+    if discipline_ids:\n         college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    if social_media_ids:\n         college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+    if facilities_ids:\n         college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return college\n+    return college\n \n-    def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n-        request = self.context.get(\"request\")\n+def update(self, instance, validated_data):\n+    \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract IDs from request data\n-        discipline_ids = request.data.get(\"discipline\", None)\n\\ No newline at end of file\n-        social_media_ids = request.data.get(\"social_media\", None)\n-        facilities_ids = request.data.get(\"facilities\", None)\n+    # Extract IDs from request data\n+    discipline_ids = request.data.get(\"discipline\", None)\n+    social_media_ids = request.data.get(\"social_media\", None)\n+    facilities_ids = request.data.get(\"facilities\", None)\n \n-        # Update ForeignKey fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    # Update ForeignKey fields first\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n \n-        # Properly update ManyToMany relationships using `.set()`\n-        if discipline_ids is not None:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-        if social_media_ids is not None:\n-            instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-        if facilities_ids is not None:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    # Properly update ManyToMany relationships after saving\n+    if discipline_ids is not None:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    if social_media_ids is not None:\n+        instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+    if facilities_ids is not None:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return instance\n+    return instance\n"
                },
                {
                    "date": 1738908086893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -124,48 +124,48 @@\n         model = College\n         fields = '__all__'\n \n     def create(self, validated_data):\n-    \"\"\"Handles creating a college and ensures ManyToMany relationships are properly set.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles creating a college and ensures ManyToMany relationships are properly set.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract IDs from request data (raw input)\n-    discipline_ids = request.data.get(\"discipline\", [])\n-    social_media_ids = request.data.get(\"social_media\", [])\n-    facilities_ids = request.data.get(\"facilities\", [])\n+        # Extract IDs from request data (raw input)\n+        discipline_ids = request.data.get(\"discipline\", [])\n+        social_media_ids = request.data.get(\"social_media\", [])\n+        facilities_ids = request.data.get(\"facilities\", [])\n \n-    # Create College instance with ForeignKey fields first (WITHOUT ManyToMany fields)\n-    college = College.objects.create(**validated_data)\n+        # Create College instance with ForeignKey fields first (WITHOUT ManyToMany fields)\n+        college = College.objects.create(**validated_data)\n \n-    # Ensure ManyToMany relationships are set AFTER instance creation\n-    if discipline_ids:\n-        college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-    if social_media_ids:\n-        college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-    if facilities_ids:\n-        college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        # Ensure ManyToMany relationships are set AFTER instance creation\n+        if discipline_ids:\n+            college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        if social_media_ids:\n+            college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+        if facilities_ids:\n+            college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return college\n+        return college\n \n-def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n-    request = self.context.get(\"request\")\n+    def update(self, instance, validated_data):\n+        \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract IDs from request data\n-    discipline_ids = request.data.get(\"discipline\", None)\n-    social_media_ids = request.data.get(\"social_media\", None)\n-    facilities_ids = request.data.get(\"facilities\", None)\n+        # Extract IDs from request data\n+        discipline_ids = request.data.get(\"discipline\", None)\n+        social_media_ids = request.data.get(\"social_media\", None)\n+        facilities_ids = request.data.get(\"facilities\", None)\n \n-    # Update ForeignKey fields first\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update ForeignKey fields first\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    # Properly update ManyToMany relationships after saving\n-    if discipline_ids is not None:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-    if social_media_ids is not None:\n-        instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-    if facilities_ids is not None:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        # Properly update ManyToMany relationships after saving\n+        if discipline_ids is not None:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        if social_media_ids is not None:\n+            instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+        if facilities_ids is not None:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n+        return instance\n"
                },
                {
                    "date": 1738908926187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,51 +93,40 @@\n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n # Serializer for College model\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-    # Accept ForeignKey and ManyToMany as IDs in requests (write-only)\n-    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all(), write_only=True)\n-    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all(), write_only=True)\n-    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all(), write_only=True)\n-    step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True, write_only=True)\n+    # ForeignKey fields (IDs only)\n+    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n+    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n+    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n+    step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n \n-    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True, write_only=True)\n-    social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True, write_only=True)\n-    facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, write_only=True)\n+    # ManyToMany fields (IDs only)\n+    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True, required=False)\n+    social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True, required=False)\n+    facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n \n-    # Read-only: Replace ForeignKey and ManyToMany fields with full objects in response\n-    def to_representation(self, instance):\n-        response = super().to_representation(instance)\n-        \n-        # Replace ID fields with their full objects\n-        response[\"district\"] = DistrictSerializer(instance.district).data\n-        response[\"affiliated\"] = AffiliationSerializer(instance.affiliated).data\n-        response[\"college_type\"] = CollegeTypeSerializer(instance.college_type).data\n-        response[\"step_counter\"] = FormStepProgressSerializer(instance.step_counter).data if instance.step_counter else None\n-\n-        response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n-        response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n-        response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n-\n-        return response\n-\n     class Meta:\n         model = College\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        \"\"\"Handles creating a college and ensures ManyToMany relationships are properly set.\"\"\"\n+        \"\"\"Handles creating a college with ManyToMany relationships.\"\"\"\n+        # Extract ManyToMany field data from request.data\n         request = self.context.get(\"request\")\n-\n-        # Extract IDs from request data (raw input)\n         discipline_ids = request.data.get(\"discipline\", [])\n         social_media_ids = request.data.get(\"social_media\", [])\n         facilities_ids = request.data.get(\"facilities\", [])\n \n-        # Create College instance with ForeignKey fields first (WITHOUT ManyToMany fields)\n+        # Remove ManyToMany fields from validated_data\n+        validated_data.pop(\"discipline\", None)\n+        validated_data.pop(\"social_media\", None)\n+        validated_data.pop(\"facilities\", None)\n+\n+        # Create College instance\n         college = College.objects.create(**validated_data)\n \n-        # Ensure ManyToMany relationships are set AFTER instance creation\n+        # Assign ManyToMany relationships\n         if discipline_ids:\n             college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n         if social_media_ids:\n             college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n@@ -146,22 +135,26 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college while ensuring ManyToMany relationships are updated correctly.\"\"\"\n+        \"\"\"Handles updating a college with ManyToMany relationships.\"\"\"\n+        # Extract ManyToMany field data from request.data\n         request = self.context.get(\"request\")\n-\n-        # Extract IDs from request data\n         discipline_ids = request.data.get(\"discipline\", None)\n         social_media_ids = request.data.get(\"social_media\", None)\n         facilities_ids = request.data.get(\"facilities\", None)\n \n-        # Update ForeignKey fields first\n+        # Remove ManyToMany fields from validated_data\n+        validated_data.pop(\"discipline\", None)\n+        validated_data.pop(\"social_media\", None)\n+        validated_data.pop(\"facilities\", None)\n+\n+        # Update ForeignKey fields\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n         instance.save()\n \n-        # Properly update ManyToMany relationships after saving\n+        # Update ManyToMany relationships\n         if discipline_ids is not None:\n             instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n         if social_media_ids is not None:\n             instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n"
                },
                {
                    "date": 1738909215983,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,27 +93,28 @@\n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n # Serializer for College model\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-    # ForeignKey fields (IDs only)\n+    # ForeignKey fields\n     district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n     affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n     college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n     step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n \n-    # ManyToMany fields (IDs only)\n-    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True, required=False)\n+    # ManyToMany fields\n+    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True, required=False)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n \n     class Meta:\n         model = College\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        \"\"\"Handles creating a college with ManyToMany relationships.\"\"\"\n-        # Extract ManyToMany field data from request.data\n+        \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n+\n+        # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n         social_media_ids = request.data.get(\"social_media\", [])\n         facilities_ids = request.data.get(\"facilities\", [])\n \n@@ -124,9 +125,9 @@\n \n         # Create College instance\n         college = College.objects.create(**validated_data)\n \n-        # Assign ManyToMany relationships\n+        # Set ManyToMany relationships\n         if discipline_ids:\n             college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n         if social_media_ids:\n             college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n@@ -135,11 +136,12 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college with ManyToMany relationships.\"\"\"\n-        # Extract ManyToMany field data from request.data\n+        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n+\n+        # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", None)\n         social_media_ids = request.data.get(\"social_media\", None)\n         facilities_ids = request.data.get(\"facilities\", None)\n \n@@ -161,4 +163,23 @@\n         if facilities_ids is not None:\n             instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n         return instance\n+\n+    def to_representation(self, instance):\n+        \"\"\"Customize the response to include full objects for related fields.\"\"\"\n+        response = super().to_representation(instance)\n+\n+        # Replace IDs with full nested objects for foreign key fields\n+        response[\"district\"] = DistrictSerializer(instance.district).data\n+        response[\"affiliated\"] = AffiliationSerializer(instance.affiliated).data\n+        response[\"college_type\"] = CollegeTypeSerializer(instance.college_type).data\n+        response[\"step_counter\"] = (\n+            FormStepProgressSerializer(instance.step_counter).data if instance.step_counter else None\n+        )\n+\n+        # Replace IDs with full nested objects for many-to-many fields\n+        response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n+        response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n+        response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n+\n+        return response\n"
                },
                {
                    "date": 1738909396329,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Nested serializer for Affiliation\n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Affiliation\n-        fields = '__all__'\n+        fields = []\n \n # Nested serializer for CollegeType\n class FormStepProgressSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738909402339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Nested serializer for Affiliation\n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Affiliation\n-        fields = []\n+        fields = ['id',]\n \n # Nested serializer for CollegeType\n class FormStepProgressSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738909408564,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Nested serializer for Affiliation\n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Affiliation\n-        fields = ['id',]\n+        fields = ['id', 'name', 'description']\n \n # Nested serializer for CollegeType\n class FormStepProgressSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738909415467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Nested serializer for Affiliation\n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Affiliation\n-        fields = ['id', 'name', 'description']\n+        fields = ['id', 'name', 'established_year']\n \n # Nested serializer for CollegeType\n class FormStepProgressSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738909428998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n # Nested serializer for Affiliation\n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Affiliation\n-        fields = ['id', 'name', 'established_year']\n+        fields = ['id', 'name', 'established_year','address']\n \n # Nested serializer for CollegeType\n class FormStepProgressSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738909444845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n-        fields = '__all__'\n+        fields = \n \n # Nested serializer for Affiliation\n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738909453355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n-        fields = \n+        fields = ['id', 'name']\n \n # Nested serializer for Affiliation\n class AffiliationSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1739425277898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,8 +167,9 @@\n \n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n+        response[\"slug\"] = instance.slug\n \n         # Replace IDs with full nested objects for foreign key fields\n         response[\"district\"] = DistrictSerializer(instance.district).data\n         response[\"affiliated\"] = AffiliationSerializer(instance.affiliated).data\n"
                },
                {
                    "date": 1739427054404,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,9 +167,9 @@\n \n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n-        response[\"slug\"] = instance.slug\n+        # response[\"slug\"] = instance.slug\n \n         # Replace IDs with full nested objects for foreign key fields\n         response[\"district\"] = DistrictSerializer(instance.district).data\n         response[\"affiliated\"] = AffiliationSerializer(instance.affiliated).data\n"
                },
                {
                    "date": 1739857365955,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n+from ..models import College, District, Affiliation, CollegeType, Discipline Facility\n from formprogress.models import FormStepProgress\n import ast\n \n \n"
                },
                {
                    "date": 1739857371262,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n from rest_framework import serializers\n-from ..models import College, District, Affiliation, CollegeType, Discipline Facility\n+from ..models import College, District, Affiliation, CollegeType, Discipline, Facility\n+from \n from formprogress.models import FormStepProgress\n import ast\n \n \n"
                },
                {
                    "date": 1739857382251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, Facility\n-from \n+from socialmedia.models import SocialMedia,CollegeSocialMedia\n from formprogress.models import FormStepProgress\n import ast\n \n \n@@ -53,9 +53,9 @@\n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n-        model = SocialMedia\n+        model = CollegeSocialMedia\n         fields = '__all__'\n \n # Nested serializer for Facility\n class FacilitySerializer(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1739857774137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -104,8 +104,14 @@\n     # ManyToMany fields\n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True, required=False)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n+    \n+    def to_internal_value(self, data):\n+        \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n+        if data.get('social_media'):\n+            data['social_media'] = str_to_list(data, 'social_media')  # Convert if stringified\n+        return super().to_internal_value(data)\n \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1739857833464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n-        social_media_ids = request.data.get(\"social_media\", [])\n+        social_media_data = validated_data.pop(\"social_media\", None) \n         facilities_ids = request.data.get(\"facilities\", [])\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n"
                },
                {
                    "date": 1739857845521,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n-        social_media_data = validated_data.pop(\"social_media\", None) \n+        social_media_data = request.data.get(\"social_media\", None) \n         facilities_ids = request.data.get(\"facilities\", [])\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n"
                },
                {
                    "date": 1739857851172,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n-        social_media_data = request.data.get(\"social_media\", None) \n+        social_media = request.data.get(\"social_media\", None) \n         facilities_ids = request.data.get(\"facilities\", [])\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n"
                },
                {
                    "date": 1739857861199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n-        social_media = request.data.get(\"social_media\", None) \n+        social_media_data = request.data.get(\"social_media\", None) \n         facilities_ids = request.data.get(\"facilities\", [])\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n"
                },
                {
                    "date": 1739857928851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,10 +135,8 @@\n \n         # Set ManyToMany relationships\n         if discipline_ids:\n             college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-        if social_media_ids:\n-            college.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n         if facilities_ids:\n             college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n         return college\n"
                },
                {
                    "date": 1739857934503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,8 +137,17 @@\n         if discipline_ids:\n             college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n         if facilities_ids:\n             college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        \n+        # Manually handle social media data\n+        for social in social_media_data:\n+            CollegeSocialMedia.objects.create(\n+                college=college,\n+                platform=social.get(\"platform\"),\n+                url=social.get(\"url\"),\n+                username=social.get(\"username\")\n+            )\n \n         return college\n \n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1739857952772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,9 +155,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", None)\n-        social_media_ids = request.data.get(\"social_media\", None)\n+        social_media = request.data.get(\"social_media\", None)\n         facilities_ids = request.data.get(\"facilities\", None)\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n"
                },
                {
                    "date": 1739857993007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -155,14 +155,14 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", None)\n-        social_media = request.data.get(\"social_media\", None)\n+        social_media_data = request.data.get(\"social_media\", None)\n         facilities_ids = request.data.get(\"facilities\", None)\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n-        validated_data.pop(\"social_media\", None)\n+        # validated_data.pop(\"social_media\", None)\n         validated_data.pop(\"facilities\", None)\n \n         # Update ForeignKey fields\n         for attr, value in validated_data.items():\n"
                },
                {
                    "date": 1739858003428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,13 +171,26 @@\n \n         # Update ManyToMany relationships\n         if discipline_ids is not None:\n             instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-        if social_media_ids is not None:\n-            instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n+        # if social_media_ids is not None:\n+        #     instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n         if facilities_ids is not None:\n             instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+            \n+        if social_media_data is not None:\n+            # Delete existing social media records\n+            CollegeSocialMedia.objects.filter(college=instance).delete()\n \n+            # Recreate social media entries\n+            for social in social_media_data:\n+                CollegeSocialMedia.objects.create(\n+                    college=instance,\n+                    platform=social.get(\"platform\"),\n+                    url=social.get(\"url\"),\n+                    username=social.get(\"username\")\n+                )\n+\n         return instance\n \n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n"
                },
                {
                    "date": 1739858189180,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -206,8 +206,8 @@\n         )\n \n         # Replace IDs with full nested objects for many-to-many fields\n         response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n-        response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n+        # response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n         response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n \n         return response\n"
                },
                {
                    "date": 1739858371138,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -184,13 +184,15 @@\n             # Recreate social media entries\n             for social in social_media_data:\n                 CollegeSocialMedia.objects.create(\n                     college=instance,\n-                    platform=social.get(\"platform\"),\n-                    url=social.get(\"url\"),\n-                    username=social.get(\"username\")\n+                    name=social.get(\"name\"),\n+                    link=social.get(\"link\"),\n+                    icon=social.get(\"icon\"),\n+                    is_show=social.get(\"is_show\", False)\n                 )\n \n+\n         return instance\n \n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n@@ -208,6 +210,15 @@\n         # Replace IDs with full nested objects for many-to-many fields\n         response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n         # response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n         response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n+        # Fetch social media manually\n+        response[\"social_media\"] = [\n+            {\n+                \"platform\": sm.platform,\n+                \"url\": sm.url,\n+                \"username\": sm.username\n+            }\n+            for sm in CollegeSocialMedia.objects.filter(college=instance)\n+        ]\n \n         return response\n"
                },
                {
                    "date": 1739858515448,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -210,15 +210,9 @@\n         # Replace IDs with full nested objects for many-to-many fields\n         response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n         # response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n         response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n-        # Fetch social media manually\n-        response[\"social_media\"] = [\n-            {\n-                \"platform\": sm.platform,\n-                \"url\": sm.url,\n-                \"username\": sm.username\n-            }\n-            for sm in CollegeSocialMedia.objects.filter(college=instance)\n-        ]\n+        response[\"social_media\"] = CollegeSocialMediaSerializer(\n+            CollegeSocialMedia.objects.filter(college=instance), many=True\n+        ).data\n \n         return response\n"
                },
                {
                    "date": 1739858577773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,11 +142,12 @@\n         # Manually handle social media data\n         for social in social_media_data:\n             CollegeSocialMedia.objects.create(\n                 college=college,\n-                platform=social.get(\"platform\"),\n-                url=social.get(\"url\"),\n-                username=social.get(\"username\")\n+                name=social.get(\"name\"),\n+                link=social.get(\"link\"),\n+                icon=social.get(\"icon\"),\n+                is_show=social.get(\"is_show\", False)\n             )\n \n         return college\n \n"
                },
                {
                    "date": 1739858599916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n         # Replace IDs with full nested objects for many-to-many fields\n         response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n         # response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n         response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n-        response[\"social_media\"] = CollegeSocialMediaSerializer(\n+        response[\"social_media\"] = SocialMediaSerializer(\n             CollegeSocialMedia.objects.filter(college=instance), many=True\n         ).data\n \n         return response\n"
                },
                {
                    "date": 1739858751660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n \n     # ManyToMany fields\n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n-    social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True, required=False)\n+    social_media = CollegeSocialMediaSerializer(many=True, required=False)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n     def to_internal_value(self, data):\n         \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n"
                },
                {
                    "date": 1739858756982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n \n     # ManyToMany fields\n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n-    social_media = CollegeSocialMediaSerializer(many=True, required=False)\n+    social_media = SocialMediaSerializer(many=True, required=False)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n     def to_internal_value(self, data):\n         \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n"
                },
                {
                    "date": 1739862804167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n         # Manually handle social media data\n         for social in social_media_data:\n             CollegeSocialMedia.objects.create(\n                 college=college,\n-                name=social.get(\"name\"),\n+                socie=social.get(\"name\"),\n                 link=social.get(\"link\"),\n                 icon=social.get(\"icon\"),\n                 is_show=social.get(\"is_show\", False)\n             )\n"
                },
                {
                    "date": 1739862811714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n         # Manually handle social media data\n         for social in social_media_data:\n             CollegeSocialMedia.objects.create(\n                 college=college,\n-                socie=social.get(\"name\"),\n+                social_media=social.get(\"social_media\"),\n                 link=social.get(\"link\"),\n                 icon=social.get(\"icon\"),\n                 is_show=social.get(\"is_show\", False)\n             )\n"
                },
                {
                    "date": 1739862846939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -185,9 +185,9 @@\n             # Recreate social media entries\n             for social in social_media_data:\n                 CollegeSocialMedia.objects.create(\n                     college=instance,\n-                    name=social.get(\"name\"),\n+                    social_media=social.get(\"social_media\"),\n                     link=social.get(\"link\"),\n                     icon=social.get(\"icon\"),\n                     is_show=social.get(\"is_show\", False)\n                 )\n"
                },
                {
                    "date": 1739943790964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,8 +139,9 @@\n         if facilities_ids:\n             college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n         \n         # Manually handle social media data\n+        \n         for social in social_media_data:\n             CollegeSocialMedia.objects.create(\n                 college=college,\n                 social_media=social.get(\"social_media\"),\n"
                },
                {
                    "date": 1739943800647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -139,17 +139,17 @@\n         if facilities_ids:\n             college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n         \n         # Manually handle social media data\n-        \n-        for social in social_media_data:\n-            CollegeSocialMedia.objects.create(\n-                college=college,\n-                social_media=social.get(\"social_media\"),\n-                link=social.get(\"link\"),\n-                icon=social.get(\"icon\"),\n-                is_show=social.get(\"is_show\", False)\n-            )\n+        if social_media_data:\n+            for social in social_media_data:\n+                CollegeSocialMedia.objects.create(\n+                    college=college,\n+                    social_media=social.get(\"social_media\"),\n+                    link=social.get(\"link\"),\n+                    icon=social.get(\"icon\"),\n+                    is_show=social.get(\"is_show\", False)\n+                )\n \n         return college\n \n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1740118173337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -137,19 +137,8 @@\n         if discipline_ids:\n             college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n         if facilities_ids:\n             college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n-        \n-        # Manually handle social media data\n-        if social_media_data:\n-            for social in social_media_data:\n-                CollegeSocialMedia.objects.create(\n-                    college=college,\n-                    social_media=social.get(\"social_media\"),\n-                    link=social.get(\"link\"),\n-                    icon=social.get(\"icon\"),\n-                    is_show=social.get(\"is_show\", False)\n-                )\n \n         return college\n \n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1740118181909,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,19 +171,8 @@\n         if social_media_data is not None:\n             # Delete existing social media records\n             CollegeSocialMedia.objects.filter(college=instance).delete()\n \n-            # Recreate social media entries\n-            for social in social_media_data:\n-                CollegeSocialMedia.objects.create(\n-                    college=instance,\n-                    social_media=social.get(\"social_media\"),\n-                    link=social.get(\"link\"),\n-                    icon=social.get(\"icon\"),\n-                    is_show=social.get(\"is_show\", False)\n-                )\n-\n-\n         return instance\n \n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n"
                },
                {
                    "date": 1740118192269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,9 +190,6 @@\n         # Replace IDs with full nested objects for many-to-many fields\n         response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n         # response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n         response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n-        response[\"social_media\"] = SocialMediaSerializer(\n-            CollegeSocialMedia.objects.filter(college=instance), many=True\n-        ).data\n \n         return response\n"
                },
                {
                    "date": 1740118221370,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -166,12 +166,8 @@\n         # if social_media_ids is not None:\n         #     instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n         if facilities_ids is not None:\n             instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n-            \n-        if social_media_data is not None:\n-            # Delete existing social media records\n-            CollegeSocialMedia.objects.filter(college=instance).delete()\n \n         return instance\n \n     def to_representation(self, instance):\n"
                },
                {
                    "date": 1740121546793,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,4 +188,17 @@\n         # response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n         response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n \n         return response\n+\n+\n+class CollegeRetrieveSerializers(serializers.ModelSerializer):\n+    district = DistrictSerializer(read_only=True)  # Nested object for related model\n+    affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n+    college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n+    discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+\n+    class Meta:\n+        model = College\n+        fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121560697,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -191,14 +191,7 @@\n         return response\n \n \n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n-    district = DistrictSerializer(read_only=True)  # Nested object for related model\n-    affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n-    college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n-    discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n-    social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n-    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n-\n     class Meta:\n         model = College\n         fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121575757,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,8 +190,8 @@\n \n         return response\n \n \n-class CollegeRetrieveSerializers(serializers.ModelSerializer):\n+class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n         fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121725075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = '__all__'\n\\ No newline at end of file\n+        fields = \n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121730472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = \n\\ No newline at end of file\n+        fields = ['name,']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121736306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['name,']\n\\ No newline at end of file\n+        fields = ['id'name,']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121741810,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id'name,']\n\\ No newline at end of file\n+        fields = ['id','name',]\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121749025,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id','name',]\n\\ No newline at end of file\n+        fields = ['id','name','affiliation']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121763695,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id','name','affiliation']\n\\ No newline at end of file\n+        fields = ['id','name','affiliation','college_type']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121772225,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id','name','affiliation','college_type']\n\\ No newline at end of file\n+        fields = ['id','name','affiliation','college_type','level']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740121783819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id','name','affiliation','college_type','level']\n\\ No newline at end of file\n+        fields = ['id','name','affiliation','college_type','level','phone_number']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740122089436,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id','name','affiliation','college_type','level','phone_number']\n\\ No newline at end of file\n+        fields = ['id','name','affiliated','college_type','level','phone_number']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740122143472,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,5 +193,5 @@\n \n class CollegeAdminWriteSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id','name','affiliated','college_type','level','phone_number']\n\\ No newline at end of file\n+        fields = ['id','name','affiliated','college_type','phone_number']\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740377359969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,13 +105,13 @@\n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = SocialMediaSerializer(many=True, required=False)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n-    def to_internal_value(self, data):\n-        \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n-        if data.get('social_media'):\n-            data['social_media'] = str_to_list(data, 'social_media')  # Convert if stringified\n-        return super().to_internal_value(data)\n+    # def to_internal_value(self, data):\n+    #     \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n+    #     if data.get('social_media'):\n+    #         data['social_media'] = str_to_list(data, 'social_media')  # Convert if stringified\n+    #     return super().to_internal_value(data)\n \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1740377366968,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n \n     # ManyToMany fields\n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n-    social_media = SocialMediaSerializer(many=True, required=False)\n+    # social_media = SocialMediaSerializer(many=True, required=False)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n     # def to_internal_value(self, data):\n     #     \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n"
                },
                {
                    "date": 1740388715947,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n-        social_media_data = request.data.get(\"social_media\", None) \n+        # social_media_data = request.data.get(\"social_media\", None) \n         facilities_ids = request.data.get(\"facilities\", [])\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n"
                },
                {
                    "date": 1740388734809,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n \n     # ManyToMany fields\n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     # social_media = SocialMediaSerializer(many=True, required=False)\n-    facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n+    # facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n     # def to_internal_value(self, data):\n     #     \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n     #     if data.get('social_media'):\n@@ -126,9 +126,9 @@\n         facilities_ids = request.data.get(\"facilities\", [])\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n-        validated_data.pop(\"social_media\", None)\n+        # validated_data.pop(\"social_media\", None)\n         validated_data.pop(\"facilities\", None)\n \n         # Create College instance\n         college = College.objects.create(**validated_data)\n"
                },
                {
                    "date": 1740388741236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,17 +95,17 @@\n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n # Serializer for College model\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     # ForeignKey fields\n-    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n-    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n-    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n-    step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n+    # district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n+    # affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n+    # college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n+    # step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n \n-    # ManyToMany fields\n-    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n-    # social_media = SocialMediaSerializer(many=True, required=False)\n-    # facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n+    # # ManyToMany fields\n+    # discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n+    # # social_media = SocialMediaSerializer(many=True, required=False)\n+    # # facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n     # def to_internal_value(self, data):\n     #     \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n     #     if data.get('social_media'):\n"
                },
                {
                    "date": 1740638096505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,9 @@\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n+        \n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n         # social_media_data = request.data.get(\"social_media\", None) \n"
                },
                {
                    "date": 1740646583838,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,22 +105,21 @@\n     # discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     # # social_media = SocialMediaSerializer(many=True, required=False)\n     # # facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n-    # def to_internal_value(self, data):\n-    #     \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n-    #     if data.get('social_media'):\n-    #         data['social_media'] = str_to_list(data, 'social_media')  # Convert if stringified\n-    #     return super().to_internal_value(data)\n+    def to_internal_value(self, data):\n+        \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n+        if data.get('social_media'):\n+            data['social_media'] = str_to_list(data, 'social_media')  # Convert if stringified\n+        return super().to_internal_value(data)\n \n     class Meta:\n         model = College\n         fields = '__all__'\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n-        \n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n         # social_media_data = request.data.get(\"social_media\", None) \n"
                },
                {
                    "date": 1740646601217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,10 +107,10 @@\n     # # facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n     def to_internal_value(self, data):\n         \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n-        if data.get('social_media'):\n-            data['social_media'] = str_to_list(data, 'social_media')  # Convert if stringified\n+        if data.get('discipline'):\n+            data['discipline'] = str_to_list(data, 'social_media')  # Convert if stringified\n         return super().to_internal_value(data)\n \n     class Meta:\n         model = College\n"
                },
                {
                    "date": 1740646624544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,13 +105,8 @@\n     # discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     # # social_media = SocialMediaSerializer(many=True, required=False)\n     # # facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n     \n-    def to_internal_value(self, data):\n-        \"\"\"Converts stringified social media JSON into a list before validation.\"\"\"\n-        if data.get('discipline'):\n-            data['discipline'] = str_to_list(data, 'social_media')  # Convert if stringified\n-        return super().to_internal_value(data)\n \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1740646629784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,20 +94,9 @@\n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n # Serializer for College model\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-    # ForeignKey fields\n-    # district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n-    # affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n-    # college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n-    # step_counter = serializers.PrimaryKeyRelatedField(queryset=FormStepProgress.objects.all(), required=False, allow_null=True)\n \n-    # # ManyToMany fields\n-    # discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n-    # # social_media = SocialMediaSerializer(many=True, required=False)\n-    # # facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True, required=False)\n-    \n-\n     class Meta:\n         model = College\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1740646687580,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,36 +125,48 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-        request = self.context.get(\"request\")\n+    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract ManyToMany relationships from the request\n-        discipline_ids = request.data.get(\"discipline\", None)\n-        social_media_data = request.data.get(\"social_media\", None)\n-        facilities_ids = request.data.get(\"facilities\", None)\n+    # Extract ManyToMany relationships from the request\n+    discipline_ids = request.data.get(\"discipline\", None)\n+    social_media_data = request.data.get(\"social_media\", None)\n+    facilities_ids = request.data.get(\"facilities\", None)\n \n-        # Remove ManyToMany fields from validated_data\n-        validated_data.pop(\"discipline\", None)\n-        # validated_data.pop(\"social_media\", None)\n-        validated_data.pop(\"facilities\", None)\n+    # Convert discipline_ids & facilities_ids to a list of integers (Fix for incorrect type)\n+    if discipline_ids:\n+        try:\n+            discipline_ids = [int(d_id) for d_id in discipline_ids]  # Ensure IDs are integers\n+        except ValueError:\n+            raise serializers.ValidationError({\"error\": \"Discipline IDs must be integers.\"})\n \n-        # Update ForeignKey fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    if facilities_ids:\n+        try:\n+            facilities_ids = [int(f_id) for f_id in facilities_ids]  # Ensure IDs are integers\n+        except ValueError:\n+            raise serializers.ValidationError({\"error\": \"Facility IDs must be integers.\"})\n \n-        # Update ManyToMany relationships\n-        if discipline_ids is not None:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-        # if social_media_ids is not None:\n-        #     instance.social_media.set(SocialMedia.objects.filter(id__in=social_media_ids))\n-        if facilities_ids is not None:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    # Remove ManyToMany fields from validated_data\n+    validated_data.pop(\"discipline\", None)\n+    validated_data.pop(\"facilities\", None)\n \n-        return instance\n+    # Update ForeignKey fields\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n \n+    # Update ManyToMany relationships\n+    if discipline_ids is not None:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+\n+    if facilities_ids is not None:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+\n+    return instance\n+\n+\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740646836811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,23 +130,20 @@\n     request = self.context.get(\"request\")\n \n     # Extract ManyToMany relationships from the request\n     discipline_ids = request.data.get(\"discipline\", None)\n-    social_media_data = request.data.get(\"social_media\", None)\n     facilities_ids = request.data.get(\"facilities\", None)\n \n-    # Convert discipline_ids & facilities_ids to a list of integers (Fix for incorrect type)\n-    if discipline_ids:\n-        try:\n-            discipline_ids = [int(d_id) for d_id in discipline_ids]  # Ensure IDs are integers\n-        except ValueError:\n-            raise serializers.ValidationError({\"error\": \"Discipline IDs must be integers.\"})\n+    # ✅ Handle both single ID and multiple IDs (comma-separated string)\n+    if isinstance(discipline_ids, str):  \n+        discipline_ids = [int(d_id) for d_id in discipline_ids.split(\",\") if d_id.strip().isdigit()]\n+    elif isinstance(discipline_ids, int):  # If a single integer is passed\n+        discipline_ids = [discipline_ids]\n \n-    if facilities_ids:\n-        try:\n-            facilities_ids = [int(f_id) for f_id in facilities_ids]  # Ensure IDs are integers\n-        except ValueError:\n-            raise serializers.ValidationError({\"error\": \"Facility IDs must be integers.\"})\n+    if isinstance(facilities_ids, str):  \n+        facilities_ids = [int(f_id) for f_id in facilities_ids.split(\",\") if f_id.strip().isdigit()]\n+    elif isinstance(facilities_ids, int):  # If a single integer is passed\n+        facilities_ids = [facilities_ids]\n \n     # Remove ManyToMany fields from validated_data\n     validated_data.pop(\"discipline\", None)\n     validated_data.pop(\"facilities\", None)\n@@ -155,18 +152,19 @@\n     for attr, value in validated_data.items():\n         setattr(instance, attr, value)\n     instance.save()\n \n-    # Update ManyToMany relationships\n-    if discipline_ids is not None:\n+    # ✅ Update ManyToMany relationships if valid IDs exist\n+    if discipline_ids:\n         instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-    if facilities_ids is not None:\n+    if facilities_ids:\n         instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n     return instance\n \n \n+\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740647019291,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,23 +128,15 @@\n     def update(self, instance, validated_data):\n     \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n     request = self.context.get(\"request\")\n \n-    # Extract ManyToMany relationships from the request\n-    discipline_ids = request.data.get(\"discipline\", None)\n-    facilities_ids = request.data.get(\"facilities\", None)\n+    # Convert discipline and facilities to lists if needed\n+    request_data = str_to_list(request.data, \"discipline\")\n+    request_data = str_to_list(request_data, \"facilities\")\n \n-    # ✅ Handle both single ID and multiple IDs (comma-separated string)\n-    if isinstance(discipline_ids, str):  \n-        discipline_ids = [int(d_id) for d_id in discipline_ids.split(\",\") if d_id.strip().isdigit()]\n-    elif isinstance(discipline_ids, int):  # If a single integer is passed\n-        discipline_ids = [discipline_ids]\n+    discipline_ids = request_data.get(\"discipline\", None)\n+    facilities_ids = request_data.get(\"facilities\", None)\n \n-    if isinstance(facilities_ids, str):  \n-        facilities_ids = [int(f_id) for f_id in facilities_ids.split(\",\") if f_id.strip().isdigit()]\n-    elif isinstance(facilities_ids, int):  # If a single integer is passed\n-        facilities_ids = [facilities_ids]\n-\n     # Remove ManyToMany fields from validated_data\n     validated_data.pop(\"discipline\", None)\n     validated_data.pop(\"facilities\", None)\n \n"
                },
                {
                    "date": 1740647037727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,23 +4,31 @@\n from formprogress.models import FormStepProgress\n import ast\n \n \n-def str_to_list(data,value_to_convert):\n+def str_to_list(data, value_to_convert):\n+    \"\"\"\n+    Converts a string representation of a list (e.g., \"7,13,8,6\") into an actual list [7, 13, 8, 6].\n+    Also handles single integer values correctly.\n+    \"\"\"\n     try:\n-        mutable_data = data.dict()\n+        mutable_data = data.dict()  # Ensure it's a mutable dictionary\n     except Exception:\n         mutable_data = data\n-    value_to_convert_data = mutable_data[value_to_convert]\n-    if isinstance(value_to_convert_data,list):# type(value_to_convert_data) == list:\n \n+    value_to_convert_data = mutable_data.get(value_to_convert)\n+\n+    # If already a list, return as-is\n+    if isinstance(value_to_convert_data, list):\n         return mutable_data\n+\n     try:\n-        variations = ast.literal_eval(value_to_convert_data)\n+        # Convert comma-separated string into a list of integers\n+        variations = [int(v.strip()) for v in value_to_convert_data.split(\",\") if v.strip().isdigit()]\n         mutable_data[value_to_convert] = variations\n         return mutable_data\n     except ValueError as e:\n-        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+        raise serializers.ValidationError({f\"{value_to_convert}\": \"Invalid format. Expected a list or comma-separated integers.\"}) from e\n     \n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -125,35 +133,35 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Convert discipline and facilities to lists if needed\n-    request_data = str_to_list(request.data, \"discipline\")\n-    request_data = str_to_list(request_data, \"facilities\")\n+        # Convert discipline and facilities to lists if needed\n+        request_data = str_to_list(request.data, \"discipline\")\n+        request_data = str_to_list(request_data, \"facilities\")\n \n-    discipline_ids = request_data.get(\"discipline\", None)\n-    facilities_ids = request_data.get(\"facilities\", None)\n+        discipline_ids = request_data.get(\"discipline\", None)\n+        facilities_ids = request_data.get(\"facilities\", None)\n \n-    # Remove ManyToMany fields from validated_data\n-    validated_data.pop(\"discipline\", None)\n-    validated_data.pop(\"facilities\", None)\n+        # Remove ManyToMany fields from validated_data\n+        validated_data.pop(\"discipline\", None)\n+        validated_data.pop(\"facilities\", None)\n \n-    # Update ForeignKey fields\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update ForeignKey fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    # ✅ Update ManyToMany relationships if valid IDs exist\n-    if discipline_ids:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        # ✅ Update ManyToMany relationships if valid IDs exist\n+        if discipline_ids:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-    if facilities_ids:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        if facilities_ids:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n+        return instance\n \n \n \n     def to_representation(self, instance):\n"
                },
                {
                    "date": 1740647158522,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,31 +4,26 @@\n from formprogress.models import FormStepProgress\n import ast\n \n \n-def str_to_list(data, value_to_convert):\n+def str_to_list(value):\n     \"\"\"\n-    Converts a string representation of a list (e.g., \"7,13,8,6\") into an actual list [7, 13, 8, 6].\n-    Also handles single integer values correctly.\n+    Converts a string like \"7,13,8,6\" into a list of integers [7, 13, 8, 6].\n+    Handles single integer values and already formatted lists.\n     \"\"\"\n-    try:\n-        mutable_data = data.dict()  # Ensure it's a mutable dictionary\n-    except Exception:\n-        mutable_data = data\n+    if isinstance(value, list):  # If it's already a list, return as is\n+        return value\n \n-    value_to_convert_data = mutable_data.get(value_to_convert)\n+    if isinstance(value, int):  # If it's a single integer, wrap it in a list\n+        return [value]\n \n-    # If already a list, return as-is\n-    if isinstance(value_to_convert_data, list):\n-        return mutable_data\n+    if isinstance(value, str):  # If it's a comma-separated string, convert it to a list of integers\n+        try:\n+            return [int(v.strip()) for v in value.split(\",\") if v.strip().isdigit()]\n+        except ValueError:\n+            raise serializers.ValidationError(\"Invalid format. Expected a list or comma-separated integers.\")\n \n-    try:\n-        # Convert comma-separated string into a list of integers\n-        variations = [int(v.strip()) for v in value_to_convert_data.split(\",\") if v.strip().isdigit()]\n-        mutable_data[value_to_convert] = variations\n-        return mutable_data\n-    except ValueError as e:\n-        raise serializers.ValidationError({f\"{value_to_convert}\": \"Invalid format. Expected a list or comma-separated integers.\"}) from e\n+    raise serializers.ValidationError(\"Invalid format. Expected an integer, list, or comma-separated string.\")\n     \n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1740647173177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -101,8 +101,10 @@\n \n     class Meta:\n         model = College\n         fields = '__all__'\n+        \n+        \n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n"
                },
                {
                    "date": 1740647178844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n         \n-        \n+        def to\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n"
                },
                {
                    "date": 1740647184791,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n         \n-        def to\n+        def to_internal_value(self, data):\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n"
                },
                {
                    "date": 1740647209827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,22 @@\n         model = College\n         fields = '__all__'\n         \n         def to_internal_value(self, data):\n+        \"\"\"\n+        Ensures ManyToMany fields are properly formatted before validation.\n+        \"\"\"\n+        data = super().to_internal_value(data)  # Convert basic fields first\n \n+        # Convert discipline and facilities to a list if needed\n+        if \"discipline\" in self.initial_data:\n+            data[\"discipline\"] = str_to_list(self.initial_data[\"discipline\"])\n+\n+        if \"facilities\" in self.initial_data:\n+            data[\"facilities\"] = str_to_list(self.initial_data[\"facilities\"])\n+\n+        return data\n+\n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n"
                },
                {
                    "date": 1740647277808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,27 +4,58 @@\n from formprogress.models import FormStepProgress\n import ast\n \n \n-def str_to_list(value):\n-    \"\"\"\n-    Converts a string like \"7,13,8,6\" into a list of integers [7, 13, 8, 6].\n-    Handles single integer values and already formatted lists.\n-    \"\"\"\n-    if isinstance(value, list):  # If it's already a list, return as is\n-        return value\n+def str_to_list(data, value_to_convert):\n+    try:\n+        mutable_data = data.dict()  # Convert to dictionary if possible\n+    except AttributeError:\n+        mutable_data = data  # Already a dictionary\n \n-    if isinstance(value, int):  # If it's a single integer, wrap it in a list\n-        return [value]\n+    value_to_convert_data = mutable_data.get(value_to_convert)\n \n-    if isinstance(value, str):  # If it's a comma-separated string, convert it to a list of integers\n-        try:\n-            return [int(v.strip()) for v in value.split(\",\") if v.strip().isdigit()]\n-        except ValueError:\n-            raise serializers.ValidationError(\"Invalid format. Expected a list or comma-separated integers.\")\n+    # If it's already a list, return as is\n+    if isinstance(value_to_convert_data, list):\n+        return mutable_data\n \n-    raise serializers.ValidationError(\"Invalid format. Expected an integer, list, or comma-separated string.\")\n-    \n+    # Handle binary or file data (leave as is)\n+    if isinstance(value_to_convert_data, bytes):\n+        return mutable_data\n+\n+    # If it's an int, float, or bool, wrap it in a list\n+    if isinstance(value_to_convert_data, (int, float, bool)):\n+        mutable_data[value_to_convert] = [value_to_convert_data]\n+        return mutable_data\n+\n+    # If it's None, convert to an empty list\n+    if value_to_convert_data is None:\n+        mutable_data[value_to_convert] = []\n+        return mutable_data\n+\n+    # Handle comma-separated values (e.g., \"4,5\")\n+    if isinstance(value_to_convert_data, str) and \",\" in value_to_convert_data:\n+        parsed_list = [item.strip() for item in value_to_convert_data.split(\",\")]\n+        # Convert to integers if possible\n+        mutable_data[value_to_convert] = [int(item) if item.isdigit() else item for item in parsed_list]\n+        return mutable_data\n+\n+    # If it's a string, try parsing it as a list\n+    try:\n+        parsed_value = ast.literal_eval(value_to_convert_data)\n+\n+        # Ensure parsed result is a list\n+        if isinstance(parsed_value, list):\n+            mutable_data[value_to_convert] = parsed_value\n+        else:\n+            # Convert string (that is not a list) into a single-item list\n+            mutable_data[value_to_convert] = [value_to_convert_data]\n+\n+        return mutable_data\n+\n+    except (ValueError, SyntaxError):\n+        # If parsing fails, wrap it in a list instead\n+        mutable_data[value_to_convert] = [value_to_convert_data]\n+        return mutable_data\n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n@@ -103,22 +134,12 @@\n         model = College\n         fields = '__all__'\n         \n         def to_internal_value(self, data):\n-        \"\"\"\n-        Ensures ManyToMany fields are properly formatted before validation.\n-        \"\"\"\n-        data = super().to_internal_value(data)  # Convert basic fields first\n+            if isinstance(data, str):\n+                data = ast.literal_eval(data)\n+            return super().to_internal_value(data)\n \n-        # Convert discipline and facilities to a list if needed\n-        if \"discipline\" in self.initial_data:\n-            data[\"discipline\"] = str_to_list(self.initial_data[\"discipline\"])\n-\n-        if \"facilities\" in self.initial_data:\n-            data[\"facilities\"] = str_to_list(self.initial_data[\"facilities\"])\n-\n-        return data\n-\n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n"
                },
                {
                    "date": 1740647305133,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,11 +134,11 @@\n         model = College\n         fields = '__all__'\n         \n         def to_internal_value(self, data):\n-            if isinstance(data, str):\n-                data = ast.literal_eval(data)\n-            return super().to_internal_value(data)\n+        \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n+        data = str_to_list(data, 'certification')  # Convert string to list for certification\n+        return super().to_internal_value(data)\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n"
                },
                {
                    "date": 1740647314466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,11 +134,11 @@\n         model = College\n         fields = '__all__'\n         \n         def to_internal_value(self, data):\n-        \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n-        data = str_to_list(data, 'certification')  # Convert string to list for certification\n-        return super().to_internal_value(data)\n+            \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n+            data = str_to_list(data, 'discipline')  # Convert string to list for certification\n+            return super().to_internal_value(data)\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n"
                },
                {
                    "date": 1740647320515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,8 +136,9 @@\n         \n         def to_internal_value(self, data):\n             \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n             data = str_to_list(data, 'discipline')  # Convert string to list for certification\n+            data = str_to_list(data, 'social_media')  # Convert string to list for social\n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n"
                },
                {
                    "date": 1740647326434,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n         \n         def to_internal_value(self, data):\n             \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n             data = str_to_list(data, 'discipline')  # Convert string to list for certification\n-            data = str_to_list(data, 'social_media')  # Convert string to list for social\n+            data = str_to_list(data, 'facilities')  # Convert string to list for social\n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n"
                },
                {
                    "date": 1740647337927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,9 @@\n         \n         def to_internal_value(self, data):\n             \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n             data = str_to_list(data, 'discipline')  # Convert string to list for certification\n-            data = str_to_list(data, 'facilities')  # Convert string to list for social\n+            data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n"
                },
                {
                    "date": 1740647419864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,38 +165,32 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-        request = self.context.get(\"request\")\n+    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Convert discipline and facilities to lists if needed\n-        request_data = str_to_list(request.data, \"discipline\")\n-        request_data = str_to_list(request_data, \"facilities\")\n+    # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n+    discipline_ids = validated_data.pop(\"discipline\", None)\n+    facilities_ids = validated_data.pop(\"facilities\", None)\n \n-        discipline_ids = request_data.get(\"discipline\", None)\n-        facilities_ids = request_data.get(\"facilities\", None)\n+    # Update ForeignKey fields\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n \n-        # Remove ManyToMany fields from validated_data\n-        validated_data.pop(\"discipline\", None)\n-        validated_data.pop(\"facilities\", None)\n+    # ✅ Update ManyToMany relationships if valid IDs exist\n+    if discipline_ids:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-        # Update ForeignKey fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    if facilities_ids:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        # ✅ Update ManyToMany relationships if valid IDs exist\n-        if discipline_ids:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    return instance\n \n-        if facilities_ids:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return instance\n \n \n-\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740647425245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,28 +165,28 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n-    discipline_ids = validated_data.pop(\"discipline\", None)\n-    facilities_ids = validated_data.pop(\"facilities\", None)\n+        # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n+        discipline_ids = validated_data.pop(\"discipline\", None)\n+        facilities_ids = validated_data.pop(\"facilities\", None)\n \n-    # Update ForeignKey fields\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update ForeignKey fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    # ✅ Update ManyToMany relationships if valid IDs exist\n-    if discipline_ids:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        # ✅ Update ManyToMany relationships if valid IDs exist\n+        if discipline_ids:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-    if facilities_ids:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        if facilities_ids:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n+        return instance\n \n \n \n \n"
                },
                {
                    "date": 1740647467562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n-        discipline_ids = validated_data.pop(\"discipline\", None)\n+        discipline_ids = request(\"discipline\", None)\n         facilities_ids = validated_data.pop(\"facilities\", None)\n \n         # Update ForeignKey fields\n         for attr, value in validated_data.items():\n"
                },
                {
                    "date": 1740647473660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -169,9 +169,9 @@\n         \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n-        discipline_ids = request(\"discipline\", None)\n+        discipline_ids = request.data.get(\"discipline\", None)\n         facilities_ids = validated_data.pop(\"facilities\", None)\n \n         # Update ForeignKey fields\n         for attr, value in validated_data.items():\n"
                },
                {
                    "date": 1740647481392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n         discipline_ids = request.data.get(\"discipline\", None)\n-        facilities_ids = validated_data.pop(\"facilities\", None)\n+        facilities_ids = request.data.get(\"facilities\", None)\n \n         # Update ForeignKey fields\n         for attr, value in validated_data.items():\n             setattr(instance, attr, value)\n"
                },
                {
                    "date": 1740647554217,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,32 +165,40 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-        request = self.context.get(\"request\")\n+    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n-        discipline_ids = request.data.get(\"discipline\", None)\n-        facilities_ids = request.data.get(\"facilities\", None)\n+    # Extract ManyToMany relationships directly from request.data\n+    discipline_ids = request.data.get(\"discipline\", None)\n+    facilities_ids = request.data.get(\"facilities\", None)\n \n-        # Update ForeignKey fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    # Convert to list if needed (Handles single ID, comma-separated, and lists)\n+    if discipline_ids:\n+        discipline_ids = str_to_list(discipline_ids)\n \n-        # ✅ Update ManyToMany relationships if valid IDs exist\n-        if discipline_ids:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    if facilities_ids:\n+        facilities_ids = str_to_list(facilities_ids)\n \n-        if facilities_ids:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    # Update ForeignKey fields\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n \n-        return instance\n+    # ✅ Update ManyToMany relationships if valid IDs exist\n+    if discipline_ids:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n+    if facilities_ids:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n+    return instance\n \n \n+\n+\n+\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740647560054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,35 +165,35 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract ManyToMany relationships directly from request.data\n-    discipline_ids = request.data.get(\"discipline\", None)\n-    facilities_ids = request.data.get(\"facilities\", None)\n+        # Extract ManyToMany relationships directly from request.data\n+        discipline_ids = request.data.get(\"discipline\", None)\n+        facilities_ids = request.data.get(\"facilities\", None)\n \n-    # Convert to list if needed (Handles single ID, comma-separated, and lists)\n-    if discipline_ids:\n-        discipline_ids = str_to_list(discipline_ids)\n+        # Convert to list if needed (Handles single ID, comma-separated, and lists)\n+        if discipline_ids:\n+            discipline_ids = str_to_list(discipline_ids)\n \n-    if facilities_ids:\n-        facilities_ids = str_to_list(facilities_ids)\n+        if facilities_ids:\n+            facilities_ids = str_to_list(facilities_ids)\n \n-    # Update ForeignKey fields\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update ForeignKey fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    # ✅ Update ManyToMany relationships if valid IDs exist\n-    if discipline_ids:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        # ✅ Update ManyToMany relationships if valid IDs exist\n+        if discipline_ids:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-    if facilities_ids:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        if facilities_ids:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n+        return instance\n \n \n \n \n"
                },
                {
                    "date": 1740647592398,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,8 +170,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships directly from request.data\n         discipline_ids = request.data.get(\"discipline\", None)\n+        pr\n         facilities_ids = request.data.get(\"facilities\", None)\n \n         # Convert to list if needed (Handles single ID, comma-separated, and lists)\n         if discipline_ids:\n@@ -194,11 +195,8 @@\n \n         return instance\n \n \n-\n-\n-\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740647597682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,9 +170,9 @@\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships directly from request.data\n         discipline_ids = request.data.get(\"discipline\", None)\n-        pr\n+        print(discipline_ids,\"\")\n         facilities_ids = request.data.get(\"facilities\", None)\n \n         # Convert to list if needed (Handles single ID, comma-separated, and lists)\n         if discipline_ids:\n"
                },
                {
                    "date": 1740647654951,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,14 +165,15 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n+        print()\n         \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships directly from request.data\n         discipline_ids = request.data.get(\"discipline\", None)\n-        print(discipline_ids,\"\")\n+        print(discipline_ids,\"whfwrhfwhihirhiwrhifhwihfwiohfiowrhfiowrhjfiorwh\")\n         facilities_ids = request.data.get(\"facilities\", None)\n \n         # Convert to list if needed (Handles single ID, comma-separated, and lists)\n         if discipline_ids:\n"
                },
                {
                    "date": 1740647692766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,8 +140,9 @@\n             data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n+        pr\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n@@ -165,9 +166,9 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        print()\n+        print('wgeuygwfuygwrygw')\n         \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships directly from request.data\n"
                },
                {
                    "date": 1740647703556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -140,9 +140,9 @@\n             data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n-        pr\n+        print(\"line 1344443333333\")\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n"
                },
                {
                    "date": 1740647752334,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n         \n-        def to_internal_value(self, data):\n+    def to_internal_value(self, data):\n             \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n             data = str_to_list(data, 'discipline')  # Convert string to list for certification\n             data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n"
                },
                {
                    "date": 1740647825932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,9 @@\n         model = College\n         fields = '__all__'\n         \n     def to_internal_value(self, data):\n-            \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n+        \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n             data = str_to_list(data, 'discipline')  # Convert string to list for certification\n             data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n \n"
                },
                {
                    "date": 1740647888062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n         fields = '__all__'\n         \n     def to_internal_value(self, data):\n         \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n-            data = str_to_list(data, 'discipline')  # Convert string to list for certification\n+        data = str_to_list(data, 'discipline')  # Convert string to list for certification\n             data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n"
                },
                {
                    "date": 1740647896021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,16 +133,15 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n         \n-    def to_internal_value(self, data):\n-        \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n-        data = str_to_list(data, 'discipline')  # Convert string to list for certification\n+        def to_internal_value(self, data):\n+            \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n+            data = str_to_list(data, 'discipline')  # Convert string to list for certification\n             data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n-        print(\"line 1344443333333\")\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n         request = self.context.get(\"request\")\n \n         # Extract ManyToMany relationships from the request\n@@ -166,39 +165,40 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        print('wgeuygwfuygwrygw')\n-        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-        request = self.context.get(\"request\")\n+    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract ManyToMany relationships directly from request.data\n-        discipline_ids = request.data.get(\"discipline\", None)\n-        print(discipline_ids,\"whfwrhfwhihirhiwrhifhwihfwiohfiowrhfiowrhjfiorwh\")\n-        facilities_ids = request.data.get(\"facilities\", None)\n+    # Extract ManyToMany relationships directly from request.data\n+    discipline_ids = request.data.get(\"discipline\", None)\n+    facilities_ids = request.data.get(\"facilities\", None)\n \n-        # Convert to list if needed (Handles single ID, comma-separated, and lists)\n-        if discipline_ids:\n-            discipline_ids = str_to_list(discipline_ids)\n+    # Convert to list if needed (Handles single ID, comma-separated, and lists)\n+    if discipline_ids:\n+        discipline_ids = str_to_list(discipline_ids)\n \n-        if facilities_ids:\n-            facilities_ids = str_to_list(facilities_ids)\n+    if facilities_ids:\n+        facilities_ids = str_to_list(facilities_ids)\n \n-        # Update ForeignKey fields\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    # Update ForeignKey fields\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n \n-        # ✅ Update ManyToMany relationships if valid IDs exist\n-        if discipline_ids:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    # ✅ Update ManyToMany relationships if valid IDs exist\n+    if discipline_ids:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-        if facilities_ids:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    if facilities_ids:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return instance\n+    return instance\n \n \n+\n+\n+\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740647907505,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -133,9 +133,9 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n         \n-        def to_internal_value(self, data):\n+    def to_internal_value(self, data):\n             \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n             data = str_to_list(data, 'discipline')  # Convert string to list for certification\n             data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n@@ -165,40 +165,32 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract ManyToMany relationships directly from request.data\n-    discipline_ids = request.data.get(\"discipline\", None)\n-    facilities_ids = request.data.get(\"facilities\", None)\n+        # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n+        discipline_ids = request.data.get(\"discipline\", None)\n+        facilities_ids = request.data.get(\"facilities\", None)\n \n-    # Convert to list if needed (Handles single ID, comma-separated, and lists)\n-    if discipline_ids:\n-        discipline_ids = str_to_list(discipline_ids)\n+        # Update ForeignKey fields\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    if facilities_ids:\n-        facilities_ids = str_to_list(facilities_ids)\n+        # ✅ Update ManyToMany relationships if valid IDs exist\n+        if discipline_ids:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-    # Update ForeignKey fields\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        if facilities_ids:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    # ✅ Update ManyToMany relationships if valid IDs exist\n-    if discipline_ids:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        return instance\n \n-    if facilities_ids:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n \n \n-\n-\n-\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740648067541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -165,32 +165,36 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-        request = self.context.get(\"request\")\n+    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n-        discipline_ids = request.data.get(\"discipline\", None)\n-        facilities_ids = request.data.get(\"facilities\", None)\n+    # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n+    discipline_ids = request.data.get(\"discipline\", None)\n+    facilities_ids = request.data.get(\"facilities\", None)\n \n-        # Update ForeignKey fields\n-        for attr, value in validated_data.items():\n+    # ✅ Exclude ManyToMany fields from direct assignment\n+    many_to_many_fields = {\"discipline\", \"facilities\"}\n+\n+    for attr, value in validated_data.items():\n+        if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n             setattr(instance, attr, value)\n-        instance.save()\n+    instance.save()\n \n-        # ✅ Update ManyToMany relationships if valid IDs exist\n-        if discipline_ids:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    # ✅ Update ManyToMany relationships separately\n+    if discipline_ids is not None:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-        if facilities_ids:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    if facilities_ids is not None:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-        return instance\n+    return instance\n \n \n \n \n+\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740648214064,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,10 @@\n from formprogress.models import FormStepProgress\n import ast\n \n \n+import ast\n+\n def str_to_list(data, value_to_convert):\n     try:\n         mutable_data = data.dict()  # Convert to dictionary if possible\n     except AttributeError:\n@@ -30,13 +32,16 @@\n     if value_to_convert_data is None:\n         mutable_data[value_to_convert] = []\n         return mutable_data\n \n-    # Handle comma-separated values (e.g., \"4,5\")\n+    # Handle comma-separated values (e.g., \"4,5,\" -> [4, 5])\n     if isinstance(value_to_convert_data, str) and \",\" in value_to_convert_data:\n-        parsed_list = [item.strip() for item in value_to_convert_data.split(\",\")]\n-        # Convert to integers if possible\n-        mutable_data[value_to_convert] = [int(item) if item.isdigit() else item for item in parsed_list]\n+        parsed_list = [\n+            item.strip() for item in value_to_convert_data.split(\",\") if item.strip().isdigit()\n+        ]  # ✅ Remove empty strings and ensure only digits\n+\n+        # Convert to integers\n+        mutable_data[value_to_convert] = [int(item) for item in parsed_list]\n         return mutable_data\n \n     # If it's a string, try parsing it as a list\n     try:\n@@ -54,8 +59,9 @@\n     except (ValueError, SyntaxError):\n         # If parsing fails, wrap it in a list instead\n         mutable_data[value_to_convert] = [value_to_convert_data]\n         return mutable_data\n+\n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n@@ -165,31 +171,31 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n-    discipline_ids = request.data.get(\"discipline\", None)\n-    facilities_ids = request.data.get(\"facilities\", None)\n+        # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n+        discipline_ids = request.data.get(\"discipline\", None)\n+        facilities_ids = request.data.get(\"facilities\", None)\n \n-    # ✅ Exclude ManyToMany fields from direct assignment\n-    many_to_many_fields = {\"discipline\", \"facilities\"}\n+        # ✅ Exclude ManyToMany fields from direct assignment\n+        many_to_many_fields = {\"discipline\", \"facilities\"}\n \n-    for attr, value in validated_data.items():\n-        if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n-            setattr(instance, attr, value)\n-    instance.save()\n+        for attr, value in validated_data.items():\n+            if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n+                setattr(instance, attr, value)\n+        instance.save()\n \n-    # ✅ Update ManyToMany relationships separately\n-    if discipline_ids is not None:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        # ✅ Update ManyToMany relationships separately\n+        if discipline_ids is not None:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-    if facilities_ids is not None:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        if facilities_ids is not None:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n+        return instance\n \n \n \n \n"
                },
                {
                    "date": 1740648221046,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,8 @@\n from socialmedia.models import SocialMedia,CollegeSocialMedia\n from formprogress.models import FormStepProgress\n import ast\n \n-\n-import ast\n-\n def str_to_list(data, value_to_convert):\n     try:\n         mutable_data = data.dict()  # Convert to dictionary if possible\n     except AttributeError:\n"
                },
                {
                    "date": 1740648239358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,36 +168,40 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-        request = self.context.get(\"request\")\n+    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+    request = self.context.get(\"request\")\n \n-        # Extract ManyToMany relationships from validated_data (already converted by to_internal_value)\n-        discipline_ids = request.data.get(\"discipline\", None)\n-        facilities_ids = request.data.get(\"facilities\", None)\n+    # ✅ Ensure discipline and facilities are properly formatted\n+    request_data = str_to_list(request.data, \"discipline\")\n+    request_data = str_to_list(request_data, \"facilities\")\n \n-        # ✅ Exclude ManyToMany fields from direct assignment\n-        many_to_many_fields = {\"discipline\", \"facilities\"}\n+    discipline_ids = request_data.get(\"discipline\", [])\n+    facilities_ids = request_data.get(\"facilities\", [])\n \n-        for attr, value in validated_data.items():\n-            if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n-                setattr(instance, attr, value)\n-        instance.save()\n+    # ✅ Exclude ManyToMany fields from direct assignment\n+    many_to_many_fields = {\"discipline\", \"facilities\"}\n \n-        # ✅ Update ManyToMany relationships separately\n-        if discipline_ids is not None:\n-            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+    for attr, value in validated_data.items():\n+        if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n+            setattr(instance, attr, value)\n+    instance.save()\n \n-        if facilities_ids is not None:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+    # ✅ Update ManyToMany relationships separately\n+    if discipline_ids:\n+        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-        return instance\n+    if facilities_ids:\n+        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n+    return instance\n \n \n \n \n+\n+\n     def to_representation(self, instance):\n         \"\"\"Customize the response to include full objects for related fields.\"\"\"\n         response = super().to_representation(instance)\n         # response[\"slug\"] = instance.slug\n"
                },
                {
                    "date": 1740648441729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n # Nested serializer for Facility\n class FacilitySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Facility\n-        fields = '__all__'\n+        fields = []\n \n \n # Serializer for listing college details (basic view)\n class CollegeListSerializers(serializers.ModelSerializer):\n@@ -168,34 +168,34 @@\n \n         return college\n \n     def update(self, instance, validated_data):\n-    \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n-    request = self.context.get(\"request\")\n+        \"\"\"Handles updating a college and returns full objects in response.\"\"\"\n+        request = self.context.get(\"request\")\n \n-    # ✅ Ensure discipline and facilities are properly formatted\n-    request_data = str_to_list(request.data, \"discipline\")\n-    request_data = str_to_list(request_data, \"facilities\")\n+        # ✅ Ensure discipline and facilities are properly formatted\n+        request_data = str_to_list(request.data, \"discipline\")\n+        request_data = str_to_list(request_data, \"facilities\")\n \n-    discipline_ids = request_data.get(\"discipline\", [])\n-    facilities_ids = request_data.get(\"facilities\", [])\n+        discipline_ids = request_data.get(\"discipline\", [])\n+        facilities_ids = request_data.get(\"facilities\", [])\n \n-    # ✅ Exclude ManyToMany fields from direct assignment\n-    many_to_many_fields = {\"discipline\", \"facilities\"}\n+        # ✅ Exclude ManyToMany fields from direct assignment\n+        many_to_many_fields = {\"discipline\", \"facilities\"}\n \n-    for attr, value in validated_data.items():\n-        if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n-            setattr(instance, attr, value)\n-    instance.save()\n+        for attr, value in validated_data.items():\n+            if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n+                setattr(instance, attr, value)\n+        instance.save()\n \n-    # ✅ Update ManyToMany relationships separately\n-    if discipline_ids:\n-        instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n+        # ✅ Update ManyToMany relationships separately\n+        if discipline_ids:\n+            instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-    if facilities_ids:\n-        instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        if facilities_ids:\n+            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n-    return instance\n+        return instance\n \n \n \n \n"
                },
                {
                    "date": 1740648448613,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n # Nested serializer for Facility\n class FacilitySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Facility\n-        fields = []\n+        fields = ['id', 'name','is']\n \n \n # Serializer for listing college details (basic view)\n class CollegeListSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1740650147096,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n # Nested serializer for Facility\n class FacilitySerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Facility\n-        fields = ['id', 'name','is']\n+        fields = ['id', 'name','is_show']\n \n \n # Serializer for listing college details (basic view)\n class CollegeListSerializers(serializers.ModelSerializer):\n@@ -173,9 +173,9 @@\n         request = self.context.get(\"request\")\n \n         # ✅ Ensure discipline and facilities are properly formatted\n         request_data = str_to_list(request.data, \"discipline\")\n-        request_data = str_to_list(request_data, \"facilities\")\n+        # request_data = str_to_list(request_data, \"facilities\")\n \n         discipline_ids = request_data.get(\"discipline\", [])\n         facilities_ids = request_data.get(\"facilities\", [])\n \n"
                },
                {
                    "date": 1740650153991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -176,12 +176,12 @@\n         request_data = str_to_list(request.data, \"discipline\")\n         # request_data = str_to_list(request_data, \"facilities\")\n \n         discipline_ids = request_data.get(\"discipline\", [])\n-        facilities_ids = request_data.get(\"facilities\", [])\n+        # facilities_ids = request_data.get(\"facilities\", [])\n \n         # ✅ Exclude ManyToMany fields from direct assignment\n-        many_to_many_fields = {\"discipline\", \"facilities\"}\n+        many_to_many_fields = {\"discipline\"}\n \n         for attr, value in validated_data.items():\n             if attr not in many_to_many_fields:  # ✅ Skip ManyToMany fields\n                 setattr(instance, attr, value)\n"
                },
                {
                    "date": 1740650159619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -190,10 +190,10 @@\n         # ✅ Update ManyToMany relationships separately\n         if discipline_ids:\n             instance.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n \n-        if facilities_ids:\n-            instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        # if facilities_ids:\n+        #     instance.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n         return instance\n \n \n"
                },
                {
                    "date": 1740650167607,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -107,9 +107,9 @@\n     affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n     college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n     discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n-    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    # facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n \n     class Meta:\n         model = College\n         fields = '__all__'\n@@ -216,9 +216,9 @@\n \n         # Replace IDs with full nested objects for many-to-many fields\n         response[\"discipline\"] = DisciplineSerializer(instance.discipline.all(), many=True).data\n         # response[\"social_media\"] = SocialMediaSerializer(instance.social_media.all(), many=True).data\n-        response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n+        # response[\"facilities\"] = FacilitySerializer(instance.facilities.all(), many=True).data\n \n         return response\n \n \n"
                },
                {
                    "date": 1740650174503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n     college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n     discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n-    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    # facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n \n     class Meta:\n         model = College\n         fields = '__all__'\n@@ -139,9 +139,9 @@\n         \n     def to_internal_value(self, data):\n             \"\"\"Convert certification input from string to list using str_to_list.\"\"\"\n             data = str_to_list(data, 'discipline')  # Convert string to list for certification\n-            data = str_to_list(data, 'facilities')  \n+            # data = str_to_list(data, 'facilities')  \n             return super().to_internal_value(data)\n \n     def create(self, validated_data):\n         \"\"\"Handles creating a college and returns full objects in response.\"\"\"\n"
                },
                {
                    "date": 1740650179805,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -149,14 +149,14 @@\n \n         # Extract ManyToMany relationships from the request\n         discipline_ids = request.data.get(\"discipline\", [])\n         # social_media_data = request.data.get(\"social_media\", None) \n-        facilities_ids = request.data.get(\"facilities\", [])\n+        # facilities_ids = request.data.get(\"facilities\", [])\n \n         # Remove ManyToMany fields from validated_data\n         validated_data.pop(\"discipline\", None)\n         # validated_data.pop(\"social_media\", None)\n-        validated_data.pop(\"facilities\", None)\n+        # validated_data.pop(\"facilities\", None)\n \n         # Create College instance\n         college = College.objects.create(**validated_data)\n \n"
                },
                {
                    "date": 1740650254075,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from ..models import College, District, Affiliation, CollegeType, Discipline, Facility\n+from ..models import College, District, Affiliation, CollegeType, Discipline\n from socialmedia.models import SocialMedia,CollegeSocialMedia\n from formprogress.models import FormStepProgress\n import ast\n \n@@ -162,10 +162,10 @@\n \n         # Set ManyToMany relationships\n         if discipline_ids:\n             college.discipline.set(Discipline.objects.filter(id__in=discipline_ids))\n-        if facilities_ids:\n-            college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n+        # if facilities_ids:\n+        #     college.facilities.set(Facility.objects.filter(id__in=facilities_ids))\n \n         return college\n \n     def update(self, instance, validated_data):\n"
                },
                {
                    "date": 1740650262924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,13 @@\n     class Meta:\n         model = CollegeSocialMedia\n         fields = '__all__'\n \n-# Nested serializer for Facility\n-class FacilitySerializer(serializers.ModelSerializer):\n-    class Meta:\n-        model = Facility\n-        fields = ['id', 'name','is_show']\n+# # Nested serializer for Facility\n+# class FacilitySerializer(serializers.ModelSerializer):\n+#     class Meta:\n+#         model = Facility\n+#         fields = ['id', 'name','is_show']\n \n \n # Serializer for listing college details (basic view)\n class CollegeListSerializers(serializers.ModelSerializer):\n"
                }
            ],
            "date": 1733477116456,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n\n# Nested serializer for District\nclass DistrictSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = District\n        fields = '__all__'\n\n# Nested serializer for Affiliation\nclass AffiliationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Affiliation\n        fields = '__all__'\n\n# Nested serializer for CollegeType\nclass CollegeTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeType\n        fields = '__all__'\n\n# Nested serializer for Discipline\nclass DisciplineSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Discipline\n        fields = '__all__'\n\n# Nested serializer for SocialMedia\nclass SocialMediaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SocialMedia\n        fields = '__all__'\n\n# Nested serializer for Facility\nclass FacilitySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Facility\n        fields = '__all__'\n\n\n# Serializer for listing college details (basic view)\nclass CollegeListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = College\n        fields = '__all__'\n\n\n# Serializer for retrieving complete college details (detailed view)\nclass CollegeRetrieveSerializers(serializers.ModelSerializer):\n    district = DistrictSerializer()  # Nested object for related model\n    affiliated = AffiliationSerializer()  # Nested object for related model\n    college_type = CollegeTypeSerializer()  # Nested object for related model\n    discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n    social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n    facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n\n    class Meta:\n        model = College\n        fields = '__all__'\n\n\n# Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\nclass CollegeWriteSerializers(serializers.ModelSerializer):\n    # Nested serializers for ForeignKey fields\n    district = DistrictSerializer()  # Include full object instead of just ID\n    affiliated = AffiliationSerializer()  # Include full object instead of just ID\n    college_type = CollegeTypeSerializer()  # Include full object instead of just ID\n\n    # Nested serializers for ManyToMany fields\n    discipline = DisciplineSerializer(many=True)  # Include full objects for many-to-many relationships\n    social_media = SocialMediaSerializer(many=True)  # Include full objects for many-to-many relationships\n    facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n\n    class Meta:\n        model = College\n        fields = [\n            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n            'placement', 'scholarship', 'created_date', 'updated_date'\n        ]\n\n    # Custom method to handle creation of College instances\n    def create(self, validated_data):\n        district_data = validated_data.pop('district')\n        affiliated_data = validated_data.pop('affiliated')\n        college_type_data = validated_data.pop('college_type')\n        discipline_data = validated_data.pop('discipline')\n        social_media_data = validated_data.pop('social_media')\n        facilities_data = validated_data.pop('facilities')\n\n        # Create related objects first\n        district = District.objects.create(**district_data)\n        affiliated = Affiliation.objects.create(**affiliated_data)\n        college_type = CollegeType.objects.create(**college_type_data)\n\n        # Create College instance\n        college = College.objects.create(\n            district=district, affiliated=affiliated, college_type=college_type, **validated_data\n        )\n\n        # Handle ManyToMany relationships by adding related objects\n        for discipline in discipline_data:\n            college.discipline.add(Discipline.objects.create(**discipline))\n\n        for social in social_media_data:\n            college.social_media.add(SocialMedia.objects.create(**social))\n\n        for facility in facilities_data:\n            college.facilities.add(Facility.objects.create(**facility))\n\n        return college\n\n    # Custom method to handle updating of College instances\n    def update(self, instance, validated_data):\n        district_data = validated_data.pop('district', None)\n        affiliated_data = validated_data.pop('affiliated', None)\n        college_type_data = validated_data.pop('college_type', None)\n        discipline_data = validated_data.pop('discipline', None)\n        social_media_data = validated_data.pop('social_media', None)\n        facilities_data = validated_data.pop('facilities', None)\n\n        # Update related fields\n        if district_data:\n            for attr, value in district_data.items():\n                setattr(instance.district, attr, value)\n            instance.district.save()\n\n        if affiliated_data:\n            for attr, value in affiliated_data.items():\n                setattr(instance.affiliated, attr, value)\n            instance.affiliated.save()\n\n        if college_type_data:\n            for attr, value in college_type_data.items():\n                setattr(instance.college_type, attr, value)\n            instance.college_type.save()\n\n        # Handle ManyToMany relationships\n        if discipline_data:\n            instance.discipline.clear()  # Clear existing ManyToMany relationships\n            for discipline in discipline_data:\n                instance.discipline.add(Discipline.objects.create(**discipline))\n\n        if social_media_data:\n            instance.social_media.clear()  # Clear existing ManyToMany relationships\n            for social in social_media_data:\n                instance.social_media.add(SocialMedia.objects.create(**social))\n\n        if facilities_data:\n            instance.facilities.clear()  # Clear existing ManyToMany relationships\n            for facility in facilities_data:\n                instance.facilities.add(Facility.objects.create(**facility))\n\n        # Update the other fields in the College model\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n\n        return instance\n"
        }
    ]
}