{
    "sourceFile": "collegemanagement/serializers/college_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 29,
            "patches": [
                {
                    "date": 1733477116456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1733477131218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,49 +112,80 @@\n         return college\n \n     # Custom method to handle updating of College instances\n     def update(self, instance, validated_data):\n-        district_data = validated_data.pop('district', None)\n-        affiliated_data = validated_data.pop('affiliated', None)\n-        college_type_data = validated_data.pop('college_type', None)\n-        discipline_data = validated_data.pop('discipline', None)\n-        social_media_data = validated_data.pop('social_media', None)\n-        facilities_data = validated_data.pop('facilities', None)\n+    district_data = validated_data.pop('district', None)\n+    affiliated_data = validated_data.pop('affiliated', None)\n+    college_type_data = validated_data.pop('college_type', None)\n+    discipline_data = validated_data.pop('discipline', None)\n+    social_media_data = validated_data.pop('social_media', None)\n+    facilities_data = validated_data.pop('facilities', None)\n \n-        # Update related fields\n-        if district_data:\n-            for attr, value in district_data.items():\n-                setattr(instance.district, attr, value)\n-            instance.district.save()\n+    # Update ForeignKey fields if new data is provided\n+    if district_data:\n+        for attr, value in district_data.items():\n+            setattr(instance.district, attr, value)\n+        instance.district.save()\n \n-        if affiliated_data:\n-            for attr, value in affiliated_data.items():\n-                setattr(instance.affiliated, attr, value)\n-            instance.affiliated.save()\n+    if affiliated_data:\n+        for attr, value in affiliated_data.items():\n+            setattr(instance.affiliated, attr, value)\n+        instance.affiliated.save()\n \n-        if college_type_data:\n-            for attr, value in college_type_data.items():\n-                setattr(instance.college_type, attr, value)\n-            instance.college_type.save()\n+    if college_type_data:\n+        for attr, value in college_type_data.items():\n+            setattr(instance.college_type, attr, value)\n+        instance.college_type.save()\n \n-        # Handle ManyToMany relationships\n-        if discipline_data:\n-            instance.discipline.clear()  # Clear existing ManyToMany relationships\n-            for discipline in discipline_data:\n-                instance.discipline.add(Discipline.objects.create(**discipline))\n+    # Add new ManyToMany relationships and remove items marked for deletion\n+    if discipline_data:\n+        # Adding new disciplines (if provided)\n+        current_discipline_ids = {d.id for d in instance.discipline.all()}\n+        new_discipline_ids = {d['id'] for d in discipline_data}\n \n-        if social_media_data:\n-            instance.social_media.clear()  # Clear existing ManyToMany relationships\n-            for social in social_media_data:\n-                instance.social_media.add(SocialMedia.objects.create(**social))\n+        # Add new disciplines (without duplicates)\n+        for discipline in discipline_data:\n+            if discipline['id'] not in current_discipline_ids:\n+                instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n \n-        if facilities_data:\n-            instance.facilities.clear()  # Clear existing ManyToMany relationships\n-            for facility in facilities_data:\n-                instance.facilities.add(Facility.objects.create(**facility))\n+        # Remove disciplines that are no longer part of the request (if any)\n+        for discipline in instance.discipline.all():\n+            if discipline.id not in new_discipline_ids:\n+                instance.discipline.remove(discipline)\n \n-        # Update the other fields in the College model\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n+    if social_media_data:\n+        # Adding new social media links (if provided)\n+        current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n+        new_social_media_ids = {sm['id'] for sm in social_media_data}\n \n-        return instance\n+        # Add new social media (without duplicates)\n+        for social_media in social_media_data:\n+            if social_media['id'] not in current_social_media_ids:\n+                instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n+\n+        # Remove social media that are no longer part of the request (if any)\n+        for social_media in instance.social_media.all():\n+            if social_media.id not in new_social_media_ids:\n+                instance.social_media.remove(social_media)\n+\n+    if facilities_data:\n+        # Adding new facilities (if provided)\n+        current_facilities_ids = {f.id for f in instance.facilities.all()}\n+        new_facilities_ids = {f['id'] for f in facilities_data}\n+\n+        # Add new facilities (without duplicates)\n+        for facility in facilities_data:\n+            if facility['id'] not in current_facilities_ids:\n+                instance.facilities.add(Facility.objects.get(id=facility['id']))\n+\n+        # Remove facilities that are no longer part of the request (if any)\n+        for facility in instance.facilities.all():\n+            if facility.id not in new_facilities_ids:\n+                instance.facilities.remove(facility)\n+\n+    # Update the other fields in the College model\n+    for attr, value in validated_data.items():\n+        setattr(instance, attr, value)\n+    instance.save()\n+\n+    return instance\n+\n"
                },
                {
                    "date": 1733477136389,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -112,80 +112,80 @@\n         return college\n \n     # Custom method to handle updating of College instances\n     def update(self, instance, validated_data):\n-    district_data = validated_data.pop('district', None)\n-    affiliated_data = validated_data.pop('affiliated', None)\n-    college_type_data = validated_data.pop('college_type', None)\n-    discipline_data = validated_data.pop('discipline', None)\n-    social_media_data = validated_data.pop('social_media', None)\n-    facilities_data = validated_data.pop('facilities', None)\n+        district_data = validated_data.pop('district', None)\n+        affiliated_data = validated_data.pop('affiliated', None)\n+        college_type_data = validated_data.pop('college_type', None)\n+        discipline_data = validated_data.pop('discipline', None)\n+        social_media_data = validated_data.pop('social_media', None)\n+        facilities_data = validated_data.pop('facilities', None)\n \n-    # Update ForeignKey fields if new data is provided\n-    if district_data:\n-        for attr, value in district_data.items():\n-            setattr(instance.district, attr, value)\n-        instance.district.save()\n+        # Update ForeignKey fields if new data is provided\n+        if district_data:\n+            for attr, value in district_data.items():\n+                setattr(instance.district, attr, value)\n+            instance.district.save()\n \n-    if affiliated_data:\n-        for attr, value in affiliated_data.items():\n-            setattr(instance.affiliated, attr, value)\n-        instance.affiliated.save()\n+        if affiliated_data:\n+            for attr, value in affiliated_data.items():\n+                setattr(instance.affiliated, attr, value)\n+            instance.affiliated.save()\n \n-    if college_type_data:\n-        for attr, value in college_type_data.items():\n-            setattr(instance.college_type, attr, value)\n-        instance.college_type.save()\n+        if college_type_data:\n+            for attr, value in college_type_data.items():\n+                setattr(instance.college_type, attr, value)\n+            instance.college_type.save()\n \n-    # Add new ManyToMany relationships and remove items marked for deletion\n-    if discipline_data:\n-        # Adding new disciplines (if provided)\n-        current_discipline_ids = {d.id for d in instance.discipline.all()}\n-        new_discipline_ids = {d['id'] for d in discipline_data}\n+        # Add new ManyToMany relationships and remove items marked for deletion\n+        if discipline_data:\n+            # Adding new disciplines (if provided)\n+            current_discipline_ids = {d.id for d in instance.discipline.all()}\n+            new_discipline_ids = {d['id'] for d in discipline_data}\n \n-        # Add new disciplines (without duplicates)\n-        for discipline in discipline_data:\n-            if discipline['id'] not in current_discipline_ids:\n-                instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n+            # Add new disciplines (without duplicates)\n+            for discipline in discipline_data:\n+                if discipline['id'] not in current_discipline_ids:\n+                    instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n \n-        # Remove disciplines that are no longer part of the request (if any)\n-        for discipline in instance.discipline.all():\n-            if discipline.id not in new_discipline_ids:\n-                instance.discipline.remove(discipline)\n+            # Remove disciplines that are no longer part of the request (if any)\n+            for discipline in instance.discipline.all():\n+                if discipline.id not in new_discipline_ids:\n+                    instance.discipline.remove(discipline)\n \n-    if social_media_data:\n-        # Adding new social media links (if provided)\n-        current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n-        new_social_media_ids = {sm['id'] for sm in social_media_data}\n+        if social_media_data:\n+            # Adding new social media links (if provided)\n+            current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n+            new_social_media_ids = {sm['id'] for sm in social_media_data}\n \n-        # Add new social media (without duplicates)\n-        for social_media in social_media_data:\n-            if social_media['id'] not in current_social_media_ids:\n-                instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n+            # Add new social media (without duplicates)\n+            for social_media in social_media_data:\n+                if social_media['id'] not in current_social_media_ids:\n+                    instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n \n-        # Remove social media that are no longer part of the request (if any)\n-        for social_media in instance.social_media.all():\n-            if social_media.id not in new_social_media_ids:\n-                instance.social_media.remove(social_media)\n+            # Remove social media that are no longer part of the request (if any)\n+            for social_media in instance.social_media.all():\n+                if social_media.id not in new_social_media_ids:\n+                    instance.social_media.remove(social_media)\n \n-    if facilities_data:\n-        # Adding new facilities (if provided)\n-        current_facilities_ids = {f.id for f in instance.facilities.all()}\n-        new_facilities_ids = {f['id'] for f in facilities_data}\n+        if facilities_data:\n+            # Adding new facilities (if provided)\n+            current_facilities_ids = {f.id for f in instance.facilities.all()}\n+            new_facilities_ids = {f['id'] for f in facilities_data}\n \n-        # Add new facilities (without duplicates)\n-        for facility in facilities_data:\n-            if facility['id'] not in current_facilities_ids:\n-                instance.facilities.add(Facility.objects.get(id=facility['id']))\n+            # Add new facilities (without duplicates)\n+            for facility in facilities_data:\n+                if facility['id'] not in current_facilities_ids:\n+                    instance.facilities.add(Facility.objects.get(id=facility['id']))\n \n-        # Remove facilities that are no longer part of the request (if any)\n-        for facility in instance.facilities.all():\n-            if facility.id not in new_facilities_ids:\n-                instance.facilities.remove(facility)\n+            # Remove facilities that are no longer part of the request (if any)\n+            for facility in instance.facilities.all():\n+                if facility.id not in new_facilities_ids:\n+                    instance.facilities.remove(facility)\n \n-    # Update the other fields in the College model\n-    for attr, value in validated_data.items():\n-        setattr(instance, attr, value)\n-    instance.save()\n+        # Update the other fields in the College model\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n \n-    return instance\n+        return instance\n \n"
                },
                {
                    "date": 1733477147416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,14 +72,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = [\n-            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n-            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n-            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n-            'placement', 'scholarship', 'created_date', 'updated_date'\n-        ]\n+        \n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733477152573,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,9 +72,14 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        \n+        fields = [\n+            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n+            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n+            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n+            'placement', 'scholarship', 'created_date', 'updated_date'\n+        ]\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733477158118,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -72,14 +72,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = [\n-            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n-            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n-            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n-            'placement', 'scholarship', 'created_date', 'updated_date'\n-        ]\n+        fields = '__'\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733638798475,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n+        \n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -72,9 +73,9 @@\n     facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n-        fields = '__'\n+        fields = '__all__'\n \n     # Custom method to handle creation of College instances\n     def create(self, validated_data):\n         district_data = validated_data.pop('district')\n"
                },
                {
                    "date": 1733638803711,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n-        \n+        ref\n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1733638810251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n-        ref\n+        ref_name\n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1738651400595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n-        ref_name\n+        ref_name = 'Disciplines'\n \n # Nested serializer for SocialMedia\n class SocialMediaSerializer(serializers.ModelSerializer):\n     class Meta:\n@@ -184,4 +184,5 @@\n         instance.save()\n \n         return instance\n \n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1738651530722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,115 +74,5 @@\n \n     class Meta:\n         model = College\n         fields = '__all__'\n-\n-    # Custom method to handle creation of College instances\n-    def create(self, validated_data):\n-        district_data = validated_data.pop('district')\n-        affiliated_data = validated_data.pop('affiliated')\n-        college_type_data = validated_data.pop('college_type')\n-        discipline_data = validated_data.pop('discipline')\n-        social_media_data = validated_data.pop('social_media')\n-        facilities_data = validated_data.pop('facilities')\n-\n-        # Create related objects first\n-        district = District.objects.create(**district_data)\n-        affiliated = Affiliation.objects.create(**affiliated_data)\n-        college_type = CollegeType.objects.create(**college_type_data)\n-\n-        # Create College instance\n-        college = College.objects.create(\n-            district=district, affiliated=affiliated, college_type=college_type, **validated_data\n-        )\n-\n-        # Handle ManyToMany relationships by adding related objects\n-        for discipline in discipline_data:\n-            college.discipline.add(Discipline.objects.create(**discipline))\n-\n-        for social in social_media_data:\n-            college.social_media.add(SocialMedia.objects.create(**social))\n-\n-        for facility in facilities_data:\n-            college.facilities.add(Facility.objects.create(**facility))\n-\n-        return college\n-\n-    # Custom method to handle updating of College instances\n-    def update(self, instance, validated_data):\n-        district_data = validated_data.pop('district', None)\n-        affiliated_data = validated_data.pop('affiliated', None)\n-        college_type_data = validated_data.pop('college_type', None)\n-        discipline_data = validated_data.pop('discipline', None)\n-        social_media_data = validated_data.pop('social_media', None)\n-        facilities_data = validated_data.pop('facilities', None)\n-\n-        # Update ForeignKey fields if new data is provided\n-        if district_data:\n-            for attr, value in district_data.items():\n-                setattr(instance.district, attr, value)\n-            instance.district.save()\n-\n-        if affiliated_data:\n-            for attr, value in affiliated_data.items():\n-                setattr(instance.affiliated, attr, value)\n-            instance.affiliated.save()\n-\n-        if college_type_data:\n-            for attr, value in college_type_data.items():\n-                setattr(instance.college_type, attr, value)\n-            instance.college_type.save()\n-\n-        # Add new ManyToMany relationships and remove items marked for deletion\n-        if discipline_data:\n-            # Adding new disciplines (if provided)\n-            current_discipline_ids = {d.id for d in instance.discipline.all()}\n-            new_discipline_ids = {d['id'] for d in discipline_data}\n-\n-            # Add new disciplines (without duplicates)\n-            for discipline in discipline_data:\n-                if discipline['id'] not in current_discipline_ids:\n-                    instance.discipline.add(Discipline.objects.get(id=discipline['id']))\n-\n-            # Remove disciplines that are no longer part of the request (if any)\n-            for discipline in instance.discipline.all():\n-                if discipline.id not in new_discipline_ids:\n-                    instance.discipline.remove(discipline)\n-\n-        if social_media_data:\n-            # Adding new social media links (if provided)\n-            current_social_media_ids = {sm.id for sm in instance.social_media.all()}\n-            new_social_media_ids = {sm['id'] for sm in social_media_data}\n-\n-            # Add new social media (without duplicates)\n-            for social_media in social_media_data:\n-                if social_media['id'] not in current_social_media_ids:\n-                    instance.social_media.add(SocialMedia.objects.get(id=social_media['id']))\n-\n-            # Remove social media that are no longer part of the request (if any)\n-            for social_media in instance.social_media.all():\n-                if social_media.id not in new_social_media_ids:\n-                    instance.social_media.remove(social_media)\n-\n-        if facilities_data:\n-            # Adding new facilities (if provided)\n-            current_facilities_ids = {f.id for f in instance.facilities.all()}\n-            new_facilities_ids = {f['id'] for f in facilities_data}\n-\n-            # Add new facilities (without duplicates)\n-            for facility in facilities_data:\n-                if facility['id'] not in current_facilities_ids:\n-                    instance.facilities.add(Facility.objects.get(id=facility['id']))\n-\n-            # Remove facilities that are no longer part of the request (if any)\n-            for facility in instance.facilities.all():\n-                if facility.id not in new_facilities_ids:\n-                    instance.facilities.remove(facility)\n-\n-        # Update the other fields in the College model\n-        for attr, value in validated_data.items():\n-            setattr(instance, attr, value)\n-        instance.save()\n-\n-        return instance\n-\n-    \n\\ No newline at end of file\n+=\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738651541393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,18 +61,9 @@\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-    # Nested serializers for ForeignKey fields\n-    district = DistrictSerializer()  # Include full object instead of just ID\n-    affiliated = AffiliationSerializer()  # Include full object instead of just ID\n-    college_type = CollegeTypeSerializer()  # Include full object instead of just ID\n \n-    # Nested serializers for ManyToMany fields\n-    discipline = DisciplineSerializer(many=True)  # Include full objects for many-to-many relationships\n-    social_media = SocialMediaSerializer(many=True)  # Include full objects for many-to-many relationships\n-    facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n \n     class Meta:\n         model = College\n         fields = '__all__'\n-=\n\\ No newline at end of file\n"
                },
                {
                    "date": 1738651547095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,8 @@\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n-\n-\n+    \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738652200366,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,24 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n \n+\n+\n+def str_to_list(data,value_to_convert):\n+    try:\n+        mutable_data = data.dict()\n+    except Exception:\n+        mutable_data = data\n+    value_to_convert_data = mutable_data[value_to_convert]\n+    if isinstance(value_to_convert_data,list):# type(value_to_convert_data) == list:\n+\n+        return mutable_data\n+    try:\n+        variations = ast.literal_eval(value_to_convert_data)\n+        mutable_data[value_to_convert] = variations\n+        return mutable_data\n+    except ValueError as e:\n+        raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n"
                },
                {
                    "date": 1738652205839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import serializers\n from ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n+import ast\n \n \n-\n def str_to_list(data,value_to_convert):\n     try:\n         mutable_data = data.dict()\n     except Exception:\n"
                },
                {
                    "date": 1738652211829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,8 +17,9 @@\n         mutable_data[value_to_convert] = variations\n         return mutable_data\n     except ValueError as e:\n         raise serializers.ValidationError({f'{value_to_convert}': str(e)}) from e\n+    \n # Nested serializer for District\n class DistrictSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = District\n"
                },
                {
                    "date": 1738652278939,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,7 +80,13 @@\n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     \n+    def to_internal_value(self, data):\n+        if data.get('packages'):\n+            data = str_to_list(data,'packages')\n+            return super().to_internal_value(data)\n+        return super().to_internal_value(data)\n+    \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738652308103,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -81,8 +81,9 @@\n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n     \n     def to_internal_value(self, data):\n+        \n         if data.get('packages'):\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1738652392524,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,11 +79,19 @@\n \n \n # Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\n class CollegeWriteSerializers(serializers.ModelSerializer):\n+    # Use PrimaryKeyRelatedField to accept only IDs\n+    district = serializers.PrimaryKeyRelatedField(queryset=District.objects.all())\n+    affiliated = serializers.PrimaryKeyRelatedField(queryset=Affiliation.objects.all())\n+    college_type = serializers.PrimaryKeyRelatedField(queryset=CollegeType.objects.all())\n+\n+    discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n+    social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n+    facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n+\n     \n     def to_internal_value(self, data):\n-        \n         if data.get('packages'):\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n"
                },
                {
                    "date": 1738652398942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,13 +89,9 @@\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n \n     \n-    def to_internal_value(self, data):\n-        if data.get('packages'):\n-            data = str_to_list(data,'packages')\n-            return super().to_internal_value(data)\n-        return super().to_internal_value(data)\n     \n+    \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738652404621,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -87,8 +87,13 @@\n \n     discipline = serializers.PrimaryKeyRelatedField(queryset=Discipline.objects.all(), many=True)\n     social_media = serializers.PrimaryKeyRelatedField(queryset=SocialMedia.objects.all(), many=True)\n     facilities = serializers.PrimaryKeyRelatedField(queryset=Facility.objects.all(), many=True)\n+    def to_internal_value(self, data):\n+        if data.get('packages'):\n+            data = str_to_list(data,'packages')\n+            return super().to_internal_value(data)\n+        return super().to_internal_value(data)\n \n     \n     \n     \n"
                },
                {
                    "date": 1738652413450,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,10 +93,9 @@\n             data = str_to_list(data,'packages')\n             return super().to_internal_value(data)\n         return super().to_internal_value(data)\n \n-    \n-    \n-    \n     class Meta:\n         model = College\n         fields = '__all__'\n+        \n+    \n"
                },
                {
                    "date": 1738652422067,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,5 +97,38 @@\n     class Meta:\n         model = College\n         fields = '__all__'\n         \n-    \n+    def create(self, validated_data):\n+        discipline_ids = validated_data.pop('discipline', [])\n+        social_media_ids = validated_data.pop('social_media', [])\n+        facilities_ids = validated_data.pop('facilities', [])\n+\n+        # Create College instance with ForeignKey relationships\n+        college = College.objects.create(**validated_data)\n+\n+        # Add ManyToMany relationships using IDs\n+        college.discipline.set(discipline_ids)\n+        college.social_media.set(social_media_ids)\n+        college.facilities.set(facilities_ids)\n+\n+        return college\n+\n+    def update(self, instance, validated_data):\n+        discipline_ids = validated_data.pop('discipline', None)\n+        social_media_ids = validated_data.pop('social_media', None)\n+        facilities_ids = validated_data.pop('facilities', None)\n+\n+        # Update ForeignKey relationships\n+        for attr, value in validated_data.items():\n+            setattr(instance, attr, value)\n+        instance.save()\n+\n+        # Update ManyToMany relationships if provided\n+        if discipline_ids is not None:\n+            instance.discipline.set(discipline_ids)\n+        if social_media_ids is not None:\n+            instance.social_media.set(social_media_ids)\n+        if facilities_ids is not None:\n+            instance.facilities.set(facilities_ids)\n+\n+        return instance\n"
                },
                {
                    "date": 1738664038981,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,15 @@\n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n \n-# Nested serializer for CollegeType\n-class CollegeTypeSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeType\n         fields = '__all__'\n \n-# Nested serializer for Discipline\n+# Nested serializer for Disc\n+# Nested serializer for CollegeType\n+class CollegeTypeSerializer(serializers.ModelSerializer):ipline\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n"
                },
                {
                    "date": 1738666239911,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,15 +30,15 @@\n     class Meta:\n         model = Affiliation\n         fields = '__all__'\n \n+# Nested serializer for CollegeType\n+class CollegeTypeSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeType\n         fields = '__all__'\n \n-# Nested serializer for Disc\n-# Nested serializer for CollegeType\n-class CollegeTypeSerializer(serializers.ModelSerializer):ipline\n+# Nested serializer for Discipline\n class DisciplineSerializer(serializers.ModelSerializer):\n     class Meta:\n         model = Discipline\n         fields = '__all__'\n@@ -65,9 +65,9 @@\n \n \n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n-    district = DistrictSerializer()  # Nested object for related model\n+    district = DistrictSerializer(read)  # Nested object for related model\n     affiliated = AffiliationSerializer()  # Nested object for related model\n     college_type = CollegeTypeSerializer()  # Nested object for related model\n     discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n"
                },
                {
                    "date": 1738666246756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -65,9 +65,9 @@\n \n \n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n-    district = DistrictSerializer(read)  # Nested object for related model\n+    district = DistrictSerializer(read_only=True)  # Nested object for related model\n     affiliated = AffiliationSerializer()  # Nested object for related model\n     college_type = CollegeTypeSerializer()  # Nested object for related model\n     discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n"
                },
                {
                    "date": 1738666260647,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -66,9 +66,9 @@\n \n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n     district = DistrictSerializer(read_only=True)  # Nested object for related model\n-    affiliated = AffiliationSerializer()  # Nested object for related model\n+    affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n     college_type = CollegeTypeSerializer()  # Nested object for related model\n     discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n     facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n"
                },
                {
                    "date": 1738666269162,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,10 +67,10 @@\n # Serializer for retrieving complete college details (detailed view)\n class CollegeRetrieveSerializers(serializers.ModelSerializer):\n     district = DistrictSerializer(read_only=True)  # Nested object for related model\n     affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n-    college_type = CollegeTypeSerializer()  # Nested object for related model\n-    discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n+    college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n+    discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n     social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n     facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n \n     class Meta:\n"
                },
                {
                    "date": 1738666275254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,10 +69,10 @@\n     district = DistrictSerializer(read_only=True)  # Nested object for related model\n     affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n     college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n     discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n-    social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n-    facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n+    social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n \n     class Meta:\n         model = College\n         fields = '__all__'\n"
                },
                {
                    "date": 1738666282322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,15 @@\n \n \n # Serializer for listing college details (basic view)\n class CollegeListSerializers(serializers.ModelSerializer):\n+    district = DistrictSerializer(read_only=True)  # Nested object for related model\n+    affiliated = AffiliationSerializer(read_only=True)  # Nested object for related model\n+    college_type = CollegeTypeSerializer(read_only=True)  # Nested object for related model\n+    discipline = DisciplineSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    social_media = SocialMediaSerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+    facilities = FacilitySerializer(many=True,read_only=True)  # Nested objects for ManyToMany\n+\n     class Meta:\n         model = College\n         fields = '__all__'\n \n"
                }
            ],
            "date": 1733477116456,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import College, District, Affiliation, CollegeType, Discipline, SocialMedia, Facility\n\n# Nested serializer for District\nclass DistrictSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = District\n        fields = '__all__'\n\n# Nested serializer for Affiliation\nclass AffiliationSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Affiliation\n        fields = '__all__'\n\n# Nested serializer for CollegeType\nclass CollegeTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeType\n        fields = '__all__'\n\n# Nested serializer for Discipline\nclass DisciplineSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Discipline\n        fields = '__all__'\n\n# Nested serializer for SocialMedia\nclass SocialMediaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = SocialMedia\n        fields = '__all__'\n\n# Nested serializer for Facility\nclass FacilitySerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Facility\n        fields = '__all__'\n\n\n# Serializer for listing college details (basic view)\nclass CollegeListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = College\n        fields = '__all__'\n\n\n# Serializer for retrieving complete college details (detailed view)\nclass CollegeRetrieveSerializers(serializers.ModelSerializer):\n    district = DistrictSerializer()  # Nested object for related model\n    affiliated = AffiliationSerializer()  # Nested object for related model\n    college_type = CollegeTypeSerializer()  # Nested object for related model\n    discipline = DisciplineSerializer(many=True)  # Nested objects for ManyToMany\n    social_media = SocialMediaSerializer(many=True)  # Nested objects for ManyToMany\n    facilities = FacilitySerializer(many=True)  # Nested objects for ManyToMany\n\n    class Meta:\n        model = College\n        fields = '__all__'\n\n\n# Serializer for creating/updating college details (with nested objects for foreign keys and many-to-many)\nclass CollegeWriteSerializers(serializers.ModelSerializer):\n    # Nested serializers for ForeignKey fields\n    district = DistrictSerializer()  # Include full object instead of just ID\n    affiliated = AffiliationSerializer()  # Include full object instead of just ID\n    college_type = CollegeTypeSerializer()  # Include full object instead of just ID\n\n    # Nested serializers for ManyToMany fields\n    discipline = DisciplineSerializer(many=True)  # Include full objects for many-to-many relationships\n    social_media = SocialMediaSerializer(many=True)  # Include full objects for many-to-many relationships\n    facilities = FacilitySerializer(many=True)  # Include full objects for many-to-many relationships\n\n    class Meta:\n        model = College\n        fields = [\n            'banner_image', 'dp_image', 'name', 'established_date', 'website_link', 'address', 'district',\n            'phone_number', 'email', 'affiliated', 'college_type', 'discipline', 'social_media',\n            'google_map_link', 'latitude', 'longitude', 'about', 'brochure', 'step_counter', 'facilities',\n            'placement', 'scholarship', 'created_date', 'updated_date'\n        ]\n\n    # Custom method to handle creation of College instances\n    def create(self, validated_data):\n        district_data = validated_data.pop('district')\n        affiliated_data = validated_data.pop('affiliated')\n        college_type_data = validated_data.pop('college_type')\n        discipline_data = validated_data.pop('discipline')\n        social_media_data = validated_data.pop('social_media')\n        facilities_data = validated_data.pop('facilities')\n\n        # Create related objects first\n        district = District.objects.create(**district_data)\n        affiliated = Affiliation.objects.create(**affiliated_data)\n        college_type = CollegeType.objects.create(**college_type_data)\n\n        # Create College instance\n        college = College.objects.create(\n            district=district, affiliated=affiliated, college_type=college_type, **validated_data\n        )\n\n        # Handle ManyToMany relationships by adding related objects\n        for discipline in discipline_data:\n            college.discipline.add(Discipline.objects.create(**discipline))\n\n        for social in social_media_data:\n            college.social_media.add(SocialMedia.objects.create(**social))\n\n        for facility in facilities_data:\n            college.facilities.add(Facility.objects.create(**facility))\n\n        return college\n\n    # Custom method to handle updating of College instances\n    def update(self, instance, validated_data):\n        district_data = validated_data.pop('district', None)\n        affiliated_data = validated_data.pop('affiliated', None)\n        college_type_data = validated_data.pop('college_type', None)\n        discipline_data = validated_data.pop('discipline', None)\n        social_media_data = validated_data.pop('social_media', None)\n        facilities_data = validated_data.pop('facilities', None)\n\n        # Update related fields\n        if district_data:\n            for attr, value in district_data.items():\n                setattr(instance.district, attr, value)\n            instance.district.save()\n\n        if affiliated_data:\n            for attr, value in affiliated_data.items():\n                setattr(instance.affiliated, attr, value)\n            instance.affiliated.save()\n\n        if college_type_data:\n            for attr, value in college_type_data.items():\n                setattr(instance.college_type, attr, value)\n            instance.college_type.save()\n\n        # Handle ManyToMany relationships\n        if discipline_data:\n            instance.discipline.clear()  # Clear existing ManyToMany relationships\n            for discipline in discipline_data:\n                instance.discipline.add(Discipline.objects.create(**discipline))\n\n        if social_media_data:\n            instance.social_media.clear()  # Clear existing ManyToMany relationships\n            for social in social_media_data:\n                instance.social_media.add(SocialMedia.objects.create(**social))\n\n        if facilities_data:\n            instance.facilities.clear()  # Clear existing ManyToMany relationships\n            for facility in facilities_data:\n                instance.facilities.add(Facility.objects.create(**facility))\n\n        # Update the other fields in the College model\n        for attr, value in validated_data.items():\n            setattr(instance, attr, value)\n        instance.save()\n\n        return instance\n"
        }
    ]
}