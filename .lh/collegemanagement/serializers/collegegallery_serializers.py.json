{
    "sourceFile": "collegemanagement/serializers/collegegallery_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 80,
            "patches": [
                {
                    "date": 1739512004648,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1739770422481,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,7 @@\n from rest_framework import serializers\n from ..models import CollegeGallery\n+from \n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeGallery\n"
                },
                {
                    "date": 1739770429059,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from ..models import CollegeGallery\n+from ..models import CollegeGallery,College\n from \n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1739770438949,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,17 @@\n from rest_framework import serializers\n from ..models import CollegeGallery,College\n-from \n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeGallery\n         fields = '__all__'\n \n+class CollegeGalleryListSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = CollegeGallery\n+        fields = '__all__'\n+\n class CollegeGalleryRetrieveSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeGallery\n         fields = '__all__'\n"
                },
                {
                    "date": 1739770446289,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n from rest_framework import serializers\n from ..models import CollegeGallery,College\n \n-class CollegeGalleryListSerializers(serializers.ModelSerializer):\n+class CollegeListSerializers(serializers.ModelSerializer):\n     class Meta:\n-        model = CollegeGallery\n+        model = College\n         fields = '__all__'\n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1739770453285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,14 @@\n from rest_framework import serializers\n from ..models import CollegeGallery,College\n \n-class CollegeListSerializers(serializers.ModelSerializer):\n+class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n         fields = '__all__'\n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n+    College\n     class Meta:\n         model = CollegeGallery\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1739770459886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n         model = College\n         fields = '__all__'\n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n-    College\n+    college = College\n     class Meta:\n         model = CollegeGallery\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1739770471073,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,14 +6,15 @@\n         model = College\n         fields = '__all__'\n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n-    college = College\n+    college = CollegeSerializers(read_only=True)\n     class Meta:\n         model = CollegeGallery\n         fields = '__all__'\n \n class CollegeGalleryRetrieveSerializers(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n     class Meta:\n         model = CollegeGallery\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1739770486773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = '__all__'\n+        fields = \n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     class Meta:\n"
                },
                {
                    "date": 1739770780017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,10 @@\n \n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = \n+        ref_name\n+        fields = ['slug','id','name']\n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     class Meta:\n"
                },
                {
                    "date": 1740391779381,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        ref_name\n+        ref_name='CollegeGallerySerializers'\n         fields = ['slug','id','name']\n \n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n@@ -25,9 +25,9 @@\n     )\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['images', 'description']  # Excluding 'image' field since we're handling multiple images\n+        fields = ['image', 'description']  # Excluding 'image' field since we're handling multiple images\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740391796593,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n     )\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['image', 'description']  # Excluding 'image' field since we're handling multiple images\n+        fields = ['images', 'description']  # Excluding 'image' field since we're handling multiple images\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740391925400,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -49,9 +49,9 @@\n         images = []\n         index = 0\n \n         while f'image[{index}]' in request.FILES:\n-            images.append(request.FILES[f'image[{index}]'])\n+            images.append(request.FILES[f'images[{index}]'])\n             index += 1\n \n         for image in images:\n             CollegeGallery.objects.create(image=image)\n"
                },
                {
                    "date": 1740392277128,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,7 +53,7 @@\n             images.append(request.FILES[f'images[{index}]'])\n             index += 1\n \n         for image in images:\n-            CollegeGallery.objects.create(image=image)\n+            CollegeGallery.objects.create(images=image)\n \n         return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1740392291557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,11 +19,8 @@\n         model = CollegeGallery\n         fields = '__all__'\n \n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n-    images = serializers.ListField(\n-        child=serializers.ImageField(), write_only=True, required=False\n-    )\n \n     class Meta:\n         model = CollegeGallery\n         fields = ['images', 'description']  # Excluding 'image' field since we're handling multiple images\n"
                },
                {
                    "date": 1740392297110,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['images', 'description']  # Excluding 'image' field since we're handling multiple images\n+        fields = '__all__'\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740392303829,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             index += 1\n \n         gallery_instances = []\n         for image in images:\n-            gallery_instance = CollegeGallery.objects.create(image=image)\n+            gallery_instance = CollegeGallery.objects.create(images=image)\n             gallery_instances.append(gallery_instance)\n \n         return gallery_instances\n \n"
                },
                {
                    "date": 1740392311480,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,9 +35,9 @@\n             index += 1\n \n         gallery_instances = []\n         for image in images:\n-            gallery_instance = CollegeGallery.objects.create(images=image)\n+            gallery_instance = CollegeGallery.objects.create(images=images)\n             gallery_instances.append(gallery_instance)\n \n         return gallery_instances\n \n"
                },
                {
                    "date": 1740392473811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,56 +1,89 @@\n from rest_framework import serializers\n-from ..models import CollegeGallery,College\n+from ..models import CollegeGallery, College\n \n+### ✅ College Serializer for nested relation ###\n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        ref_name='CollegeGallerySerializers'\n-        fields = ['slug','id','name']\n+        ref_name = 'CollegeGallerySerializers'\n+        fields = ['slug', 'id', 'name']\n \n+\n+### ✅ Read Serializer (for Listing Multiple Galleries) ###\n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n+    images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n+\n     class Meta:\n         model = CollegeGallery\n-        fields = '__all__'\n+        fields = ['id', 'college', 'images', 'description', 'created_date', 'updated_date']\n \n+    def get_images(self, obj):\n+        \"\"\"Returns a list of image URLs for consistency.\"\"\"\n+        return [obj.image.url] if obj.image else []\n+\n+\n+### ✅ Read Serializer (for Retrieving a Single Gallery) ###\n class CollegeGalleryRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n+    images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n+\n     class Meta:\n         model = CollegeGallery\n-        fields = '__all__'\n+        fields = ['id', 'college', 'images', 'description', 'created_date', 'updated_date']\n \n+    def get_images(self, obj):\n+        \"\"\"Returns a list of image URLs for consistency.\"\"\"\n+        return [obj.image.url] if obj.image else []\n+\n+\n+### ✅ Write Serializer (Handles Multi-Image Uploads) ###\n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n \n     class Meta:\n         model = CollegeGallery\n-        fields = '__all__'\n+        fields = ['images', 'description']  # `images` key remains consistent in responses\n \n+    def to_representation(self, instance):\n+        \"\"\"\n+        Ensures the response uses `images` instead of `image` for consistency.\n+        \"\"\"\n+        return {\n+            \"id\": instance.id,\n+            \"images\": [instance.image.url] if instance.image else [],\n+            \"description\": instance.description\n+        }\n+\n     def create(self, validated_data):\n         request = self.context.get('request')\n         images = []\n         index = 0\n \n+        # ✅ Handling `image[0]`, `image[1]`, etc.\n         while f'image[{index}]' in request.FILES:\n             images.append(request.FILES[f'image[{index}]'])\n             index += 1\n \n+        college = self.context.get('college')  # Get college from context if needed\n         gallery_instances = []\n+\n         for image in images:\n-            gallery_instance = CollegeGallery.objects.create(images=images)\n+            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances\n+        return gallery_instances[0] if gallery_instances else None  # Return single instance\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n         index = 0\n \n+        # ✅ Handling `image[0]`, `image[1]`, etc.\n         while f'image[{index}]' in request.FILES:\n-            images.append(request.FILES[f'images[{index}]'])\n+            images.append(request.FILES[f'image[{index}]'])\n             index += 1\n \n         for image in images:\n-            CollegeGallery.objects.create(images=image)\n+            CollegeGallery.objects.create(image=image, college=instance.college)\n \n         return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1740392544479,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n         index = 0\n \n         # ✅ Handling `image[0]`, `image[1]`, etc.\n         while f'image[{index}]' in request.FILES:\n-            images.append(request.FILES[f'image[{index}]'])\n+            images.append(request.FILES[f'images[{index}]'])\n             index += 1\n \n         for image in images:\n             CollegeGallery.objects.create(image=image, college=instance.college)\n"
                },
                {
                    "date": 1740392549827,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,10 +59,10 @@\n         images = []\n         index = 0\n \n         # ✅ Handling `image[0]`, `image[1]`, etc.\n-        while f'image[{index}]' in request.FILES:\n-            images.append(request.FILES[f'image[{index}]'])\n+        while f'images[{index}]' in request.FILES:\n+            images.append(request.FILES[f'images[{index}]'])\n             index += 1\n \n         college = self.context.get('college')  # Get college from context if needed\n         gallery_instances = []\n"
                },
                {
                    "date": 1740392554941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -78,9 +78,9 @@\n         images = []\n         index = 0\n \n         # ✅ Handling `image[0]`, `image[1]`, etc.\n-        while f'image[{index}]' in request.FILES:\n+        while f'images[{index}]' in request.FILES:\n             images.append(request.FILES[f'images[{index}]'])\n             index += 1\n \n         for image in images:\n"
                },
                {
                    "date": 1740392741349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,16 +38,19 @@\n \n \n ### ✅ Write Serializer (Handles Multi-Image Uploads) ###\n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n+    images = serializers.ListField(\n+        child=serializers.ImageField(), write_only=True, required=False\n+    )  # Accept multiple image uploads\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['images', 'description']  # `images` key remains consistent in responses\n+        fields = ['images', 'description']  # Keep `images` as input, but use `image` in DB\n \n     def to_representation(self, instance):\n         \"\"\"\n-        Ensures the response uses `images` instead of `image` for consistency.\n+        Ensures `images` is used instead of `image` in responses.\n         \"\"\"\n         return {\n             \"id\": instance.id,\n             \"images\": [instance.image.url] if instance.image else [],\n@@ -58,11 +61,10 @@\n         request = self.context.get('request')\n         images = []\n         index = 0\n \n-        # ✅ Handling `image[0]`, `image[1]`, etc.\n-        while f'images[{index}]' in request.FILES:\n-            images.append(request.FILES[f'images[{index}]'])\n+        while f'image[{index}]' in request.FILES:\n+            images.append(request.FILES[f'image[{index}]'])\n             index += 1\n \n         college = self.context.get('college')  # Get college from context if needed\n         gallery_instances = []\n@@ -70,20 +72,19 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances[0] if gallery_instances else None  # Return single instance\n+        return gallery_instances[0] if gallery_instances else None  # Return a single instance\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n         index = 0\n \n-        # ✅ Handling `image[0]`, `image[1]`, etc.\n-        while f'images[{index}]' in request.FILES:\n-            images.append(request.FILES[f'images[{index}]'])\n+        while f'image[{index}]' in request.FILES:\n+            images.append(request.FILES[f'image[{index}]'])\n             index += 1\n \n         for image in images:\n             CollegeGallery.objects.create(image=image, college=instance.college)\n \n-        return super().update(instance, validated_data)\n+        return super().update(instance, validated_data)\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740638107150,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,8 +58,9 @@\n         }\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n+        \n         images = []\n         index = 0\n \n         while f'image[{index}]' in request.FILES:\n"
                },
                {
                    "date": 1740638116057,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         }\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n-        \n+        print(request.FILES)\n         images = []\n         index = 0\n \n         while f'image[{index}]' in request.FILES:\n"
                },
                {
                    "date": 1740638121641,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         }\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n-        print(request.FILES)\n+        print(request.FILES,\"\")\n         images = []\n         index = 0\n \n         while f'image[{index}]' in request.FILES:\n"
                },
                {
                    "date": 1740638547431,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,9 +58,9 @@\n         }\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n-        print(request.FILES,\"\")\n+        print(request.FILES,\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n         images = []\n         index = 0\n \n         while f'image[{index}]' in request.FILES:\n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances[0] if gallery_instances else None  # Return a single instance\n+        return gallery_instances  # Return a single instance\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638562466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n         \"\"\"\n         Ensures `images` is used instead of `image` in responses.\n         \"\"\"\n         return {\n-            \"id\": instance.id,\n+            # \"id\": instance.id,\n             \"images\": [instance.image.url] if instance.image else [],\n             \"description\": instance.description\n         }\n \n"
                },
                {
                    "date": 1740638593969,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,17 +46,17 @@\n     class Meta:\n         model = CollegeGallery\n         fields = ['images', 'description']  # Keep `images` as input, but use `image` in DB\n \n-    def to_representation(self, instance):\n-        \"\"\"\n-        Ensures `images` is used instead of `image` in responses.\n-        \"\"\"\n-        return {\n-            # \"id\": instance.id,\n-            \"images\": [instance.image.url] if instance.image else [],\n-            \"description\": instance.description\n-        }\n+    # def to_representation(self, instance):\n+    #     \"\"\"\n+    #     Ensures `images` is used instead of `image` in responses.\n+    #     \"\"\"\n+    #     return {\n+    #         # \"id\": instance.id,\n+    #         \"images\": [instance.image.url] if instance.image else [],\n+    #         \"description\": instance.description\n+    #     }\n \n     def create(self, validated_data):\n         request = self.context.get('request')\n         print(request.FILES,\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n"
                },
                {
                    "date": 1740638608588,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances  # Return a single instance\n+        return gallery_instances[]  # Return a single instance\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638614984,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances[]  # Return a single instance\n+        return gallery_instances[0] if   # Return a single instance\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638624014,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances[0] if   # Return a single instance\n+        return gallery_instances[0] if gallery_instances   # Return a single instance\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638651077,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances[0] if gallery_instances   # Return a single instance\n+        return gallery_instances[0] \n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638690347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances[0] \n+        return gallery_instances[] \n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638705618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances[] \n+        return gallery_instances \n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638744411,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return gallery_instances \n+        return super\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638751179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return super\n+        return super().\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638760223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return super().\n+        return super().cre\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638765468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return super().cre\n+        return super().create(validated_data)\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638778679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return super().create(validated_data)\n+        return super().create(gallery_instances,validated_data)\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638809089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return super().create(gallery_instances,validated_data)\n+        return super().create(college,validated_data)\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740638823124,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return super().create(college,validated_data)\n+        return super().create(validated_data)\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740639005888,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,10 +73,13 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-        return super().create(validated_data)\n+            print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n+    # Ensure a safe return\n+    return gallery_instances[0] if gallery_instances else None\n+\n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n         index = 0\n"
                },
                {
                    "date": 1740639020816,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,12 +73,12 @@\n         for image in images:\n             gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n             gallery_instances.append(gallery_instance)\n \n-            print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+            print(gallery_instances, \"DEBUG: Created Gallery Instances!!!!!!!!!!!!!!!\")\n \n-    # Ensure a safe return\n-    return gallery_instances[0] if gallery_instances else None\n+        # Ensure a safe return\n+        return gallery_instances[0] if gallery_instances else None\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n"
                },
                {
                    "date": 1740639079842,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,29 +57,44 @@\n     #         \"description\": instance.description\n     #     }\n \n     def create(self, validated_data):\n-        request = self.context.get('request')\n-        print(request.FILES,\"!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\")\n-        images = []\n-        index = 0\n+    request = self.context.get('request')\n+    print(request.FILES, \"DEBUG: Request Files\")\n \n-        while f'image[{index}]' in request.FILES:\n-            images.append(request.FILES[f'image[{index}]'])\n-            index += 1\n+    images = []\n+    index = 0\n \n-        college = self.context.get('college')  # Get college from context if needed\n-        gallery_instances = []\n+    # Ensure request.FILES is not empty\n+    if not request.FILES:\n+        raise serializers.ValidationError({\"error\": \"No files uploaded\"})\n \n-        for image in images:\n-            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n-            gallery_instances.append(gallery_instance)\n+    while f'image[{index}]' in request.FILES:\n+        images.append(request.FILES[f'image[{index}]'])\n+        index += 1\n \n-            print(gallery_instances, \"DEBUG: Created Gallery Instances!!!!!!!!!!!!!!!\")\n+    print(images, \"DEBUG: Collected Images\")\n \n-        # Ensure a safe return\n-        return gallery_instances[0] if gallery_instances else None\n+    college = self.context.get('college')  # Get college from context if needed\n+    if not college:\n+        raise serializers.ValidationError({\"error\": \"College context missing\"})\n \n+    gallery_instances = []\n+\n+    # Ensure there are images before creating instances\n+    if not images:\n+        raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n+\n+    for image in images:\n+        gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n+        gallery_instances.append(gallery_instance)\n+\n+    print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+\n+    # Return the first created instance (required by DRF)\n+    return gallery_instances[0]  # Ensure returning an instance, not a list\n+\n+\n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n         index = 0\n"
                },
                {
                    "date": 1740639085204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,42 +57,42 @@\n     #         \"description\": instance.description\n     #     }\n \n     def create(self, validated_data):\n-    request = self.context.get('request')\n-    print(request.FILES, \"DEBUG: Request Files\")\n+        request = self.context.get('request')\n+        print(request.FILES, \"DEBUG: Request Files\")\n \n-    images = []\n-    index = 0\n+        images = []\n+        index = 0\n \n-    # Ensure request.FILES is not empty\n-    if not request.FILES:\n-        raise serializers.ValidationError({\"error\": \"No files uploaded\"})\n+        # Ensure request.FILES is not empty\n+        if not request.FILES:\n+            raise serializers.ValidationError({\"error\": \"No files uploaded\"})\n \n-    while f'image[{index}]' in request.FILES:\n-        images.append(request.FILES[f'image[{index}]'])\n-        index += 1\n+        while f'image[{index}]' in request.FILES:\n+            images.append(request.FILES[f'image[{index}]'])\n+            index += 1\n \n-    print(images, \"DEBUG: Collected Images\")\n+        print(images, \"DEBUG: Collected Images\")\n \n-    college = self.context.get('college')  # Get college from context if needed\n-    if not college:\n-        raise serializers.ValidationError({\"error\": \"College context missing\"})\n+        college = self.context.get('college')  # Get college from context if needed\n+        if not college:\n+            raise serializers.ValidationError({\"error\": \"College context missing\"})\n \n-    gallery_instances = []\n+        gallery_instances = []\n \n-    # Ensure there are images before creating instances\n-    if not images:\n-        raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n+        # Ensure there are images before creating instances\n+        if not images:\n+            raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n \n-    for image in images:\n-        gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n-        gallery_instances.append(gallery_instance)\n+        for image in images:\n+            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n+            gallery_instances.append(gallery_instance)\n \n-    print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+        print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-    # Return the first created instance (required by DRF)\n-    return gallery_instances[0]  # Ensure returning an instance, not a list\n+        # Return the first created instance (required by DRF)\n+        return gallery_instances[0]  # Ensure returning an instance, not a list\n \n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n"
                },
                {
                    "date": 1740639139964,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,42 +57,38 @@\n     #         \"description\": instance.description\n     #     }\n \n     def create(self, validated_data):\n-        request = self.context.get('request')\n-        print(request.FILES, \"DEBUG: Request Files\")\n+    request = self.context.get('request')\n+    print(request.FILES, \"DEBUG: Request Files\")\n \n-        images = []\n-        index = 0\n+    images = []\n \n-        # Ensure request.FILES is not empty\n-        if not request.FILES:\n-            raise serializers.ValidationError({\"error\": \"No files uploaded\"})\n+    # Extract all image files dynamically\n+    for key, file_list in request.FILES.lists():\n+        if key.startswith(\"image[\"):  # Ensure only image keys are collected\n+            images.extend(file_list)\n \n-        while f'image[{index}]' in request.FILES:\n-            images.append(request.FILES[f'image[{index}]'])\n-            index += 1\n+    print(images, \"DEBUG: Collected Images\")\n \n-        print(images, \"DEBUG: Collected Images\")\n+    college = self.context.get('college')  # Get college from context if needed\n+    if not college:\n+        raise serializers.ValidationError({\"error\": \"College context missing\"})\n \n-        college = self.context.get('college')  # Get college from context if needed\n-        if not college:\n-            raise serializers.ValidationError({\"error\": \"College context missing\"})\n+    if not images:\n+        raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n \n-        gallery_instances = []\n+    gallery_instances = []\n \n-        # Ensure there are images before creating instances\n-        if not images:\n-            raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n+    for image in images:\n+        gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n+        gallery_instances.append(gallery_instance)\n \n-        for image in images:\n-            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n-            gallery_instances.append(gallery_instance)\n+    print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-        print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+    # Return the first created instance (DRF requires returning an object)\n+    return gallery_instances[0] if gallery_instances else None\n \n-        # Return the first created instance (required by DRF)\n-        return gallery_instances[0]  # Ensure returning an instance, not a list\n \n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n"
                },
                {
                    "date": 1740639230461,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,28 +69,37 @@\n             images.extend(file_list)\n \n     print(images, \"DEBUG: Collected Images\")\n \n-    college = self.context.get('college')  # Get college from context if needed\n+    # Fetch college from context\n+    college = self.context.get('college')\n     if not college:\n+        print(\"ERROR: College context is missing!\")\n         raise serializers.ValidationError({\"error\": \"College context missing\"})\n \n     if not images:\n+        print(\"ERROR: No valid images found in request!\")\n         raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n \n     gallery_instances = []\n \n+    # Create Gallery instances\n     for image in images:\n-        gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n-        gallery_instances.append(gallery_instance)\n+        try:\n+            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n+            gallery_instances.append(gallery_instance)\n+        except Exception as e:\n+            print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n+            raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n     print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-    # Return the first created instance (DRF requires returning an object)\n+    # Return the first created instance\n     return gallery_instances[0] if gallery_instances else None\n \n \n \n+\n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n         images = []\n         index = 0\n"
                },
                {
                    "date": 1740639235554,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,45 +57,45 @@\n     #         \"description\": instance.description\n     #     }\n \n     def create(self, validated_data):\n-    request = self.context.get('request')\n-    print(request.FILES, \"DEBUG: Request Files\")\n+        request = self.context.get('request')\n+        print(request.FILES, \"DEBUG: Request Files\")\n \n-    images = []\n+        images = []\n \n-    # Extract all image files dynamically\n-    for key, file_list in request.FILES.lists():\n-        if key.startswith(\"image[\"):  # Ensure only image keys are collected\n-            images.extend(file_list)\n+        # Extract all image files dynamically\n+        for key, file_list in request.FILES.lists():\n+            if key.startswith(\"image[\"):  # Ensure only image keys are collected\n+                images.extend(file_list)\n \n-    print(images, \"DEBUG: Collected Images\")\n+        print(images, \"DEBUG: Collected Images\")\n \n-    # Fetch college from context\n-    college = self.context.get('college')\n-    if not college:\n-        print(\"ERROR: College context is missing!\")\n-        raise serializers.ValidationError({\"error\": \"College context missing\"})\n+        # Fetch college from context\n+        college = self.context.get('college')\n+        if not college:\n+            print(\"ERROR: College context is missing!\")\n+            raise serializers.ValidationError({\"error\": \"College context missing\"})\n \n-    if not images:\n-        print(\"ERROR: No valid images found in request!\")\n-        raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n+        if not images:\n+            print(\"ERROR: No valid images found in request!\")\n+            raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n \n-    gallery_instances = []\n+        gallery_instances = []\n \n-    # Create Gallery instances\n-    for image in images:\n-        try:\n-            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n-            gallery_instances.append(gallery_instance)\n-        except Exception as e:\n-            print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n-            raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n+        # Create Gallery instances\n+        for image in images:\n+            try:\n+                gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n+                gallery_instances.append(gallery_instance)\n+            except Exception as e:\n+                print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n+                raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n-    print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+        print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-    # Return the first created instance\n-    return gallery_instances[0] if gallery_instances else None\n+        # Return the first created instance\n+        return gallery_instances[0] if gallery_instances else None\n \n \n \n \n"
                },
                {
                    "date": 1740639312175,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,20 @@\n \n     class Meta:\n         model = CollegeGallery\n         fields = ['images', 'description']  # Keep `images` as input, but use `image` in DB\n+        \n+    def get_serializer_context(self):\n+        context = super().get_serializer_context()\n+        college_id = self.request.data.get(\"college\")  # Fetch college ID from request data\n \n+        try:\n+            context[\"college\"] = College.objects.get(id=college_id)  # Fetch the college instance\n+        except College.DoesNotExist:\n+            context[\"college\"] = None  # Prevents errors if college ID is invalid\n+\n+        return context\n+\n     # def to_representation(self, instance):\n     #     \"\"\"\n     #     Ensures `images` is used instead of `image` in responses.\n     #     \"\"\"\n"
                },
                {
                    "date": 1740639878154,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,60 +37,51 @@\n         return [obj.image.url] if obj.image else []\n \n \n ### ✅ Write Serializer (Handles Multi-Image Uploads) ###\n+from rest_framework import serializers\n+from .models import CollegeGallery, College\n+\n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n     images = serializers.ListField(\n         child=serializers.ImageField(), write_only=True, required=False\n     )  # Accept multiple image uploads\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['images', 'description']  # Keep `images` as input, but use `image` in DB\n-        \n-    def get_serializer_context(self):\n-        context = super().get_serializer_context()\n-        college_id = self.request.data.get(\"college\")  # Fetch college ID from request data\n+        fields = ['images', 'description']\n \n-        try:\n-            context[\"college\"] = College.objects.get(id=college_id)  # Fetch the college instance\n-        except College.DoesNotExist:\n-            context[\"college\"] = None  # Prevents errors if college ID is invalid\n-\n-        return context\n-\n-    # def to_representation(self, instance):\n-    #     \"\"\"\n-    #     Ensures `images` is used instead of `image` in responses.\n-    #     \"\"\"\n-    #     return {\n-    #         # \"id\": instance.id,\n-    #         \"images\": [instance.image.url] if instance.image else [],\n-    #         \"description\": instance.description\n-    #     }\n-\n     def create(self, validated_data):\n-        request = self.context.get('request')\n+        \"\"\"\n+        Handles multiple image uploads and associates them with a College.\n+        \"\"\"\n+        request = self.context.get('request')  # Auto-injected by Django\n         print(request.FILES, \"DEBUG: Request Files\")\n \n         images = []\n \n         # Extract all image files dynamically\n         for key, file_list in request.FILES.lists():\n-            if key.startswith(\"image[\"):  # Ensure only image keys are collected\n+            if key.startswith(\"image[\"):\n                 images.extend(file_list)\n \n         print(images, \"DEBUG: Collected Images\")\n \n-        # Fetch college from context\n-        college = self.context.get('college')\n-        if not college:\n-            print(\"ERROR: College context is missing!\")\n-            raise serializers.ValidationError({\"error\": \"College context missing\"})\n+        # Fetch college ID directly from request data\n+        college_id = request.data.get(\"college\")\n+        if not college_id:\n+            print(\"ERROR: College ID is missing in the request!\")\n+            raise serializers.ValidationError({\"error\": \"College ID is required\"})\n \n+        try:\n+            college = College.objects.get(id=college_id)\n+        except College.DoesNotExist:\n+            print(f\"ERROR: College with ID {college_id} does not exist!\")\n+            raise serializers.ValidationError({\"error\": \"Invalid College ID\"})\n+\n         if not images:\n             print(\"ERROR: No valid images found in request!\")\n-            raise serializers.ValidationError({\"error\": \"No valid images found in request\"})\n+            raise serializers.ValidationError({\"error\": \"No valid images uploaded\"})\n \n         gallery_instances = []\n \n         # Create Gallery instances\n@@ -103,23 +94,24 @@\n                 raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n         print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-        # Return the first created instance\n+        # Return the first created instance (Required by DRF)\n         return gallery_instances[0] if gallery_instances else None\n \n-\n-\n-\n     def update(self, instance, validated_data):\n+        \"\"\"\n+        Handles updating and adding new images to an existing CollegeGallery instance.\n+        \"\"\"\n         request = self.context.get('request')\n         images = []\n-        index = 0\n \n-        while f'image[{index}]' in request.FILES:\n-            images.append(request.FILES[f'image[{index}]'])\n-            index += 1\n+        # Extract images from request\n\\ No newline at end of file\n+        for key, file_list in request.FILES.lists():\n+            if key.startswith(\"image[\"):\n+                images.extend(file_list)\n \n+        # Create new gallery entries for each uploaded image\n         for image in images:\n             CollegeGallery.objects.create(image=image, college=instance.college)\n \n-        return super().update(instance, validated_data)\n+        return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1740639889715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,12 +36,8 @@\n         \"\"\"Returns a list of image URLs for consistency.\"\"\"\n         return [obj.image.url] if obj.image else []\n \n \n-### ✅ Write Serializer (Handles Multi-Image Uploads) ###\n-from rest_framework import serializers\n-from .models import CollegeGallery, College\n-\n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n     images = serializers.ListField(\n         child=serializers.ImageField(), write_only=True, required=False\n     )  # Accept multiple image uploads\n@@ -113,5 +109,5 @@\n         # Create new gallery entries for each uploaded image\n         for image in images:\n             CollegeGallery.objects.create(image=image, college=instance.college)\n \n-        return super().update(instance, validated_data)\n\\ No newline at end of file\n+        return super().update(instance, validated_data)\n"
                },
                {
                    "date": 1740640219795,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,8 +36,10 @@\n         \"\"\"Returns a list of image URLs for consistency.\"\"\"\n         return [obj.image.url] if obj.image else []\n \n \n+from django.conf import settings\n+\n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n     images = serializers.ListField(\n         child=serializers.ImageField(), write_only=True, required=False\n     )  # Accept multiple image uploads\n@@ -90,24 +92,17 @@\n                 raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n         print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-        # Return the first created instance (Required by DRF)\n-        return gallery_instances[0] if gallery_instances else None\n+        return gallery_instances  # ✅ Return all created images\n \n-    def update(self, instance, validated_data):\n+    def to_representation(self, instance):\n         \"\"\"\n-        Handles updating and adding new images to an existing CollegeGallery instance.\n+        Converts `image` file paths into full URLs.\n         \"\"\"\n-        request = self.context.get('request')\n-        images = []\n-\n-        # Extract images from request\n-        for key, file_list in request.FILES.lists():\n-            if key.startswith(\"image[\"):\n-                images.extend(file_list)\n-\n-        # Create new gallery entries for each uploaded image\n-        for image in images:\n-            CollegeGallery.objects.create(image=image, college=instance.college)\n-\n-        return super().update(instance, validated_data)\n+        request = self.context.get('request')  # Get request to generate full URL\n+        return {\n+            \"id\": instance.id,\n+            \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n+            \"description\": instance.description,\n+            \"college\": instance.college.id if instance.college else None\n+        }\n"
                },
                {
                    "date": 1740640225943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -36,10 +36,8 @@\n         \"\"\"Returns a list of image URLs for consistency.\"\"\"\n         return [obj.image.url] if obj.image else []\n \n \n-from django.conf import settings\n-\n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n     images = serializers.ListField(\n         child=serializers.ImageField(), write_only=True, required=False\n     )  # Accept multiple image uploads\n"
                },
                {
                    "date": 1740640231155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,11 +31,11 @@\n     class Meta:\n         model = CollegeGallery\n         fields = ['id', 'college', 'images', 'description', 'created_date', 'updated_date']\n \n-    def get_images(self, obj):\n-        \"\"\"Returns a list of image URLs for consistency.\"\"\"\n-        return [obj.image.url] if obj.image else []\n+    # def get_images(self, obj):\n+    #     \"\"\"Returns a list of image URLs for consistency.\"\"\"\n+    #     return [obj.image.url] if obj.image else []\n \n \n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n     images = serializers.ListField(\n"
                },
                {
                    "date": 1740640238042,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n     images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['id', 'college', 'images', 'description', 'created_date', 'updated_date']\n+        fields = '__'\n \n     # def get_images(self, obj):\n     #     \"\"\"Returns a list of image URLs for consistency.\"\"\"\n     #     return [obj.image.url] if obj.image else []\n"
                },
                {
                    "date": 1740640243538,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,13 +25,13 @@\n \n ### ✅ Read Serializer (for Retrieving a Single Gallery) ###\n class CollegeGalleryRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n+    # images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n \n     class Meta:\n         model = CollegeGallery\n-        fields = '__'\n+        fields = '__all__'\n \n     # def get_images(self, obj):\n     #     \"\"\"Returns a list of image URLs for consistency.\"\"\"\n     #     return [obj.image.url] if obj.image else []\n"
                },
                {
                    "date": 1740640248682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,11 +17,11 @@\n     class Meta:\n         model = CollegeGallery\n         fields = ['id', 'college', 'images', 'description', 'created_date', 'updated_date']\n \n-    def get_images(self, obj):\n-        \"\"\"Returns a list of image URLs for consistency.\"\"\"\n-        return [obj.image.url] if obj.image else []\n+    # def get_images(self, obj):\n+    #     \"\"\"Returns a list of image URLs for consistency.\"\"\"\n+    #     return [obj.image.url] if obj.image else []\n \n \n ### ✅ Read Serializer (for Retrieving a Single Gallery) ###\n class CollegeGalleryRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1740640254682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['id', 'college', 'images', 'description', 'created_date', 'updated_date']\n+        fields = '__all__'\n \n     # def get_images(self, obj):\n     #     \"\"\"Returns a list of image URLs for consistency.\"\"\"\n     #     return [obj.image.url] if obj.image else []\n"
                },
                {
                    "date": 1740640269147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n \n ### ✅ Read Serializer (for Listing Multiple Galleries) ###\n class CollegeGalleryListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n+    # images = serializers.SerializerMethodField()  # Ensures `images` is the response key\n \n     class Meta:\n         model = CollegeGallery\n         fields = '__all__'\n"
                },
                {
                    "date": 1740640294356,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,7 +100,6 @@\n         request = self.context.get('request')  # Get request to generate full URL\n         return {\n             \"id\": instance.id,\n             \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n-            \"description\": instance.description,\n             \"college\": instance.college.id if instance.college else None\n         }\n"
                },
                {
                    "date": 1740640306531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,9 +43,9 @@\n     )  # Accept multiple image uploads\n \n     class Meta:\n         model = CollegeGallery\n-        fields = ['images', 'description']\n+        fields = \n \n     def create(self, validated_data):\n         \"\"\"\n         Handles multiple image uploads and associates them with a College.\n"
                },
                {
                    "date": 1740640313451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -37,15 +37,15 @@\n     #     return [obj.image.url] if obj.image else []\n \n \n class CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n-    images = serializers.ListField(\n-        child=serializers.ImageField(), write_only=True, required=False\n-    )  # Accept multiple image uploads\n+    # images = serializers.ListField(\n+    #     child=serializers.ImageField(), write_only=True, required=False\n+    # )  # Accept multiple image uploads\n \n     class Meta:\n         model = CollegeGallery\n-        fields = \n+        fields = '__all__'\n \n     def create(self, validated_data):\n         \"\"\"\n         Handles multiple image uploads and associates them with a College.\n"
                },
                {
                    "date": 1740640385342,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,8 @@\n         Converts `image` file paths into full URLs.\n         \"\"\"\n         request = self.context.get('request')  # Get request to generate full URL\n         return {\n-            \"id\": instance.id,\n+            # \"id\": instance.id,\n             \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n             \"college\": instance.college.id if instance.college else None\n         }\n"
                },
                {
                    "date": 1740640398530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -98,8 +98,8 @@\n         Converts `image` file paths into full URLs.\n         \"\"\"\n         request = self.context.get('request')  # Get request to generate full URL\n         return {\n-            # \"id\": instance.id,\n+            \"id\": instance.id,\n             \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n             \"college\": instance.college.id if instance.college else None\n         }\n"
                },
                {
                    "date": 1740640492748,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,13 +93,29 @@\n \n         return gallery_instances  # ✅ Return all created images\n \n     def to_representation(self, instance):\n-        \"\"\"\n-        Converts `image` file paths into full URLs.\n-        \"\"\"\n-        request = self.context.get('request')  # Get request to generate full URL\n-        return {\n-            \"id\": instance.id,\n-            \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n-            \"college\": instance.college.id if instance.college else None\n-        }\n+    \"\"\"\n+    Converts image file paths into full URLs and supports lists.\n+    \"\"\"\n+    request = self.context.get('request')  # Get request to generate full URL\n+\n+    # ✅ If `instance` is a list, return a list of serialized data\n+    if isinstance(instance, list):\n+        return [\n+            {\n+                \"id\": obj.id,\n+                \"image\": request.build_absolute_uri(obj.image.url) if obj.image else None,\n+                \"description\": obj.description,\n+                \"college\": obj.college.id if obj.college else None\n+            }\n+            for obj in instance\n+        ]\n+\n+    # ✅ If `instance` is a single object, return a single object representation\n+    return {\n+        \"id\": instance.id,\n+        \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n+        \"description\": instance.description,\n+        \"college\": instance.college.id if instance.college else None\n+    }\n+\n"
                },
                {
                    "date": 1740640498131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -93,29 +93,29 @@\n \n         return gallery_instances  # ✅ Return all created images\n \n     def to_representation(self, instance):\n-    \"\"\"\n-    Converts image file paths into full URLs and supports lists.\n-    \"\"\"\n-    request = self.context.get('request')  # Get request to generate full URL\n+        \"\"\"\n+        Converts image file paths into full URLs and supports lists.\n+        \"\"\"\n+        request = self.context.get('request')  # Get request to generate full URL\n \n-    # ✅ If `instance` is a list, return a list of serialized data\n-    if isinstance(instance, list):\n-        return [\n-            {\n-                \"id\": obj.id,\n-                \"image\": request.build_absolute_uri(obj.image.url) if obj.image else None,\n-                \"description\": obj.description,\n-                \"college\": obj.college.id if obj.college else None\n-            }\n-            for obj in instance\n-        ]\n+        # ✅ If `instance` is a list, return a list of serialized data\n+        if isinstance(instance, list):\n+            return [\n+                {\n+                    \"id\": obj.id,\n+                    \"image\": request.build_absolute_uri(obj.image.url) if obj.image else None,\n+                    \"description\": obj.description,\n+                    \"college\": obj.college.id if obj.college else None\n+                }\n+                for obj in instance\n+            ]\n \n-    # ✅ If `instance` is a single object, return a single object representation\n-    return {\n-        \"id\": instance.id,\n-        \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n-        \"description\": instance.description,\n-        \"college\": instance.college.id if instance.college else None\n-    }\n+        # ✅ If `instance` is a single object, return a single object representation\n+        return {\n+            \"id\": instance.id,\n+            \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n+            \"description\": instance.description,\n+            \"college\": instance.college.id if instance.college else None\n+        }\n \n"
                },
                {
                    "date": 1740640513331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,54 +46,53 @@\n         model = CollegeGallery\n         fields = '__all__'\n \n     def create(self, validated_data):\n-        \"\"\"\n-        Handles multiple image uploads and associates them with a College.\n-        \"\"\"\n-        request = self.context.get('request')  # Auto-injected by Django\n-        print(request.FILES, \"DEBUG: Request Files\")\n+    request = self.context.get('request')  # Auto-injected by Django\n+    print(request.FILES, \"DEBUG: Request Files\")\n \n-        images = []\n+    images = []\n \n-        # Extract all image files dynamically\n-        for key, file_list in request.FILES.lists():\n-            if key.startswith(\"image[\"):\n-                images.extend(file_list)\n+    # Extract all image files dynamically\n+    for key, file_list in request.FILES.lists():\n+        if key.startswith(\"image[\"):\n+            images.extend(file_list)\n \n-        print(images, \"DEBUG: Collected Images\")\n+    print(images, \"DEBUG: Collected Images\")\n \n-        # Fetch college ID directly from request data\n-        college_id = request.data.get(\"college\")\n-        if not college_id:\n-            print(\"ERROR: College ID is missing in the request!\")\n-            raise serializers.ValidationError({\"error\": \"College ID is required\"})\n+    # Fetch college ID directly from request data\n+    college_id = request.data.get(\"college\")\n+    if not college_id:\n+        print(\"ERROR: College ID is missing in the request!\")\n+        raise serializers.ValidationError({\"error\": \"College ID is required\"})\n \n-        try:\n-            college = College.objects.get(id=college_id)\n-        except College.DoesNotExist:\n-            print(f\"ERROR: College with ID {college_id} does not exist!\")\n-            raise serializers.ValidationError({\"error\": \"Invalid College ID\"})\n+    try:\n+        college = College.objects.get(id=college_id)\n+    except College.DoesNotExist:\n+        print(f\"ERROR: College with ID {college_id} does not exist!\")\n+        raise serializers.ValidationError({\"error\": \"Invalid College ID\"})\n \n-        if not images:\n-            print(\"ERROR: No valid images found in request!\")\n-            raise serializers.ValidationError({\"error\": \"No valid images uploaded\"})\n+    if not images:\n+        print(\"ERROR: No valid images found in request!\")\n+        raise serializers.ValidationError({\"error\": \"No valid images uploaded\"})\n \n-        gallery_instances = []\n+    gallery_instances = []\n \n-        # Create Gallery instances\n-        for image in images:\n-            try:\n-                gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n-                gallery_instances.append(gallery_instance)\n-            except Exception as e:\n-                print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n-                raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n+    # Create Gallery instances\n+    for image in images:\n+        try:\n+            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n+            gallery_instances.append(gallery_instance)\n+        except Exception as e:\n+            print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n+            raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n-        print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+    print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-        return gallery_instances  # ✅ Return all created images\n+    # ✅ Instead of returning a list, return the first instance\n+    return gallery_instances[0] if gallery_instances else None\n \n+\n     def to_representation(self, instance):\n         \"\"\"\n         Converts image file paths into full URLs and supports lists.\n         \"\"\"\n"
                },
                {
                    "date": 1740640523477,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,51 +46,51 @@\n         model = CollegeGallery\n         fields = '__all__'\n \n     def create(self, validated_data):\n-    request = self.context.get('request')  # Auto-injected by Django\n-    print(request.FILES, \"DEBUG: Request Files\")\n+        request = self.context.get('request')  # Auto-injected by Django\n+        print(request.FILES, \"DEBUG: Request Files\")\n \n-    images = []\n+        images = []\n \n-    # Extract all image files dynamically\n-    for key, file_list in request.FILES.lists():\n-        if key.startswith(\"image[\"):\n-            images.extend(file_list)\n+        # Extract all image files dynamically\n+        for key, file_list in request.FILES.lists():\n+            if key.startswith(\"image[\"):\n+                images.extend(file_list)\n \n-    print(images, \"DEBUG: Collected Images\")\n+        print(images, \"DEBUG: Collected Images\")\n \n-    # Fetch college ID directly from request data\n-    college_id = request.data.get(\"college\")\n-    if not college_id:\n-        print(\"ERROR: College ID is missing in the request!\")\n-        raise serializers.ValidationError({\"error\": \"College ID is required\"})\n+        # Fetch college ID directly from request data\n+        college_id = request.data.get(\"college\")\n+        if not college_id:\n+            print(\"ERROR: College ID is missing in the request!\")\n+            raise serializers.ValidationError({\"error\": \"College ID is required\"})\n \n-    try:\n-        college = College.objects.get(id=college_id)\n-    except College.DoesNotExist:\n-        print(f\"ERROR: College with ID {college_id} does not exist!\")\n-        raise serializers.ValidationError({\"error\": \"Invalid College ID\"})\n+        try:\n+            college = College.objects.get(id=college_id)\n+        except College.DoesNotExist:\n+            print(f\"ERROR: College with ID {college_id} does not exist!\")\n+            raise serializers.ValidationError({\"error\": \"Invalid College ID\"})\n \n-    if not images:\n-        print(\"ERROR: No valid images found in request!\")\n-        raise serializers.ValidationError({\"error\": \"No valid images uploaded\"})\n+        if not images:\n+            print(\"ERROR: No valid images found in request!\")\n+            raise serializers.ValidationError({\"error\": \"No valid images uploaded\"})\n \n-    gallery_instances = []\n+        gallery_instances = []\n \n-    # Create Gallery instances\n-    for image in images:\n-        try:\n-            gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n-            gallery_instances.append(gallery_instance)\n-        except Exception as e:\n-            print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n-            raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n+        # Create Gallery instances\n+        for image in images:\n+            try:\n+                gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n+                gallery_instances.append(gallery_instance)\n+            except Exception as e:\n+                print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n+                raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n-    print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+        print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n \n-    # ✅ Instead of returning a list, return the first instance\n-    return gallery_instances[0] if gallery_instances else None\n+        # ✅ Instead of returning a list, return the first instance\n+        return gallery_instances[0] if gallery_instances else None\n \n \n     def to_representation(self, instance):\n         \"\"\"\n"
                },
                {
                    "date": 1740640580992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,8 +113,7 @@\n         # ✅ If `instance` is a single object, return a single object representation\n         return {\n             \"id\": instance.id,\n             \"image\": request.build_absolute_uri(instance.image.url) if instance.image else None,\n-            \"description\": instance.description,\n             \"college\": instance.college.id if instance.college else None\n         }\n \n"
                },
                {
                    "date": 1740640680265,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,8 @@\n             return [\n                 {\n                     \"id\": obj.id,\n                     \"image\": request.build_absolute_uri(obj.image.url) if obj.image else None,\n-                    \"description\": obj.description,\n                     \"college\": obj.college.id if obj.college else None\n                 }\n                 for obj in instance\n             ]\n"
                },
                {
                    "date": 1740640819659,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -91,8 +91,9 @@\n         # ✅ Instead of returning a list, return the first instance\n         return gallery_instances[0] if gallery_instances else None\n \n \n+\n     def to_representation(self, instance):\n         \"\"\"\n         Converts image file paths into full URLs and supports lists.\n         \"\"\"\n"
                },
                {
                    "date": 1740640828994,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,10 +90,45 @@\n \n         # ✅ Instead of returning a list, return the first instance\n         return gallery_instances[0] if gallery_instances else None\n \n+    def update(self, instance, validated_data):\n+        request = self.context.get('request')\n+        print(request.FILES, \"DEBUG: Request Files for Update\")\n \n+        images = []\n \n+        # Extract all image files dynamically\n+        for key, file_list in request.FILES.lists():\n+            if key.startswith(\"image[\"):\n+                images.extend(file_list)\n+\n+        print(images, \"DEBUG: Collected Images for Update\")\n+\n+        # Update description only if it's in the request\n+        if 'description' in validated_data:\n+            instance.description = validated_data['description']\n+            instance.save()\n+\n+        gallery_instances = []\n+\n+        # Only add new images if they exist in the request\n+        if images:\n+            for image in images:\n+                try:\n+                    gallery_instance = CollegeGallery.objects.create(image=image, college=instance.college)\n+                    gallery_instances.append(gallery_instance)\n+                except Exception as e:\n+                    print(f\"ERROR: Failed to update CollegeGallery instance -> {e}\")\n+                    raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n+\n+            print(gallery_instances, \"DEBUG: Updated Gallery Instances\")\n+\n+        # ✅ Return instance with updated images in `image` key\n+        return instance\n+\n+\n+\n     def to_representation(self, instance):\n         \"\"\"\n         Converts image file paths into full URLs and supports lists.\n         \"\"\"\n"
                },
                {
                    "date": 1740722644996,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n                 except Exception as e:\n                     print(f\"ERROR: Failed to update CollegeGallery instance -> {e}\")\n                     raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n-            print(gallery_instances, \"DEBUG: Updated Gallery Instances\")\n+            # print(gallery_instances, \"DEBUG: Updated Gallery Instances\")\n \n         # ✅ Return instance with updated images in `image` key\n         return instance\n \n"
                },
                {
                    "date": 1740722651347,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,10 +120,10 @@\n                 except Exception as e:\n                     print(f\"ERROR: Failed to update CollegeGallery instance -> {e}\")\n                     raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n-            # print(gallery_instances, \"DEBUG: Updated Gallery Instances\")\n \n+\n         # ✅ Return instance with updated images in `image` key\n         return instance\n \n \n"
                },
                {
                    "date": 1740722661382,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,8 @@\n         fields = '__all__'\n \n     def create(self, validated_data):\n         request = self.context.get('request')  # Auto-injected by Django\n-        print(request.FILES, \"DEBUG: Request Files\")\n \n         images = []\n \n         # Extract all image files dynamically\n@@ -117,9 +116,8 @@\n                 try:\n                     gallery_instance = CollegeGallery.objects.create(image=image, college=instance.college)\n                     gallery_instances.append(gallery_instance)\n                 except Exception as e:\n-                    print(f\"ERROR: Failed to update CollegeGallery instance -> {e}\")\n                     raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n \n \n"
                },
                {
                    "date": 1740722669794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,14 +55,12 @@\n         for key, file_list in request.FILES.lists():\n             if key.startswith(\"image[\"):\n                 images.extend(file_list)\n \n-        print(images, \"DEBUG: Collected Images\")\n \n         # Fetch college ID directly from request data\n         college_id = request.data.get(\"college\")\n         if not college_id:\n-            print(\"ERROR: College ID is missing in the request!\")\n             raise serializers.ValidationError({\"error\": \"College ID is required\"})\n \n         try:\n             college = College.objects.get(id=college_id)\n"
                },
                {
                    "date": 1740722683152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,13 +64,12 @@\n \n         try:\n             college = College.objects.get(id=college_id)\n         except College.DoesNotExist:\n-            print(f\"ERROR: College with ID {college_id} does not exist!\")\n             raise serializers.ValidationError({\"error\": \"Invalid College ID\"})\n \n         if not images:\n-            print(\"ERROR: No valid images found in request!\")\n+            print(\"ERROR: No valid images found in request!\"\n             raise serializers.ValidationError({\"error\": \"No valid images uploaded\"})\n \n         gallery_instances = []\n \n"
                },
                {
                    "date": 1740722691950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,8 @@\n         except College.DoesNotExist:\n             raise serializers.ValidationError({\"error\": \"Invalid College ID\"})\n \n         if not images:\n-            print(\"ERROR: No valid images found in request!\"\n             raise serializers.ValidationError({\"error\": \"No valid images uploaded\"})\n \n         gallery_instances = []\n \n"
                },
                {
                    "date": 1740722701619,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,12 +77,11 @@\n             try:\n                 gallery_instance = CollegeGallery.objects.create(image=image, college=college)\n                 gallery_instances.append(gallery_instance)\n             except Exception as e:\n-                print(f\"ERROR: Failed to create CollegeGallery instance -> {e}\")\n                 raise serializers.ValidationError({\"error\": \"Failed to save image\", \"details\": str(e)})\n \n-        print(gallery_instances, \"DEBUG: Created Gallery Instances\")\n+        \n \n         # ✅ Instead of returning a list, return the first instance\n         return gallery_instances[0] if gallery_instances else None\n \n"
                },
                {
                    "date": 1740722747898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -86,18 +86,17 @@\n         return gallery_instances[0] if gallery_instances else None\n \n     def update(self, instance, validated_data):\n         request = self.context.get('request')\n-        print(request.FILES, \"DEBUG: Request Files for Update\")\n+       \n \n         images = []\n \n         # Extract all image files dynamically\n         for key, file_list in request.FILES.lists():\n             if key.startswith(\"image[\"):\n                 images.extend(file_list)\n \n-        print(images, \"DEBUG: Collected Images for Update\")\n \n         # Update description only if it's in the request\n         if 'description' in validated_data:\n             instance.description = validated_data['description']\n"
                }
            ],
            "date": 1739512004648,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import CollegeGallery\n\nclass CollegeGalleryListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeGallery\n        fields = '__all__'\n\nclass CollegeGalleryRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeGallery\n        fields = '__all__'\n\nclass CollegeGalleryWriteSerializers(serializers.ModelSerializer):\n    images = serializers.ListField(\n        child=serializers.ImageField(), write_only=True, required=False\n    )\n\n    class Meta:\n        model = CollegeGallery\n        fields = ['images', 'description']  # Excluding 'image' field since we're handling multiple images\n\n    def create(self, validated_data):\n        request = self.context.get('request')\n        images = []\n        index = 0\n\n        while f'image[{index}]' in request.FILES:\n            images.append(request.FILES[f'image[{index}]'])\n            index += 1\n\n        gallery_instances = []\n        for image in images:\n            gallery_instance = CollegeGallery.objects.create(image=image)\n            gallery_instances.append(gallery_instance)\n\n        return gallery_instances\n\n    def update(self, instance, validated_data):\n        request = self.context.get('request')\n        images = []\n        index = 0\n\n        while f'image[{index}]' in request.FILES:\n            images.append(request.FILES[f'image[{index}]'])\n            index += 1\n\n        for image in images:\n            CollegeGallery.objects.create(image=image)\n\n        return super().update(instance, validated_data)\n"
        }
    ]
}