{
    "sourceFile": "bucketimages/views.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1746593904427,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746593912489,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,1 +1,151 @@\n-what issues will arise if i directly started deleting files from aws bucket\n\\ No newline at end of file\n+import boto3\n+from botocore.exceptions import ClientError\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from django.conf import settings\n+import logging\n+\n+logger = logging.getLogger(__name__)\n+\n+class R2FileAPIView(APIView):\n+    def _get_r2_client(self):\n+        \"\"\"Initialize and return an R2 client\"\"\"\n+        return boto3.client(\n+            's3',\n+            endpoint_url=f'https://{settings.R2_CONFIG[\"account_id\"]}.r2.cloudflarestorage.com',\n+            aws_access_key_id=settings.R2_CONFIG['access_key_id'],\n+            aws_secret_access_key=settings.R2_CONFIG['secret_access_key'],\n+            region_name='auto'  # R2 requires 'auto' as the region\n+        )\n+\n+    def post(self, request, *args, **kwargs):\n+        \"\"\"\n+        Upload a file to R2 bucket\n+        Expected request: multipart/form-data with 'file' field\n+        \"\"\"\n+        if 'file' not in request.FILES:\n+            return Response(\n+                {'error': 'No file provided'}, \n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+\n+        file_obj = request.FILES['file']\n+        file_name = request.data.get('name', file_obj.name)\n+        \n+        try:\n+            s3_client = self._get_r2_client()\n+            s3_client.upload_fileobj(\n+                file_obj,\n+                settings.R2_CONFIG['bucket_name'],\n+                file_name,\n+                ExtraArgs={\n+                    'ContentType': file_obj.content_type,\n+                    # Add any additional metadata if needed\n+                    # 'Metadata': {'key': 'value'}\n+                }\n+            )\n+            \n+            file_url = f\"{settings.R2_CONFIG['public_url']}/{file_name}\"\n+            return Response(\n+                {\n+                    'message': 'File uploaded successfully',\n+                    'file_name': file_name,\n+                    'url': file_url\n+                },\n+                status=status.HTTP_201_CREATED\n+            )\n+        except ClientError as e:\n+            logger.error(f\"Error uploading file to R2: {str(e)}\")\n+            return Response(\n+                {'error': str(e)},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n+        except Exception as e:\n+            logger.error(f\"Unexpected error: {str(e)}\")\n+            return Response(\n+                {'error': 'An unexpected error occurred'},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n+\n+    def get(self, request, *args, **kwargs):\n+        \"\"\"\n+        List all files in the R2 bucket or get a specific file's URL\n+        If 'file_name' is provided in query params, returns that file's URL\n+        \"\"\"\n+        file_name = request.query_params.get('file_name')\n+        s3_client = self._get_r2_client()\n+        \n+        try:\n+            if file_name:\n+                # Check if the file exists and return its URL\n+                s3_client.head_object(\n+                    Bucket=settings.R2_CONFIG['bucket_name'],\n+                    Key=file_name\n+                )\n+                file_url = f\"{settings.R2_CONFIG['public_url']}/{file_name}\"\n+                return Response(\n+                    {\n+                        'file_name': file_name,\n+                        'url': file_url\n+                    },\n+                    status=status.HTTP_200_OK\n+                )\n+            else:\n+                # List all files in the bucket\n+                response = s3_client.list_objects_v2(\n+                    Bucket=settings.R2_CONFIG['bucket_name']\n+                )\n+                files = []\n+                if 'Contents' in response:\n+                    for obj in response['Contents']:\n+                        files.append({\n+                            'name': obj['Key'],\n+                            'size': obj['Size'],\n+                            'last_modified': obj['LastModified'].isoformat(),\n+                            'url': f\"{settings.R2_CONFIG['public_url']}/{obj['Key']}\"\n+                        })\n+                return Response(\n+                    {'files': files},\n+                    status=status.HTTP_200_OK\n+                )\n+        except ClientError as e:\n+            if e.response['Error']['Code'] == '404':\n+                return Response(\n+                    {'error': 'File not found'},\n+                    status=status.HTTP_404_NOT_FOUND\n+                )\n+            logger.error(f\"Error accessing R2: {str(e)}\")\n+            return Response(\n+                {'error': str(e)},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n+\n+    def delete(self, request, *args, **kwargs):\n+        \"\"\"\n+        Delete a file from R2 bucket\n+        Requires 'file_name' in query params\n+        \"\"\"\n+        file_name = request.query_params.get('file_name')\n+        if not file_name:\n+            return Response(\n+                {'error': 'file_name parameter is required'},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+        \n+        try:\n+            s3_client = self._get_r2_client()\n+            s3_client.delete_object(\n+                Bucket=settings.R2_CONFIG['bucket_name'],\n+                Key=file_name\n+            )\n+            return Response(\n+                {'message': f'File {file_name} deleted successfully'},\n+                status=status.HTTP_200_OK\n+            )\n+        except ClientError as e:\n+            logger.error(f\"Error deleting file from R2: {str(e)}\")\n+            return Response(\n+                {'error': str(e)},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746593920218,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import logging\n \n logger = logging.getLogger(__name__)\n \n-class R2FileAPIView(APIView):\n+class BucketAPIView(APIView):\n     def _get_r2_client(self):\n         \"\"\"Initialize and return an R2 client\"\"\"\n         return boto3.client(\n             's3',\n"
                },
                {
                    "date": 1746593939802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,9 +14,9 @@\n         return boto3.client(\n             's3',\n             endpoint_url=f'https://{settings.R2_CONFIG[\"account_id\"]}.r2.cloudflarestorage.com',\n             aws_access_key_id=settings.R2_CONFIG['access_key_id'],\n-            aws_secret_access_key=os['secret_access_key'],\n+            aws_secret_access_key=os.['secret_access_key'],\n             region_name='auto'  # R2 requires 'auto' as the region\n         )\n \n     def post(self, request, *args, **kwargs):\n"
                },
                {
                    "date": 1746593987136,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,152 @@\n+import boto3\n+from botocore.exceptions import ClientError\n+from rest_framework.views import APIView\n+from rest_framework.response import Response\n+from rest_framework import status\n+from django.conf import settings\n+import logging\n+import os\n+\n+logger = logging.getLogger(__name__)\n+\n+class BucketAPIView(APIView):\n+    def _get_r2_client(self):\n+        \"\"\"Initialize and return an R2 client\"\"\"\n+        return boto3.client(\n+            's3',\n+            endpoint_url=f'https://{settings.R2_CONFIG[\"account_id\"]}.r2.cloudflarestorage.com',\n+            aws_access_key_id=settings.R2_CONFIG['access_key_id'],\n+            aws_secret_access_key=os.getenv('AWS_SECRET_ACCESS_KEY') \n+            region_name='auto'  # R2 requires 'auto' as the region\n+        )\n+\n+    def post(self, request, *args, **kwargs):\n+        \"\"\"\n+        Upload a file to R2 bucket\n+        Expected request: multipart/form-data with 'file' field\n+        \"\"\"\n+        if 'file' not in request.FILES:\n+            return Response(\n+                {'error': 'No file provided'}, \n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+\n+        file_obj = request.FILES['file']\n+        file_name = request.data.get('name', file_obj.name)\n+        \n+        try:\n+            s3_client = self._get_r2_client()\n+            s3_client.upload_fileobj(\n+                file_obj,\n+                settings.R2_CONFIG['bucket_name'],\n+                file_name,\n+                ExtraArgs={\n+                    'ContentType': file_obj.content_type,\n+                    # Add any additional metadata if needed\n+                    # 'Metadata': {'key': 'value'}\n+                }\n+            )\n+            \n+            file_url = f\"{settings.R2_CONFIG['public_url']}/{file_name}\"\n+            return Response(\n+                {\n+                    'message': 'File uploaded successfully',\n+                    'file_name': file_name,\n+                    'url': file_url\n+                },\n+                status=status.HTTP_201_CREATED\n+            )\n+        except ClientError as e:\n+            logger.error(f\"Error uploading file to R2: {str(e)}\")\n+            return Response(\n+                {'error': str(e)},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n+        except Exception as e:\n+            logger.error(f\"Unexpected error: {str(e)}\")\n+            return Response(\n+                {'error': 'An unexpected error occurred'},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n+\n+    def get(self, request, *args, **kwargs):\n+        \"\"\"\n+        List all files in the R2 bucket or get a specific file's URL\n+        If 'file_name' is provided in query params, returns that file's URL\n+        \"\"\"\n+        file_name = request.query_params.get('file_name')\n+        s3_client = self._get_r2_client()\n+        \n+        try:\n+            if file_name:\n+                # Check if the file exists and return its URL\n+                s3_client.head_object(\n+                    Bucket=settings.R2_CONFIG['bucket_name'],\n+                    Key=file_name\n+                )\n+                file_url = f\"{settings.R2_CONFIG['public_url']}/{file_name}\"\n+                return Response(\n+                    {\n+                        'file_name': file_name,\n+                        'url': file_url\n+                    },\n+                    status=status.HTTP_200_OK\n+                )\n+            else:\n+                # List all files in the bucket\n+                response = s3_client.list_objects_v2(\n+                    Bucket=settings.R2_CONFIG['bucket_name']\n+                )\n+                files = []\n+                if 'Contents' in response:\n+                    for obj in response['Contents']:\n+                        files.append({\n+                            'name': obj['Key'],\n+                            'size': obj['Size'],\n+                            'last_modified': obj['LastModified'].isoformat(),\n+                            'url': f\"{settings.R2_CONFIG['public_url']}/{obj['Key']}\"\n+                        })\n+                return Response(\n+                    {'files': files},\n+                    status=status.HTTP_200_OK\n+                )\n+        except ClientError as e:\n+            if e.response['Error']['Code'] == '404':\n+                return Response(\n+                    {'error': 'File not found'},\n+                    status=status.HTTP_404_NOT_FOUND\n+                )\n+            logger.error(f\"Error accessing R2: {str(e)}\")\n+            return Response(\n+                {'error': str(e)},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n+\n+    def delete(self, request, *args, **kwargs):\n+        \"\"\"\n+        Delete a file from R2 bucket\n+        Requires 'file_name' in query params\n+        \"\"\"\n+        file_name = request.query_params.get('file_name')\n+        if not file_name:\n+            return Response(\n+                {'error': 'file_name parameter is required'},\n+                status=status.HTTP_400_BAD_REQUEST\n+            )\n+        \n+        try:\n+            s3_client = self._get_r2_client()\n+            s3_client.delete_object(\n+                Bucket=settings.R2_CONFIG['bucket_name'],\n+                Key=file_name\n+            )\n+            return Response(\n+                {'message': f'File {file_name} deleted successfully'},\n+                status=status.HTTP_200_OK\n+            )\n+        except ClientError as e:\n+            logger.error(f\"Error deleting file from R2: {str(e)}\")\n+            return Response(\n+                {'error': str(e)},\n+                status=status.HTTP_500_INTERNAL_SERVER_ERROR\n+            )\n\\ No newline at end of file\n"
                }
            ],
            "date": 1746593904427,
            "name": "Commit-0",
            "content": "what issues will arise if i directly started deleting files from aws bucket"
        }
    ]
}