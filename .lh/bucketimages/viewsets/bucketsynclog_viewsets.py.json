{
    "sourceFile": "bucketimages/viewsets/bucketsynclog_viewsets.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1746685034845,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746685041365,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     serializer_class = BucketSyncLogListSerializers\n     # permission_classes = [bucketimagesPermission]\n     # authentication_classes = [JWTAuthentication]\n     #pagination_class = MyPageNumberPagination\n-    queryset = BucketSyncLog.objects.all()\n+    queryset = BucketSyncLog.objects.all().order_by\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n@@ -21,9 +21,9 @@\n     # }\n \n     def get_queryset(self):\n         queryset = super().get_queryset()\n-        #return queryset\n+        return queryset\n \n     def get_serializer_class(self):\n         if self.action in ['create', 'update', 'partial_update']:\n             return BucketSyncLogWriteSerializers\n"
                },
                {
                    "date": 1746685046873,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,10 +8,10 @@\n class bucketsynclogViewsets(viewsets.ModelViewSet):\n     serializer_class = BucketSyncLogListSerializers\n     # permission_classes = [bucketimagesPermission]\n     # authentication_classes = [JWTAuthentication]\n-    #pagination_class = MyPageNumberPagination\n-    queryset = BucketSyncLog.objects.all().order_by\n+    pagination_class = MyPageNumberPagination\n+    queryset = BucketSyncLog.objects.all().order_by('-id')\n \n     filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n     search_fields = ['id']\n     ordering_fields = ['id']\n"
                },
                {
                    "date": 1746685104738,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n from ..utilities.importbase import *\n \n class bucketsynclogViewsets(viewsets.ModelViewSet):\n     serializer_class = BucketSyncLogListSerializers\n-    # permission_classes = [bucketimagesPermission]\n+    permission_classes = [ViewOnlyOrSuperuserDelete]\n     # authentication_classes = [JWTAuthentication]\n     pagination_class = MyPageNumberPagination\n     queryset = BucketSyncLog.objects.all().order_by('-id')\n \n"
                },
                {
                    "date": 1746685109998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import BucketSyncLog\n from ..serializers.bucketsynclog_serializers import BucketSyncLogListSerializers, BucketSyncLogRetrieveSerializers, BucketSyncLogWriteSerializers\n from ..utilities.importbase import *\n-\n+from permissions import ViewOnlyOrSuperuserDelete\n class bucketsynclogViewsets(viewsets.ModelViewSet):\n     serializer_class = BucketSyncLogListSerializers\n     permission_classes = [ViewOnlyOrSuperuserDelete]\n     # authentication_classes = [JWTAuthentication]\n"
                },
                {
                    "date": 1746685241618,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n from django_filters.rest_framework import DjangoFilterBackend\n from ..models import BucketSyncLog\n from ..serializers.bucketsynclog_serializers import BucketSyncLogListSerializers, BucketSyncLogRetrieveSerializers, BucketSyncLogWriteSerializers\n from ..utilities.importbase import *\n-from permissions import ViewOnlyOrSuperuserDelete\n+from ..permissions import ViewOnlyOrSuperuserDelete\n class bucketsynclogViewsets(viewsets.ModelViewSet):\n     serializer_class = BucketSyncLogListSerializers\n     permission_classes = [ViewOnlyOrSuperuserDelete]\n     # authentication_classes = [JWTAuthentication]\n"
                }
            ],
            "date": 1746685034845,
            "name": "Commit-0",
            "content": "from rest_framework import viewsets\nfrom rest_framework.filters import SearchFilter, OrderingFilter\nfrom django_filters.rest_framework import DjangoFilterBackend\nfrom ..models import BucketSyncLog\nfrom ..serializers.bucketsynclog_serializers import BucketSyncLogListSerializers, BucketSyncLogRetrieveSerializers, BucketSyncLogWriteSerializers\nfrom ..utilities.importbase import *\n\nclass bucketsynclogViewsets(viewsets.ModelViewSet):\n    serializer_class = BucketSyncLogListSerializers\n    # permission_classes = [bucketimagesPermission]\n    # authentication_classes = [JWTAuthentication]\n    #pagination_class = MyPageNumberPagination\n    queryset = BucketSyncLog.objects.all()\n\n    filter_backends = [SearchFilter, DjangoFilterBackend, OrderingFilter]\n    search_fields = ['id']\n    ordering_fields = ['id']\n\n    # filterset_fields = {\n    #     'id': ['exact'],\n    # }\n\n    def get_queryset(self):\n        queryset = super().get_queryset()\n        #return queryset\n\n    def get_serializer_class(self):\n        if self.action in ['create', 'update', 'partial_update']:\n            return BucketSyncLogWriteSerializers\n        elif self.action == 'retrieve':\n            return BucketSyncLogRetrieveSerializers\n        return super().get_serializer_class()\n\n    # @action(detail=False, methods=['get'], name=\"action_name\", url_path=\"url_path\")\n    # def action_name(self, request, *args, **kwargs):\n    #     return super().list(request, *args, **kwargs)\n\n"
        }
    ]
}