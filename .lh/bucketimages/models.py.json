{
    "sourceFile": "bucketimages/models.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1746683982296,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746685291941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     Model to store metadata about files in the R2 bucket\n     \"\"\"\n     key = models.CharField(max_length=1024, unique=True, db_index=True)\n     size = models.BigIntegerField()\n+    url\n     last_modified = models.DateTimeField()\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     extension = models.CharField(max_length=50, blank=True, null=True, db_index=True)\n     is_deleted = models.BooleanField(default=False)\n"
                },
                {
                    "date": 1746685490231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     Model to store metadata about files in the R2 bucket\n     \"\"\"\n     key = models.CharField(max_length=1024, unique=True, db_index=True)\n     size = models.BigIntegerField()\n-    url\n+    url = models.CharField(max_length=1024,null=)\n     last_modified = models.DateTimeField()\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     extension = models.CharField(max_length=50, blank=True, null=True, db_index=True)\n     is_deleted = models.BooleanField(default=False)\n"
                },
                {
                    "date": 1746685539161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,8 @@\n     Model to store metadata about files in the R2 bucket\n     \"\"\"\n     key = models.CharField(max_length=1024, unique=True, db_index=True)\n     size = models.BigIntegerField()\n-    url = models.CharField(max_length=1024,null=)\n     last_modified = models.DateTimeField()\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     extension = models.CharField(max_length=50, blank=True, null=True, db_index=True)\n     is_deleted = models.BooleanField(default=False)\n"
                },
                {
                    "date": 1746685551204,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n     Model to store metadata about files in the R2 bucket\n     \"\"\"\n     key = models.CharField(max_length=1024, unique=True, db_index=True)\n     size = models.BigIntegerField()\n+    url = models.CharField(max_length=1024,null=True, blank=True)\n     last_modified = models.DateTimeField()\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     extension = models.CharField(max_length=50, blank=True, null=True, db_index=True)\n     is_deleted = models.BooleanField(default=False)\n"
                },
                {
                    "date": 1746688295470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,71 +1,71 @@\n from django.db import models\n-\n-# Create your models here.\n-# models.py\n-from django.db import models\n-from django.utils import timezone\n from django.conf import settings\n+import os\n+from datetime import datetime\n \n class BucketFile(models.Model):\n     \"\"\"\n-    Model to store metadata about files in the R2 bucket\n+    Model to store metadata about files in the storage bucket\n     \"\"\"\n+    # File identification\n     key = models.CharField(max_length=1024, unique=True, db_index=True)\n+    original_filename = models.CharField(max_length=255, blank=True, null=True)\n+    \n+    # File metadata\n     size = models.BigIntegerField()\n-    url = models.CharField(max_length=1024,null=True, blank=True)\n-    last_modified = models.DateTimeField()\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     extension = models.CharField(max_length=50, blank=True, null=True, db_index=True)\n-    is_deleted = models.BooleanField(default=False)\n+    \n+    # Timestamps\n     created_at = models.DateTimeField(auto_now_add=True)\n     updated_at = models.DateTimeField(auto_now=True)\n+    last_modified = models.DateTimeField()\n     \n-    # Cache control fields\n-    cache_control = models.CharField(max_length=255, blank=True, null=True)\n-    etag = models.CharField(max_length=255, blank=True, null=True)\n+    # Relationships (optional - if you want to track which model owns the file)\n+    object_id = models.PositiveIntegerField(null=True, blank=True)\n+    object_type = models.CharField(max_length=100, null=True, blank=True)\n     \n+    # Status\n+    is_deleted = models.BooleanField(default=False)\n+    \n     class Meta:\n         verbose_name = \"Bucket File\"\n         verbose_name_plural = \"Bucket Files\"\n-        ordering = ['-last_modified']\n+        ordering = ['-created_at']\n         indexes = [\n             models.Index(fields=['key']),\n             models.Index(fields=['extension']),\n-            models.Index(fields=['last_modified']),\n-            models.Index(fields=['size']),\n+            models.Index(fields=['content_type']),\n+            models.Index(fields=['object_type', 'object_id']),\n         ]\n     \n     def __str__(self):\n         return self.key\n     \n     @property\n     def name(self):\n-        return self.key.split('/')[-1]\n+        return os.path.basename(self.key)\n     \n     @property\n     def url(self):\n         if hasattr(settings, 'AWS_S3_CUSTOM_DOMAIN') and settings.AWS_S3_CUSTOM_DOMAIN:\n             return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.key}\"\n         return f\"{settings.AWS_S3_ENDPOINT_URL}/{settings.AWS_STORAGE_BUCKET_NAME}/{self.key}\"\n-\n-\n\\ No newline at end of file\n-class BucketSyncLog(models.Model):\n-    \"\"\"\n-    Model to track when we last synced with the R2 bucket\n-    \"\"\"\n-    started_at = models.DateTimeField(auto_now_add=True)\n-    completed_at = models.DateTimeField(null=True, blank=True)\n-    total_files = models.IntegerField(default=0)\n-    new_files = models.IntegerField(default=0)\n-    updated_files = models.IntegerField(default=0)\n-    deleted_files = models.IntegerField(default=0)\n-    success = models.BooleanField(default=False)\n-    error_message = models.TextField(blank=True, null=True)\n     \n-    class Meta:\n-        verbose_name = \"Bucket Sync Log\"\n-        verbose_name_plural = \"Bucket Sync Logs\"\n-        ordering = ['-started_at']\n-    \n-    def __str__(self):\n-        return f\"Sync at {self.started_at} ({'success' if self.success else 'failed'})\"\n+    @classmethod\n+    def create_from_file_field(cls, instance, field_name, file_field):\n+        \"\"\"Helper method to create a BucketFile record from a FileField\"\"\"\n+        if not file_field:\n+            return None\n+            \n+        file_name = os.path.basename(file_field.name)\n+        return cls.objects.create(\n+            key=file_field.name,\n+            original_filename=file_name,\n+            size=file_field.size,\n+            content_type=getattr(file_field, 'content_type', None),\n+            extension=os.path.splitext(file_name)[1][1:].lower() or None,\n+            last_modified=datetime.now(),  # or get from file system if available\n+            object_id=instance.pk,\n+            object_type=instance.__class__.__name__\n+        )\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746688387253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,68 +4,35 @@\n from datetime import datetime\n \n class BucketFile(models.Model):\n     \"\"\"\n-    Model to store metadata about files in the storage bucket\n+    Simplified model to track files with minimal fields\n     \"\"\"\n-    # File identification\n-    key = models.CharField(max_length=1024, unique=True, db_index=True)\n-    original_filename = models.CharField(max_length=255, blank=True, null=True)\n-    \n-    # File metadata\n-    size = models.BigIntegerField()\n+    file = models.FileField(upload_to='bucket_files/')  # Actual file storage\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n-    extension = models.CharField(max_length=50, blank=True, null=True, db_index=True)\n-    \n-    # Timestamps\n+    object_id = models.PositiveIntegerField(null=True, blank=True)\n     created_at = models.DateTimeField(auto_now_add=True)\n-    updated_at = models.DateTimeField(auto_now=True)\n-    last_modified = models.DateTimeField()\n     \n-    # Relationships (optional - if you want to track which model owns the file)\n-    object_id = models.PositiveIntegerField(null=True, blank=True)\n-    object_type = models.CharField(max_length=100, null=True, blank=True)\n+    # Automatically populated fields\n+    size = models.BigIntegerField(blank=True, null=True)\n+    url = models.CharField(max_length=1024, blank=True, null=True)\n     \n-    # Status\n-    is_deleted = models.BooleanField(default=False)\n-    \n     class Meta:\n         verbose_name = \"Bucket File\"\n         verbose_name_plural = \"Bucket Files\"\n         ordering = ['-created_at']\n-        indexes = [\n-            models.Index(fields=['key']),\n-            models.Index(fields=['extension']),\n-            models.Index(fields=['content_type']),\n-            models.Index(fields=['object_type', 'object_id']),\n-        ]\n     \n-    def __str__(self):\n-        return self.key\n+    def save(self, *args, **kwargs):\n+        \"\"\"Auto-populate size and url when saving\"\"\"\n+        if self.file:\n+            self.size = self.file.size\n+            self.url = self.get_absolute_url()\n+        super().save(*args, **kwargs)\n     \n-    @property\n-    def name(self):\n-        return os.path.basename(self.key)\n-    \n-    @property\n-    def url(self):\n+    def get_absolute_url(self):\n+        \"\"\"Generate URL for the file\"\"\"\n         if hasattr(settings, 'AWS_S3_CUSTOM_DOMAIN') and settings.AWS_S3_CUSTOM_DOMAIN:\n-            return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.key}\"\n-        return f\"{settings.AWS_S3_ENDPOINT_URL}/{settings.AWS_STORAGE_BUCKET_NAME}/{self.key}\"\n+            return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.file.name}\"\n+        return getattr(self.file, 'url', None)\n     \n-    @classmethod\n\\ No newline at end of file\n-    def create_from_file_field(cls, instance, field_name, file_field):\n-        \"\"\"Helper method to create a BucketFile record from a FileField\"\"\"\n-        if not file_field:\n-            return None\n-            \n-        file_name = os.path.basename(file_field.name)\n-        return cls.objects.create(\n-            key=file_field.name,\n-            original_filename=file_name,\n-            size=file_field.size,\n-            content_type=getattr(file_field, 'content_type', None),\n-            extension=os.path.splitext(file_name)[1][1:].lower() or None,\n-            last_modified=datetime.now(),  # or get from file system if available\n-            object_id=instance.pk,\n-            object_type=instance.__class__.__name__\n-        )\n+    def __str__(self):\n+        return self.file.name if self.file else \"No file\"\n\\ No newline at end of file\n"
                },
                {
                    "date": 1746690045229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n class BucketFile(models.Model):\n     \"\"\"\n     Simplified model to track files with minimal fields\n     \"\"\"\n-    file = models.FileField(upload_to='bucket_files/')  # Actual file storage\n+    file = models.FileField(upload_to='bucket_files/',)  # Actual file storage\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     object_id = models.PositiveIntegerField(null=True, blank=True)\n     created_at = models.DateTimeField(auto_now_add=True)\n     \n"
                },
                {
                    "date": 1746695456444,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,33 @@\n from django.db import models\n from django.conf import settings\n import os\n-from datetime import datetime\n \n class BucketFile(models.Model):\n     \"\"\"\n     Simplified model to track files with minimal fields\n     \"\"\"\n-    file = models.FileField(upload_to='bucket_files/',)  # Actual file storage\n+    file = models.FileField(upload_to='bucket_files/', null=True, blank=True)  # Actual file storage\n+    name = models.CharField(max_length=255, blank=True, null=True)  # ✅ New field for filename\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     object_id = models.PositiveIntegerField(null=True, blank=True)\n     created_at = models.DateTimeField(auto_now_add=True)\n     \n     # Automatically populated fields\n     size = models.BigIntegerField(blank=True, null=True)\n     url = models.CharField(max_length=1024, blank=True, null=True)\n-    \n+\n     class Meta:\n         verbose_name = \"Bucket File\"\n         verbose_name_plural = \"Bucket Files\"\n         ordering = ['-created_at']\n     \n     def save(self, *args, **kwargs):\n-        \"\"\"Auto-populate size and url when saving\"\"\"\n+        \"\"\"Auto-populate size, URL, and file name\"\"\"\n         if self.file:\n             self.size = self.file.size\n             self.url = self.get_absolute_url()\n+            self.name = os.path.basename(self.file.name)  # ✅ Save just the file name\n         super().save(*args, **kwargs)\n     \n     def get_absolute_url(self):\n         \"\"\"Generate URL for the file\"\"\"\n@@ -34,5 +35,5 @@\n             return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.file.name}\"\n         return getattr(self.file, 'url', None)\n     \n     def __str__(self):\n-        return self.file.name if self.file else \"No file\"\n\\ No newline at end of file\n+        return self.name or \"No file\"\n"
                },
                {
                    "date": 1746695465290,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,9 @@\n     created_at = models.DateTimeField(auto_now_add=True)\n     \n     # Automatically populated fields\n     size = models.BigIntegerField(blank=True, null=True)\n-    url = models.CharField(max_length=1024, blank=True, null=True)\n+    # url = models.CharField(max_length=1024, blank=True, null=True)\n \n     class Meta:\n         verbose_name = \"Bucket File\"\n         verbose_name_plural = \"Bucket Files\"\n@@ -28,12 +28,12 @@\n             self.url = self.get_absolute_url()\n             self.name = os.path.basename(self.file.name)  # ✅ Save just the file name\n         super().save(*args, **kwargs)\n     \n-    def get_absolute_url(self):\n-        \"\"\"Generate URL for the file\"\"\"\n-        if hasattr(settings, 'AWS_S3_CUSTOM_DOMAIN') and settings.AWS_S3_CUSTOM_DOMAIN:\n-            return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.file.name}\"\n-        return getattr(self.file, 'url', None)\n+    # def get_absolute_url(self):\n+    #     \"\"\"Generate URL for the file\"\"\"\n+    #     if hasattr(settings, 'AWS_S3_CUSTOM_DOMAIN') and settings.AWS_S3_CUSTOM_DOMAIN:\n+    #         return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.file.name}\"\n+    #     return getattr(self.file, 'url', None)\n     \n     def __str__(self):\n         return self.name or \"No file\"\n"
                },
                {
                    "date": 1746695473523,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,10 +24,10 @@\n     def save(self, *args, **kwargs):\n         \"\"\"Auto-populate size, URL, and file name\"\"\"\n         if self.file:\n             self.size = self.file.size\n-            self.url = self.get_absolute_url()\n-            self.name = os.path.basename(self.file.name)  # ✅ Save just the file name\n+            # self.url = self.get_absolute_url()\n+            self.name = os.path.basename(self.file.name) \n         super().save(*args, **kwargs)\n     \n     # def get_absolute_url(self):\n     #     \"\"\"Generate URL for the file\"\"\"\n"
                },
                {
                    "date": 1746695755004,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,15 +25,8 @@\n         \"\"\"Auto-populate size, URL, and file name\"\"\"\n         if self.file:\n             self.size = self.file.size\n             # self.url = self.get_absolute_url()\n-            self.name = os.path.basename(self.file.name) \n+            self.name = os.path.basename(self.file.name)\n         super().save(*args, **kwargs)\n-    \n-    # def get_absolute_url(self):\n-    #     \"\"\"Generate URL for the file\"\"\"\n-    #     if hasattr(settings, 'AWS_S3_CUSTOM_DOMAIN') and settings.AWS_S3_CUSTOM_DOMAIN:\n-    #         return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.file.name}\"\n-    #     return getattr(self.file, 'url', None)\n-    \n     def __str__(self):\n         return self.name or \"No file\"\n"
                },
                {
                    "date": 1746695767663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     file = models.FileField(upload_to='bucket_files/', null=True, blank=True)  # Actual file storage\n     name = models.CharField(max_length=255, blank=True, null=True)  # ✅ New field for filename\n     content_type = models.CharField(max_length=255, blank=True, null=True)\n     object_id = models.PositiveIntegerField(null=True, blank=True)\n-    created_at = models.DateTimeField(auto_now_add=True)\n+    created_at = models.DateField(auto_now_add=True)\n     \n     # Automatically populated fields\n     size = models.BigIntegerField(blank=True, null=True)\n     # url = models.CharField(max_length=1024, blank=True, null=True)\n"
                }
            ],
            "date": 1746683982296,
            "name": "Commit-0",
            "content": "from django.db import models\n\n# Create your models here.\n# models.py\nfrom django.db import models\nfrom django.utils import timezone\nfrom django.conf import settings\n\nclass BucketFile(models.Model):\n    \"\"\"\n    Model to store metadata about files in the R2 bucket\n    \"\"\"\n    key = models.CharField(max_length=1024, unique=True, db_index=True)\n    size = models.BigIntegerField()\n    last_modified = models.DateTimeField()\n    content_type = models.CharField(max_length=255, blank=True, null=True)\n    extension = models.CharField(max_length=50, blank=True, null=True, db_index=True)\n    is_deleted = models.BooleanField(default=False)\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n    \n    # Cache control fields\n    cache_control = models.CharField(max_length=255, blank=True, null=True)\n    etag = models.CharField(max_length=255, blank=True, null=True)\n    \n    class Meta:\n        verbose_name = \"Bucket File\"\n        verbose_name_plural = \"Bucket Files\"\n        ordering = ['-last_modified']\n        indexes = [\n            models.Index(fields=['key']),\n            models.Index(fields=['extension']),\n            models.Index(fields=['last_modified']),\n            models.Index(fields=['size']),\n        ]\n    \n    def __str__(self):\n        return self.key\n    \n    @property\n    def name(self):\n        return self.key.split('/')[-1]\n    \n    @property\n    def url(self):\n        if hasattr(settings, 'AWS_S3_CUSTOM_DOMAIN') and settings.AWS_S3_CUSTOM_DOMAIN:\n            return f\"https://{settings.AWS_S3_CUSTOM_DOMAIN}/{self.key}\"\n        return f\"{settings.AWS_S3_ENDPOINT_URL}/{settings.AWS_STORAGE_BUCKET_NAME}/{self.key}\"\n\n\nclass BucketSyncLog(models.Model):\n    \"\"\"\n    Model to track when we last synced with the R2 bucket\n    \"\"\"\n    started_at = models.DateTimeField(auto_now_add=True)\n    completed_at = models.DateTimeField(null=True, blank=True)\n    total_files = models.IntegerField(default=0)\n    new_files = models.IntegerField(default=0)\n    updated_files = models.IntegerField(default=0)\n    deleted_files = models.IntegerField(default=0)\n    success = models.BooleanField(default=False)\n    error_message = models.TextField(blank=True, null=True)\n    \n    class Meta:\n        verbose_name = \"Bucket Sync Log\"\n        verbose_name_plural = \"Bucket Sync Logs\"\n        ordering = ['-started_at']\n    \n    def __str__(self):\n        return f\"Sync at {self.started_at} ({'success' if self.success else 'failed'})\""
        }
    ]
}