{
    "sourceFile": "bucketimages/signals.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1746696429202,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1746697258085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,8 @@\n     Facility: [\"image\"],\n     CollegeFacility: [\"image\"],\n     Gallery: [\"image\"],\n     InformationGallery: [\"image\"],\n-    Information: [\"featured_image\"],\n     InformationFiles: [\"file\"],\n     InformationCategory: [\"image\"],\n     Level: [\"image\"],\n     SubLevel: [\"image\"],\n"
                },
                {
                    "date": 1746697393625,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,8 @@\n     Certification: [\"image\"],\n     Course: [\"image\"],\n     CourseCurriculumFile: [\"curriculum_file_upload\"],\n     EventGallery: [\"image\"],\n-    Event: [\"featured_image\"],\n     EventOrganizer: [\"image\"],\n     Facility: [\"image\"],\n     CollegeFacility: [\"image\"],\n     Gallery: [\"image\"],\n"
                },
                {
                    "date": 1746697807012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,77 @@\n-import os\n-from mimetypes import guess_type\n-from django.db.models.signals import post_save\n-from django.dispatch import receiver\n-from django.core.files.storage import default_storage\n-from bucketimages.models import BucketFile\n+# import os\n+# from mimetypes import guess_type\n+# from django.db.models.signals import post_save\n+# from django.dispatch import receiver\n+# from django.core.files.storage import default_storage\n+# from bucketimages.models import BucketFile\n \n-# Import monitored models\n-from accounts.models import CustomUser\n-from collegemanagement.models import College, CollegeGallery\n-from advertisement.models import Advertisement\n-from affiliation.models import Affiliation\n-from certification.models import Certification\n-from coursemanagement.models import Course, CourseCurriculumFile\n-from event.models import EventGallery, Event, EventOrganizer\n-from facilities.models import Facility, CollegeFacility\n-from gallery.models import Gallery\n-from informationmanagement.models import (\n-    InformationGallery, Information, InformationFiles, InformationCategory\n-)\n-from level.models import Level, SubLevel\n-from popup.models import Popup\n-from socialmedia.models import SocialMedia, CollegeSocialMedia\n+# # Import monitored models\n+# from accounts.models import CustomUser\n+# from collegemanagement.models import College, CollegeGallery\n+# from advertisement.models import Advertisement\n+# from affiliation.models import Affiliation\n+# from certification.models import Certification\n+# from coursemanagement.models import Course, CourseCurriculumFile\n+# from event.models import EventGallery, Event, EventOrganizer\n+# from facilities.models import Facility, CollegeFacility\n+# from gallery.models import Gallery\n+# from informationmanagement.models import (\n+#     InformationGallery, Information, InformationFiles, InformationCategory\n+# )\n+# from level.models import Level, SubLevel\n+# from popup.models import Popup\n+# from socialmedia.models import SocialMedia, CollegeSocialMedia\n \n-# ✅ Model-to-file-fields mapping\n-MONITORED_MODELS = {\n-    CustomUser: [\"professional_image\", \"avatar\"],\n-    College: [\"dp_image\", \"banner_image\", \"brochure\"],\n-    CollegeGallery: [\"image\"],\n-    Advertisement: [\"image\"],\n-    Affiliation: [\"logo_image\", \"cover_image\"],\n-    Certification: [\"image\"],\n-    Course: [\"image\"],\n-    CourseCurriculumFile: [\"curriculum_file_upload\"],\n-    EventGallery: [\"image\"],\n-    EventOrganizer: [\"image\"],\n-    Facility: [\"image\"],\n-    CollegeFacility: [\"image\"],\n-    Gallery: [\"image\"],\n-    InformationGallery: [\"image\"],\n-    InformationFiles: [\"file\"],\n-    InformationCategory: [\"image\"],\n-    Level: [\"image\"],\n-    SubLevel: [\"image\"],\n-    Popup: [\"image\"],\n-    SocialMedia: [\"icon\"],\n-    CollegeSocialMedia: [\"icon\"],\n-}\n+# # ✅ Model-to-file-fields mapping\n+# MONITORED_MODELS = {\n+#     CustomUser: [\"professional_image\", \"avatar\"],\n+#     College: [\"dp_image\", \"banner_image\", \"brochure\"],\n+#     CollegeGallery: [\"image\"],\n+#     Advertisement: [\"image\"],\n+#     Affiliation: [\"logo_image\", \"cover_image\"],\n+#     Certification: [\"image\"],\n+#     Course: [\"image\"],\n+#     CourseCurriculumFile: [\"curriculum_file_upload\"],\n+#     EventGallery: [\"image\"],\n+#     EventOrganizer: [\"image\"],\n+#     Facility: [\"image\"],\n+#     CollegeFacility: [\"image\"],\n+#     Gallery: [\"image\"],\n+#     InformationGallery: [\"image\"],\n+#     InformationFiles: [\"file\"],\n+#     InformationCategory: [\"image\"],\n+#     Level: [\"image\"],\n+#     SubLevel: [\"image\"],\n+#     Popup: [\"image\"],\n+#     SocialMedia: [\"icon\"],\n+#     CollegeSocialMedia: [\"icon\"],\n+# }\n \n-def process_file_field(instance, field_name):\n-    \"\"\"Handles saving file field data to BucketFile.\"\"\"\n-    file_field = getattr(instance, field_name, None)\n-    if not file_field or not file_field.name:\n-        return\n+# def process_file_field(instance, field_name):\n+#     \"\"\"Handles saving file field data to BucketFile.\"\"\"\n+#     file_field = getattr(instance, field_name, None)\n+#     if not file_field or not file_field.name:\n+#         return\n \n-    if not file_field.storage.exists(file_field.name):\n-        return\n+#     if not file_field.storage.exists(file_field.name):\n+#         return\n \n-    if not BucketFile.objects.filter(file=file_field.name).exists():\n-        BucketFile.objects.create(\n-            file=file_field,\n-            name=os.path.basename(file_field.name),\n-            content_type=guess_type(file_field.name)[0] or \"application/octet-stream\",\n-            object_id=instance.id,\n-        )\n+#     if not BucketFile.objects.filter(file=file_field.name).exists():\n+#         BucketFile.objects.create(\n+#             file=file_field,\n+#             name=os.path.basename(file_field.name),\n+#             content_type=guess_type(file_field.name)[0] or \"application/octet-stream\",\n+#             object_id=instance.id,\n+#         )\n \n-@receiver(post_save)\n-def sync_bucketfile_on_save(sender, instance, **kwargs):\n-    \"\"\"Automatically store files in BucketFile after saving monitored models.\"\"\"\n-    if sender not in MONITORED_MODELS:\n-        return\n+# @receiver(post_save)\n+# def sync_bucketfile_on_save(sender, instance, **kwargs):\n+#     \"\"\"Automatically store files in BucketFile after saving monitored models.\"\"\"\n+#     if sender not in MONITORED_MODELS:\n+#         return\n \n-    for field in MONITORED_MODELS[sender]:\n-        try:\n-            process_file_field(instance, field)\n-        except Exception as e:\n-            print(f\"⚠️ Error processing {sender.__name__}.{field} (ID: {instance.id}): {e}\")\n+#     for field in MONITORED_MODELS[sender]:\n+#         try:\n+#             process_file_field(instance, field)\n+#         except Exception as e:\n+#             print(f\"⚠️ Error processing {sender.__name__}.{field} (ID: {instance.id}): {e}\")\n"
                },
                {
                    "date": 1746697859188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,77 @@\n-# import os\n-# from mimetypes import guess_type\n-# from django.db.models.signals import post_save\n-# from django.dispatch import receiver\n-# from django.core.files.storage import default_storage\n-# from bucketimages.models import BucketFile\n+import os\n+from mimetypes import guess_type\n+from django.db.models.signals import post_save\n+from django.dispatch import receiver\n+from django.core.files.storage import default_storage\n+from bucketimages.models import BucketFile\n \n-# # Import monitored models\n-# from accounts.models import CustomUser\n-# from collegemanagement.models import College, CollegeGallery\n-# from advertisement.models import Advertisement\n-# from affiliation.models import Affiliation\n-# from certification.models import Certification\n-# from coursemanagement.models import Course, CourseCurriculumFile\n-# from event.models import EventGallery, Event, EventOrganizer\n-# from facilities.models import Facility, CollegeFacility\n-# from gallery.models import Gallery\n-# from informationmanagement.models import (\n-#     InformationGallery, Information, InformationFiles, InformationCategory\n-# )\n-# from level.models import Level, SubLevel\n-# from popup.models import Popup\n-# from socialmedia.models import SocialMedia, CollegeSocialMedia\n+# Import monitored models\n+from accounts.models import CustomUser\n+from collegemanagement.models import College, CollegeGallery\n+from advertisement.models import Advertisement\n+from affiliation.models import Affiliation\n+from certification.models import Certification\n+from coursemanagement.models import Course, CourseCurriculumFile\n+from event.models import EventGallery, Event, EventOrganizer\n+from facilities.models import Facility, CollegeFacility\n+from gallery.models import Gallery\n+from informationmanagement.models import (\n+    InformationGallery, Information, InformationFiles, InformationCategory\n+)\n+from level.models import Level, SubLevel\n+from popup.models import Popup\n+from socialmedia.models import SocialMedia, CollegeSocialMedia\n \n-# # ✅ Model-to-file-fields mapping\n-# MONITORED_MODELS = {\n-#     CustomUser: [\"professional_image\", \"avatar\"],\n-#     College: [\"dp_image\", \"banner_image\", \"brochure\"],\n-#     CollegeGallery: [\"image\"],\n-#     Advertisement: [\"image\"],\n-#     Affiliation: [\"logo_image\", \"cover_image\"],\n-#     Certification: [\"image\"],\n-#     Course: [\"image\"],\n-#     CourseCurriculumFile: [\"curriculum_file_upload\"],\n-#     EventGallery: [\"image\"],\n-#     EventOrganizer: [\"image\"],\n-#     Facility: [\"image\"],\n-#     CollegeFacility: [\"image\"],\n-#     Gallery: [\"image\"],\n-#     InformationGallery: [\"image\"],\n-#     InformationFiles: [\"file\"],\n-#     InformationCategory: [\"image\"],\n-#     Level: [\"image\"],\n-#     SubLevel: [\"image\"],\n-#     Popup: [\"image\"],\n-#     SocialMedia: [\"icon\"],\n-#     CollegeSocialMedia: [\"icon\"],\n-# }\n+# ✅ Model-to-file-fields mapping\n+MONITORED_MODELS = {\n+    CustomUser: [\"professional_image\", \"avatar\"],\n+    College: [\"dp_image\", \"banner_image\", \"brochure\"],\n+    CollegeGallery: [\"image\"],\n+    Advertisement: [\"image\"],\n+    Affiliation: [\"logo_image\", \"cover_image\"],\n+    Certification: [\"image\"],\n+    Course: [\"image\"],\n+    CourseCurriculumFile: [\"curriculum_file_upload\"],\n+    EventGallery: [\"image\"],\n+    EventOrganizer: [\"image\"],\n+    Facility: [\"image\"],\n+    CollegeFacility: [\"image\"],\n+    Gallery: [\"image\"],\n+    InformationGallery: [\"image\"],\n+    InformationFiles: [\"file\"],\n+    InformationCategory: [\"image\"],\n+    Level: [\"image\"],\n+    SubLevel: [\"image\"],\n+    Popup: [\"image\"],\n+    SocialMedia: [\"icon\"],\n+    CollegeSocialMedia: [\"icon\"],\n+}\n \n-# def process_file_field(instance, field_name):\n-#     \"\"\"Handles saving file field data to BucketFile.\"\"\"\n-#     file_field = getattr(instance, field_name, None)\n-#     if not file_field or not file_field.name:\n-#         return\n+def process_file_field(instance, field_name):\n+    \"\"\"Handles saving file field data to BucketFile.\"\"\"\n+    file_field = getattr(instance, field_name, None)\n+    if not file_field or not file_field.name:\n+        return\n \n-#     if not file_field.storage.exists(file_field.name):\n-#         return\n+    if not file_field.storage.exists(file_field.name):\n+        return\n \n-#     if not BucketFile.objects.filter(file=file_field.name).exists():\n-#         BucketFile.objects.create(\n-#             file=file_field,\n-#             name=os.path.basename(file_field.name),\n-#             content_type=guess_type(file_field.name)[0] or \"application/octet-stream\",\n-#             object_id=instance.id,\n-#         )\n+    if not BucketFile.objects.filter(file=file_field.name).exists():\n+        BucketFile.objects.create(\n+            file=file_field,\n+            name=os.path.basename(file_field.name),\n+            content_type=guess_type(file_field.name)[0] or \"application/octet-stream\",\n+            object_id=instance.id,\n+        )\n \n-# @receiver(post_save)\n-# def sync_bucketfile_on_save(sender, instance, **kwargs):\n-#     \"\"\"Automatically store files in BucketFile after saving monitored models.\"\"\"\n-#     if sender not in MONITORED_MODELS:\n-#         return\n+@receiver(post_save)\n+def sync_bucketfile_on_save(sender, instance, **kwargs):\n+    \"\"\"Automatically store files in BucketFile after saving monitored models.\"\"\"\n+    if sender not in MONITORED_MODELS:\n+        return\n \n-#     for field in MONITORED_MODELS[sender]:\n-#         try:\n-#             process_file_field(instance, field)\n-#         except Exception as e:\n-#             print(f\"⚠️ Error processing {sender.__name__}.{field} (ID: {instance.id}): {e}\")\n+    for field in MONITORED_MODELS[sender]:\n+        try:\n+            process_file_field(instance, field)\n+        except Exception as e:\n+            print(f\"⚠️ Error processing {sender.__name__}.{field} (ID: {instance.id}): {e}\")\n"
                }
            ],
            "date": 1746696429202,
            "name": "Commit-0",
            "content": "import os\nfrom mimetypes import guess_type\nfrom django.db.models.signals import post_save\nfrom django.dispatch import receiver\nfrom django.core.files.storage import default_storage\nfrom bucketimages.models import BucketFile\n\n# Import monitored models\nfrom accounts.models import CustomUser\nfrom collegemanagement.models import College, CollegeGallery\nfrom advertisement.models import Advertisement\nfrom affiliation.models import Affiliation\nfrom certification.models import Certification\nfrom coursemanagement.models import Course, CourseCurriculumFile\nfrom event.models import EventGallery, Event, EventOrganizer\nfrom facilities.models import Facility, CollegeFacility\nfrom gallery.models import Gallery\nfrom informationmanagement.models import (\n    InformationGallery, Information, InformationFiles, InformationCategory\n)\nfrom level.models import Level, SubLevel\nfrom popup.models import Popup\nfrom socialmedia.models import SocialMedia, CollegeSocialMedia\n\n# ✅ Model-to-file-fields mapping\nMONITORED_MODELS = {\n    CustomUser: [\"professional_image\", \"avatar\"],\n    College: [\"dp_image\", \"banner_image\", \"brochure\"],\n    CollegeGallery: [\"image\"],\n    Advertisement: [\"image\"],\n    Affiliation: [\"logo_image\", \"cover_image\"],\n    Certification: [\"image\"],\n    Course: [\"image\"],\n    CourseCurriculumFile: [\"curriculum_file_upload\"],\n    EventGallery: [\"image\"],\n    Event: [\"featured_image\"],\n    EventOrganizer: [\"image\"],\n    Facility: [\"image\"],\n    CollegeFacility: [\"image\"],\n    Gallery: [\"image\"],\n    InformationGallery: [\"image\"],\n    Information: [\"featured_image\"],\n    InformationFiles: [\"file\"],\n    InformationCategory: [\"image\"],\n    Level: [\"image\"],\n    SubLevel: [\"image\"],\n    Popup: [\"image\"],\n    SocialMedia: [\"icon\"],\n    CollegeSocialMedia: [\"icon\"],\n}\n\ndef process_file_field(instance, field_name):\n    \"\"\"Handles saving file field data to BucketFile.\"\"\"\n    file_field = getattr(instance, field_name, None)\n    if not file_field or not file_field.name:\n        return\n\n    if not file_field.storage.exists(file_field.name):\n        return\n\n    if not BucketFile.objects.filter(file=file_field.name).exists():\n        BucketFile.objects.create(\n            file=file_field,\n            name=os.path.basename(file_field.name),\n            content_type=guess_type(file_field.name)[0] or \"application/octet-stream\",\n            object_id=instance.id,\n        )\n\n@receiver(post_save)\ndef sync_bucketfile_on_save(sender, instance, **kwargs):\n    \"\"\"Automatically store files in BucketFile after saving monitored models.\"\"\"\n    if sender not in MONITORED_MODELS:\n        return\n\n    for field in MONITORED_MODELS[sender]:\n        try:\n            process_file_field(instance, field)\n        except Exception as e:\n            print(f\"⚠️ Error processing {sender.__name__}.{field} (ID: {instance.id}): {e}\")\n"
        }
    ]
}