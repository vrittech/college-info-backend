{
    "sourceFile": "facilities/serializers/collegefacility_serializers.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 57,
            "patches": [
                {
                    "date": 1740650419170,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1740650425966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,13 @@\n from rest_framework import serializers\n from ..models import CollegeFacility\n-from collegemanagement\n+from collegemanagement.models import College\n \n+class CollegeSerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = College\n+        fields = ['id', 'name']\n+\n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n"
                },
                {
                    "date": 1740650431745,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n \n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n-        fields = ['id', 'name']\n+        fields = ['id', 'name','slug']\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeFacility\n"
                },
                {
                    "date": 1740650438557,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,9 @@\n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n         fields = ['id', 'name','slug']\n+        ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = CollegeFacility\n"
                },
                {
                    "date": 1740650445428,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n         fields = ['id', 'name','slug']\n         ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1740650450882,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,8 +14,9 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1740650464709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,8 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740650471306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,8 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n-    college = CollegeSerializers(read_only=True)\n+    college = CollegeSerializers(write_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740650558363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,8 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n-    college = CollegeSerializers(write_only=True)\n+    # college = CollegeSerializers(write_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740650575731,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,7 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n-    # college = CollegeSerializers(write_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740685136754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,7 +20,22 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n+    college = serializers.SerializerMethodField()\n+    facility = serializers.SerializerMethodField()\n+\n\\ No newline at end of file\n     class Meta:\n         model = CollegeFacility\n-        fields = '__all__'\n+        fields = '__all__'\n+\n+    def get_college(self, obj):\n+        return {\n+            \"id\": obj.college.id,\n+            \"name\": obj.college.name\n+        } if obj.college else None\n+\n+    def get_facility(self, obj):\n+        return {\n+            \"id\": obj.facility.id,\n+            \"name\": obj.facility.name\n+        } if obj.facility else None\n\\ No newline at end of file\n"
                },
                {
                    "date": 1740685171604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from ..models import CollegeFacility\n+from ..models import CollegeFacility,\n from collegemanagement.models import College\n \n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n"
                },
                {
                    "date": 1740685302518,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n from rest_framework import serializers\n-from ..models import CollegeFacility,\n+from ..models import CollegeFacility, Facility\n from collegemanagement.models import College\n \n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n@@ -20,22 +20,14 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n-    college = serializers.SerializerMethodField()\n-    facility = serializers.SerializerMethodField()\n-\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-\n-    def get_college(self, obj):\n-        return {\n-            \"id\": obj.college.id,\n-            \"name\": obj.college.name\n-        } if obj.college else None\n-\n-    def get_facility(self, obj):\n-        return {\n-            \"id\": obj.facility.id,\n-            \"name\": obj.facility.name\n-        } if obj.facility else None\n\\ No newline at end of file\n+    \n+    def validate(self, data):\n+        if not data.get(\"college\"):\n+            raise serializers.ValidationError({\"college\": \"This field is required.\"})\n+        if not data.get(\"facility\"):\n+            raise serializers.ValidationError({\"facility\": \"This field is required.\"})\n+        return data\n"
                },
                {
                    "date": 1740685313350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,11 @@\n     class Meta:\n         model = College\n         fields = ['id', 'name','slug']\n         ref_name = 'CollegeFacilitySerializers'\n+        \n \n+\n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n"
                },
                {
                    "date": 1740685319392,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,14 @@\n         model = College\n         fields = ['id', 'name','slug']\n         ref_name = 'CollegeFacilitySerializers'\n         \n+class FacilitySerializers(serializers.ModelSerializer):\n+    class Meta:\n+        model = Facility\n+        fields = ['id', 'name','slug']\n+        ref_name = 'CollegeFacilitySerializers'\n \n-\n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n"
                },
                {
                    "date": 1740685325401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,13 +10,14 @@\n         \n class FacilitySerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Facility\n-        fields = ['id', 'name','slug']\n+        fields = ['id', 'name']\n         ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n+    \n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1740685331116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,16 @@\n         ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    \n+    facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n+    facility = FacilitySerializers(read\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1740685336595,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n         fields = '__all__'\n \n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read\n+    facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1741327885349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,31 @@\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n+from rest_framework import serializers\n+from .models import CollegeFacility, College, Facility\n+\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n+    facility = serializers.ListField(child=serializers.IntegerField())\n+\n     class Meta:\n         model = CollegeFacility\n-        fields = '__all__'\n-    \n+        fields = ['college', 'facility']\n+\n     def validate(self, data):\n         if not data.get(\"college\"):\n             raise serializers.ValidationError({\"college\": \"This field is required.\"})\n-        if not data.get(\"facility\"):\n-            raise serializers.ValidationError({\"facility\": \"This field is required.\"})\n+        if not data.get(\"facility\") or not isinstance(data.get(\"facility\"), list):\n+            raise serializers.ValidationError({\"facility\": \"This field must be a list of facility IDs.\"})\n         return data\n+\n+    def create(self, validated_data):\n+        college = validated_data.get('college')\n+        facility_ids = validated_data.get('facility')\n+        \n+        # Create multiple CollegeFacility instances\n+        college_facilities = [\n+            CollegeFacility(college=college, facility_id=facility_id)\n+            for facility_id in facility_ids\n+        ]\n+        return CollegeFacility.objects.bulk_create(college_facilities)\n"
                },
                {
                    "date": 1741327891350,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,11 +27,8 @@\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n-from rest_framework import serializers\n-from .models import CollegeFacility, College, Facility\n-\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField())\n \n     class Meta:\n"
                },
                {
                    "date": 1741328026027,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,17 +20,10 @@\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n-class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n-    college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True)\n-    class Meta:\n-        model = CollegeFacility\n-        fields = '__all__'\n-\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n-    facility = serializers.ListField(child=serializers.IntegerField())\n+    facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n \n     class Meta:\n         model = CollegeFacility\n         fields = ['college', 'facility']\n@@ -50,5 +43,18 @@\n         college_facilities = [\n             CollegeFacility(college=college, facility_id=facility_id)\n             for facility_id in facility_ids\n         ]\n-        return CollegeFacility.objects.bulk_create(college_facilities)\n+        CollegeFacility.objects.bulk_create(college_facilities)\n+        \n+        # Fetch the created facilities to return\n+        facilities = Facility.objects.filter(id__in=facility_ids)\n+\n+        return {\"college\": college, \"facility\": facilities}\n+\n+    def to_representation(self, instance):\n+        \"\"\"Modify response format\"\"\"\n+        return {\n+            \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n+            \"facility\": FacilitySerializer(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializer(instance.facility, many=True).data\n+        }\n+\n"
                },
                {
                    "date": 1741328037003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,7 +54,7 @@\n     def to_representation(self, instance):\n         \"\"\"Modify response format\"\"\"\n         return {\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n-            \"facility\": FacilitySerializer(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializer(instance.facility, many=True).data\n+            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializer(instance.facility, many=True).data\n         }\n \n"
                },
                {
                    "date": 1741328112519,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,15 @@\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n+class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n+    facility = FacilitySerializers(read_only=True)\n+    class Meta:\n+        model = CollegeFacility\n+        fields = '__all__'\n+\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n \n     class Meta:\n@@ -54,7 +61,7 @@\n     def to_representation(self, instance):\n         \"\"\"Modify response format\"\"\"\n         return {\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n-            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializer(instance.facility, many=True).data\n+            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data\n         }\n \n"
                },
                {
                    "date": 1741328119663,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,13 @@\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n+        fields = '__all__'(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n+    facility = FacilitySerializers(read_only=True)\n+    class Meta:\n+        model = CollegeFacility\n         fields = '__all__'\n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n"
                },
                {
                    "date": 1741328143230,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,20 +20,10 @@\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n-class CollegeFacilityListSerializers(serializers.ModelSerializer):\n-    college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True)\n-    class Meta:\n-        model = CollegeFacility\n-        fields = '__all__'(serializers.ModelSerializer):\n-    college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True)\n-    class Meta:\n-        model = CollegeFacility\n-        fields = '__all__'\n \n+\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1741328148418,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,14 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n+class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n+    facility = FacilitySerializers(read_only=True)\n+    class Meta:\n+        model = CollegeFacility\n+        fields = '__all__'\n \n \n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741328156319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n"
                },
                {
                    "date": 1741328164178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,9 +27,8 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n \n-\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n \n     class Meta:\n"
                },
                {
                    "date": 1741328485846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,12 +56,4 @@\n         # Fetch the created facilities to return\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n-\n-    def to_representation(self, instance):\n-        \"\"\"Modify response format\"\"\"\n-        return {\n-            \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n-            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data\n-        }\n-\n"
                },
                {
                    "date": 1741328611864,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n         ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True)\n+    facility = FacilitySerializers(read_only=True,man)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741328621544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,15 @@\n         ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True,man)\n+    facility = FacilitySerializers(read_only=True,many = True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True)\n+    facility = FacilitySerializers(read_only=True,many = True))\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1741328715336,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,15 +15,15 @@\n         ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True,many = True)\n+    facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True,many = True))\n+    facility = FacilitySerializers(read_only=True,many = True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1741328809844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n         model = CollegeFacility\n         fields = '__all__'\n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True,many = True)\n+    facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n"
                },
                {
                    "date": 1741332725655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,16 +19,17 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n+class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n \n+\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n \n     class Meta:\n@@ -56,4 +57,12 @@\n         # Fetch the created facilities to return\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n+\n+    def to_representation(self, instance):\n+        \"\"\"Modify response format\"\"\"\n+        return {\n+            \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n+            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data\n+        }\n+\n"
                },
                {
                    "date": 1741332962384,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,17 +19,16 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n \n \n-\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n \n     class Meta:\n@@ -59,10 +58,12 @@\n \n         return {\"college\": college, \"facility\": facilities}\n \n     def to_representation(self, instance):\n-        \"\"\"Modify response format\"\"\"\n+        \"\"\"Modify response format to include all required fields\"\"\"\n         return {\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n-            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data\n-        }\n-\n+            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data,\n+            \"created_date\": instance[\"instances\"][0].created_date if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date,\n+            \"created_date_time\": instance[\"instances\"][0].created_date_time if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date_time,\n+            \"updated_date\": instance[\"instances\"][0].updated_date if isinstance(instance, dict) and instance[\"instances\"] else instance.updated_date,\n+        }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333082191,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,8 @@\n         \"\"\"Modify response format to include all required fields\"\"\"\n         return {\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n             \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data,\n-            \"created_date\": instance[\"instances\"][0].created_date if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date,\n+            \"created_date\": instance[\"created_date\"][0].created_date if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date,\n             \"created_date_time\": instance[\"instances\"][0].created_date_time if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date_time,\n             \"updated_date\": instance[\"instances\"][0].updated_date if isinstance(instance, dict) and instance[\"instances\"] else instance.updated_date,\n         }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333088167,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,7 +63,7 @@\n         return {\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n             \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data,\n             \"created_date\": instance[\"created_date\"][0].created_date if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date,\n-            \"created_date_time\": instance[\"instances\"][0].created_date_time if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date_time,\n+            \"created_date_time\": instance[\"created_date_time\"][0].created_date_time if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date_time,\n             \"updated_date\": instance[\"instances\"][0].updated_date if isinstance(instance, dict) and instance[\"instances\"] else instance.updated_date,\n         }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333095253,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -64,6 +64,6 @@\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n             \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data,\n             \"created_date\": instance[\"created_date\"][0].created_date if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date,\n             \"created_date_time\": instance[\"created_date_time\"][0].created_date_time if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date_time,\n-            \"updated_date\": instance[\"instances\"][0].updated_date if isinstance(instance, dict) and instance[\"instances\"] else instance.updated_date,\n+            \"updated_date\": instance[\"updated_date\"][0].updated_date if isinstance(instance, dict) and instance[\"updated_date\"] else instance.updated_date,\n         }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333105310,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,8 +62,8 @@\n         \"\"\"Modify response format to include all required fields\"\"\"\n         return {\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n             \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data,\n-            \"created_date\": instance[\"created_date\"][0].created_date if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date,\n-            \"created_date_time\": instance[\"created_date_time\"][0].created_date_time if isinstance(instance, dict) and instance[\"instances\"] else instance.created_date_time,\n+            \"created_date\": instance[\"created_date\"][0].created_date if isinstance(instance, dict) and instance[\"created_date\"] else instance.created_date,\n+            \"created_date_time\": instance[\"created_date_time\"][0].created_date_time if isinstance(instance, dict) and instance[\"created_date_time\"] else instance.created_date_time,\n             \"updated_date\": instance[\"updated_date\"][0].updated_date if isinstance(instance, dict) and instance[\"updated_date\"] else instance.updated_date,\n         }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333142294,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,20 @@\n         return {\"college\": college, \"facility\": facilities}\n \n     def to_representation(self, instance):\n         \"\"\"Modify response format to include all required fields\"\"\"\n+\n+        # Since `instance` can be a queryset, handle it properly\n+        if isinstance(instance, list) or isinstance(instance, QuerySet):\n+            first_instance = instance[0] if instance else None\n+        else:\n+            first_instance = instance\n+\n         return {\n-            \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n-            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data,\n-            \"created_date\": instance[\"created_date\"][0].created_date if isinstance(instance, dict) and instance[\"created_date\"] else instance.created_date,\n-            \"created_date_time\": instance[\"created_date_time\"][0].created_date_time if isinstance(instance, dict) and instance[\"created_date_time\"] else instance.created_date_time,\n-            \"updated_date\": instance[\"updated_date\"][0].updated_date if isinstance(instance, dict) and instance[\"updated_date\"] else instance.updated_date,\n+            \"college\": first_instance.college.id if first_instance else None,\n+            \"facility\": FacilitySerializers(\n+                [obj.facility for obj in instance], many=True\n+            ).data if instance else [],\n+            \"created_date\": first_instance.created_date if first_instance else None,\n+            \"created_date_time\": first_instance.created_date_time if first_instance else None,\n+            \"updated_date\": first_instance.updated_date if first_instance else None,\n         }\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333178372,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,10 @@\n from rest_framework import serializers\n from ..models import CollegeFacility, Facility\n from collegemanagement.models import College\n+from django.db.models.query import QuerySet\n \n+\n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n         fields = ['id', 'name','slug']\n"
                },
                {
                    "date": 1741333235933,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,22 +59,25 @@\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n \n-    def to_representation(self, instance):\n+ def to_representation(self, instance):\n         \"\"\"Modify response format to include all required fields\"\"\"\n \n-        # Since `instance` can be a queryset, handle it properly\n-        if isinstance(instance, list) or isinstance(instance, QuerySet):\n+        # Handle both a single instance and a queryset properly\n+        if isinstance(instance, (list, QuerySet)):\n             first_instance = instance[0] if instance else None\n         else:\n             first_instance = instance\n \n-        return {\n-            \"college\": first_instance.college.id if first_instance else None,\n-            \"facility\": FacilitySerializers(\n-                [obj.facility for obj in instance], many=True\n-            ).data if instance else [],\n-            \"created_date\": first_instance.created_date if first_instance else None,\n\\ No newline at end of file\n-            \"created_date_time\": first_instance.created_date_time if first_instance else None,\n-            \"updated_date\": first_instance.updated_date if first_instance else None,\n-        }\n+        # Make sure we don't attempt to access attributes of None\n+        if first_instance:\n+            return {\n+                \"college\": first_instance.college.id,\n+                \"facility\": FacilitySerializers(\n+                    [obj.facility for obj in instance], many=True\n+                ).data,\n+                \"created_date\": first_instance.created_date,\n+                \"created_date_time\": first_instance.created_date_time,\n+                \"updated_date\": first_instance.updated_date,\n+            }\n+        return {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333277979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,26 +58,4 @@\n         # Fetch the created facilities to return\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n-\n- def to_representation(self, instance):\n-        \"\"\"Modify response format to include all required fields\"\"\"\n-\n-        # Handle both a single instance and a queryset properly\n-        if isinstance(instance, (list, QuerySet)):\n-            first_instance = instance[0] if instance else None\n-        else:\n-            first_instance = instance\n-\n-        # Make sure we don't attempt to access attributes of None\n-        if first_instance:\n-            return {\n-                \"college\": first_instance.college.id,\n-                \"facility\": FacilitySerializers(\n-                    [obj.facility for obj in instance], many=True\n-                ).data,\n-                \"created_date\": first_instance.created_date,\n-                \"created_date_time\": first_instance.created_date_time,\n-                \"updated_date\": first_instance.updated_date,\n-            }\n-        return {}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333351420,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,8 @@\n from rest_framework import serializers\n from ..models import CollegeFacility, Facility\n from collegemanagement.models import College\n-from django.db.models.query import QuerySet\n \n-\n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n         fields = ['id', 'name','slug']\n@@ -29,8 +27,9 @@\n         model = CollegeFacility\n         fields = '__all__'\n \n \n+\n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n     facility = serializers.ListField(child=serializers.IntegerField(), write_only=True)\n \n     class Meta:\n@@ -58,4 +57,12 @@\n         # Fetch the created facilities to return\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n+\n+    def to_representation(self, instance):\n+        \"\"\"Modify response format\"\"\"\n+        return {\n+            \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n+            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data\n+        }\n+\n"
                },
                {
                    "date": 1741333422966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,14 +19,8 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n-    college = CollegeSerializers(read_only=True)\n-    facility = FacilitySerializers(read_only=True)\n-    class Meta:\n-        model = CollegeFacility\n-        fields = '__all__'\n \n \n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741333428561,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,14 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n+class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+    college = CollegeSerializers(read_only=True)\n+    facility = FacilitySerializers(read_only=True)\n+    class Meta:\n+        model = CollegeFacility\n+        fields = '__all__'\n \n \n \n class CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n"
                },
                {
                    "date": 1741333442449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n@@ -59,10 +59,29 @@\n \n         return {\"college\": college, \"facility\": facilities}\n \n     def to_representation(self, instance):\n-        \"\"\"Modify response format\"\"\"\n-        return {\n-            \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n-            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data\n-        }\n+        \"\"\"Modify response format to include all required fields\"\"\"\n \n+        # Handle both a single instance and a queryset/list of instances\n+        if isinstance(instance, (list, QuerySet)):\n+            response_data = []\n+            for obj in instance:\n+                response_data.append({\n+                    \"college\": obj.college.id,\n+                    \"facility\": FacilitySerializers(obj.facility.all(), many=True).data,  # Adjusted to handle related field\n+                    \"created_date\": obj.created_date,\n+                    \"created_date_time\": obj.created_date_time,\n+                    \"updated_date\": obj.updated_date,\n+                })\n+            return response_data\n+        \n+        # If instance is a single object, return data for that object\n+        else:\n+            return {\n+                \"college\": instance.college.id,\n+                \"facility\": FacilitySerializers(instance.facility.all(), many=True).data,  # Adjusted to handle related field\n+                \"created_date\": instance.created_date,\n+                \"created_date_time\": instance.created_date_time,\n+                \"updated_date\": instance.updated_date,\n+            }\n+\n"
                },
                {
                    "date": 1741333451938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,8 +19,9 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n+        \n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n@@ -58,30 +59,5 @@\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n \n-    def to_representation(self, instance):\n-        \"\"\"Modify response format to include all required fields\"\"\"\n-\n-        # Handle both a single instance and a queryset/list of instances\n-        if isinstance(instance, (list, QuerySet)):\n-            response_data = []\n-            for obj in instance:\n-                response_data.append({\n-                    \"college\": obj.college.id,\n-                    \"facility\": FacilitySerializers(obj.facility.all(), many=True).data,  # Adjusted to handle related field\n-                    \"created_date\": obj.created_date,\n-                    \"created_date_time\": obj.created_date_time,\n-                    \"updated_date\": obj.updated_date,\n-                })\n-            return response_data\n-        \n-        # If instance is a single object, return data for that object\n-        else:\n-            return {\n-                \"college\": instance.college.id,\n-                \"facility\": FacilitySerializers(instance.facility.all(), many=True).data,  # Adjusted to handle related field\n-                \"created_date\": instance.created_date,\n-                \"created_date_time\": instance.created_date_time,\n-                \"updated_date\": instance.updated_date,\n-            }\n-\n+    CollegeFacilityRetrieveSerializers\n\\ No newline at end of file\n"
                },
                {
                    "date": 1741333462483,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,5 +59,30 @@\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n \n-    CollegeFacilityRetrieveSerializers\n\\ No newline at end of file\n+    def to_representation(self, instance):\n+        \"\"\"Modify response format to include all required fields\"\"\"\n+\n+        # Handle both a single instance and a queryset/list of instances\n+        if isinstance(instance, (list, QuerySet)):\n+            response_data = []\n+            for obj in instance:\n+                response_data.append({\n+                    \"college\": obj.college.id,\n+                    \"facility\": FacilitySerializers(obj.facility.all(), many=True).data,  # Adjusted to handle related field\n+                    \"created_date\": obj.created_date,\n+                    \"created_date_time\": obj.created_date_time,\n+                    \"updated_date\": obj.updated_date,\n+                })\n+            return response_data\n+        \n+        # If instance is a single object, return data for that object\n+        else:\n+            return {\n+                \"college\": instance.college.id,\n+                \"facility\": FacilitySerializers(instance.facility.all(), many=True).data,  # Adjusted to handle related field\n+                \"created_date\": instance.created_date,\n+                \"created_date_time\": instance.created_date_time,\n+                \"updated_date\": instance.updated_date,\n+            }\n+\n"
                },
                {
                    "date": 1741333477923,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -46,21 +46,21 @@\n \n     def create(self, validated_data):\n         college = validated_data.get('college')\n         facility_ids = validated_data.get('facility')\n-        \n+\n         # Create multiple CollegeFacility instances\n         college_facilities = [\n             CollegeFacility(college=college, facility_id=facility_id)\n             for facility_id in facility_ids\n         ]\n         CollegeFacility.objects.bulk_create(college_facilities)\n-        \n-        # Fetch the created facilities to return\n-        facilities = Facility.objects.filter(id__in=facility_ids)\n \n-        return {\"college\": college, \"facility\": facilities}\n+        # Fetch all created instances\n+        created_instances = CollegeFacility.objects.filter(college=college, facility_id__in=facility_ids)\n \n+        return created_instances\n+\n     def to_representation(self, instance):\n         \"\"\"Modify response format to include all required fields\"\"\"\n \n         # Handle both a single instance and a queryset/list of instances\n"
                },
                {
                    "date": 1741333487942,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n from rest_framework import serializers\n from ..models import CollegeFacility, Facility\n from collegemanagement.models import College\n \n+\n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n         fields = ['id', 'name','slug']\n"
                },
                {
                    "date": 1741333493040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n from rest_framework import serializers\n from ..models import CollegeFacility, Facility\n from collegemanagement.models import College\n+from django.db.models import QuerySet\n \n-\n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n         fields = ['id', 'name','slug']\n"
                },
                {
                    "date": 1741333569323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,7 @@\n from rest_framework import serializers\n from ..models import CollegeFacility, Facility\n from collegemanagement.models import College\n-from django.db.models import QuerySet\n \n class CollegeSerializers(serializers.ModelSerializer):\n     class Meta:\n         model = College\n"
                },
                {
                    "date": 1741333574717,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,8 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-        \n class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n@@ -46,21 +45,21 @@\n \n     def create(self, validated_data):\n         college = validated_data.get('college')\n         facility_ids = validated_data.get('facility')\n-\n+        \n         # Create multiple CollegeFacility instances\n         college_facilities = [\n             CollegeFacility(college=college, facility_id=facility_id)\n             for facility_id in facility_ids\n         ]\n         CollegeFacility.objects.bulk_create(college_facilities)\n+        \n+        # Fetch the created facilities to return\n+        facilities = Facility.objects.filter(id__in=facility_ids)\n \n-        # Fetch all created instances\n-        created_instances = CollegeFacility.objects.filter(college=college, facility_id__in=facility_ids)\n+        return {\"college\": college, \"facility\": facilities}\n \n-        return created_instances\n-\n     def to_representation(self, instance):\n         \"\"\"Modify response format to include all required fields\"\"\"\n \n         # Handle both a single instance and a queryset/list of instances\n"
                },
                {
                    "date": 1741333580016,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n+class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n@@ -59,29 +59,10 @@\n \n         return {\"college\": college, \"facility\": facilities}\n \n     def to_representation(self, instance):\n-        \"\"\"Modify response format to include all required fields\"\"\"\n+        \"\"\"Modify response format\"\"\"\n+        return {\n+            \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n+            \"facility\": FacilitySerializers(instance[\"facility\"], many=True).data if isinstance(instance, dict) else FacilitySerializers(instance.facility, many=True).data\n+        }\n \n-        # Handle both a single instance and a queryset/list of instances\n-        if isinstance(instance, (list, QuerySet)):\n-            response_data = []\n-            for obj in instance:\n-                response_data.append({\n-                    \"college\": obj.college.id,\n-                    \"facility\": FacilitySerializers(obj.facility.all(), many=True).data,  # Adjusted to handle related field\n-                    \"created_date\": obj.created_date,\n-                    \"created_date_time\": obj.created_date_time,\n-                    \"updated_date\": obj.updated_date,\n-                })\n-            return response_data\n-        \n-        # If instance is a single object, return data for that object\n-        else:\n-            return {\n-                \"college\": instance.college.id,\n-                \"facility\": FacilitySerializers(instance.facility.all(), many=True).data,  # Adjusted to handle related field\n-                \"created_date\": instance.created_date,\n-                \"created_date_time\": instance.created_date_time,\n-                \"updated_date\": instance.updated_date,\n-            }\n-\n"
                },
                {
                    "date": 1741333590811,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n         fields = '__all__'\n-class CollegeFacilityListSerializers(serializers.ModelSerializer):\n+class CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n     facility = FacilitySerializers(read_only=True)\n     class Meta:\n         model = CollegeFacility\n"
                },
                {
                    "date": 1741333704003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,29 @@\n         # Fetch the created facilities to return\n         facilities = Facility.objects.filter(id__in=facility_ids)\n \n         return {\"college\": college, \"facility\": facilities}\n+    \n+    def update(self, instance, validated_data):\n+    college = validated_data.get('college', instance.college)\n+    facility_ids = validated_data.get('facility', [])\n \n+    # First, remove existing facilities related to this college (if necessary)\n+    CollegeFacility.objects.filter(college=college).delete()\n+\n+    # Create or update multiple CollegeFacility instances\n+    college_facilities = [\n+        CollegeFacility(college=college, facility_id=facility_id)\n+        for facility_id in facility_ids\n+    ]\n+    CollegeFacility.objects.bulk_create(college_facilities)\n+\n+    # Fetch the updated facilities to return\n+    facilities = Facility.objects.filter(id__in=facility_ids)\n+\n+    return {\"college\": college, \"facility\": facilities}\n+\n+\n     def to_representation(self, instance):\n         \"\"\"Modify response format\"\"\"\n         return {\n             \"college\": instance[\"college\"].id if isinstance(instance, dict) else instance.college.id,\n"
                },
                {
                    "date": 1745331751278,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n         \n class FacilitySerializers(serializers.ModelSerializer):\n     class Meta:\n         model = Facility\n-        fields = ['id', 'name']\n+        fields = \n         ref_name = 'CollegeFacilitySerializers'\n \n class CollegeFacilityListSerializers(serializers.ModelSerializer):\n     college = CollegeSerializers(read_only=True)\n@@ -59,25 +59,25 @@\n \n         return {\"college\": college, \"facility\": facilities}\n     \n     def update(self, instance, validated_data):\n-    college = validated_data.get('college', instance.college)\n-    facility_ids = validated_data.get('facility', [])\n+        college = validated_data.get('college', instance.college)\n+        facility_ids = validated_data.get('facility', [])\n \n-    # First, remove existing facilities related to this college (if necessary)\n-    CollegeFacility.objects.filter(college=college).delete()\n+        # First, remove existing facilities related to this college (if necessary)\n+        CollegeFacility.objects.filter(college=college).delete()\n \n-    # Create or update multiple CollegeFacility instances\n-    college_facilities = [\n-        CollegeFacility(college=college, facility_id=facility_id)\n-        for facility_id in facility_ids\n-    ]\n-    CollegeFacility.objects.bulk_create(college_facilities)\n+        # Create or update multiple CollegeFacility instances\n+        college_facilities = [\n+            CollegeFacility(college=college, facility_id=facility_id)\n+            for facility_id in facility_ids\n+        ]\n+        CollegeFacility.objects.bulk_create(college_facilities)\n \n-    # Fetch the updated facilities to return\n-    facilities = Facility.objects.filter(id__in=facility_ids)\n+        # Fetch the updated facilities to return\n+        facilities = Facility.objects.filter(id__in=facility_ids)\n \n-    return {\"college\": college, \"facility\": facilities}\n+        return {\"college\": college, \"facility\": facilities}\n \n \n     def to_representation(self, instance):\n         \"\"\"Modify response format\"\"\"\n"
                }
            ],
            "date": 1740650419170,
            "name": "Commit-0",
            "content": "from rest_framework import serializers\nfrom ..models import CollegeFacility\nfrom collegemanagement\n\nclass CollegeFacilityListSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeFacility\n        fields = '__all__'\n\nclass CollegeFacilityRetrieveSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeFacility\n        fields = '__all__'\n\nclass CollegeFacilityWriteSerializers(serializers.ModelSerializer):\n    class Meta:\n        model = CollegeFacility\n        fields = '__all__'"
        }
    ]
}